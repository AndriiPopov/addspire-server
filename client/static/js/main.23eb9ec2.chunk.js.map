{"version":3,"sources":["containers/Auth/Auth.module.css","components/UI/ImageCarousel/imageCarousel.module.css","containers/Account/Account.module.css","components/Layout/Layout.module.css","containers/Auth/Auth.tsx","containers/Auth/AuthTest.tsx","utils/getAvatar.js","components/Layout/Layout.tsx","utils/processRes.js","store/actions/auth.tsx","containers/ConnectWebsocket/methods/getListOfNeededResources.js","containers/ConnectWebsocket/methods/compareVersionsAndRerequest.js","containers/ConnectWebsocket/methods/getResourcesToMonitor.js","containers/ConnectWebsocket/ConnectWebsocket.tsx","store/actions/saveResources.tsx","containers/ConnectWebsocket/methods/requestResource.tsx","store/actions/updateResource.tsx","utils/uploadFile.js","constants/fieldLength.js","constants/fieldRules.js","containers/Shop/AddPerkForm.tsx","websocketActions/posts.tsx","websocketActions/wishlistAndPerks.tsx","websocketActions/friends.tsx","containers/Shop/AddPerk.tsx","components/UI/ImageCarousel/ImageCarousel.tsx","containers/Shop/PerkCard.tsx","components/AddCard/AddCard.tsx","containers/Shop/WishlistAndPerks.tsx","containers/Goals/Goals.tsx","utils/pullData.js","components/Post/AddMessage.tsx","components/UserButton/UserButton.tsx","components/Post/Message.tsx","components/Post/Post.tsx","containers/Goals/Goal.tsx","containers/Progresses/ProgressCard.tsx","components/EditGoalAndProgressForm/connectionsSelect.tsx","components/Rewards/Rewards.tsx","websocketActions/progresses.tsx","components/EditGoalAndProgressForm/EditGoalAndProgressForm.tsx","containers/Progresses/AddProgress.tsx","containers/Progresses/GroupCard.tsx","containers/Progresses/Progresses.tsx","containers/Progress/ActivityTable.tsx","containers/Progress/EditProgress.tsx","containers/Progress/Activity.tsx","components/Post/AddPost.tsx","containers/Progress/Progress.tsx","containers/Shop/Wallet.tsx","containers/Shop/Transactions.tsx","containers/Shop/Shop.tsx","containers/Dashboard/DashboardPosts.tsx","containers/Dashboard/DashboardEvents.tsx","containers/Dashboard/Dashboard.tsx","websocketActions/dashboard.tsx","components/FriendActionButton.tsx","components/FriendCard.tsx","containers/Friends/AddFriends.tsx","containers/Friends/PendingFriends.tsx","containers/Friends/Friends.tsx","containers/Account/Account.tsx","websocketActions/account.tsx","containers/Profile/Profile.tsx","containers/ActivateAccount/ActivateAccount.tsx","containers/Shop/Perk.tsx","containers/Wishlist/WishlistItem.tsx","containers/Wishlist/Wishlist.tsx","containers/Group/Group.tsx","containers/Dashboard/NotificationsTracker.tsx","App.tsx","store/reducer/reducer.tsx","index.tsx"],"names":["module","exports","Container","socialButtons","Background","Dots","Avatar","Layout","Header","Footer","HideHeader","FooterButton","TopHeader","BottomHeader","Main","Button","MenuButtonContiner","QuickButtonContiner","PageTitle","cookies","Cookies","withRouter","connect","state","lastUrl","props","_useState","useState","_useState2","Object","slicedToArray","setState","_useState3","_useState4","cookieConsent","setCookieConsent","useEffect","checkCookieConsent","remeberMeParam","get","basicURL","react_default","a","createElement","Fragment","className","classes","dist","onClick","window","location","concat","es_checkbox","checked","onChange","modal","title","visible","onOk","set","path","maxAge","onCancel","open","destroyOnClose","maskClosable","getAvatar","nickname","version","Content","account","pageTitle","isAuthed","lastNotifications","menuVisible","setMenuVisible","lastScrollY","setLastScrollY","_useState5","_useState6","headerVisible","setHeaderVisible","handleScroll","currentScrollY","scrollY","removeEventListener","addEventListener","toggleMenu","selectedKey","history","pathname","split","undefined","buttonProps","type","size","checkHighligh","url","ghost","openLink","push","isActivating","numberOfUnseenNots","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","not","value","parseInt","notId","lastSeenNot","err","return","_id","es_layout","join","es_button","assign","icon","MenuOutlined_default","main","LogoutOutlined_default","style","margin","cursor","avatar","border","src","image","children","badge","count","HomeFilled_default","RocketFilled_default","ShopFilled_default","friends","filter","item","status","length","TeamOutlined_default","drawer","closable","onClose","placement","es_menu","theme","mode","selectedKeys","_ref","key","overflowedIndicator","Item","AimOutlined_default","HeartFilled_default","UserOutlined_default","includes","tooltip","mouseEnterDelay","processRes","res","data","logout","success","errorCode","message","warning","error","successCode","tryAuth","forceLogin","dispatch","sessionStorage","setItem","token","rememberMe","remove","userId","jwt","decode","axios","defaults","headers","post","put","delete","common","Accept","setIsAuthed","saveLastUrl","pathParts","id","setData","setPageTitle","setFriendSearchResult","getListOfNeededResources","store","requestedResources","user","progress","group","progressData","friendData","postData","groupData","transactionData","neededResources","currentAccount","progresses","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","groups","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","followPosts","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","myPosts","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","transactions","transaction","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","friend","currentProfile","profile","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","currentGroup","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","users","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_iterator11","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_step12","_iterator12","posts","currentProgress","participants","owner","worker","toConsumableArray","experts","supporters","_iteratorNormalCompletion13","_didIteratorError13","_iteratorError13","_step13","_iterator13","_iteratorNormalCompletion14","_didIteratorError14","_iteratorError14","_step14","_iterator14","currentPosts","_iteratorNormalCompletion15","_didIteratorError15","_iteratorError15","_step15","_iterator15","postEl","_iteratorNormalCompletion16","_didIteratorError16","_iteratorError16","_step16","_iterator16","parent","parentType","parentId","reduce","obj","attr","Array","from","Set","notNeededExist","notNeededResources","check1","check2","removeData","compareVersionsAndRerequest","versions","webSocket","checkData","requestResource","check","__v","getResourcesToMonitor","resources","addData","require","create","propertyFilter","name","context","ConnectWebsocket","start","pingTimeout","WebSocket","heartbeat","_this","clearTimeout","setTimeout","close","send","JSON","stringify","messageCode","onopen","event","resourcesToMonitor","initializeRequestResources","onmessage","news","parse","messageText","setFriendsData","friendsData","saveResource","updateResource","code","update","text","onclose","checkInterval","readyState","clearInterval","setInterval","reRequestResourcesInterval","reRequestResources","_i","_arr","ids","nextProps","newRequestedResources","_loop","_arr2","_i2","this","Component","pulledFrom","actions","getState","myAccount","find","notRequestedIds","applyDelta","source","delta","watchFields","result","cloneDeep","del","applyWithDot","keys","shift","applyUpdateToPart","updatedFields","applyDeleteToPart","splice","removedFields","field","indexOf","parState","element","defineProperty","updateData","uploadFile","file","filename","callback","alert","reader","FileReader","onload","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","resizeImageToSpecificSize","width","height","urltoFile","then","getSignedRequest","stop","_x","apply","arguments","readAsArrayBuffer","mimeType","match","fetch","arrayBuffer","buf","File","cb","resizeImageFromSrcToSpecificSize","target","readAsDataURL","img","Image","widthCoef","heightCoef","oc","document","octx","getContext","drawImage","toDataURL","fileName","response","doUploadFile","catch","signedRequest","Content-Type","console","log","fieldLength","nicknameRules","required","whitespace","min","max","pattern","nameRules","accountNameRules","descriptionRules","messageRules","priceRules","AddPerkForm","previewImage","setPreviewImage","connections","perkId","perk","deletePerk","onFinish","images","setImages","uploadImage","connectionsSelect","es_select","placeholder","map","Option","marginRight","_Form$useForm","Form","useForm","form","es_form","autoComplete","initialValues","labelCol","span","wrapperCol","label","valuePropName","getValueFromEvent","e","isArray","fileList","upload","listType","index","objectSpread","uid","onPreview","customRequest","_ref2","PlusOutlined_default","rules","input","TextArea","input_number","offset","htmlType","popconfirm","onConfirm","okText","cancelText","danger","footer","alt","changeLikesMessage","messageId","accountId","postId","buyPerk","buyer","seller","unfriend","friendId","setPerk","wishlist","itemId","goals","goalId","perks","Shop_AddPerkForm","wsActions","setEditPerkOpen","processedValue","ImageCarousel","carousel","dots","backgroundImage","backgroundSize","backgroundPosition","backgroundRepeat","Card","Meta","setEditedPerk","card","bordered","extra","stopPropagation","onlyBuy","dropdown","overlay","EllipsisOutlined","display","alignItems","UI_ImageCarousel_ImageCarousel","price","AddCard","action","shape","icons_PlusOutlined","WishlistAndPerks","editedPerk","editPerkOpen","editPerk","Shop_AddPerk","components_AddCard_AddCard","sub","listKey","Shop_PerkCard","Shop_WishlistAndPerks","pullData","options","imageLoading","setImageLoading","_useState7","content","replyToUser","_useState8","setMessageText","background","replyTo","bottom","left","comment","autoSize","minRows","maxRows","rows","messageValue","replyToMessage","editedMessage","editingMessage","onSend","SendOutlined_default","showUploadList","_ref3","LoadingOutlined_default","PictureFilled_default","cancel","CloseCircleFilled_default","Modal","friendSearchResult","getUserData","userName","userAvatar","noClick","Group","noAva","noName","fontWeight","padding","Message","replies","isStart","replyVisible","setReplyVisible","setReplyToUser","setEditingMessage","showReplies","setShowReplies","commentProps","timeago_react","datetime","date","live","likes","LikeFilled_default","LikeOutlined_default","paddingLeft","author","Math","floor","random","messageType","details","borderRadius","components_UserButton_UserButton","color","fontSize","goal","startMessage","Post_AddMessage","isTop","reply","postOpen","setPostOpen","noStartMessage","Post_Message","divider","textAlign","position","justifyContent","icons_LikeFilled","icons_LikeOutlined","messages","getNumberOfMessages","whiteSpace","description","components_Post_Post","EditGoalAndProgressForm_connectionsSelect","onSelect","previewReward","setPreviewReward","editedReward","setEditedReward","editedRewardIndex","setEditedRewardIndex","readOnly","rewardsGI","rewards","findIndex","rewardKey","setRewards","simple","money","itemName","for","marginLeft","progressId","rewardId","confirm","newRewards","indexIn","reward","rewardToSave","itemImages","_ref4","itemDescription","_ref5","hoverable","cover","descriptions","column","xxl","xl","lg","md","sm","xs","EditGoalAndProgressForm","milestones","setMilestones","withMilestones","setWithMilestones","_useState9","newTabIndex","_useState10","setNewTabIndex","_useState11","rewardsGroups","_useState12","addMilestone","milestone","newPanes","newKey","indexOfMile","mile","setFieldsValue","MilestoneControls","dropdown_dropdown","domEvent","finish","newMilestones","Divider","pane","trigger","preventDefault","milestonesValues","onValuesChange","changedValues","collapse","expandIconPosition","Panel","header","getFieldValue","components_Rewards_Rewards","AddProgress","components_EditGoalAndProgressForm_EditGoalAndProgressForm","inGroup","setStartProgressVisible","GroupCard_Meta","TabPane","Tabs","forceAuth","loadedProgresses","loadedGroups","fromProfile","startProgressVisible","active","editGoal","Progresses_AddProgress","innerTabs","tab","Progresses_ProgressCard","Progresses_GroupCard","empty","imageStyle","tabs","boxShadow","marginTop","ActivityTable","renderCheckbox","milestoneId","disabled","getCheckboxStatus","stage","approvedBy","marginBottom","destroyInactivePanel","stages","expert","typography","Paragraph","ellipsis","expandable","symbol","paid","EditProgress","editProgressOpen","Descriptions","orientation","Progress_ActivityTable","toString","Progress_EditProgress","zIndex","icons_PictureFilled","icons_CloseCircleFilled","Post_AddPost","paddingTop","Progress_Activity","pulledProfile","wallet","amount","tableData","sorted","sort","b","Date","getTime","types","to","accordion","layout","tag","es_tag","toUpperCase","format","cancelTransaction","record","confirmTransaction","Shop_Wallet","Shop_Transactions","statePosts","setPosts","startTime","sortPosts","aN","notifications","bN","newPosts","newUnseenPosts","newOldPosts","oldPosts","oldPostIndex","_loop2","_newOldPosts","resultPosts","slice","neededPosts","isEqual","nots","getRewardText","as","progressName","addedAccounts","ac","droppedAccounts","activeTab","last","Dashboard_DashboardPosts","Dashboard_DashboardEvents","FriendActionButton","invitingFriends","invitedFriends","realFriends","additionalButton","menu","additionalButtons","button","asText","DownOutlined","friendActions","friendActionButton","asIcons","searchResult","addFriendOpen","setAddFriendOpen","search","components_FriendCard","fullFriend","confirmedFriends","PendingFriends","Friends_AddFriends","increaseAvatarV","deleteVisible","setDeleteVisible","deleteField","setDeleteField","flex","maxWidth","overflow","profileId","containers_Progresses_Progresses","oneFriendData","setAccountActivated","page_header","backIcon","nicknameNotUnique","items","Perk_Item","wishlistItem","groupId","sortNotifiacations","filterSameNot","arr","myNotifications","accountNotActive","redirectTo","Logout","react_router","routes","exact","component","Goals","Goal","Progresses","Progress","Profile","Friends","Account","Dashboard","Shop","Perk","Wishlist","WishlistItem","Auth","ActivateAccount","process","containers_ConnectWebsocket_ConnectWebsocket","Dashboard_NotificationsTracker","reducer","createReducer","SET_DATA","REMOVE_DATA","_i3","_arr3","_i4","_arr4","SET_FRIEND_SEARCH_RESULT","SET_FRIENDS_DATA","SET_AVATAR_V","v","INCREASE_AVATAR_V","SET_IS_AUTHED","SET_PAGE_TITLE","SAVE_LAST_URL","SET_ACCOUNT_ACTIVATED","__webpack_require__","d","__webpack_exports__","src_store","baseURL","createStore","composeWithDevTools","applyMiddleware","thunk","app","es","react_router_dom","src_App","root","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.23eb9ec2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Auth_Container__1KNy7\",\"socialButtons\":\"Auth_socialButtons__2wwH9\",\"Background\":\"Auth_Background__39m_a\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Dots\":\"imageCarousel_Dots__2JZGt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Avatar\":\"Account_Avatar__l4shx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Layout\":\"Layout_Layout__3t6t4\",\"Header\":\"Layout_Header__3lh1Y\",\"Footer\":\"Layout_Footer__1Dfqu\",\"HideHeader\":\"Layout_HideHeader__2WRsh\",\"FooterButton\":\"Layout_FooterButton__1lZv2\",\"TopHeader\":\"Layout_TopHeader__3_LuK\",\"BottomHeader\":\"Layout_BottomHeader__3DOBo\",\"Main\":\"Layout_Main__3usmk\",\"Button\":\"Layout_Button__1O5Hm\",\"MenuButtonContiner\":\"Layout_MenuButtonContiner__PpulB\",\"QuickButtonContiner\":\"Layout_QuickButtonContiner__4d4Lg\",\"PageTitle\":\"Layout_PageTitle__368dw\"};","import React, { useState, useEffect } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport Checkbox from 'antd/es/checkbox'\nimport Cookies from 'universal-cookie'\nimport classes from './Auth.module.css'\nimport Svg from '../../components/Svg/Svg'\nimport Modal from 'antd/es/modal'\nimport {\n    FacebookLoginButton,\n    GithubLoginButton,\n    GoogleLoginButton,\n} from 'react-social-login-buttons'\n\nconst cookies = new Cookies()\n\nconst Auth = props => {\n    const [state, setState] = useState(false)\n    const [cookieConsent, setCookieConsent] = useState(false)\n\n    useEffect(() => {\n        checkCookieConsent()\n    })\n\n    let remeberMeParam = '?rememberme=false'\n    if (state) {\n        remeberMeParam = '?rememberme=true'\n    }\n\n    let redirectParam = '&redirect=/login'\n    if (props.lastUrl) {\n        redirectParam = '&redirect=' + props.lastUrl\n    }\n\n    const checkCookieConsent = () => {\n        const cookiesConsent = cookies.get('cookies_consent')\n        if (cookiesConsent) {\n            setCookieConsent(true)\n        }\n    }\n\n    const agreeWithCookies = () => {\n        cookies.set('cookies_consent', 'true', {\n            path: '/',\n            maxAge: 31530000,\n        })\n        checkCookieConsent()\n    }\n    const basicURL =\n        process.env.NODE_ENV !== 'development'\n            ? 'https://getreward.herokuapp.com/api/auth/'\n            : 'http://my.websiter.test:5000/api/auth/'\n    return !cookieConsent ? (\n        <Modal\n            title=\"Cookies consent\"\n            visible={!cookieConsent}\n            onOk={agreeWithCookies}\n            onCancel={() => {\n                window.open('https://websiter.dev', '_self')\n            }}\n            destroyOnClose={true}\n            maskClosable={false}\n        >\n            <p>We use cookies only for login purposes. </p>\n            <p>\n                In order to proceed you need to agree with the use of cookies.\n            </p>\n        </Modal>\n    ) : (\n        <>\n            <div className={classes.Container}>\n                <h1>Welcome to Websiter!</h1>\n                <h2>This is where great progresses live.</h2>\n                <h1>Continue with:</h1>\n                <div className={classes.socialButtons}>\n                    <FacebookLoginButton\n                        onClick={() =>\n                            (window.location =\n                                basicURL + `facebook/start${remeberMeParam}`)\n                        }\n                    />\n                    <GoogleLoginButton\n                        onClick={() =>\n                            (window.location =\n                                basicURL + `google/start${remeberMeParam}`)\n                        }\n                    />\n                    <GithubLoginButton\n                        onClick={() =>\n                            (window.location =\n                                basicURL + `github/start${remeberMeParam}`)\n                        }\n                    />\n                </div>\n                <Checkbox checked={state} onChange={() => setState(!state)}>\n                    Remember me\n                </Checkbox>\n            </div>\n            <div className={classes.Background} />\n        </>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        lastUrl: state.lastUrl,\n    }\n}\n\nexport default withRouter(connect(mapStateToProps)(Auth))\n","import React from 'react'\n\nimport Form from 'antd/es/form'\nimport Input from 'antd/es/input'\nimport Button from 'antd/es/button'\nimport axios from 'axios'\nimport Cookies from 'universal-cookie'\n\nconst cookies = new Cookies()\n\nconst Auth = props => {\n    const layout = {\n        labelCol: { span: 8 },\n        wrapperCol: { span: 16 },\n    }\n    const tailLayout = {\n        wrapperCol: { offset: 8, span: 16 },\n    }\n    const onFinish = value => {\n        axios\n            .post('/api/authtest/' + value.id)\n            .then(res => {\n                cookies.set('auth_token', res.data.cookie)\n                props.onTryAutoSignup()\n            })\n            .catch(err => {})\n    }\n    return (\n        <Form\n            name=\"dynamic_form_nest_item\"\n            onFinish={onFinish}\n            autoComplete=\"off\"\n            {...layout}\n        >\n            <Form.Item\n                label=\"Id\"\n                name=\"id\"\n                rules={[\n                    { required: true, message: 'Please input the goal name.' },\n                ]}\n            >\n                <Input />\n            </Form.Item>\n            <Form.Item {...tailLayout}>\n                <Button type=\"primary\" htmlType=\"submit\" size=\"large\">\n                    Save\n                </Button>\n            </Form.Item>\n        </Form>\n    )\n}\n\nexport default Auth\n","export default (nickname, version) => {\n    if (!nickname) return ''\n    else {\n        return (\n            'https://websiter.s3.us-east-2.amazonaws.com/' +\n            nickname +\n            '/avatar?v=' +\n            (version || 0)\n        )\n    }\n}\n","import React, { useState, useEffect } from 'react'\nimport { withRouter } from 'react-router-dom'\n\nimport { connect } from 'react-redux'\nimport Layout from 'antd/es/layout'\nimport Tooltip from 'antd/es/tooltip'\nimport Menu from 'antd/es/menu'\nimport Avatar from 'antd/es/avatar'\nimport Drawer from 'antd/es/drawer'\nimport Button from 'antd/es/button'\nimport Badge from 'antd/es/badge'\nimport * as classes from './Layout.module.css'\nimport AimOutlined from '@ant-design/icons/AimOutlined'\nimport LogoutOutlined from '@ant-design/icons/LogoutOutlined'\nimport UserOutlined from '@ant-design/icons/UserOutlined'\nimport HeartFilled from '@ant-design/icons/HeartFilled'\nimport RocketFilled from '@ant-design/icons/RocketFilled'\nimport TeamOutlined from '@ant-design/icons/TeamOutlined'\nimport MenuOutlined from '@ant-design/icons/MenuOutlined'\nimport ShopFilled from '@ant-design/icons/ShopFilled'\nimport HomeFilled from '@ant-design/icons/HomeFilled'\nimport PageHeader from 'antd/es/page-header'\nimport getAvatar from '../../utils/getAvatar'\n\nconst { Header, Content, Footer } = Layout\n\nconst AccountLayout = props => {\n    const { account } = props\n    const [menuVisible, setMenuVisible] = useState()\n    const [lastScrollY, setLastScrollY] = useState(0)\n    const [headerVisible, setHeaderVisible] = useState(true)\n\n    useEffect(() => {\n        const handleScroll = () => {\n            const currentScrollY = window.scrollY\n\n            if (currentScrollY > lastScrollY) {\n                setHeaderVisible(false)\n            } else {\n                setHeaderVisible(true)\n            }\n            setLastScrollY(currentScrollY)\n        }\n        window.removeEventListener('scroll', handleScroll)\n        window.addEventListener('scroll', handleScroll)\n        return () => window.removeEventListener('scroll', handleScroll)\n    }, [lastScrollY])\n    const toggleMenu = () => {\n        setMenuVisible(!menuVisible)\n    }\n    const selectedKey =\n        props.history.location.pathname.split('/')[1] || undefined\n\n    const buttonProps = {\n        type: 'link',\n        // ghost: true,\n        size: 'large',\n\n        className: classes.Button,\n    }\n    const checkHighligh = url =>\n        selectedKey === url\n            ? {\n                  ghost: false,\n                  type: 'link',\n              }\n            : { type: 'text' }\n    const openLink = url => props.history.push('/' + url)\n\n    const isActivating = props.history.location.pathname === '/activate-account'\n\n    let numberOfUnseenNots = 0\n\n    for (let not of props.lastNotifications) {\n        if (parseInt(not.notId) > parseInt(account.lastSeenNot || 0))\n            numberOfUnseenNots++\n    }\n\n    return props.isAuthed && account._id ? (\n        <>\n            <Layout className={classes.Layout}>\n                <Header\n                    className={\n                        headerVisible\n                            ? classes.Header\n                            : [classes.Header, classes.HideHeader].join(' ')\n                    }\n                >\n                    <div className={classes.TopHeader}>\n                        <div className={classes.MenuButtonContiner}>\n                            {!isActivating && (\n                                <Button\n                                    {...buttonProps}\n                                    icon={<MenuOutlined />}\n                                    onClick={toggleMenu}\n                                />\n                            )}\n                            <div className={classes.PageTitle}>\n                                {isActivating\n                                    ? 'Activate your account'\n                                    : props.pageTitle.main}\n                            </div>\n                        </div>\n                        <div className={classes.QuickButtonContiner}>\n                            {!isActivating ? (\n                                <span\n                                    onClick={() => openLink('account')}\n                                    style={{\n                                        margin: '0px 10px',\n                                        cursor: 'pointer',\n                                    }}\n                                >\n                                    <Avatar\n                                        style={{ border: '1px solid white' }}\n                                        src={getAvatar(\n                                            account._id,\n                                            account.image\n                                        )}\n                                    />\n                                </span>\n                            ) : (\n                                <Button\n                                    {...buttonProps}\n                                    {...checkHighligh('friends')}\n                                    icon={<LogoutOutlined />}\n                                    onClick={() =>\n                                        props.history.push('/logout')\n                                    }\n                                >\n                                    Logout\n                                </Button>\n                            )}\n                        </div>\n                    </div>\n                </Header>\n                <Content className={classes.Main}>\n                    <div>{props.children}</div>\n                </Content>\n                {!isActivating && (\n                    <Footer className={classes.Footer}>\n                        <Button\n                            {...buttonProps}\n                            {...checkHighligh('dashboard')}\n                            onClick={() => openLink('dashboard')}\n                        >\n                            <Badge count={numberOfUnseenNots}>\n                                <HomeFilled />{' '}\n                                <div className={classes.FooterButton}>\n                                    Dashboard\n                                </div>\n                            </Badge>\n                        </Button>\n\n                        <Button\n                            {...buttonProps}\n                            {...checkHighligh('progresses')}\n                            onClick={() => openLink('progresses')}\n                        >\n                            <Badge count={0}>\n                                <RocketFilled />\n                                <div className={classes.FooterButton}>\n                                    Progresses\n                                </div>\n                            </Badge>\n                        </Button>\n\n                        <Button\n                            {...buttonProps}\n                            {...checkHighligh('shop')}\n                            onClick={() => openLink('shop')}\n                        >\n                            <Badge count={0}>\n                                <ShopFilled />\n                                <div className={classes.FooterButton}>Shop</div>\n                            </Badge>\n                        </Button>\n\n                        <Button\n                            {...buttonProps}\n                            {...checkHighligh('friends')}\n                            onClick={() => openLink('friends')}\n                        >\n                            <Badge\n                                count={\n                                    account.friends.filter(\n                                        item => item.status === 'inviting'\n                                    ).length\n                                }\n                            >\n                                <TeamOutlined />\n                                <div className={classes.FooterButton}>\n                                    Friends\n                                </div>\n                            </Badge>\n                        </Button>\n                    </Footer>\n                )}\n                {!isActivating && (\n                    <Drawer\n                        title=\"Menu\"\n                        closable={true}\n                        onClose={toggleMenu}\n                        visible={menuVisible}\n                        placement=\"left\"\n                    >\n                        <Menu\n                            theme=\"light\"\n                            mode=\"vertical\"\n                            selectedKeys={[selectedKey]}\n                            onClick={({ key }) => {\n                                props.history.push('/' + key)\n                                toggleMenu()\n                            }}\n                            overflowedIndicator={<MenuOutlined />}\n                        >\n                            <Menu.Item key=\"dashboard\" icon={<HomeFilled />}>\n                                Dashboard\n                            </Menu.Item>\n                            <Menu.Item key=\"progresses\" icon={<RocketFilled />}>\n                                Progresses\n                            </Menu.Item>\n                            <Menu.Item key=\"shop\" icon={<ShopFilled />}>\n                                Shop\n                            </Menu.Item>\n                            <Menu.Item key=\"friends\" icon={<TeamOutlined />}>\n                                Friends\n                            </Menu.Item>\n                            <Menu.Item key=\"goals\" icon={<AimOutlined />}>\n                                Goals\n                            </Menu.Item>\n                            <Menu.Item key=\"wishlist\" icon={<HeartFilled />}>\n                                Wishlist\n                            </Menu.Item>\n                            <Menu.Item key=\"account\" icon={<UserOutlined />}>\n                                Account\n                            </Menu.Item>\n                            <Menu.Item key=\"logout\" icon={<LogoutOutlined />}>\n                                Logout\n                            </Menu.Item>\n                        </Menu>\n                    </Drawer>\n                )}\n            </Layout>\n        </>\n    ) : ['/login', 'logout'].includes(props.history.location.pathname) ? (\n        props.children\n    ) : (\n        <>\n            <Layout className={classes.Layout}>\n                <Header className={classes.Header}>\n                    <div className={classes.TopHeader}>\n                        <div className={classes.MenuButtonContiner} />\n                        <div className={classes.QuickButtonContiner}>\n                            <Tooltip\n                                title=\"Sign in or Sign up\"\n                                placement=\"bottomRight\"\n                                mouseEnterDelay={0.3}\n                            >\n                                <Button\n                                    {...buttonProps}\n                                    {...checkHighligh('friends')}\n                                    icon={<LogoutOutlined />}\n                                    onClick={() => props.history.push('/login')}\n                                >\n                                    Sign in or Sign up\n                                </Button>\n                            </Tooltip>\n                        </div>\n                    </div>\n                    {/* <div className={classes.BottomHeader}>\n                        <PageHeader\n                            className=\"site-page-header\"\n                            onBack={() => props.history.goBack()}\n                            title={props.pageTitle && props.pageTitle.main}\n                            subTitle={\n                                (props.pageTitle && props.pageTitle.sub) || ''\n                            }\n                        />\n                    </div> */}\n                </Header>\n                <Content className={classes.Main}>\n                    <div>{props.children}</div>\n                </Content>\n            </Layout>\n        </>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n        pageTitle: state.pageTitle,\n        isAuthed: state.isAuthed,\n        lastNotifications: state.lastNotifications,\n    }\n}\n\nexport default withRouter(connect(mapStateToProps)(AccountLayout))\n","import message from 'antd/es/message'\n\nexport default (res, props) => {\n    if (res.data.logout) props.history.push('/logout')\n    if (res.data.success === false) {\n        if (res.data.errorCode) {\n            switch (res.data.errorCode) {\n                case 'no account':\n                    message.warning('Account is not found. Please login.')\n                    break\n                case 'bad data':\n                    message.error(\n                        'Error. Please try one more time with correct data.'\n                    )\n                    break\n                case 'progress exist':\n                    message.warning('This progress already exists.')\n                    break\n                default:\n                    message.warning(\n                        'Something wrong has happened... Try again!'\n                    )\n                    break\n            }\n        } else {\n            message.error('Something failed')\n        }\n    } else {\n        if (res.data.successCode) {\n            switch (res.data.successCode) {\n                case 'avatar saved':\n                    message.success('The avatar image has been updated.')\n                    break\n                case 'success':\n                    message.success('Success!')\n                    break\n                case 'item saved':\n                    message.success('Item is saved')\n                    break\n                case 'prgress created':\n                    message.success('Progress has started!')\n                    break\n                default:\n                    message.success('Success!')\n                    break\n            }\n        }\n    }\n    if (res.data.status && res.data.status === 'no account')\n        props.history.push('/activate-account')\n}\n","import axios from 'axios'\n\nimport Cookies from 'universal-cookie'\nimport jwt from 'jsonwebtoken'\nimport processRes from '../../utils/processRes'\n\nconst cookies = new Cookies()\n\nexport const tryAuth = (props, forceLogin) => (dispatch: Object) => {\n    sessionStorage.setItem('systemRefresh', '0')\n    const token = cookies.get('auth_token')\n    const rememberMe = cookies.get('rememberme')\n    if (rememberMe) {\n        cookies.remove('rememberme', {\n            path: '/',\n        })\n        if (rememberMe === 'false') {\n            cookies.remove('auth_token', {\n                path: '/',\n            })\n        }\n    }\n    const userId = jwt.decode(token)\n    axios.defaults.headers.post['Content-Type'] = 'application/json'\n    axios.defaults.headers.put['Content-Type'] = 'application/json'\n    axios.defaults.headers.delete['Content-Type'] = 'application/json'\n    axios.defaults.headers.common.Accept = 'application/json'\n    if (token && userId) {\n        axios.defaults.headers.common['x-auth-token'] = token\n        axios.defaults.headers.post['x-auth-token'] = token\n        axios.defaults.headers.get['x-auth-token'] = token\n        axios.defaults.headers.delete['x-auth-token'] = token\n        axios.defaults.headers.put['x-auth-token'] = token\n        dispatch(setIsAuthed(userId._id))\n    } else {\n        dispatch(setIsAuthed(false))\n        dispatch(saveLastUrl(props.history.location.pathname))\n        const pathParts = props.history.location.pathname.split('/')\n        if (\n            pathParts.length === 2 &&\n            pathParts[1] !== 'login' &&\n            pathParts[1] !== 'logintest'\n        )\n            props.history.push('/logout')\n\n        if (forceLogin) props.history.push('/logout')\n    }\n}\n\nconst saveLastUrl = url => ({\n    type: 'SAVE_LAST_URL',\n    url,\n})\n\nconst setIsAuthed = id => ({\n    type: 'SET_IS_AUTHED',\n    id,\n})\n\nexport const logout = () => dispatch => {\n    cookies.remove('rememberme', {\n        path: '/',\n    })\n    cookies.remove('auth_token', {\n        path: '/',\n    })\n    delete axios.defaults.headers.common['x-auth-token']\n    delete axios.defaults.headers.post['x-auth-token']\n    delete axios.defaults.headers.get['x-auth-token']\n    delete axios.defaults.headers.delete['x-auth-token']\n    delete axios.defaults.headers.put['x-auth-token']\n    dispatch(setIsAuthed(false))\n}\n\nexport const setData = data => ({\n    type: 'SET_DATA',\n    data,\n})\n\nexport const removeData = data => ({\n    type: 'REMOVE_DATA',\n    data,\n})\n\nexport const setFriendsData = data => ({\n    type: 'SET_FRIENDS_DATA',\n    data,\n})\n\nexport const setAvatarV = v => ({\n    type: 'SET_AVATAR_V',\n    v,\n})\n\nexport const increaseAvatarV = () => ({\n    type: 'INCREASE_AVATAR_V',\n})\n\nexport const setPageTitle = title => ({\n    type: 'SET_PAGE_TITLE',\n    title,\n})\n\nexport const buyPerk = (account, perk, owner, props) => dispatch => {\n    const currency = account.wallet.find(item => item.user === owner._id)\n    if (currency && currency.amount >= perk.price) {\n        axios\n            .post('/api/shop/buy', {\n                perkId: perk.perkId,\n                ownerId: owner._id,\n            })\n            .then(res => {\n                processRes(res)\n                if (res.data.success) {\n                    dispatch(setData(res.data, props.history.location.pathname))\n                }\n            })\n            .catch(err => {})\n    } else {\n        alert(\n            'You cannot buy this item as you do not have enough money from this user.'\n        )\n    }\n}\n\nexport const confirmTransaction = (transactionId, props) => dispatch => {\n    axios\n        .post('/api/shop/confirm', {\n            transactionId,\n        })\n        .then(res => {\n            processRes(res)\n            if (res.data.success) {\n                dispatch(setData(res.data, props.history.location.pathname))\n            }\n        })\n        .catch(err => {})\n}\n\nexport const cancelTransaction = (transactionId, props) => dispatch => {\n    axios\n        .post('/api/shop/cancel', {\n            transactionId,\n        })\n        .then(res => {\n            processRes(res)\n            if (res.data.success) {\n                dispatch(setData(res.data, props.history.location.pathname))\n            }\n        })\n        .catch(err => {})\n}\n\nexport const setFriendSearchResult = data => ({\n    type: 'SET_FRIEND_SEARCH_RESULT',\n    data,\n})\n\nexport const setAccountActivated = value => ({\n    type: 'SET_ACCOUNT_ACTIVATED',\n    value,\n})\n","export default props => {\n    const createEmptyObj = () => ({\n        user: [],\n        account: [],\n        progress: [],\n        post: [],\n        group: [],\n        progressData: [],\n        friendData: [],\n        postData: [],\n        groupData: [],\n        transactionData: [],\n    })\n    const { store } = props\n    const requestedResources = createEmptyObj()\n    const neededResources = createEmptyObj()\n    if (store.isAuthed) {\n        if (!store.user) {\n            requestedResources.user.push(store.isAuthed)\n        } else {\n            neededResources.user.push(store.user._id)\n            if (store.currentAccount) {\n                if (store.account._id !== store.currentAccount) {\n                    requestedResources.account.push(store.currentAccount)\n                } else {\n                    neededResources.account.push(store.account._id)\n                    for (let progress of store.account.progresses) {\n                        if (!store.progressData[progress]) {\n                            requestedResources.progressData.push(progress)\n                        }\n                        neededResources.progressData.push(progress)\n                    }\n                    for (let group of store.account.groups) {\n                        if (!store.groupData[group]) {\n                            requestedResources.groupData.push(group)\n                        }\n                        neededResources.groupData.push(group)\n                    }\n                    for (let post of store.account.followPosts) {\n                        if (!store.postData[post]) {\n                            requestedResources.postData.push(post)\n                        }\n                        neededResources.postData.push(post)\n                    }\n                    for (let post of store.account.myPosts) {\n                        if (!store.postData[post]) {\n                            requestedResources.postData.push(post)\n                        }\n                        neededResources.postData.push(post)\n                    }\n                    for (let transaction of store.account.transactions) {\n                        if (!store.transactionData[transaction]) {\n                            requestedResources.transactionData.push(transaction)\n                        }\n                        neededResources.transactionData.push(transaction)\n                    }\n                    for (let friend of store.account.friends) {\n                        if (!store.friendData[friend.friend]) {\n                            requestedResources.friendData.push(friend.friend)\n                        }\n                        neededResources.friendData.push(friend.friend)\n                    }\n                }\n            }\n            if (store.currentProfile) {\n                if (store.profile._id !== store.currentProfile) {\n                    requestedResources.account.push(store.currentProfile)\n                } else {\n                    neededResources.account.push(store.profile._id)\n                    for (let progress of store.profile.progresses) {\n                        if (!store.progressData[progress]) {\n                            requestedResources.progressData.push(progress)\n                        }\n                        neededResources.progressData.push(progress)\n                    }\n                    for (let group of store.profile.groups) {\n                        if (!store.groupData[group]) {\n                            requestedResources.groupData.push(group)\n                        }\n                        neededResources.groupData.push(group)\n                    }\n                    for (let friend of store.profile.friends) {\n                        if (!store.friendData[friend.friend]) {\n                            requestedResources.friendData.push(friend.friend)\n                        }\n                        neededResources.friendData.push(friend.friend)\n                    }\n                }\n            }\n            if (store.currentGroup) {\n                if (store.group._id !== store.currentGroup) {\n                    requestedResources.group.push(store.currentGroup)\n                } else {\n                    neededResources.group.push(store.group._id)\n                    for (let user of store.group.users) {\n                        if (!store.friendData[user]) {\n                            requestedResources.friendData.push(user)\n                        }\n                        neededResources.friendData.push(user)\n                    }\n                    for (let progress of store.group.progresses) {\n                        if (!store.progressData[progress]) {\n                            requestedResources.progressData.push(progress)\n                        }\n                        neededResources.progressData.push(progress)\n                    }\n                    for (let post of store.group.posts) {\n                        if (!store.postData[post]) {\n                            requestedResources.postData.push(post)\n                        }\n                        neededResources.postData.push(post)\n                    }\n                }\n            }\n            if (store.currentProgress) {\n                if (store.progress._id !== store.currentProgress) {\n                    requestedResources.progress.push(store.currentProgress)\n                } else {\n                    neededResources.progress.push(store.progress._id)\n                    let participants = []\n                    if (store.progress.owner)\n                        participants.push(store.progress.owner)\n                    if (store.progress.worker)\n                        participants.push(store.progress.worker)\n                    participants = [\n                        ...participants,\n                        ...(store.progress.experts || []),\n                        ...(store.progress.supporters || []),\n                    ]\n                    for (let friend of participants) {\n                        if (!store.friendData[friend]) {\n                            requestedResources.friendData.push(friend)\n                        }\n                        neededResources.friendData.push(friend)\n                    }\n                    for (let post of store.progress.posts) {\n                        if (!store.postData[post]) {\n                            requestedResources.postData.push(post)\n                        }\n                        neededResources.postData.push(post)\n                    }\n                }\n            }\n            if (store.currentPosts) {\n                for (let post of store.currentPosts) {\n                    const postEl = store.post[post]\n                    if (!postEl) {\n                        requestedResources.post.push(post)\n                    } else {\n                        neededResources.post.push(post)\n                        for (let friend of postEl.users) {\n                            if (!store.friendData[friend]) {\n                                requestedResources.friendData.push(friend)\n                            }\n                            neededResources.friendData.push(friend)\n                        }\n                        if (post.parent) {\n                            if (post.parent.parentType === 'progress')\n                                neededResources.progressData.push(\n                                    post.parent.parentId\n                                )\n                            else if (post.parent.parentType === 'group')\n                                neededResources.groupData.push(\n                                    post.parent.parentId\n                                )\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    const reduce = obj => {\n        for (let attr in obj) {\n            if (obj[attr]) {\n                obj[attr] = Array.from(new Set(obj[attr]))\n            }\n        }\n    }\n\n    reduce(neededResources)\n    const notNeededResources = createEmptyObj()\n    notNeededResources.profile = []\n    let notNeededExist\n    const check1 = (key, mode) => {\n        if (\n            store[mode]._id &&\n            !neededResources[key].includes(store[mode]._id)\n        ) {\n            notNeededResources[mode].push(store[mode]._id)\n            notNeededExist = true\n        }\n    }\n    const check2 = key => {\n        for (let attr in store[key]) {\n            if (!neededResources[key].includes(attr)) {\n                notNeededResources[key].push(attr)\n                notNeededExist = true\n            }\n        }\n    }\n    check1('account', 'account')\n    check1('account', 'profile')\n    check1('group', 'group')\n    check1('progress', 'progress')\n    check2('post')\n    check2('friendData')\n    check2('progressData')\n    check2('transactionData')\n    check2('postData')\n    check2('groupData')\n\n    if (notNeededExist) {\n        props.removeData(notNeededResources)\n    }\n\n    reduce(requestedResources)\n\n    return requestedResources\n}\n","import requestResource from './requestResource'\n\nexport default (versions, state, store, webSocket) => {\n    const notNeededResources = {\n        user: [],\n        account: [],\n        progress: [],\n        post: [],\n        group: [],\n        progressData: [],\n        friendData: [],\n        postData: [],\n        groupData: [],\n        transactionData: [],\n    }\n\n    const checkData = key => {\n        for (let attr in versions[key]) {\n            if (typeof versions[key][attr] !== 'undefined') {\n                if (store[key][attr]) {\n                    if (store[key][attr] !== versions[key][attr]) {\n                        requestResource(key, [attr], state)\n                    }\n                } else notNeededResources[key].push(attr)\n            }\n        }\n    }\n\n    const check = key => {\n        for (let attr in versions[key]) {\n            if (typeof versions[key][attr] !== 'undefined') {\n                if (store[key]._id === attr) {\n                    if (store[key].__v !== versions[key][attr]) {\n                        requestResource(key, [attr], state)\n                    }\n                    if (!store[key]._id) notNeededResources[key].push(attr)\n                } else notNeededResources[key].push(attr)\n            }\n        }\n    }\n\n    for (let attr in versions.user) {\n        if (typeof versions.user[attr] !== 'undefined') {\n            if (store.user._id === attr) {\n                if (store.user.__v !== versions.user[attr]) {\n                    requestResource('user', [attr], state)\n                }\n            } else notNeededResources.user.push(attr)\n        }\n    }\n\n    for (let attr in versions.account) {\n        if (typeof versions.account[attr] !== 'undefined') {\n            if (store.account._id === attr) {\n                if (store.account.__v !== versions.account[attr]) {\n                    requestResource('account', [attr], state)\n                }\n            }\n            if (store.profile._id === attr) {\n                if (store.profile.__v !== versions.account[attr]) {\n                    requestResource('account', [attr], state)\n                }\n                if (!store.account._id) notNeededResources.account.push(attr)\n            }\n        }\n        if (store.account._id !== attr && store.profile._id !== attr)\n            notNeededResources.account.push(attr)\n    }\n\n    check('progress')\n    check('group')\n\n    checkData('post')\n    checkData('friendData')\n    checkData('progressData')\n    checkData('postData')\n    checkData('groupData')\n    checkData('transactionData')\n\n    if (\n        notNeededResources.user.length > 0 ||\n        notNeededResources.account.length > 0 ||\n        notNeededResources.progress.length > 0 ||\n        notNeededResources.post.length > 0 ||\n        notNeededResources.group.length > 0 ||\n        notNeededResources.friendData.length > 0 ||\n        notNeededResources.progressData.length > 0 ||\n        notNeededResources.postData.length > 0 ||\n        notNeededResources.groupData.length > 0 ||\n        notNeededResources.transactionData.length > 0\n    ) {\n        return notNeededResources\n    }\n}\n","export default props => {\n    const { store } = props\n    const resources = {\n        user: {},\n        account: {},\n        progress: {},\n        post: {},\n        group: {},\n        transactionData: {},\n        friendData: {},\n        progressData: {},\n        groupData: {},\n        postData: {},\n    }\n\n    if (store.user && store.user._id) {\n        resources.user[store.user._id] = store.user.__v\n    }\n\n    if (store.account._id) {\n        resources.account[store.account._id] = store.account.__v\n    }\n    if (store.profile._id) {\n        resources.account[store.profile._id] = store.profile.__v\n    }\n    if (store.progress._id) {\n        resources.progress[store.progress._id] = store.progress.__v\n    }\n    if (store.group._id) {\n        resources.group[store.group._id] = store.group.__v\n    }\n\n    const addData = key => {\n        for (let item in store[key]) {\n            if (typeof store[key][item] !== 'undefined') {\n                if (store[key][item]._id) {\n                    resources[key][store[key][item]._id] = store[key][item].__v\n                }\n            }\n        }\n    }\n\n    addData('post')\n    addData('friendData')\n    addData('postData')\n    addData('groupData')\n    addData('progressData')\n    addData('TransactionData')\n\n    return resources\n}\n","import React, { Component } from 'react'\nimport axios from 'axios'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport message from 'antd/es/message'\nimport * as wsActions from '../../websocketActions'\nimport cloneDeep from 'lodash.clonedeep'\nimport getListOfNeededResources from './methods/getListOfNeededResources'\nimport compareVersionsAndRerequest from './methods/compareVersionsAndRerequest'\nimport getResourcesToMonitor from './methods/getResourcesToMonitor'\nconst diffpatcher = require('jsondiffpatch/dist/jsondiffpatch.umd.js').create({\n    propertyFilter: (name, context) => name !== 'patch',\n})\n\nexport let webSocket = false\n\nclass ConnectWebsocket extends Component {\n    state = {\n        user: [],\n        account: [],\n        progress: [],\n        post: [],\n        group: [],\n        friendData: [],\n        progressData: [],\n        postData: [],\n        groupData: [],\n        transactionData: [],\n    }\n    start = () => {\n        let url\n        if (process.env.NODE_ENV === 'development') {\n            url = 'ws://my.websiter.test:5000'\n        } else {\n            url = 'wss://getreward.herokuapp.com'\n        }\n        let pingTimeout\n        webSocket = new WebSocket(url)\n\n        const heartbeat = versions => {\n            let notNeededResources\n            if (versions) {\n                notNeededResources = compareVersionsAndRerequest(\n                    versions,\n                    this.state,\n                    this.props.store,\n                    webSocket\n                )\n            }\n            clearTimeout(pingTimeout)\n\n            pingTimeout = setTimeout(() => {\n                webSocket.close()\n            }, 30000 + 1000)\n\n            webSocket.send(\n                JSON.stringify({\n                    messageCode: 'heartbeat',\n                    notNeededResources,\n                    //get back list of online friends\n                })\n            )\n        }\n\n        webSocket.onopen = event => {\n            const resourcesToMonitor = getResourcesToMonitor(this.props)\n            webSocket.send(\n                JSON.stringify({\n                    messageCode: 'auth',\n                    user: axios.defaults.headers.common['x-auth-token'],\n                    resourcesToMonitor,\n                    // progressId: this.props.progress._id,\n                })\n            )\n            this.initializeRequestResources(this.props)\n            heartbeat()\n        }\n\n        webSocket.onmessage = event => {\n            const news = JSON.parse(event.data)\n\n            switch (news.messageCode) {\n                case 'heartbeat':\n                    heartbeat(news.versions)\n                    break\n                case 'logout':\n                    this.props.logout()\n                    this.props.history.push('/logout')\n                    break\n\n                case 'successMessage':\n                    message.success(news.messageText)\n                    break\n                case 'errorMessage':\n                    message.error(news.messageText)\n                    break\n                case 'friendsData':\n                    this.props.setFriendsData(news.friendsData)\n                    break\n                case 'redirectToProgresses':\n                    this.props.history.push('/progresses')\n                    break\n                case 'addResource':\n                    this.props.saveResource(news.resources, news.type)\n                    break\n                case 'updateResource':\n                    this.props.updateResource(\n                        news.code,\n                        news.id,\n                        news.update,\n                        this.state\n                    )\n                    break\n                case 'friendSearchResult':\n                    this.props.setFriendSearchResult(news.data)\n                    break\n                // case 'update':\n                //     let newProgress\n                //     let oldProgress = cloneDeep(this.props.progress)\n                //     if (oldProgress.__v === news.progress.__v - 1) {\n                //         newProgress = diffpatcher.patch(\n                //             oldProgress,\n                //             news.progress.patch\n                //         )\n                //         newProgress.__v = news.progress.__v\n                //         this.props.setData(\n                //             {\n                //                 progress: newProgress,\n                //             },\n                //             this.props.history.location.pathname\n                //         )\n                //     }\n                //     wsActions.getFriendsData(\n                //         newProgress || this.props.progress,\n                //         this.props.account.friends\n                //     )\n                //     break\n                case 'error':\n                    message.error(news.text)\n                    break\n                // case 'notFoundResource':\n                //     this.markNotFoundResource(data)\n                //     break\n                default:\n                    break\n            }\n        }\n        webSocket.onclose = event => {\n            clearTimeout(pingTimeout)\n        }\n    }\n\n    // markNotFoundResource = data => {\n    //     const requestedResources = this.state.requestedResources.filter(\n    //         item => item.id.toString() === data._id.toString()\n    //     )\n    //     this.setState({ requestedResources })\n    // }\n\n    checkInterval = null\n\n    check = () => {\n        if (!webSocket || webSocket.readyState === 3) {\n            clearInterval(this.checkInterval)\n            this.checkInterval = setInterval(this.check, 5000)\n            this.start()\n        }\n    }\n    componentWillMount() {\n        this.checkInterval = setInterval(this.check, 50)\n    }\n\n    reRequestResourcesInterval = null\n    reRequestResources = () => {\n        for (let group of [\n            'user',\n            'account',\n            'progress',\n            'post',\n            'group',\n            'postData',\n            'groupData',\n            'progressData',\n            'friendData',\n            'transactionData',\n        ]) {\n            if (this.state[group].length > 0) {\n                if (webSocket && webSocket.readyState === 1) {\n                    webSocket.send(\n                        JSON.stringify({\n                            messageCode: 'requestResource',\n                            ids: this.state[group],\n                            type: group,\n                        })\n                    )\n                }\n            }\n        }\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.checkInterval)\n        if (webSocket) {\n            webSocket.close()\n        }\n    }\n    // componentDidMount() {\n    //     this.initializeRequestResources(this.props)\n    // }\n    componentWillReceiveProps(nextProps) {\n        this.initializeRequestResources(nextProps)\n    }\n\n    initializeRequestResources = nextProps => {\n        const newRequestedResources = getListOfNeededResources(nextProps)\n        for (let group of [\n            'user',\n            'account',\n            'progress',\n            'post',\n            'group',\n            'postData',\n            'groupData',\n            'progressData',\n            'friendData',\n            'transactionData',\n        ]) {\n            if (newRequestedResources[group].length > 0) {\n                if (webSocket && webSocket.readyState === 1) {\n                    webSocket.send(\n                        JSON.stringify({\n                            messageCode: 'requestResource',\n                            ids: newRequestedResources[group].filter(\n                                item => !this.state[group].includes(item)\n                            ),\n                            type: group,\n                        })\n                    )\n                }\n            }\n        }\n        this.setState(() => newRequestedResources)\n        clearInterval(this.reRequestResourcesInterval)\n        this.reRequestResourcesInterval = setInterval(\n            this.reRequestResources,\n            3000\n        )\n    }\n\n    render() {\n        return null\n    }\n}\nconst mapStateToProps = state => {\n    return {\n        store: state,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: (data, pulledFrom) =>\n            dispatch(actions.setData(data, pulledFrom)),\n        removeData: data => dispatch(actions.removeData(data)),\n        saveResource: (data, type) =>\n            dispatch(actions.saveResource(data, type)),\n        setFriendsData: data => dispatch(actions.setFriendsData(data)),\n\n        updateResource: (code, id, update, state) =>\n            dispatch(actions.updateResource(code, id, update, state)),\n        setFriendSearchResult: data =>\n            dispatch(actions.setFriendSearchResult(data)),\n        logout: () => dispatch(actions.logout()),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(ConnectWebsocket)\n)\n","import { setData } from './auth'\n\nexport const saveResource = (data, type) => (dispatch, getState) => {\n    if (data.length > 0) {\n        const state = getState()\n        switch (type) {\n            case 'user':\n                const user = data[0]\n                let currentAccount = user.currentAccount\n                if (!currentAccount) currentAccount = user.myAccount\n                // if(!currentAccount)\n                //activate-account\n                dispatch(setData({ user, currentAccount }))\n                break\n            case 'account':\n                const account = data.find(\n                    item => item._id === state.currentAccount\n                )\n                if (account) {\n                    dispatch(setData({ account }))\n                }\n\n                const profile = data.find(\n                    item => item._id === state.currentProfile\n                )\n                if (profile) {\n                    dispatch(setData({ profile }))\n                }\n\n                break\n            case 'progress':\n                const progress = data.find(\n                    item => item._id === state.currentProgress\n                )\n                if (progress) {\n                    dispatch(setData({ progress }))\n                }\n                break\n            case 'group':\n                const group = data.find(item => item._id === state.currentGroup)\n                if (group) {\n                    dispatch(setData({ group }))\n                }\n                break\n            case 'post':\n                let post = {}\n                for (let item of data) {\n                    post[item._id] = item\n                }\n                dispatch(setData({ post }))\n                break\n            case 'friendData':\n                let friendData = {}\n                for (let item of data) {\n                    friendData[item._id] = item\n                }\n                dispatch(setData({ friendData }))\n                break\n            case 'progressData':\n                let progressData = {}\n                for (let item of data) {\n                    progressData[item._id] = item\n                }\n                dispatch(setData({ progressData }))\n                break\n            case 'transactionData':\n                let transactionData = {}\n                for (let item of data) {\n                    transactionData[item._id] = item\n                }\n                dispatch(setData({ transactionData }))\n                break\n            case 'postData':\n                let postData = {}\n                for (let item of data) {\n                    postData[item._id] = item\n                }\n                dispatch(setData({ postData }))\n                break\n            case 'groupData':\n                let groupData = {}\n                for (let item of data) {\n                    groupData[item._id] = item\n                }\n                dispatch(setData({ groupData }))\n                break\n            default:\n                break\n        }\n    }\n}\n","import { webSocket } from '../ConnectWebsocket'\n\nexport default (type, ids, state) => {\n    const notRequestedIds = ids.filter(id => !state[type].includes(id))\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'requestResource',\n                ids: notRequestedIds,\n                type,\n            })\n        )\n    }\n}\n","import requestResource from '../../containers/ConnectWebsocket/methods/requestResource'\nimport * as actions from './index'\nimport cloneDeep from 'lodash.clonedeep'\n\nconst applyDelta = (source, delta, watchFields) => {\n    // console.log('---------------------------APLY DELTA------------------------')\n    // console.log('----------------source----------------')\n    // console.log(source)\n    // console.log('----------------delta-------------------')\n    // console.log(delta)\n    const result = cloneDeep(source)\n\n    const applyUpdateToPart = (res, del, watchFields) => {\n        const applyWithDot = (res, keys, del) => {\n            if (keys.length > 1) {\n                const key = keys.shift()\n                applyWithDot(res[key], keys, del)\n            } else {\n                if (typeof res === 'array') {\n                    res.push(del)\n                } else {\n                    res[keys[0]] = del\n                }\n            }\n        }\n        for (let attr in del) {\n            const keys = attr.split('.')\n            if (!watchFields || watchFields.includes(keys[0])) {\n                if (typeof del[attr] !== 'undefined') {\n                    applyWithDot(res, keys, del[attr])\n                }\n            }\n        }\n    }\n\n    applyUpdateToPart(result, delta.updatedFields, watchFields)\n\n    const applyDeleteToPart = (result, keys) => {\n        if (keys.length > 1) {\n            const key = keys.shift()\n            applyDeleteToPart(result[key], keys)\n        } else {\n            if (typeof result === 'object') {\n                delete result[keys[0]]\n            } else if (typeof result === 'array') {\n                result.splice(keys[0], 1)\n            }\n        }\n    }\n\n    for (let field of delta.removedFields) {\n        if (field.indexOf('.') > -1) {\n            const keys = field.split('.')\n            if (!watchFields || watchFields.includes(keys[0]))\n                applyDeleteToPart(result, keys)\n        } else {\n            delete result[field]\n        }\n    }\n    return result\n}\n\nexport const updateResource = (code, id, update, parState) => (\n    dispatch,\n    getState\n) => {\n    if (update && id && code) {\n        const state = getState()\n        const check = key => {\n            if (state[key]._id === id) {\n                if (state[key].__v === update.updatedFields.__v - 1) {\n                    const element = applyDelta(state[key], update)\n                    dispatch(actions.setData({ [key]: element }))\n                } else {\n                    if (state[key].id) requestResource(code, [id], parState)\n                }\n            }\n        }\n        const check2 = (key, watchFields) => {\n            let updateData = {\n                [key]: cloneDeep(state[key]),\n            }\n            const friend = updateData[key][id]\n            if (friend) {\n                if (friend.__v === update.updatedFields.__v - 1) {\n                    updateData[key][id] = applyDelta(\n                        friend,\n                        update,\n                        watchFields\n                    )\n                    dispatch(actions.setData(updateData))\n                } else {\n                    requestResource(code, [id], parState)\n                }\n            }\n        }\n        switch (code) {\n            case 'user':\n                check('user')\n                break\n            case 'account':\n                check('account')\n                check('profile')\n                break\n            case 'progress':\n                check('progress')\n                break\n            case 'group':\n                check('group')\n                break\n            case 'post':\n                dispatch(actions.setData(check2(code)))\n                break\n            case 'friendData':\n                dispatch(\n                    actions.setData(\n                        check2(code, ['name', 'image', 'notifications', '__v'])\n                    )\n                )\n                break\n            case 'progressData':\n                dispatch(\n                    actions.setData(\n                        check2(code, [\n                            'owner',\n                            'worker',\n                            'goal',\n                            'notifications',\n                            '__v',\n                        ])\n                    )\n                )\n                break\n            case 'postData':\n                dispatch(\n                    actions.setData(check2(code, ['notifications', '__v']))\n                )\n                break\n            case 'groupData':\n                dispatch(\n                    actions.setData(check2(code, ['notifications', '__v']))\n                )\n                break\n            case 'transactionData':\n                dispatch(actions.setData(check2(code)))\n                break\n            default:\n                break\n        }\n    }\n}\n","import axios from 'axios'\nimport message from 'antd/es/message'\n\nexport const uploadFile = (file, size, filename, callback) => {\n    if (file == null) {\n        return alert('No file selected.')\n    }\n\n    const reader = new FileReader()\n    reader.onload = async event => {\n        resizeImageToSpecificSize(file, { width: size, height: size }, data => {\n            urltoFile(data, '/120').then(function(file) {\n                getSignedRequest(file, filename, callback)\n            })\n        })\n    }\n\n    reader.readAsArrayBuffer(file)\n}\n\nconst urltoFile = (url, filename, mimeType) => {\n    mimeType = mimeType || (url.match(/^data:([^;]+);/) || '')[1]\n    return fetch(url)\n        .then(function(res) {\n            return res.arrayBuffer()\n        })\n        .then(function(buf) {\n            return new File([buf], filename, { type: mimeType })\n        })\n}\n\nconst resizeImageToSpecificSize = (file, size, cb) => {\n    if (file) {\n        var reader = new FileReader()\n        reader.onload = function(event) {\n            resizeImageFromSrcToSpecificSize(event.target.result, size, cb)\n        }\n        reader.readAsDataURL(file)\n    }\n}\n\nconst resizeImageFromSrcToSpecificSize = (src, size, cb) => {\n    var data\n    var img = new Image()\n    img.onload = function() {\n        const widthCoef = img.width / size.width\n        const heightCoef = img.height / size.height\n        var oc = document.createElement('canvas'),\n            octx = oc.getContext('2d')\n        oc.width = img.width\n        oc.height = img.height\n        octx.drawImage(img, 0, 0)\n        if (widthCoef > 1 || heightCoef > 1) {\n            if (img.width > img.height) {\n                oc.height = (img.height / img.width) * size.width\n                oc.width = size.width\n            } else {\n                oc.width = (img.width / img.height) * size.width\n                oc.height = size.width\n            }\n        }\n        octx.drawImage(oc, 0, 0, oc.width, oc.height)\n        octx.drawImage(img, 0, 0, oc.width, oc.height)\n        data = oc.toDataURL()\n        cb(data)\n    }\n    img.src = src\n}\n\nconst getSignedRequest = (file, fileName, callback) => {\n    return axios\n        .post('/api/sign-s3', {\n            fileName,\n        })\n        .then(response => {\n            doUploadFile(file, response.data, callback)\n        })\n        .catch(err => {})\n}\n\nconst doUploadFile = (file, data, callback) => {\n    return axios\n        .put(data.signedRequest, file, {\n            headers: {\n                'Content-Type': 'multipart/form-data',\n            },\n        })\n        .then(response => {\n            callback(data.url)\n            message.success('The image has been saved.')\n        })\n        .catch(err => {\n            console.log(err)\n        })\n}\n","export default {\n    name: 200,\n    description: 10000,\n    message: 10000,\n}\n","import fieldLength from './fieldLength'\n\nexport const nicknameRules = [\n    {\n        required: true,\n        message: 'Nickname is too short. Minimal length is 2.',\n        whitespace: true,\n        min: 2,\n    },\n    {\n        message: `Nickname is too long. Miximum length is ${fieldLength.name}.`,\n        whitespace: true,\n        max: fieldLength.name,\n    },\n    {\n        pattern: /^[a-zA-Z0-9_-]*$/,\n        message: \"Nickname should contain only letters, numbers, '-' and '_'.\",\n    },\n]\n\nexport const nameRules = [\n    {\n        required: true,\n        min: 1,\n        whitespace: true,\n        message: 'Name is too short. Minimal length is 1.',\n    },\n    {\n        max: fieldLength.name,\n        message: `Name is too long. Miximum length is ${fieldLength.name}.`,\n    },\n]\n\nexport const accountNameRules = [\n    {\n        required: true,\n        min: 2,\n        whitespace: true,\n        message: 'Name is too short. Minimal length is 2.',\n    },\n    {\n        max: fieldLength.name,\n        message: `Name is too long. Miximum length is ${fieldLength.name}.`,\n    },\n]\n\nexport const descriptionRules = [\n    {\n        max: fieldLength.description,\n        message: `Description is too long. Miximum length is ${\n            fieldLength.description\n        }.`,\n    },\n]\n\nexport const messageRules = [\n    {\n        min: 1,\n        whitespace: true,\n        message: 'Message is too short. Minimal length is 1.',\n    },\n    {\n        max: fieldLength.message,\n        message: `Message is too long. Miximum length is ${\n            fieldLength.message\n        }.`,\n    },\n]\n\nexport const priceRules = [\n    {\n        required: true,\n        message: 'Please input the item price.',\n    },\n]\n","import React, { useState } from 'react'\nimport Modal from 'antd/es/modal'\n\nimport Button from 'antd/es/button'\nimport Input from 'antd/es/input'\nimport InputNumber from 'antd/es/input-number'\nimport Form from 'antd/es/form'\nimport Select from 'antd/es/select'\nimport Upload from 'antd/es/upload'\nimport PlusOutlined from '@ant-design/icons/PlusOutlined'\n\nimport Avatar from 'antd/es/avatar'\nimport Popconfirm from 'antd/es/popconfirm'\nimport {\n    nameRules,\n    descriptionRules,\n    priceRules,\n} from '../../constants/fieldRules'\nimport getAvatar from '../../utils/getAvatar'\n\nconst AddPerkForm = props => {\n    const [previewImage, setPreviewImage] = useState('')\n    const {\n        connections,\n        perkId,\n        perk,\n        deletePerk,\n        onFinish,\n        images,\n        setImages,\n        uploadImage,\n    } = props\n\n    const layout = {\n        labelCol: { span: 8 },\n        wrapperCol: { span: 16 },\n    }\n    const tailLayout = {\n        wrapperCol: { offset: 8, span: 16 },\n    }\n\n    const connectionsSelect = (\n        <Select\n            mode=\"multiple\"\n            style={{ width: '100%' }}\n            placeholder=\"Please select\"\n        >\n            {connections.map(item => (\n                <Select.Option key={item._id}>\n                    <Avatar\n                        src={getAvatar(item._id, item.image)}\n                        size={20}\n                        style={{ marginRight: '10px' }}\n                    />\n                    {item.name} - ({item._id})\n                </Select.Option>\n            ))}\n        </Select>\n    )\n    const [form] = Form.useForm()\n\n    const normFile = e => {\n        if (Array.isArray(e)) {\n            return e\n        }\n        return e && e.fileList.map(image => image.url)\n    }\n\n    return !props.perkId || perk ? (\n        <>\n            <Form\n                form={form}\n                name=\"dynamic_form_nest_item\"\n                onFinish={onFinish}\n                autoComplete=\"off\"\n                initialValues={perk || {}}\n                {...layout}\n            >\n                <Form.Item\n                    name=\"images\"\n                    label=\"Images\"\n                    valuePropName=\"images\"\n                    getValueFromEvent={normFile}\n                >\n                    <Upload\n                        listType=\"picture-card\"\n                        fileList={images.map((image, index) => ({\n                            ...image,\n                            uid: index,\n                        }))}\n                        onPreview={file => {\n                            setPreviewImage(file.url)\n                        }}\n                        onChange={({ fileList }) => setImages(fileList)}\n                        customRequest={({ file }) => {\n                            uploadImage(file)\n                        }}\n                    >\n                        {images.length >= 8 ? null : (\n                            <div>\n                                <PlusOutlined />\n                                <div className=\"ant-upload-text\">Upload</div>\n                            </div>\n                        )}\n                    </Upload>\n                </Form.Item>\n                <Form.Item label=\"Name\" name=\"name\" rules={nameRules}>\n                    <Input placeholder=\"New item\" />\n                </Form.Item>\n                <Form.Item\n                    label=\"Description\"\n                    name=\"description\"\n                    rules={descriptionRules}\n                >\n                    <Input.TextArea placeholder=\"Write a few words about this item.\" />\n                </Form.Item>\n\n                {props.mode === 'shop' && (\n                    <Form.Item label=\"Available for\" name=\"users\">\n                        {connectionsSelect}\n                    </Form.Item>\n                )}\n\n                {props.mode === 'shop' && (\n                    <Form.Item label=\"Price\" name=\"price\" rules={priceRules}>\n                        <InputNumber />\n                    </Form.Item>\n                )}\n\n                <Form.Item {...tailLayout}>\n                    <Button type=\"primary\" htmlType=\"submit\" size=\"large\">\n                        Save\n                    </Button>\n\n                    {perkId && (\n                        <Popconfirm\n                            title=\"Are you sure you want to delete this item?\"\n                            onConfirm={deletePerk}\n                            onCancel={() => {}}\n                            okText=\"Confirm\"\n                            cancelText=\"Cancel\"\n                        >\n                            <Button type=\"link\" danger size=\"large\">\n                                Delete\n                            </Button>\n                        </Popconfirm>\n                    )}\n                </Form.Item>\n            </Form>\n            <Modal\n                visible={previewImage}\n                footer={null}\n                onCancel={() => setPreviewImage('')}\n            >\n                <img\n                    alt=\"example\"\n                    style={{ width: '100%' }}\n                    src={previewImage}\n                />\n            </Modal>\n        </>\n    ) : null\n}\n\nexport default AddPerkForm\n","import { webSocket } from '../containers/ConnectWebsocket/ConnectWebsocket'\n\nexport const sendMessage = (\n    accountId,\n    postId,\n    messageValue,\n    image,\n    replyToMessage,\n    editedMessage\n) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'sendMessage',\n                messageValue,\n                image,\n                postId,\n                accountId,\n                replyToMessage,\n                editedMessage,\n            })\n        )\n    }\n}\n\nexport const changeLikesMessage = (\n    messageCode,\n    messageId,\n    accountId,\n    postId\n) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode,\n                messageId,\n                accountId,\n                postId,\n            })\n        )\n    }\n}\n\nexport const addPost = (\n    accountId,\n    parentId,\n    parentType,\n    messageValue,\n    images\n) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'addPost',\n                accountId,\n                parentId,\n                parentType,\n                messageValue,\n                images,\n            })\n        )\n    }\n}\n","import { webSocket } from '../containers/ConnectWebsocket/ConnectWebsocket'\n\nexport const savePerk = (accountId, id, value, mode) => {\n    if (accountId && webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode:\n                    mode === 'wishlist'\n                        ? 'saveWishlistItem'\n                        : mode === 'goals'\n                        ? 'saveGoal'\n                        : 'savePerk',\n                id,\n                value,\n                accountId,\n            })\n        )\n    }\n}\n\nexport const deletePerk = (accountId, id, mode) => {\n    if (accountId && id && webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode:\n                    mode === 'wishlist'\n                        ? 'deleteWishlistItem'\n                        : mode === 'goals'\n                        ? 'deleteGoal'\n                        : 'deletePerk',\n                id,\n                accountId,\n            })\n        )\n    }\n}\n\nexport const buyPerk = (buyer, seller, perkId) => {\n    if (perkId && buyer && seller && webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: mode === 'buyPerk',\n                perkId,\n                buyer,\n                seller,\n            })\n        )\n    }\n}\n","import { webSocket } from '../containers/ConnectWebsocket/ConnectWebsocket'\n\nexport const searchFriends = search => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'searchFriends',\n                search,\n            })\n        )\n    }\n}\n\nexport const addFriend = (accountId, friendId) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'addFriend',\n                accountId,\n                friendId,\n            })\n        )\n    }\n}\n\nexport const acceptFriend = (accountId, friendId) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'acceptFriend',\n                accountId,\n                friendId,\n            })\n        )\n    }\n}\n\nexport const unfriend = (accountId, friendId) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'unfriend',\n                accountId,\n                friendId,\n            })\n        )\n    }\n}\n","import React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { uploadFile } from '../../utils/uploadFile'\nimport AddPerkForm from './AddPerkForm'\nimport { withRouter } from 'react-router-dom'\nimport * as wsActions from '../../websocketActions'\n\nconst AddPerk = props => {\n    const [perk, setPerk] = useState()\n    const [images, setImages] = useState([])\n    const { account, mode } = props\n    const perkId = props.perkId || ''\n    useEffect(() => {\n        if (perkId) {\n            const perk =\n                mode === 'wishlist'\n                    ? account.wishlist.find(item => item.itemId === perkId)\n                    : mode === 'goals'\n                    ? account.goals.find(item => item.goalId === perkId)\n                    : account.perks.find(item => item.perkId === perkId)\n            if (perk) {\n                setPerk(perk)\n                setImages(\n                    perk.images.map((url, index) => ({\n                        url,\n                        uid: index,\n                    }))\n                )\n            }\n        }\n    }, [])\n\n    const connections = account.friends\n        .filter(friend => friend.status === 'friend')\n        .map(friend => props.friendData[friend.friend])\n\n    const uploadImage = file => {\n        uploadFile(file, 800, undefined, url => {\n            setImages(\n                [...images, { url }].map((image, index) => ({\n                    ...image,\n                    uid: index,\n                }))\n            )\n        })\n    }\n\n    return !props.perkId || perk ? (\n        <AddPerkForm\n            connections={connections}\n            perkId={perkId}\n            perk={perk}\n            deletePerk={() => {\n                wsActions.deletePerk(account._id, perkId, mode)\n                props.setEditPerkOpen(false)\n            }}\n            onFinish={value => {\n                const processedValue = {\n                    ...value,\n                    images: images.map(image => image.url),\n                }\n                wsActions.savePerk(account._id, perkId, processedValue, mode)\n                props.setEditPerkOpen(false)\n            }}\n            images={images}\n            setImages={setImages}\n            uploadImage={uploadImage}\n            mode={props.mode}\n        />\n    ) : null\n}\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n        friendData: state.friendData,\n    }\n}\nexport default withRouter(connect(mapStateToProps)(AddPerk))\n","import React from 'react'\nimport Carousel from 'antd/es/carousel'\nimport classes from './imageCarousel.module.css'\n\nconst ImageCarousel = props =>\n    props.images && props.images.length > 0 ? (\n        <Carousel\n            style={{ width: props.size || 'auto' }}\n            dots={{ className: classes.Dots }}\n        >\n            {props.images.map(\n                (image, index) =>\n                    image && (\n                        <div key={index}>\n                            <div\n                                style={{\n                                    backgroundImage: 'url(\"' + image + '\")',\n                                    backgroundSize: props.type || 'contain',\n                                    backgroundPosition: 'center',\n                                    width: props.size || '100%',\n                                    height:\n                                        props.height || props.size || '300px',\n                                    backgroundRepeat: 'no-repeat',\n                                }}\n                            />\n                        </div>\n                    )\n            )}\n        </Carousel>\n    ) : null\n\nexport default ImageCarousel\n","import React from 'react'\nimport Card from 'antd/es/card'\nimport { withRouter } from 'react-router-dom'\n\nimport EditFilled from '@ant-design/icons/EditFilled'\nimport Tooltip from 'antd/es/tooltip'\nimport DollarCircleOutlined from '@ant-design/icons/DollarCircleOutlined'\nimport * as wsActions from '../../websocketActions'\nimport Carousel from 'antd/es/carousel'\nimport ImageCarousel from '../../components/UI/ImageCarousel/ImageCarousel'\nimport Dropdown from 'antd/es/dropdown'\nimport Menu from 'antd/es/menu'\nimport Button from 'antd/es/button'\nimport { EllipsisOutlined } from '@ant-design/icons'\nconst { Meta } = Card\n\nconst PerkCard = props => {\n    const {\n        perk,\n        perkId,\n        owner,\n        account,\n        setEditedPerk,\n        setEditPerkOpen,\n        mode,\n    } = props\n\n    return (\n        <Card\n            type=\"inner\"\n            style={{ width: '100%' }}\n            bordered={false}\n            extra={\n                <div onClick={e => e.stopPropagation()}>\n                    {owner._id === account._id &&\n                    !props.onlyBuy &&\n                    props.mode === 'shop' ? (\n                        <Dropdown.Button\n                            type=\"primary\"\n                            key=\"1\"\n                            onClick={() =>\n                                wsActions.buyPerk(\n                                    account._id,\n                                    owner._id,\n                                    perkId\n                                )\n                            }\n                            overlay={\n                                <Menu>\n                                    <Menu.Item\n                                        key=\"0\"\n                                        onClick={() => {\n                                            setEditedPerk(perkId)\n                                            setEditPerkOpen(true)\n                                        }}\n                                    >\n                                        Edit\n                                    </Menu.Item>\n                                </Menu>\n                            }\n                        >\n                            Buy\n                        </Dropdown.Button>\n                    ) : props.mode === 'shop' ? (\n                        <Button\n                            type=\"primary\"\n                            onClick={() =>\n                                wsActions.buyPerk(\n                                    account._id,\n                                    owner._id,\n                                    perkId\n                                )\n                            }\n                        >\n                            Buy\n                        </Button>\n                    ) : owner._id === account._id && !props.onlyBuy ? (\n                        <Dropdown\n                            overlay={\n                                <Menu>\n                                    <Menu.Item\n                                        key=\"0\"\n                                        onClick={() => {\n                                            setEditedPerk(perkId)\n                                            setEditPerkOpen(true)\n                                        }}\n                                    >\n                                        Edit\n                                    </Menu.Item>\n                                </Menu>\n                            }\n                        >\n                            <Button type=\"link\">\n                                <EllipsisOutlined />\n                            </Button>\n                        </Dropdown>\n                    ) : null}\n                </div>\n            }\n            title={\n                <div\n                    onClick={() =>\n                        props.history.push(\n                            `/${mode || 'shop'}/${owner._id}/${perkId}`\n                        )\n                    }\n                    style={{\n                        display: 'flex',\n                        alignItems: 'center',\n                    }}\n                >\n                    <div style={{ width: '50px', marginRight: '20px' }}>\n                        <ImageCarousel images={perk.images} size={50} />\n                    </div>\n                    {perk.name}\n                    {mode === 'shop' && ` ($${perk.price})`}\n                </div>\n            }\n        />\n    )\n}\n\nexport default withRouter(PerkCard)\n","import React from 'react'\nimport Button from 'antd/es/button'\nimport { PlusOutlined } from '@ant-design/icons'\n\nconst AddCard = props => (\n    <Button\n        onClick={props.action}\n        type=\"primary\"\n        shape=\"round\"\n        icon={<PlusOutlined />}\n        size=\"large\"\n    >\n        {props.title}\n    </Button>\n)\n\nexport default AddCard\n","import React, { useState } from 'react'\nimport Modal from 'antd/es/modal'\nimport Button from 'antd/es/button'\nimport AddPerk from './AddPerk'\nimport PerkCard from './PerkCard'\nimport AddCard from '../../components/AddCard/AddCard'\n\nconst WishlistAndPerks = props => {\n    const [editedPerk, setEditedPerk] = useState('')\n    const [editPerkOpen, setEditPerkOpen] = useState()\n\n    const { account } = props\n\n    const editPerk = (\n        <Modal\n            title=\"Add item\"\n            visible={editPerkOpen}\n            maskClosable\n            closable\n            onCancel={() => setEditPerkOpen(false)}\n            width=\"90%\"\n            footer={\n                <Button key=\"back\" onClick={() => setEditPerkOpen(false)}>\n                    Close\n                </Button>\n            }\n            destroyOnClose={true}\n        >\n            <AddPerk\n                setEditPerkOpen={setEditPerkOpen}\n                perkId={editedPerk}\n                mode={props.mode}\n            />\n        </Modal>\n    )\n\n    return account._id ? (\n        <>\n            <AddCard\n                action={() => {\n                    setEditedPerk('')\n                    setEditPerkOpen(true)\n                }}\n                title=\"Add item\"\n                sub={props.mode === 'shop' && 'Set price'}\n            />\n\n            {account[props.listKey || props.mode] &&\n                account[props.listKey || props.mode].map((perk, index) => (\n                    <PerkCard\n                        key={index}\n                        perk={perk}\n                        perkId={\n                            props.mode === 'wishlist' || props.mode === 'goals'\n                                ? perk.itemId\n                                : perk.perkId\n                        }\n                        owner={account}\n                        account={account}\n                        setEditedPerk={setEditedPerk}\n                        setEditPerkOpen={setEditPerkOpen}\n                        mode={props.mode}\n                    />\n                ))}\n            {editPerk}\n        </>\n    ) : null\n}\n\nexport default WishlistAndPerks\n","import React, { useEffect } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport WishlistAndPerks from '../Shop/WishlistAndPerks'\n\nconst Goals = props => {\n    useEffect(() => {\n        props.setPageTitle({ main: 'Goals', sub: '' })\n    }, [])\n\n    return props.account._id ? (\n        <WishlistAndPerks mode=\"goals\" account={props.account} />\n    ) : (\n        <span />\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Goals)\n)\n","import axios from 'axios'\nimport processRes from './processRes'\nexport default (props, data, setData, options, callback) => {\n    // if (typeof props.isAuthed === 'undefined') return\n    // options = {\n    //     forceAuth: true,\n    //     forceActivate: true,\n    //     pullData: true,\n    //     ...(options || {}),\n    // }\n\n    // if (!props.isAuthed) {\n    //     props.tryAuth(props, options.forceAuth)\n    // }\n\n    // if (options.pullData) {\n    axios\n        .get('/api' + props.history.location.pathname)\n        .then(res => {\n            processRes(res, props)\n            // if (options.forceActivate) {\n            //     if (props.isAuthed && res.data.status === 'no account') {\n            //         props.history.push('/activate-account')\n            //     }\n            // }\n\n            setData(res.data)\n            callback(res.data)\n        })\n        .catch(err => {})\n    // }\n}\n","import React, { useState, useEffect } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport Button from 'antd/es/button'\nimport Comment from 'antd/es/comment'\nimport Avatar from 'antd/es/avatar'\nimport Input from 'antd/es/input'\nimport Form from 'antd/es/form'\nimport Upload from 'antd/es/upload'\nimport PictureFilled from '@ant-design/icons/PictureFilled'\nimport LoadingOutlined from '@ant-design/icons/LoadingOutlined'\nimport CloseCircleFilled from '@ant-design/icons/CloseCircleFilled'\nimport SendOutlined from '@ant-design/icons/SendOutlined'\nimport { uploadFile } from '../../utils/uploadFile'\nimport * as wsActions from '../../websocketActions'\nimport getAvatar from '../../utils/getAvatar'\nimport { messageRules } from '../../constants/fieldRules'\nimport { PlusOutlined } from '@ant-design/icons'\nimport message from 'antd/es/message'\nimport Modal from 'antd/es/modal/Modal'\n\nconst AddMessage = props => {\n    const [previewImage, setPreviewImage] = useState('')\n    const [imageLoading, setImageLoading] = useState(false)\n    const [images, setImages] = useState(props.images || [])\n    const { post, account } = props\n\n    const [messageText, setMessageText] = useState(\n        props.content ||\n            (props.replyToUser ? '@' + props.replyToUser + ' ' : '')\n    )\n\n    useEffect(() => {\n        setMessageText(\n            props.content ||\n                (props.replyToUser ? '@' + props.replyToUser + ' ' : '')\n        )\n    }, [props.replyToUser, props.content])\n\n    const uploadImage = file => {\n        uploadFile(file, 800, undefined, url => {\n            setImages([...images, url])\n        })\n    }\n\n    return post && account._id ? (\n        <div\n            style={{\n                background: '#fff',\n\n                ...(props.replyTo\n                    ? {}\n                    : {\n                          width: '100%',\n                          bottom: '-200px',\n                          left: '0px',\n                          //   position: 'absolute',\n                      }),\n            }}\n        >\n            <Comment\n                avatar={<Avatar src={getAvatar(account._id, account.image)} />}\n                content={\n                    <>\n                        <Form.Item rules={messageRules} style={{ margin: 0 }}>\n                            <Input.TextArea\n                                autoSize={{\n                                    minRows: 1,\n                                    maxRows: 3,\n                                }}\n                                rows={1}\n                                onChange={e => setMessageText(e.target.value)}\n                                value={messageText}\n                                placeholder=\"Write a comment\"\n                            />\n                        </Form.Item>\n                        {images.length > 0 && (\n                            <Form.Item style={{ margin: 0 }}>\n                                <Upload\n                                    listType=\"picture-card\"\n                                    fileList={images.map((image, index) => ({\n                                        url: image,\n                                        uid: index,\n                                    }))}\n                                    onPreview={file => {\n                                        setPreviewImage(file.url)\n                                    }}\n                                    onChange={({ fileList }) =>\n                                        setImages(\n                                            fileList.map(image => image.url)\n                                        )\n                                    }\n                                    customRequest={({ file }) => {\n                                        uploadImage(file)\n                                    }}\n                                >\n                                    {images.length >= 8 ? null : (\n                                        <div>\n                                            <PlusOutlined />\n                                            <div className=\"ant-upload-text\">\n                                                Upload\n                                            </div>\n                                        </div>\n                                    )}\n                                </Upload>\n                            </Form.Item>\n                        )}\n                        <Form.Item style={{ margin: 0 }}>\n                            <Button\n                                htmlType=\"submit\"\n                                onClick={() => {\n                                    wsActions.sendMessage(\n                                        account._id,\n                                        post._id,\n                                        messageText,\n                                        images,\n                                        props.replyTo,\n                                        props.editingMessage\n                                    )\n                                    setMessageText('')\n                                    setImages([])\n                                    if (props.onSend) props.onSend()\n                                }}\n                                icon={<SendOutlined />}\n                                type=\"text\"\n                            >\n                                Send\n                            </Button>\n                            <Upload\n                                showUploadList={false}\n                                customRequest={({ file }) => {\n                                    if (images.length > 8) {\n                                        message.warning(\n                                            'You can not attach more than 8 images.'\n                                        )\n                                        return\n                                    }\n                                    setImageLoading(true)\n                                    uploadFile(file, 800, undefined, url => {\n                                        setImageLoading(false)\n                                        setImages([...images, url])\n                                    })\n                                }}\n                            >\n                                <Button\n                                    type=\"text\"\n                                    icon={\n                                        imageLoading ? (\n                                            <LoadingOutlined />\n                                        ) : (\n                                            <PictureFilled />\n                                        )\n                                    }\n                                >\n                                    Image\n                                </Button>\n                            </Upload>\n                            {props.cancel && (\n                                <Button\n                                    onClick={props.cancel}\n                                    icon={<CloseCircleFilled />}\n                                    type=\"text\"\n                                >\n                                    Cancel\n                                </Button>\n                            )}\n                        </Form.Item>\n                    </>\n                }\n            />\n            <Modal\n                visible={previewImage}\n                footer={null}\n                onCancel={() => setPreviewImage('')}\n            >\n                <img\n                    alt=\"example\"\n                    style={{ width: '100%' }}\n                    src={previewImage}\n                />\n            </Modal>\n        </div>\n    ) : null\n}\n\nexport default withRouter(AddMessage)\n","import React from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\n\nimport Button from 'antd/es/button'\nimport Avatar from 'antd/es/avatar'\nimport getAvatar from '../../utils/getAvatar'\n\nconst UserButton = props => {\n    const { account, profile, friendData, id, friendSearchResult } = props\n    const getUserData = id =>\n        id === account._id\n            ? account\n            : id === profile._id\n            ? profile\n            : id === friendSearchResult._id\n            ? friendSearchResult\n            : friendData[id]\n    const userName = id => (getUserData(id) ? getUserData(id).name : id)\n    const userAvatar = id =>\n        getUserData(id) ? (\n            <span\n                onClick={e => {\n                    e.stopPropagation()\n                    props.history.push('/profile/' + id)\n                }}\n                key={id}\n            >\n                <Avatar\n                    src={getAvatar(id, getUserData(id).image)}\n                    size={props.size || (props.noClick ? 20 : 30)}\n                    style={props.group ? {} : { margin: ' 0 5px' }}\n                />\n            </span>\n        ) : null\n    return props.group ? (\n        <Avatar.Group style={{ margin: ' 0 5px' }}>\n            {props.ids.map(id => userAvatar(id))}\n        </Avatar.Group>\n    ) : props.noClick ? (\n        <>\n            {!props.noAva && userAvatar(id)}\n            {!props.noName && userName(id)}\n        </>\n    ) : props.span ? (\n        <span\n            style={{ cursor: 'pointer', fontWeight: 'bold', ...props.style }}\n            onClick={() => props.history.push('/profile/' + props.id)}\n        >\n            {!props.noAva && userAvatar(id)}\n            {!props.noName && userName(id)}\n        </span>\n    ) : (\n        <Button\n            type=\"link\"\n            style={{ padding: '0px 5px', height: 'auto', ...props.style }}\n            onClick={() => props.history.push('/profile/' + props.id)}\n        >\n            {!props.noAva && userAvatar(id)}\n            {!props.noName && userName(id)}\n        </Button>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        account: state.account,\n        profile: state.profile,\n        friendData: state.friendData,\n        friendSearchResult: state.friendSearchResult,\n    }\n}\n\nexport default withRouter(connect(mapStateToProps)(UserButton))\n","import React, { useState } from 'react'\nimport { withRouter } from 'react-router-dom'\n\nimport Comment from 'antd/es/comment'\n\nimport Tooltip from 'antd/es/tooltip'\nimport Avatar from 'antd/es/avatar'\nimport TimeAgo from 'timeago-react'\n\nimport * as wsActions from '../../websocketActions'\nimport LikeFilled from '@ant-design/icons/LikeFilled'\nimport LikeOutlined from '@ant-design/icons/LikeOutlined'\nimport Card from 'antd/es/card'\nimport Carousel from 'antd/es/carousel'\nimport AddMessage from './AddMessage'\nimport getAvatar from '../../utils/getAvatar'\nimport Button from 'antd/es/button'\nimport ImageCarousel from '../UI/ImageCarousel/ImageCarousel'\nimport UserButton from '../UserButton/UserButton'\n\nconst Message = props => {\n    const {\n        account,\n        state,\n        setState,\n        message,\n        friendData,\n        progressData,\n        groupData,\n        post,\n        replies,\n        isStart,\n    } = props\n    const [replyVisible, setReplyVisible] = useState(false)\n    const [replyToUser, setReplyToUser] = useState('')\n    const [editingMessage, setEditingMessage] = useState('')\n    const [showReplies, setShowReplies] = useState(false)\n    const commentProps = {\n        actions: !props.isStart && [\n            <span>\n                <TimeAgo datetime={message.date} live />\n            </span>,\n            <span key=\"comment-basic-like\">\n                <Tooltip title=\"Like\">\n                    {message.likes.includes(account._id) ? (\n                        <LikeFilled\n                            onClick={() =>\n                                wsActions.changeLikesMessage(\n                                    'dislikeMessage',\n                                    message.messageId,\n                                    account._id,\n                                    post._id\n                                )\n                            }\n                        />\n                    ) : (\n                        <LikeOutlined\n                            onClick={() =>\n                                wsActions.changeLikesMessage(\n                                    'likeMessage',\n                                    message.messageId,\n                                    account._id,\n                                    post._id\n                                )\n                            }\n                        />\n                    )}\n                </Tooltip>\n                <span style={{ paddingLeft: '8px' }}>\n                    {message.likes.length}\n                </span>\n            </span>,\n\n            message.author !== account._id && (\n                <span\n                    key=\"comment-basic-reply-to\"\n                    onClick={() => {\n                        if (props.setReplyVisible) {\n                            props.setReplyVisible(true)\n                            props.setReplyToUser(props.message.author)\n                        } else {\n                            setReplyVisible(true)\n                            setReplyToUser('')\n                        }\n                        setShowReplies(true)\n                    }}\n                >\n                    Reply\n                </span>\n            ),\n            message.author === account._id && (\n                <span\n                    key=\"comment-basic-reply-to\"\n                    onClick={() => setEditingMessage(message.messageId)}\n                >\n                    Edit\n                </span>\n            ),\n        ],\n        avatar: (\n            <Avatar\n                src={getAvatar(\n                    message.author,\n                    friendData[message.author]\n                        ? friendData[message.author].image\n                        : Math.floor(Math.random() * 1000000)\n                )}\n            />\n        ),\n        content: isStart ? (\n            <>\n                {message.messageType === 'wishlist' && (\n                    <>\n                        {' '}\n                        <span\n                            style={{\n                                fontWeight: 'bold',\n                                cursor: 'pointer',\n                                margin: '10px 0px 0px ',\n                            }}\n                            onClick={() =>\n                                props.history.push(\n                                    `/wishlist/${message.details.owner}/${\n                                        message.details.itemId\n                                    }`\n                                )\n                            }\n                        >\n                            {message.details.name}\n                        </span>\n                    </>\n                )}\n                {message.text && <p>{message.text}</p>}\n            </>\n        ) : (\n            <>\n                <div\n                    style={{\n                        background: '#eee',\n                        borderRadius: '5px',\n                        padding: '3px 10px',\n                        display:\n                            message.image && message.image.length > 0\n                                ? 'block'\n                                : 'inline-block',\n                    }}\n                >\n                    <UserButton\n                        id={message.author}\n                        span={true}\n                        noAva={true}\n                        style={{ fontWeight: 'bold' }}\n                    />\n\n                    {message.image && message.image.length > 0 && (\n                        <ImageCarousel\n                            images={message.image}\n                            height=\"60vw\"\n                            type=\"contain\"\n                        />\n                    )}\n\n                    {message.text && <p>{message.text}</p>}\n                </div>\n                <div />\n            </>\n        ),\n        author: isStart && (\n            <span\n                style={{ color: '#333', fontWeight: 'bold', fontSize: '14px' }}\n            >\n                <UserButton id={message.author} span={true} noAva={true} />{' '}\n                &rArr;{' '}\n                {post.parent &&\n                    progressData &&\n                    progressData[post.parent.parentId] && (\n                        <span\n                            style={{ cursor: 'pointer' }}\n                            onClick={() =>\n                                props.history.push(\n                                    '/progresses/' + post.parent.parentId\n                                )\n                            }\n                        >\n                            {progressData[post.parent.parentId].goal.name}\n                        </span>\n                    )}\n                {post.startMessage &&\n                    ['wishlist', 'perk', 'goal'].includes(\n                        post.startMessage.messageType\n                    ) && (\n                        <span\n                            style={{ cursor: 'pointer' }}\n                            onClick={() =>\n                                props.history.push('/profile/' + message.author)\n                            }\n                        >\n                            {post.startMessage.messageType === 'wishlist'\n                                ? 'Wishlist'\n                                : post.startMessage.messageType === 'goals'\n                                ? 'Goals'\n                                : 'Shop'}\n                        </span>\n                    )}\n            </span>\n        ),\n        datetime: isStart && (\n            <span style={{ color: '#333' }}>\n                <TimeAgo datetime={message.date} live />\n            </span>\n        ),\n    }\n    return account && friendData ? (\n        account._id !== message.author || !editingMessage ? (\n            <Comment {...commentProps}>\n                {props.isTop &&\n                    replies &&\n                    replies.length &&\n                    (showReplies ? (\n                        replies.map((reply, index) => (\n                            <Message\n                                key={index}\n                                message={reply}\n                                post={post}\n                                account={account}\n                                friendData={friendData}\n                                setReplyVisible={setReplyVisible}\n                                setReplyToUser={setReplyToUser}\n                            />\n                        ))\n                    ) : (\n                        <Button\n                            type=\"text\"\n                            onClick={() => setShowReplies(true)}\n                        >\n                            Show {replies.length} replies\n                        </Button>\n                    ))}\n\n                {props.isTop && replyVisible ? (\n                    <AddMessage\n                        post={post}\n                        account={account}\n                        replyTo={message.messageId}\n                        replyToUser={replyToUser}\n                        cancel={() => setReplyVisible(false)}\n                    />\n                ) : null}\n            </Comment>\n        ) : (\n            <AddMessage\n                post={post}\n                account={account}\n                replyTo={message.messageId}\n                editingMessage={editingMessage}\n                content={message.text}\n                images={message.image}\n                onSend={() => setEditingMessage('')}\n                cancel={() => setEditingMessage('')}\n            />\n        )\n    ) : null\n}\n\nexport default withRouter(Message)\n","import React, { useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport * as wsActions from '../../websocketActions'\nimport Message from './Message'\nimport Tooltip from 'antd/es/tooltip'\nimport { LikeOutlined, LikeFilled } from '@ant-design/icons'\nimport AddMessage from './AddMessage'\nimport Divider from 'antd/es/divider'\nimport Button from 'antd/es/button'\nimport ImageCarousel from '../UI/ImageCarousel/ImageCarousel'\n\nconst Post = props => {\n    const { post, account, friendData, progressData, groupData } = props\n    const [postOpen, setPostOpen] = useState(props.showReplies)\n    const getNumberOfMessages = messages => {\n        let result = 0\n        for (let item of messages) {\n            result = result + 1 + item.replies.length\n        }\n        return result\n    }\n    return post ? (\n        <>\n            {!props.noStartMessage && (\n                <>\n                    <Message\n                        message={post.startMessage}\n                        post={post}\n                        account={account}\n                        friendData={friendData}\n                        progressData={progressData}\n                        groupData={groupData}\n                        replies={[]}\n                        isStart={true}\n                    />\n                    {post.startMessage.image &&\n                        post.startMessage.image.length > 0 && (\n                            <ImageCarousel\n                                images={post.startMessage.image}\n                                height=\"60vw\"\n                                type=\"cover\"\n                            />\n                        )}\n                </>\n            )}\n            <Divider type=\"horizontal\" style={{ margin: '5px 0' }} />\n\n            <div\n                style={{\n                    textAlign: 'left',\n                    // marginBottom: '200px',\n                    position: 'relative',\n                }}\n            >\n                <div\n                    style={{ display: 'flex', justifyContent: 'space-around' }}\n                >\n                    <span key=\"comment-basic-like\">\n                        <Button type=\"text\">\n                            {post.startMessage.likes.includes(account._id) ? (\n                                <LikeFilled\n                                    onClick={() =>\n                                        wsActions.changeLikesMessage(\n                                            'dislikeMessage',\n                                            post.startMessage.messageId,\n                                            account._id,\n                                            post._id\n                                        )\n                                    }\n                                />\n                            ) : (\n                                <LikeOutlined\n                                    onClick={() =>\n                                        wsActions.changeLikesMessage(\n                                            'likeMessage',\n                                            post.startMessage.messageId,\n                                            account._id,\n                                            post._id\n                                        )\n                                    }\n                                />\n                            )}\n\n                            <span style={{ paddingLeft: '8px' }}>\n                                {post.startMessage.likes.length}\n                            </span>\n                        </Button>\n                    </span>\n                    <span>\n                        <Button onClick={() => setPostOpen(true)} type=\"text\">\n                            Comment\n                            <span style={{ paddingLeft: '8px' }}>\n                                {getNumberOfMessages(post.messages)}\n                            </span>\n                        </Button>\n                    </span>\n                </div>\n                <Divider type=\"horizontal\" style={{ margin: '5px 0' }} />\n                {postOpen ? (\n                    <>\n                        <AddMessage post={post} account={account} />\n                        {post.messages && post.messages.length\n                            ? post.messages.map((message, index) => (\n                                  <Message\n                                      key={index}\n                                      message={message}\n                                      post={post}\n                                      account={account}\n                                      friendData={friendData}\n                                      replies={message.replies}\n                                      isTop={true}\n                                  />\n                              ))\n                            : null}\n                    </>\n                ) : (\n                    <Button onClick={() => setPostOpen(true)} type=\"text\">\n                        Show replies and comment\n                    </Button>\n                )}\n            </div>\n        </>\n    ) : null\n}\n\nexport default withRouter(Post)\n","import React, { useEffect, useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport Card from 'antd/es/card'\nimport pullData from '../../utils/pullData'\nimport Post from '../../components/Post/Post'\nimport UserButton from '../../components/UserButton/UserButton'\nimport ImageCarousel from '../../components/UI/ImageCarousel/ImageCarousel'\n\nconst Goal = props => {\n    const [data, setData] = useState({})\n    const { account } = props\n    useEffect(() => {\n        const pathParts = props.history.location.pathname.split('/')\n        if (pathParts.length > 3) {\n            const accountId = pathParts[2]\n            if (props.isAuthed && account._id === accountId) {\n                const goal = account.goals.find(\n                    item => item.itemId === pathParts[3]\n                )\n                setData({ profile: account, goal })\n            } else {\n                pullData(props, data, setData, { forceAuth: false }, data => {\n                    const friendData = {}\n                    for (let friend of data.friendData)\n                        friendData[friend._id] = friend\n\n                    props.setData({\n                        post: { [data.post._id]: data.post },\n                        friendData,\n                    })\n                })\n            }\n        }\n    }, [props.isAuthed])\n    if (!data.goal) return null\n    const { goal, profile } = data\n    props.setData({ currentPosts: goal.post })\n    if (goal) {\n        props.setPageTitle({ main: goal.name, sub: profile._id })\n    }\n    return goal ? (\n        <Card\n            title={\n                <span>\n                    Goal from <UserButton id={profile._id} /> goals\n                </span>\n            }\n            bordered={false}\n        >\n            <ImageCarousel images={goal.images} />\n\n            <h1>{goal.name}</h1>\n            <p style={{ whiteSpace: 'pre-wrap' }}>{goal.description}</p>\n            <Post\n                noStartMessage={true}\n                post={props.post[goal.post]}\n                account={props.account}\n                friendData={props.friendData}\n                showReplies={true}\n            />\n        </Card>\n    ) : null\n}\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        account: state.account,\n        post: state.post,\n        friendData: state.friendData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: data => {\n            dispatch(actions.setData(data))\n        },\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Goal)\n)\n","import React from 'react'\nimport { withRouter } from 'react-router-dom'\n\nimport Card from 'antd/es/card'\nimport UserButton from '../../components/UserButton/UserButton'\nimport ImageCarousel from '../../components/UI/ImageCarousel/ImageCarousel'\n\nconst ProgressCard = props => {\n    const { progress } = props\n    const { goal } = progress\n    return (\n        <Card\n            type=\"inner\"\n            style={{ width: '100%' }}\n            bordered={false}\n            title={\n                <div\n                    onClick={() =>\n                        props.history.push('/progresses/' + progress._id)\n                    }\n                    style={{\n                        display: 'flex',\n                        alignItems: 'center',\n                    }}\n                >\n                    {goal.images.length > 0 && (\n                        <div style={{ width: '50px', marginRight: '20px' }}>\n                            <ImageCarousel images={goal.images} size={50} />\n                        </div>\n                    )}\n                    {goal.name} -{' '}\n                    <UserButton id={progress.owner} noName={true} /> =&gt;{' '}\n                    <UserButton ids={progress.goal.users} group={true} />\n                </div>\n            }\n        />\n    )\n}\n\nexport default withRouter(ProgressCard)\n","import React from 'react'\n\nimport Select from 'antd/es/select'\nimport UserButton from '../UserButton/UserButton'\n\nexport default (account, friendData, value?, onSelect?) => (\n    <Select\n        mode=\"multiple\"\n        style={{ width: '100%' }}\n        placeholder=\"Please select\"\n        value={value}\n        onChange={onSelect}\n    >\n        {[\n            account,\n            ...account.friends\n                .filter(friend => friend.status === 'friend')\n                .map(friend => friendData[friend.friend]),\n        ].map(item => (\n            <Select.Option key={item._id}>\n                <UserButton id={item._id} noClick={true} />\n            </Select.Option>\n        ))}\n    </Select>\n)\n","import React, { useState } from 'react'\nimport Modal from 'antd/es/modal'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as wsActions from '../../websocketActions'\nimport Button from 'antd/es/button'\nimport Input from 'antd/es/input'\nimport InputNumber from 'antd/es/input-number'\nimport Form from 'antd/es/form'\nimport Select from 'antd/es/select'\n\nimport Upload from 'antd/es/upload'\nimport Divider from 'antd/es/divider'\nimport PlusOutlined from '@ant-design/icons/PlusOutlined'\nimport DeleteOutlined from '@ant-design/icons/DeleteOutlined'\nimport EditOutlined from '@ant-design/icons/EditOutlined'\n\nimport { uploadFile } from '../../utils/uploadFile'\nimport {\n    descriptionRules,\n    nameRules,\n    priceRules,\n} from '../../constants/fieldRules'\nimport connectionsSelect from '../EditGoalAndProgressForm/connectionsSelect'\nimport Descriptions from 'antd/es/descriptions'\nimport Popconfirm from 'antd/es/popconfirm'\nimport UserButton from '../UserButton/UserButton'\nimport { EllipsisOutlined } from '@ant-design/icons'\nimport Dropdown from 'antd/es/dropdown'\nimport Menu from 'antd/es/menu'\nimport Card from 'antd/es/card'\n\nconst Rewards = props => {\n    const [previewImage, setPreviewImage] = useState('')\n    const [previewReward, setPreviewReward] = useState()\n    const [editedReward, setEditedReward] = useState()\n    const [editedRewardIndex, setEditedRewardIndex] = useState()\n    const { account, friendData, readOnly, progress } = props\n    const rewardsGI = props.rewards.findIndex(\n        item => item.key === props.rewardKey\n    )\n\n    if (rewardsGI === -1 && props.setRewards)\n        props.setRewards([\n            ...props.rewards,\n            {\n                key: props.rewardKey,\n                rewards: [],\n            },\n        ])\n    return rewardsGI >= 0 ? (\n        <div>\n            <Form.Item label={props.label} key={props.rewardKey}>\n                <ol>\n                    {props.rewards[rewardsGI].rewards.map((item, index) => {\n                        return (\n                            <li key={index}>\n                                <Button\n                                    type=\"link\"\n                                    onClick={() => setPreviewReward(item)}\n                                >\n                                    {item.mode === 'simple'\n                                        ? item.simple\n                                        : item.mode === 'money'\n                                        ? item.money + ' (money)'\n                                        : item.mode === 'item'\n                                        ? item.itemName\n                                        : ''}\n                                </Button>\n                                <UserButton id={item.owner} noName={true} />{' '}\n                                =&gt;\n                                {item.for && item.for.length > 0 ? (\n                                    <UserButton id={item.for} noName={true} />\n                                ) : (\n                                    <span\n                                        style={{\n                                            fontWeight: 'bold',\n                                            marginLeft: '5px',\n                                        }}\n                                    >\n                                        All\n                                    </span>\n                                )}\n                                {item.owner === account._id && !readOnly && (\n                                    <>\n                                        <Dropdown\n                                            overlay={\n                                                <Menu>\n                                                    <Menu.Item\n                                                        onClick={() => {\n                                                            setEditedRewardIndex(\n                                                                index\n                                                            )\n                                                            setEditedReward(\n                                                                item\n                                                            )\n                                                        }}\n                                                    >\n                                                        Edit\n                                                    </Menu.Item>\n\n                                                    <Menu.Item\n                                                        onClick={() => {\n                                                            if (\n                                                                !window.confirm(\n                                                                    'Are you sure you want to delete this item?'\n                                                                )\n                                                            )\n                                                                return\n                                                            if (\n                                                                props.setRewards\n                                                            ) {\n                                                                const newRewards = [\n                                                                    ...props.rewards,\n                                                                ]\n                                                                newRewards[\n                                                                    rewardsGI\n                                                                ] = {\n                                                                    ...newRewards[\n                                                                        rewardsGI\n                                                                    ],\n                                                                    rewards: newRewards[\n                                                                        rewardsGI\n                                                                    ].rewards.filter(\n                                                                        (\n                                                                            item,\n                                                                            indexIn\n                                                                        ) =>\n                                                                            indexIn !==\n                                                                            index\n                                                                    ),\n                                                                }\n                                                                props.setRewards(\n                                                                    newRewards\n                                                                )\n                                                            } else {\n                                                                wsActions.deleteReward(\n                                                                    account._id,\n                                                                    progress._id,\n                                                                    props.rewardKey,\n                                                                    item.rewardId\n                                                                )\n                                                            }\n                                                        }}\n                                                    >\n                                                        Delete\n                                                    </Menu.Item>\n                                                </Menu>\n                                            }\n                                        >\n                                            <Button type=\"link\">\n                                                <EllipsisOutlined />\n                                            </Button>\n                                        </Dropdown>\n                                    </>\n                                )}\n                            </li>\n                        )\n                    })}\n                </ol>\n\n                {!readOnly && (\n                    <Button\n                        type=\"link\"\n                        onClick={() => {\n                            setEditedRewardIndex('new')\n                            setEditedReward({ mode: 'simple' })\n                        }}\n                    >\n                        <PlusOutlined />\n                        Add rewards\n                    </Button>\n                )}\n            </Form.Item>\n            <Modal\n                visible={editedReward}\n                title={\n                    editedReward === 'new' ? 'Add new reward' : 'Edit reward'\n                }\n                closable={true}\n                onCancel={() => setEditedReward()}\n                onOk={() => {\n                    let rewardToSave = {}\n                    if (editedReward.mode === 'money') {\n                        rewardToSave.money = editedReward.money\n                        rewardToSave.mode = editedReward.mode\n                        rewardToSave.for = editedReward.for\n                        rewardToSave.rewardId = editedReward.rewardId\n                    } else {\n                        rewardToSave = { ...editedReward, money: undefined }\n                    }\n                    rewardToSave.owner = account._id\n\n                    if (props.setRewards) {\n                        const newRewards = [...props.rewards]\n\n                        if (editedRewardIndex === 'new')\n                            newRewards[rewardsGI] = {\n                                ...newRewards[rewardsGI],\n                                rewards: [\n                                    ...newRewards[rewardsGI].rewards,\n                                    rewardToSave,\n                                ],\n                            }\n                        else\n                            newRewards[rewardsGI] = {\n                                ...newRewards[rewardsGI],\n                                rewards: newRewards[rewardsGI].rewards.map(\n                                    (item, index) => {\n                                        if (index === editedRewardIndex)\n                                            return rewardToSave\n                                        else return item\n                                    }\n                                ),\n                            }\n                        props.setRewards(newRewards)\n                        setEditedReward()\n                        setEditedRewardIndex()\n                    } else {\n                        wsActions.saveReward(\n                            account._id,\n                            progress._id,\n                            props.rewardKey,\n                            rewardToSave\n                        )\n                        setEditedReward()\n                        setEditedRewardIndex()\n                    }\n                }}\n                destroyOnClose={true}\n                okText=\"Save\"\n            >\n                {editedReward && (\n                    <>\n                        <Form.Item label=\"Reward type\">\n                            <Select\n                                placeholder=\"Type\"\n                                value={editedReward.mode}\n                                onSelect={value => {\n                                    setEditedReward({\n                                        ...editedReward,\n                                        mode: value,\n                                    })\n                                }}\n                                style={{ width: '100%' }}\n                            >\n                                <Select.Option key=\"simple\" value=\"simple\">\n                                    Simple reward\n                                </Select.Option>\n                                <Select.Option key=\"item\" value=\"item\">\n                                    Item reward\n                                </Select.Option>\n                                <Select.Option key=\"money\" value=\"money\">\n                                    Money reward\n                                </Select.Option>\n                            </Select>\n                        </Form.Item>\n                        <Form.Item label=\"Reward for\">\n                            {connectionsSelect(\n                                account,\n                                friendData,\n                                editedReward.for,\n                                value => {\n                                    setEditedReward({\n                                        ...editedReward,\n                                        for: value,\n                                    })\n                                }\n                            )}\n                            <p>(leave blank for all)</p>\n                        </Form.Item>\n                        <Divider type=\"horizontal\" />\n                        {editedReward.mode === 'simple' ? (\n                            <Form.Item\n                                label=\"Description\"\n                                rules={[\n                                    ...descriptionRules,\n                                    {\n                                        required: true,\n                                        min: 1,\n                                        whitespace: true,\n                                        message:\n                                            'Desription is too short. Minimal length is 1.',\n                                    },\n                                ]}\n                            >\n                                <Input.TextArea\n                                    value={editedReward.simple}\n                                    onChange={({ target: { value } }) =>\n                                        setEditedReward({\n                                            ...editedReward,\n                                            simple: value,\n                                        })\n                                    }\n                                    placeholder=\"Explain how you will reward\"\n                                />\n                            </Form.Item>\n                        ) : editedReward.mode === 'money' ? (\n                            <Form.Item label=\"Amount\" rules={priceRules}>\n                                <InputNumber\n                                    value={editedReward.money}\n                                    onChange={value => {\n                                        setEditedReward({\n                                            ...editedReward,\n                                            money: value,\n                                        })\n                                    }}\n                                />\n                            </Form.Item>\n                        ) : (\n                            <>\n                                <Form.Item label=\"Images\">\n                                    <Upload\n                                        listType=\"picture-card\"\n                                        fileList={(\n                                            editedReward.itemImages || []\n                                        ).map((url, index) => ({\n                                            url,\n                                            uid: index,\n                                        }))}\n                                        onPreview={file => {\n                                            setPreviewImage(file.url)\n                                        }}\n                                        onChange={({ fileList }) => {\n                                            setEditedReward({\n                                                ...editedReward,\n                                                itemImages: fileList.map(\n                                                    image => image.url\n                                                ),\n                                            })\n                                        }}\n                                        customRequest={({ file }) => {\n                                            uploadFile(\n                                                file,\n                                                800,\n                                                undefined,\n                                                url => {\n                                                    setEditedReward({\n                                                        ...editedReward,\n                                                        itemImages: [\n                                                            ...(editedReward.itemImages ||\n                                                                []),\n                                                            url,\n                                                        ],\n                                                    })\n                                                }\n                                            )\n                                        }}\n                                    >\n                                        {(editedReward.itemImages || [])\n                                            .length >= 8 ? null : (\n                                            <div>\n                                                <PlusOutlined />\n                                                <div className=\"ant-upload-text\">\n                                                    Upload\n                                                </div>\n                                            </div>\n                                        )}\n                                    </Upload>\n                                </Form.Item>\n                                <Form.Item label=\"Name\" rules={nameRules}>\n                                    <Input\n                                        value={editedReward.itemName}\n                                        onChange={({ target: { value } }) =>\n                                            setEditedReward({\n                                                ...editedReward,\n                                                itemName: value,\n                                            })\n                                        }\n                                    />\n                                </Form.Item>\n                                <Form.Item\n                                    label=\"Description\"\n                                    rules={descriptionRules}\n                                >\n                                    <Input.TextArea\n                                        value={editedReward.itemDescription}\n                                        onChange={({ target: { value } }) =>\n                                            setEditedReward({\n                                                ...editedReward,\n                                                itemDescription: value,\n                                            })\n                                        }\n                                    />\n                                </Form.Item>\n                            </>\n                        )}\n                    </>\n                )}\n            </Modal>\n            <Modal\n                visible={previewImage}\n                footer={null}\n                onCancel={() => setPreviewImage('')}\n            >\n                <img\n                    alt=\"example\"\n                    style={{ width: '100%' }}\n                    src={previewImage}\n                />\n            </Modal>\n            <Modal\n                visible={previewReward}\n                footer={null}\n                onCancel={() => setPreviewReward()}\n                title=\"Reward details\"\n            >\n                {previewReward ? (\n                    <>\n                        {previewReward.itemImages &&\n                            previewReward.itemImages.map((image, index) => (\n                                <span\n                                    key={index}\n                                    onClick={() => setPreviewImage(image)}\n                                >\n                                    <Card\n                                        type=\"inner\"\n                                        style={{\n                                            width: 200,\n                                            display: 'inline-block',\n                                        }}\n                                        hoverable\n                                        cover={\n                                            <div\n                                                style={{\n                                                    backgroundImage:\n                                                        'url(' + image + ')',\n                                                    height: 200,\n                                                    width: 200,\n                                                    backgroundSize: 'cover',\n                                                }}\n                                            />\n                                        }\n                                    />\n                                </span>\n                            ))}\n\n                        <Descriptions\n                            title=\"Reward description\"\n                            bordered\n                            column={{\n                                xxl: 4,\n                                xl: 3,\n                                lg: 3,\n                                md: 3,\n                                sm: 2,\n                                xs: 1,\n                            }}\n                        >\n                            {previewReward.mode === 'item' && (\n                                <Descriptions.Item label=\"Name\">\n                                    {previewReward.itemName}\n                                </Descriptions.Item>\n                            )}\n                            {previewReward.mode === 'item' && (\n                                <Descriptions.Item label=\"Description\">\n                                    <p style={{ whiteSpace: 'pre-wrap' }}>\n                                        {previewReward.itemDescription}\n                                    </p>\n                                </Descriptions.Item>\n                            )}\n                            {previewReward.mode === 'simple' && (\n                                <Descriptions.Item label=\"Description\">\n                                    <p style={{ whiteSpace: 'pre-wrap' }}>\n                                        {previewReward.simple}\n                                    </p>\n                                </Descriptions.Item>\n                            )}\n                            {previewReward.mode === 'money' && (\n                                <Descriptions.Item label=\"Money\">\n                                    {previewReward.money}\n                                </Descriptions.Item>\n                            )}\n                        </Descriptions>\n                    </>\n                ) : null}\n            </Modal>\n        </div>\n    ) : null\n}\n\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        account: state.account,\n        friendData: state.friendData,\n        progress: state.progress,\n    }\n}\n\nexport default withRouter(connect(mapStateToProps)(Rewards))\n","import { webSocket } from '../containers/ConnectWebsocket/ConnectWebsocket'\n\nexport const changeStage = (data, value, milestoneId) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'changeStage',\n                milestoneId,\n                value,\n                progressId: data.progress._id,\n                accountId: data.account._id,\n            })\n        )\n    }\n}\n\nexport const leaveProgress = data => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'leaveProgress',\n                progressId: data.progress._id,\n                accountId: data.account._id,\n            })\n        )\n    }\n}\n\nexport const createGroup = (accountId, progressId) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'createGroup',\n                progressId,\n                accountId,\n            })\n        )\n    }\n}\n\nexport const getFriendsData = (progress, accountFriends) => {\n    if (webSocket && webSocket.readyState === 1) {\n        if (progress) {\n            let accountIds = [\n                progress.owner,\n                progress.worker,\n                ...progress.goal.supporters,\n                ...progress.goal.experts,\n                ...accountFriends,\n            ]\n\n            accountIds = [...new Set(accountIds)]\n\n            webSocket.send(\n                JSON.stringify({\n                    messageCode: 'getFriendsData',\n                    accountIds,\n                })\n            )\n        }\n    }\n}\n\nexport const editGoalInProgress = (data, value) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'editGoalInProgress',\n                progressId: data.progress._id,\n                accountId: data.account._id,\n                value,\n            })\n        )\n    }\n}\n\nexport const startProgress = (accountId, value, inGroup) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'startProgress',\n                accountId,\n                value,\n                inGroup,\n            })\n        )\n    }\n}\n\nexport const deleteReward = (accountId, progressId, rewardKey, rewardId) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'deleteReward',\n                accountId,\n                progressId,\n                rewardKey,\n                rewardId,\n            })\n        )\n    }\n}\n\nexport const saveReward = (accountId, progressId, rewardKey, reward) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'saveReward',\n                accountId,\n                progressId,\n                rewardKey,\n                reward,\n            })\n        )\n    }\n}\n","import React, { useState } from 'react'\nimport Modal from 'antd/es/modal'\n\nimport Button from 'antd/es/button'\nimport Input from 'antd/es/input'\nimport Form from 'antd/es/form'\nimport Switch from 'antd/es/switch'\nimport Collapse from 'antd/es/collapse'\nimport Divider from 'antd/es/divider'\nimport Upload from 'antd/es/upload'\nimport PlusOutlined from '@ant-design/icons/PlusOutlined'\n\nimport { uploadFile } from '../../utils/uploadFile'\nimport Rewards from '../Rewards/Rewards'\nimport { nameRules, descriptionRules } from '../../constants/fieldRules'\nimport connectionsSelect from './connectionsSelect'\nimport Dropdown from 'antd/es/dropdown/dropdown'\nimport { EllipsisOutlined } from '@ant-design/icons'\nimport Menu from 'antd/es/menu'\n\nconst EditGoalAndProgressForm = props => {\n    const { goal, account, friendData } = props\n\n    const [milestones, setMilestones] = useState(\n        (goal && goal.milestones) || [\n            { name: 'Start', key: 'start' },\n            { name: 'Finish', key: 'finish' },\n        ]\n    )\n\n    const [images, setImages] = useState(\n        (goal &&\n            goal.images.map((url, index) => ({\n                url,\n                uid: index,\n            }))) ||\n            []\n    )\n    const [withMilestones, setWithMilestones] = useState(\n        goal && goal.withMilestones\n    )\n    const [previewImage, setPreviewImage] = useState('')\n    const [newTabIndex, setNewTabIndex] = useState(\n        (goal && goal.newTabIndex) || 2\n    )\n\n    const [rewards, setRewards] = useState((goal && goal.rewardsGroups) || [])\n\n    const onFinish = value => {\n        const milestonesValues = []\n        for (let milestone of milestones) {\n            milestonesValues.push({\n                ...value[milestone.key],\n                key: milestone.key,\n                name: milestone.name,\n            })\n        }\n\n        props.onFinish({\n            ...value,\n            images: images.map(image => image.url),\n            milestones,\n            milestonesValues,\n            newTabIndex,\n            rewardsGroups: rewards,\n        })\n    }\n\n    const addMilestone = milestone => {\n        const newPanes = [...milestones]\n        const newKey = `mile${newTabIndex}`\n        if (typeof milestone !== 'undefined') {\n            const indexOfMile = milestones.findIndex(\n                mile => mile.key === milestone\n            )\n            if (indexOfMile < 0) return\n            newPanes.splice(indexOfMile + 1, 0, {\n                key: newKey,\n                name: 'New milestone',\n            })\n        } else {\n            if (newPanes.find(item => item.key === 'finish'))\n                newPanes.splice(newPanes.length - 1, 0, {\n                    key: newKey,\n                    name: 'New milestone',\n                })\n            else\n                newPanes.push({\n                    key: newKey,\n                    name: 'New milestone',\n                })\n        }\n        setMilestones(newPanes)\n        setNewTabIndex(newTabIndex + 1)\n        form.setFieldsValue({\n            [newKey]: { key: newKey, name: 'New milestone' },\n        })\n    }\n\n    const layout = {\n        labelCol: { span: 8 },\n        wrapperCol: { span: 16 },\n    }\n    const tailLayout = {\n        wrapperCol: { offset: 8, span: 16 },\n    }\n\n    const [form] = Form.useForm()\n\n    const normFile = e => {\n        if (Array.isArray(e)) {\n            return e\n        }\n        return e && e.fileList.map(image => image.url)\n    }\n\n    const connections = connectionsSelect(account, friendData)\n\n    const MilestoneControls = props => {\n        const moveMilestoneUp = () => {\n            const indexOfMile = milestones.findIndex(\n                mile => mile.key === props.milestone\n            )\n            if (indexOfMile <= 0) return\n            const newMilestones = [...milestones]\n            newMilestones.splice(\n                indexOfMile - 1,\n                0,\n                newMilestones.splice(indexOfMile, 1)[0]\n            )\n            setMilestones(newMilestones)\n        }\n\n        const moveMilestoneDown = () => {\n            const indexOfMile = milestones.findIndex(\n                mile => mile.key === props.milestone\n            )\n            if (indexOfMile < 0 || indexOfMile >= milestones.length - 1) return\n            const newMilestones = [...milestones]\n            newMilestones.splice(\n                indexOfMile + 1,\n                0,\n                newMilestones.splice(indexOfMile, 1)[0]\n            )\n            setMilestones(newMilestones)\n        }\n\n        const addMilestoneBelow = () => {\n            addMilestone(props.milestone)\n        }\n\n        const deleteMilestone = () => {\n            const newPanes = milestones.filter(\n                pane => pane.key !== props.milestone\n            )\n            setMilestones(newPanes)\n        }\n\n        return (\n            <Dropdown\n                overlay={\n                    <Menu\n                        onClick={({ domEvent }) => domEvent.stopPropagation()}\n                    >\n                        {!props.finish && (\n                            <Menu.Item key=\"0\" onClick={addMilestoneBelow}>\n                                Add a milestone below\n                            </Menu.Item>\n                        )}\n                        {!props.finish && !props.start && (\n                            <Menu.Item key=\"1\" onClick={moveMilestoneUp}>\n                                Move up\n                            </Menu.Item>\n                        )}\n                        {!props.finish && !props.start && (\n                            <Menu.Item key=\"2\" onClick={moveMilestoneDown}>\n                                Move down\n                            </Menu.Item>\n                        )}\n                        <Menu.Divider />\n                        <Menu.Item\n                            key=\"3\"\n                            danger={true}\n                            onClick={deleteMilestone}\n                        >\n                            Delete\n                        </Menu.Item>\n                    </Menu>\n                }\n                trigger={['click']}\n            >\n                <a\n                    className=\"ant-dropdown-link\"\n                    onClick={e => {\n                        e.preventDefault()\n                        e.stopPropagation()\n                    }}\n                >\n                    <EllipsisOutlined />\n                </a>\n            </Dropdown>\n        )\n    }\n    return !props.goalId || goal ? (\n        <>\n            <Form\n                form={form}\n                name=\"dynamic_form_nest_item\"\n                onFinish={onFinish}\n                autoComplete=\"off\"\n                initialValues={\n                    goal || {\n                        name: 'New achievement',\n                        start: {\n                            name: 'Start',\n                            key: 'start',\n                            description: 'This is the start of the progress.',\n                        },\n                        finish: {\n                            name: 'Finish',\n                            key: 'finish',\n                            description: 'This is the finish of the progress.',\n                        },\n                    }\n                }\n                {...layout}\n                onValuesChange={changedValues => {\n                    for (let attr in changedValues) {\n                        const index = milestones.findIndex(\n                            item => item.key === attr\n                        )\n\n                        if (index > -1) {\n                            if (changedValues[attr].name) {\n                                const newMilestones = [...milestones]\n                                newMilestones[index] = {\n                                    ...newMilestones[index],\n                                    name: changedValues[attr].name,\n                                }\n                                setMilestones(newMilestones)\n                            }\n                        }\n                        if (attr === 'withMilestones') {\n                            setWithMilestones(changedValues[attr])\n                        }\n                    }\n                }}\n            >\n                <Form.Item\n                    name=\"images\"\n                    label=\"Images\"\n                    valuePropName=\"images\"\n                    getValueFromEvent={normFile}\n                >\n                    <Upload\n                        listType=\"picture-card\"\n                        fileList={images.map((image, index) => ({\n                            ...image,\n                            uid: index,\n                        }))}\n                        onPreview={file => {\n                            setPreviewImage(file.url)\n                        }}\n                        onChange={({ fileList }) => setImages(fileList)}\n                        customRequest={({ file }) => {\n                            uploadFile(file, 800, undefined, url => {\n                                setImages(\n                                    [...images, { url }].map(\n                                        (image, index) => ({\n                                            ...image,\n                                            uid: index,\n                                        })\n                                    )\n                                )\n                            })\n                        }}\n                    >\n                        {images.length >= 8 ? null : (\n                            <div>\n                                <PlusOutlined />\n                                <div className=\"ant-upload-text\">Upload</div>\n                            </div>\n                        )}\n                    </Upload>\n                </Form.Item>\n                <Form.Item label=\"Name\" name=\"name\" rules={nameRules}>\n                    <Input />\n                </Form.Item>\n                <Form.Item\n                    label=\"Description\"\n                    name=\"description\"\n                    rules={descriptionRules}\n                >\n                    <Input.TextArea\n                        autoSize={{ minRows: 4, maxRows: 20 }}\n                        placeholder=\"Write a few words about why this goal is important and how to achieve it.\"\n                    />\n                </Form.Item>\n\n                <Form.Item label=\"Achievers\" name=\"users\">\n                    {connections}\n                </Form.Item>\n\n                <Form.Item label=\"Experts\" name=\"experts\">\n                    {connections}\n                </Form.Item>\n                <Form.Item label=\"Supporters\" name=\"supporters\">\n                    {connections}\n                </Form.Item>\n\n                <Divider>Milestones</Divider>\n                <Collapse expandIconPosition=\"right\">\n                    {[\n                        ...(milestones.find(item => item.key === 'start')\n                            ? [milestones.find(item => item.key === 'start')]\n                            : []),\n                        ...milestones.filter(\n                            item =>\n                                item.key !== 'start' && item.key !== 'finish'\n                        ),\n                        ...(milestones.find(item => item.key === 'finish')\n                            ? [milestones.find(item => item.key === 'finish')]\n                            : []),\n                    ].map(milestone => {\n                        return (\n                            <Collapse.Panel\n                                header={\n                                    form.getFieldValue([\n                                        milestone.key,\n                                        'name',\n                                    ]) || milestone.name\n                                }\n                                key={milestone.key}\n                                extra={\n                                    <MilestoneControls\n                                        milestone={milestone.key}\n                                        start={milestone.key === 'start'}\n                                        finish={milestone.key === 'finish'}\n                                    />\n                                }\n                            >\n                                <Form.Item\n                                    label=\"Name\"\n                                    name={[milestone.key, 'name']}\n                                    rules={nameRules}\n                                >\n                                    <Input />\n                                </Form.Item>\n                                <Form.Item\n                                    label=\"Description\"\n                                    name={[milestone.key, 'description']}\n                                    rules={descriptionRules}\n                                >\n                                    <Input.TextArea placeholder=\"Write a few words about why this milestone is important and how to achieve it.\" />\n                                </Form.Item>\n                                <Rewards\n                                    rewardKey={milestone.key}\n                                    label=\"Rewards\"\n                                    rewards={rewards}\n                                    setRewards={setRewards}\n                                />\n                            </Collapse.Panel>\n                        )\n                    })}\n                </Collapse>\n                <Button type=\"link\" onClick={() => addMilestone()}>\n                    <PlusOutlined /> Add a new milestone\n                </Button>\n\n                <Form.Item {...tailLayout}>\n                    <Button type=\"primary\" htmlType=\"submit\" size=\"large\">\n                        Save\n                    </Button>\n                </Form.Item>\n            </Form>\n            <Modal\n                visible={previewImage}\n                footer={null}\n                onCancel={() => setPreviewImage('')}\n            >\n                <img\n                    alt=\"example\"\n                    style={{ width: '100%' }}\n                    src={previewImage}\n                />\n            </Modal>\n        </>\n    ) : null\n}\n\nexport default EditGoalAndProgressForm\n","import React from 'react'\nimport * as wsActions from '../../websocketActions'\n\nimport EditGoalAndProgressForm from '../../components/EditGoalAndProgressForm/EditGoalAndProgressForm'\n\nconst AddProgress = props =>\n    props.account._id ? (\n        <EditGoalAndProgressForm\n            onFinish={value => {\n                wsActions.startProgress(props.account._id, value, props.inGroup)\n                props.setStartProgressVisible(false)\n            }}\n            account={props.account}\n            friendData={props.friendData}\n        />\n    ) : null\n\nexport default AddProgress\n","import React from 'react'\nimport { withRouter } from 'react-router-dom'\n\nimport Card from 'antd/es/card'\n\nconst { Meta } = Card\n\nconst GroupCard = props => {\n    const { group } = props\n\n    return (\n        <div\n            style={{\n                display: 'inline-block',\n                margin: '4px 8px',\n            }}\n            onClick={() => props.history.push('/groups/' + group._id)}\n        >\n            <Card\n                type=\"inner\"\n                style={{\n                    width: 200,\n                }}\n                hoverable\n                cover={\n                    <div\n                        onClick={() =>\n                            props.history.push('/groups/' + group._id)\n                        }\n                        style={{\n                            backgroundImage:\n                                'url(' +\n                                (group.images &&\n                                    group.images.length > 0 &&\n                                    group.images[0]) +\n                                ')',\n                            height: 200,\n                            width: 200,\n                            backgroundSize: 'cover',\n                        }}\n                    />\n                }\n            >\n                <Meta title={group.name} />\n            </Card>\n        </div>\n    )\n}\n\nexport default withRouter(GroupCard)\n","import React, { useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport Tabs from 'antd/es/tabs'\nimport Button from 'antd/es/button'\nimport Empty from 'antd/es/empty'\nimport ProgressCard from './ProgressCard'\nimport AddCard from '../../components/AddCard/AddCard'\nimport Modal from 'antd/es/modal/Modal'\nimport AddProgress from './AddProgress'\nimport GroupCard from './GroupCard'\n\nconst { TabPane } = Tabs\n\nconst Progresses = props => {\n    const { fromProfile, progressData, account, groupData, profile } = props\n\n    const { progresses, groups } = fromProfile ? profile : account\n    const [startProgressVisible, setStartProgressVisible] = useState(false)\n    if (!fromProfile) props.setPageTitle({ main: 'Progresses', sub: '' })\n    let loadedProgresses, loadedGroups\n    if (progresses) {\n        loadedProgresses = progresses\n            .filter(item => progressData[item])\n            .map(item => progressData[item])\n        loadedGroups = groups\n            .filter(item => groupData[item] && groupData[item].active)\n            .map(item => groupData[item])\n    }\n\n    const editGoal = fromProfile ? null : (\n        <Modal\n            title=\"Add progress\"\n            visible={startProgressVisible}\n            maskClosable\n            closable\n            onCancel={() => setStartProgressVisible(false)}\n            width=\"100%\"\n            footer={\n                <Button\n                    key=\"back\"\n                    onClick={() => setStartProgressVisible(false)}\n                >\n                    Close\n                </Button>\n            }\n            destroyOnClose={true}\n        >\n            <AddProgress\n                setStartProgressVisible={setStartProgressVisible}\n                account={account}\n                friendData={props.friendData}\n            />\n        </Modal>\n    )\n\n    const innerTabs =\n        loadedProgresses && loadedGroups ? (\n            <>\n                <TabPane tab=\"Progresses\" key=\"progresses\">\n                    {!fromProfile && (\n                        <>\n                            <AddCard\n                                title=\"Start a new progress\"\n                                sub=\"Rich your goals or help others!\"\n                                action={() => {\n                                    setStartProgressVisible(true)\n                                }}\n                            />\n                            {editGoal}\n                        </>\n                    )}\n                    {loadedProgresses.map((progress, index) => (\n                        <ProgressCard key={index} progress={progress} />\n                    ))}\n                </TabPane>\n                <TabPane tab=\"Groups\" key=\"groups\">\n                    {loadedGroups.length > 0 ? (\n                        loadedGroups.map((group, index) => (\n                            <GroupCard key={index} group={group} />\n                        ))\n                    ) : (\n                        <Empty\n                            imageStyle={{\n                                height: 160,\n                            }}\n                            description={\n                                <span>\n                                    Here you will find your groups. Groups can\n                                    be created in existing progresses.\n                                </span>\n                            }\n                        />\n                    )}\n                </TabPane>\n            </>\n        ) : null\n\n    return loadedProgresses && loadedGroups ? (\n        <Tabs\n            style={{\n                background: 'transparent',\n                boxShadow: 'none',\n                margin: '0',\n                marginTop: '-15px',\n            }}\n        >\n            {innerTabs}\n        </Tabs>\n    ) : null\n\n    // ) : (\n    //     <Empty\n    //         imageStyle={{\n    //             height: 160,\n    //         }}\n    //         description={\n    //             <span>\n    //                 This user has no progresses. You can create a goal and\n    //                 invite this user.\n    //             </span>\n    //         }\n    //     />\n    // )\n}\n\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n        profile: state.profile,\n        isAuthed: state.isAuthed,\n        progressData: state.progressData,\n        groupData: state.groupData,\n        friendData: state.friendData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: (data, pulledFrom) =>\n            dispatch(actions.setData(data, pulledFrom)),\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n        tryAuth: (props, forceAuth) =>\n            dispatch(actions.tryAuth(props, forceAuth)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Progresses)\n)\n","import React from 'react'\nimport Checkbox from 'antd/es/checkbox'\nimport Descriptions from 'antd/es/descriptions'\n\nimport * as wsActions from '../../websocketActions'\nimport Rewards from '../../components/Rewards/Rewards'\nimport UserButton from '../../components/UserButton/UserButton'\nimport Collapse from 'antd/es/collapse'\nimport Badge from 'antd/es/badge'\nimport Typography from 'antd/es/typography'\nimport Divider from 'antd/es/divider'\n\nconst ActivityTable = props => {\n    const { progress, account } = props\n    const { goal } = progress\n    const { rewardsGroups } = goal\n\n    const renderCheckbox = ({ checked, milestoneId, disabled }) => (\n        <Checkbox\n            checked={checked}\n            onChange={e =>\n                wsActions.changeStage(props, e.target.checked, milestoneId)\n            }\n            disabled={disabled}\n        />\n    )\n\n    const getCheckboxStatus = (id, stage, milestone) => {\n        return {\n            checked: stage.approvedBy.find(item => item.accountId === id),\n            milestoneId: milestone.key,\n            disabled: id !== account._id,\n        }\n    }\n\n    return (\n        <Collapse\n            expandIconPosition=\"right\"\n            style={{ marginBottom: '50px' }}\n            destroyInactivePanel={true}\n        >\n            {goal.milestonesValues.map(milestone => {\n                const stage = progress.stages.find(\n                    stage => stage.milestoneId === milestone.key\n                ) || { approvedBy: [] }\n\n                const experts = goal.experts.map(expert => (\n                    <Descriptions.Item\n                        label={\n                            <>\n                                <UserButton\n                                    id={expert}\n                                    noAva={true}\n                                    span={true}\n                                />{' '}\n                                {' (expert)'}\n                            </>\n                        }\n                    >\n                        {renderCheckbox(\n                            getCheckboxStatus(expert, stage, milestone)\n                        )}\n                    </Descriptions.Item>\n                ))\n\n                const users = goal.users.map(user => (\n                    <Descriptions.Item\n                        label={\n                            <>\n                                <UserButton\n                                    id={user}\n                                    noAva={true}\n                                    span={true}\n                                />{' '}\n                                {' (achiever)'}\n                            </>\n                        }\n                    >\n                        {renderCheckbox(\n                            getCheckboxStatus(user, stage, milestone)\n                        )}\n                    </Descriptions.Item>\n                ))\n\n                const owner = [\n                    <Descriptions.Item\n                        label={\n                            <>\n                                <UserButton\n                                    id={progress.owner}\n                                    noAva={true}\n                                    span={true}\n                                />{' '}\n                                {' (owner)'}\n                            </>\n                        }\n                    >\n                        {renderCheckbox(\n                            getCheckboxStatus(progress.owner, stage, milestone)\n                        )}\n                    </Descriptions.Item>,\n                ]\n                return (\n                    <Collapse.Panel\n                        header={\n                            <Badge\n                                color={stage.status ? 'green' : 'blue'}\n                                text={milestone.name}\n                            />\n                        }\n                        key={milestone.key}\n\n                        // extra={}\n                    >\n                        <Divider style={{ marginTop: '0px', fontSize: '15px' }}>\n                            Status\n                        </Divider>\n\n                        <Descriptions\n                            bordered\n                            column={{\n                                xxl: 4,\n                                xl: 3,\n                                lg: 3,\n                                md: 3,\n                                sm: 2,\n                                xs: 1,\n                            }}\n                        >\n                            <Descriptions.Item label=\"Current status\">\n                                {stage.status ? (\n                                    <Badge\n                                        status=\"success\"\n                                        text=\"Is complete\"\n                                    />\n                                ) : (\n                                    <Badge\n                                        status=\"processing\"\n                                        text=\"In process\"\n                                    />\n                                )}\n                            </Descriptions.Item>\n                            {users}\n                            {owner}\n                            {experts}\n                        </Descriptions>\n                        {milestone.description && (\n                            <>\n                                <Divider style={{ fontSize: '15px' }}>\n                                    Description\n                                </Divider>\n                                <Typography.Paragraph\n                                    ellipsis={{\n                                        rows: 3,\n                                        expandable: true,\n                                        symbol: 'more',\n                                    }}\n                                    style={{ whiteSpace: 'pre-wrap' }}\n                                >\n                                    {milestone.description}\n                                </Typography.Paragraph>\n                            </>\n                        )}\n\n                        {stage.status && (\n                            <>\n                                <Divider style={{ fontSize: '15px' }}>\n                                    Paid rewards\n                                </Divider>\n\n                                <Rewards\n                                    rewardKey={1}\n                                    rewards={[{ rewards: stage.paid, key: 1 }]}\n                                    readOnly={true}\n                                />\n                            </>\n                        )}\n                        <Divider style={{ fontSize: '15px' }}>Rewards</Divider>\n                        <Rewards\n                            rewardKey={milestone.key}\n                            rewards={rewardsGroups}\n                        />\n                    </Collapse.Panel>\n                )\n            })}\n        </Collapse>\n    )\n}\nexport default ActivityTable\n","import React from 'react'\n\nimport * as wsActions from '../../websocketActions'\nimport EditGoalAndProgressForm from '../../components/EditGoalAndProgressForm/EditGoalAndProgressForm'\n\nconst EditProgress = props => {\n    const { progress, account, state, setState, friendData } = props\n\n    const milestonesValues = {}\n    for (let milestone of progress.goal.milestonesValues) {\n        milestonesValues[milestone.key] = milestone\n    }\n    const goal = { ...progress.goal, ...milestonesValues }\n\n    const onFinish = value => {\n        wsActions.editGoalInProgress(props, value)\n        setState({ ...state, editProgressOpen: false })\n    }\n\n    return goal ? (\n        <EditGoalAndProgressForm\n            goal={goal}\n            onFinish={onFinish}\n            account={account}\n            friendData={friendData}\n        />\n    ) : null\n}\n\nexport default EditProgress\n","import React from 'react'\nimport { withRouter } from 'react-router-dom'\nimport Button from 'antd/es/button'\nimport Divider from 'antd/es/divider'\nimport Modal from 'antd/es/modal'\n\nimport Descriptions from 'antd/es/descriptions'\n\nconst { Item } = Descriptions\n\nimport * as wsActions from '../../websocketActions'\nimport ActivityTable from './ActivityTable'\nimport EditProgress from './EditProgress'\nimport Popconfirm from 'antd/es/popconfirm'\nimport Typography from 'antd/es/typography'\nimport UserButton from '../../components/UserButton/UserButton'\nimport ImageCarousel from '../../components/UI/ImageCarousel/ImageCarousel'\n\nconst Activity = props => {\n    const { account, progress, state, setState, friendData } = props\n    const { goal } = progress\n    return goal ? (\n        <>\n            {goal.images.length > 0 && <ImageCarousel images={goal.images} />}\n\n            <h1>{goal.name}</h1>\n            <Typography.Paragraph\n                ellipsis={{\n                    rows: 3,\n                    expandable: true,\n                    symbol: 'more',\n                }}\n                style={{ whiteSpace: 'pre-wrap' }}\n            >\n                {goal.description}\n            </Typography.Paragraph>\n\n            <Descriptions\n                bordered\n                column={{ xxl: 4, xl: 3, lg: 3, md: 3, sm: 2, xs: 1 }}\n            >\n                <Item label=\"Status\">{progress.status}</Item>\n                <Item label=\"Worker\">\n                    {goal.users && <UserButton ids={goal.users} group={true} />}\n                </Item>\n                <Item label=\"Owner\">\n                    <UserButton id={progress.owner} noName={true} />\n                </Item>\n                <Item label=\"Supporters\">\n                    {goal.supporters && (\n                        <UserButton ids={goal.supporters} group={true} />\n                    )}\n                </Item>\n                <Item label=\"Experts\">\n                    {goal.experts && (\n                        <UserButton ids={goal.experts} group={true} />\n                    )}\n                </Item>\n            </Descriptions>\n            <Divider orientation=\"center\" type=\"horizontal\">\n                Milestones\n            </Divider>\n            <ActivityTable\n                progress={progress}\n                account={account}\n                state={state}\n                setState={setState}\n            />\n            {account._id === progress.owner && (\n                <Button\n                    style={{ margin: '0px 20px 50px 0px' }}\n                    type=\"primary\"\n                    onClick={() => {\n                        setState({ ...state, editProgressOpen: true })\n                    }}\n                >\n                    Edit progress\n                </Button>\n            )}\n            {account._id === progress.owner && (\n                <Popconfirm\n                    title=\"Create a group if you want to have more similar prgresses with the same people.\"\n                    onConfirm={() =>\n                        wsActions.createGroup(account._id, progress._id)\n                    }\n                >\n                    <Button\n                        style={{ margin: '0px 20px 50px 0px' }}\n                        type=\"primary\"\n                    >\n                        Create a group\n                    </Button>\n                </Popconfirm>\n            )}\n            {account.progresses &&\n                account.progresses.includes(progress._id.toString()) && (\n                    <Button\n                        danger={true}\n                        onClick={() => {\n                            wsActions.leaveProgress(props)\n                        }}\n                    >\n                        Leave the progress\n                    </Button>\n                )}\n\n            <Modal\n                visible={state.editProgressOpen}\n                footer={null}\n                onCancel={() => setState({ ...state, editProgressOpen: false })}\n                closable={true}\n                destroyOnClose={true}\n                width=\"100%\"\n            >\n                <EditProgress\n                    progress={progress}\n                    account={account}\n                    state={state}\n                    setState={setState}\n                    friendData={friendData}\n                />\n            </Modal>\n        </>\n    ) : null\n}\n\nexport default withRouter(Activity)\n","import React, { useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport Button from 'antd/es/button'\nimport Comment from 'antd/es/comment'\nimport Avatar from 'antd/es/avatar'\nimport Input from 'antd/es/input'\nimport Form from 'antd/es/form'\nimport Upload from 'antd/es/upload'\nimport PictureOutlined from '@ant-design/icons/PictureOutlined'\nimport LoadingOutlined from '@ant-design/icons/LoadingOutlined'\nimport SendOutlined from '@ant-design/icons/SendOutlined'\nimport { uploadFile } from '../../utils/uploadFile'\nimport * as wsActions from '../../websocketActions'\nimport getAvatar from '../../utils/getAvatar'\nimport { messageRules } from '../../constants/fieldRules'\nimport {\n    PlusOutlined,\n    CloseCircleFilled,\n    PictureFilled,\n} from '@ant-design/icons'\nimport Modal from 'antd/es/modal/Modal'\n\nconst AddPost = props => {\n    const [previewImage, setPreviewImage] = useState('')\n    const [imageLoading, setImageLoading] = useState(false)\n    const [images, setImages] = useState([])\n\n    const { parent, account, parentType } = props\n\n    const [messageText, setMessageText] = useState(\n        props.content ||\n            (props.replyToUser ? '@' + props.replyToUser + ' ' : '')\n    )\n\n    const uploadImage = file => {\n        uploadFile(file, 800, undefined, url => {\n            setImages([...images, url])\n        })\n    }\n    return account._id ? (\n        <div\n            style={{\n                background: '#fff',\n                padding: '0px 10px',\n                bottom: '0px',\n                left: '0px',\n                zIndex: 1000,\n            }}\n        >\n            <h2>Post something new</h2>\n            <Comment\n                avatar={<Avatar src={getAvatar(account._id, account.image)} />}\n                content={\n                    <>\n                        <Form.Item rules={messageRules}>\n                            <Input.TextArea\n                                autoSize={{\n                                    minRows: 1,\n                                    maxRows: 3,\n                                }}\n                                rows={1}\n                                onChange={e => setMessageText(e.target.value)}\n                                value={messageText}\n                            />\n                        </Form.Item>\n                        {images.length > 0 && (\n                            <Form.Item style={{ margin: 0 }}>\n                                <Upload\n                                    listType=\"picture-card\"\n                                    fileList={images.map((image, index) => ({\n                                        url: image,\n                                        uid: index,\n                                    }))}\n                                    onPreview={file => {\n                                        setPreviewImage(file.url)\n                                    }}\n                                    onChange={({ fileList }) =>\n                                        setImages(\n                                            fileList.map(image => image.url)\n                                        )\n                                    }\n                                    customRequest={({ file }) => {\n                                        uploadImage(file)\n                                    }}\n                                >\n                                    {images.length >= 8 ? null : (\n                                        <div>\n                                            <PlusOutlined />\n                                            <div className=\"ant-upload-text\">\n                                                Upload\n                                            </div>\n                                        </div>\n                                    )}\n                                </Upload>\n                            </Form.Item>\n                        )}\n                        <Form.Item>\n                            <Button\n                                htmlType=\"submit\"\n                                onClick={() => {\n                                    wsActions.addPost(\n                                        account._id,\n                                        parent,\n                                        parentType,\n                                        messageText,\n                                        images\n                                    )\n                                    setMessageText('')\n                                    setImages([])\n                                    if (props.onSend) props.onSend()\n                                }}\n                                icon={<SendOutlined />}\n                                type=\"text\"\n                            >\n                                Send\n                            </Button>\n                            <Upload\n                                showUploadList={false}\n                                customRequest={({ file }) => {\n                                    if (images.length > 8) {\n                                        message.warning(\n                                            'You can not attach more than 8 images.'\n                                        )\n                                        return\n                                    }\n                                    setImageLoading(true)\n                                    uploadFile(file, 800, undefined, url => {\n                                        setImageLoading(false)\n                                        setImages([...images, url])\n                                    })\n                                }}\n                            >\n                                <Button\n                                    type=\"text\"\n                                    icon={\n                                        imageLoading ? (\n                                            <LoadingOutlined />\n                                        ) : (\n                                            <PictureFilled />\n                                        )\n                                    }\n                                >\n                                    Image\n                                </Button>\n                            </Upload>\n                            {messageText || images.length ? (\n                                <Button\n                                    onClick={() => {\n                                        setMessageText('')\n                                        setImages([])\n                                    }}\n                                    icon={<CloseCircleFilled />}\n                                    type=\"text\"\n                                >\n                                    Cancel\n                                </Button>\n                            ) : null}\n                        </Form.Item>\n                    </>\n                }\n            />\n            <Modal\n                visible={previewImage}\n                footer={null}\n                onCancel={() => setPreviewImage('')}\n            >\n                <img\n                    alt=\"example\"\n                    style={{ width: '100%' }}\n                    src={previewImage}\n                />\n            </Modal>\n        </div>\n    ) : null\n}\n\nexport default withRouter(AddPost)\n","import React, { useEffect, useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\n\nimport Modal from 'antd/es/modal'\nimport Activity from './Activity'\nimport Card from 'antd/es/card'\nimport Post from '../../components/Post/Post'\nimport AddPost from '../../components/Post/AddPost'\nimport Tabs from 'antd/es/tabs'\nimport pullData from '../../utils/pullData'\n\nconst Progress = props => {\n    const [state, setState] = useState({})\n\n    const [data, setData] = useState({})\n    const pathParts = props.history.location.pathname.split('/')\n    const progressId = pathParts.length > 2 ? pathParts[2] : ''\n    if (!progressId) return null\n    useEffect(() => {\n        if (props.isAuthed) {\n            props.setData({ currentProgress: progressId })\n        } else {\n            pullData(props, data, setData, { forceAuth: false }, data => {\n                const friendData = {}\n                for (let friend of data.friendData)\n                    friendData[friend._id] = friend\n                const post = {}\n                for (let item of data.post) post[item._id] = item\n\n                props.setData({\n                    friendData,\n                    posts: post,\n                    account: {},\n                    progress: data.progress,\n                })\n            })\n        }\n    }, [props.isAuthed, props.history.location.pathname])\n\n    const { progress, account, friendData, posts } = props.isAuthed\n        ? props\n        : { ...data, account: {} }\n\n    if (!progress || !progress._id) return null\n    props.setData({ currentPosts: progress.posts })\n\n    const { goal } = progress\n    if (goal) props.setPageTitle({ main: goal.name, sub: progress.worker })\n    return goal && friendData ? (\n        <>\n            <Tabs>\n                <Tabs.TabPane tab=\"Posts\" key=\"posts\">\n                    {account._id && (\n                        <AddPost\n                            parent={progressId}\n                            account={account}\n                            parentType=\"progress\"\n                            // onSend={() => setEditingMessage('')}\n                        />\n                    )}\n                    {progress.posts.map(postId => {\n                        if (posts[postId]) {\n                            const post = posts[postId]\n                            return (\n                                <div key={postId}>\n                                    <div\n                                        style={{\n                                            height: '5px',\n                                            background: '#ddd',\n                                            width: 'calc(100% + 8px)',\n                                            position: 'absolute',\n                                            left: '-8px',\n                                        }}\n                                    />\n                                    <div style={{ paddingTop: '10px' }}>\n                                        <Post\n                                            friendData={friendData}\n                                            account={account}\n                                            post={post}\n                                        />\n                                    </div>\n                                </div>\n                            )\n                        } else return null\n                    })}\n                </Tabs.TabPane>\n                <Tabs.TabPane tab=\"Details\" key=\"details\">\n                    <Activity\n                        state={state}\n                        setState={setState}\n                        progress={progress}\n                        account={account}\n                        friendData={friendData}\n                    />\n                </Tabs.TabPane>\n            </Tabs>\n            <Modal\n                visible={state.previewImage}\n                footer={null}\n                onCancel={() => setState({ ...state, previewImage: '' })}\n            >\n                <img\n                    alt=\"example\"\n                    style={{ width: '100%' }}\n                    src={state.previewImage}\n                />\n            </Modal>\n        </>\n    ) : null\n}\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        account: state.account,\n        posts: state.post,\n        progress: state.progress,\n        friendData: state.friendData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: data => {\n            dispatch(actions.setData(data))\n        },\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Progress)\n)\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { withRouter } from 'react-router-dom'\nimport Card from 'antd/es/card'\nimport PlusCircleOutlined from '@ant-design/icons/PlusCircleOutlined'\nimport Button from 'antd/es/button'\nimport Avatar from 'antd/es/avatar'\nimport getAvatar from '../../utils/getAvatar'\nimport UserButton from '../../components/UserButton/UserButton'\n\nconst Wallet = props => {\n    const account = props.pulledProfile || props.account\n    return account.wallet\n        ? account.wallet.map((money, index) => (\n              <div\n                  onClick={() => props.history.push('/profile/' + money.user)}\n                  key={index}\n              >\n                  <Card\n                      type=\"inner\"\n                      style={{ width: '100%' }}\n                      bordered={false}\n                      extra={<Button type=\"primary\">Visit shop</Button>}\n                      title={\n                          <>\n                              {money.amount}\n                              <UserButton id={money.user} />\n                          </>\n                      }\n                  />\n              </div>\n          ))\n        : null\n}\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n        isAuthed: state.isAuthed,\n    }\n}\n\nexport default withRouter(connect(mapStateToProps)(Wallet))\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport Button from 'antd/es/button'\nimport Tag from 'antd/es/tag'\nimport TimeAgo from 'timeago-react'\nimport Avatar from 'antd/es/avatar'\nimport getAvatar from '../../utils/getAvatar'\nimport Rewards from '../../components/Rewards/Rewards'\nimport Collapse from 'antd/es/collapse'\nimport Badge from 'antd/es/badge'\nimport UserButton from '../../components/UserButton/UserButton'\nimport Descriptions from 'antd/es/descriptions'\nimport date from 'date-and-time'\n\nconst Transactions = props => {\n    props.setPageTitle({ main: 'Shop', sub: 'Transactions' })\n\n    const { account, transactionData, friendData } = props\n    if (!account || !account._id) return null\n\n    const transactions = account.transactions\n        .filter(item => transactionData[item])\n        .map(item => transactionData[item])\n\n    const columns = [\n        {\n            title: 'Type',\n            dataIndex: 'types',\n            key: 'types',\n            render: types => (\n                <>\n                    {types.map(tag => {\n                        let color = tag.length > 5 ? 'geekblue' : 'green'\n                        if (tag === 'loser') {\n                            color = 'volcano'\n                        }\n                        return (\n                            <Tag color={color} key={tag}>\n                                {tag.toUpperCase()}\n                            </Tag>\n                        )\n                    })}\n                </>\n            ),\n        },\n        {\n            title: 'With',\n            dataIndex: 'user',\n            key: 'user',\n            render: user => {\n                const friend = friendData[user]\n                return friend ? (\n                    <Button\n                        type=\"link\"\n                        style={{ padding: 0 }}\n                        onClick={() => props.history.push('/profile/' + user)}\n                    >\n                        <Avatar\n                            src={getAvatar(user, friend.image)}\n                            style={{ marginRight: '5px' }}\n                        />\n                        {friend.name + ' (' + friend._id + ')'}\n                    </Button>\n                ) : (\n                    user\n                )\n            },\n        },\n        {\n            title: 'Item',\n            dataIndex: 'perk',\n            key: 'perk',\n            render: perk =>\n                perk.simple || (\n                    <Rewards\n                        rewardKey={1}\n                        label=\"Rewards\"\n                        rewards={[{ rewards: [perk], key: 1 }]}\n                        readOnly={true}\n                    />\n                ),\n        },\n        {\n            title: 'Amount',\n            dataIndex: 'amount',\n            key: 'amount',\n            render: amount => (amount > 0 ? amount : ''),\n        },\n        {\n            title: 'Date',\n            dataIndex: 'date',\n            key: 'date',\n            render: date => <TimeAgo datetime={date} live />,\n        },\n        {\n            title: 'Progress',\n            dataIndex: 'progress',\n            key: 'progress',\n            render: progress => (\n                <Button\n                    type=\"link\"\n                    onClick={() =>\n                        props.history.push('/progresses/' + progress)\n                    }\n                >\n                    {progress}\n                </Button>\n            ),\n        },\n        {\n            title: 'Status',\n            key: 'status',\n            dataIndex: 'status',\n            render: (status, record) => {\n                if (status === 'Not confirmed') {\n                    return (\n                        <>\n                            <Button\n                                danger={true}\n                                type=\"link\"\n                                onClick={() =>\n                                    wsActions.cancelTransaction(\n                                        account._id,\n                                        record.transaction._id\n                                    )\n                                }\n                            >\n                                Cancel\n                            </Button>\n                            {record.transaction.from === account._id && (\n                                <Button\n                                    type=\"link\"\n                                    onClick={() =>\n                                        wsActions.confirmTransaction(\n                                            account._id,\n                                            record.transaction._id\n                                        )\n                                    }\n                                >\n                                    Confirm\n                                </Button>\n                            )}\n                        </>\n                    )\n                }\n                return status\n            },\n        },\n    ]\n\n    const tableData = []\n    let sorted = [...transactions]\n    sorted = sorted.sort((a, b) =>\n        new Date(a.date).getTime() < new Date(b.date).getTime() ? 1 : -1\n    )\n    for (let transaction of sorted) {\n        const types = []\n        if (transaction.from === account._id && transaction.to === account.id) {\n            types.push('internal')\n        }\n        if (transaction.to === account._id) {\n            if (transaction.progress) {\n                types.push('earn')\n                if (!transaction.amount) types.push('item')\n                else types.push('money')\n            } else {\n                if (transaction.item && transaction.amount) {\n                    types.push('buy')\n                    types.push('item')\n                } else {\n                    types.push('recieve gift')\n                    if (!transaction.amount) types.push('item')\n                    else types.push('money')\n                }\n            }\n        } else if (transaction.from === account._id) {\n            if (transaction.progress) {\n                types.push('pay')\n                if (!transaction.amount) types.push('item')\n                else types.push('money')\n            } else {\n                if (transaction.item && transaction.amount) {\n                    types.push('sell')\n                    types.push('item')\n                } else {\n                    types.push('send gift')\n                    if (!transaction.amount) types.push('item')\n                    else types.push('money')\n                }\n            }\n        }\n\n        const user =\n            transaction.to !== account._id ? transaction.to : transaction.from\n\n        tableData.push({\n            key: tableData.length,\n            types,\n            user,\n            perk: transaction.item,\n            amount: transaction.amount,\n            date: transaction.date,\n            progress: transaction.progress,\n            status: transaction.status,\n            transaction,\n        })\n    }\n    return (\n        <Collapse\n            expandIconPosition=\"right\"\n            style={{ marginBottom: '50px' }}\n            destroyInactivePanel={true}\n            accordion\n        >\n            {sorted.map(transaction => {\n                const types = []\n                if (\n                    transaction.from === account._id &&\n                    transaction.to === account.id\n                ) {\n                    types.push('internal')\n                }\n                if (transaction.to === account._id) {\n                    if (transaction.progress) {\n                        types.push('earn')\n                        if (!transaction.amount) types.push('item')\n                        else types.push('money')\n                    } else {\n                        if (transaction.item && transaction.amount) {\n                            types.push('buy')\n                            types.push('item')\n                        } else {\n                            types.push('recieve gift')\n                            if (!transaction.amount) types.push('item')\n                            else types.push('money')\n                        }\n                    }\n                } else if (transaction.from === account._id) {\n                    if (transaction.progress) {\n                        types.push('pay')\n                        if (!transaction.amount) types.push('item')\n                        else types.push('money')\n                    } else {\n                        if (transaction.item && transaction.amount) {\n                            types.push('sell')\n                            types.push('item')\n                        } else {\n                            types.push('send gift')\n                            if (!transaction.amount) types.push('item')\n                            else types.push('money')\n                        }\n                    }\n                }\n\n                const user =\n                    transaction.to !== account._id\n                        ? transaction.to\n                        : transaction.from\n\n                tableData.push({\n                    key: tableData.length,\n                    types,\n                    user,\n                    perk: transaction.item,\n                    amount: transaction.amount,\n                    date: transaction.date,\n                    progress: transaction.progress,\n                    status: transaction.status,\n                    transaction,\n                })\n                return (\n                    <Collapse.Panel\n                        style={{ padding: 0 }}\n                        header={\n                            <>\n                                <Badge\n                                    color={\n                                        transaction.status === 'Not confirmed'\n                                            ? 'blue'\n                                            : transaction.status === 'Cancelled'\n                                            ? 'red'\n                                            : 'green'\n                                    }\n                                />\n                                <span>\n                                    {transaction.amount || transaction.item}\n                                </span>\n                                <UserButton\n                                    noName={true}\n                                    id={\n                                        transaction.to !== account._id\n                                            ? transaction.to\n                                            : transaction.from\n                                    }\n                                />\n                                <div>\n                                    <TimeAgo datetime={transaction.date} live />\n                                </div>\n                            </>\n                        }\n                        key={transaction._id}\n\n                        // extra={}\n                    >\n                        <Descriptions\n                            layout=\"vertical\"\n                            size=\"small\"\n                            bordered\n                            column={{\n                                xxl: 4,\n                                xl: 3,\n                                lg: 3,\n                                md: 3,\n                                sm: 2,\n                                xs: 1,\n                            }}\n                        >\n                            <Descriptions.Item label=\"Type\">\n                                {types.map(tag => {\n                                    let color =\n                                        tag.length > 5 ? 'geekblue' : 'green'\n                                    if (tag === 'loser') {\n                                        color = 'volcano'\n                                    }\n                                    return (\n                                        <Tag color={color} key={tag}>\n                                            {tag.toUpperCase()}\n                                        </Tag>\n                                    )\n                                })}\n                            </Descriptions.Item>\n                            <Descriptions.Item label=\"Transaction with\">\n                                <UserButton\n                                    id={\n                                        transaction.to !== account._id\n                                            ? transaction.to\n                                            : transaction.from\n                                    }\n                                />\n                            </Descriptions.Item>\n                            {(transaction.item.name ||\n                                transaction.item.simple) && (\n                                <Descriptions.Item label=\"Item\">\n                                    {transaction.item.simple || (\n                                        <Rewards\n                                            rewardKey={1}\n                                            label=\"Rewards\"\n                                            rewards={[\n                                                {\n                                                    rewards: [transaction.item],\n                                                    key: 1,\n                                                },\n                                            ]}\n                                            readOnly={true}\n                                        />\n                                    )}\n                                </Descriptions.Item>\n                            )}\n                            {transaction.item.amount && (\n                                <Descriptions.Item label=\"Amount\">\n                                    {transaction.item.amount}\n                                </Descriptions.Item>\n                            )}\n                            <Descriptions.Item label=\"Date\">\n                                {date.format(\n                                    new Date(transaction.date),\n                                    'YYYY/MM/DD HH:mm:ss'\n                                )}\n                            </Descriptions.Item>\n\n                            {transaction.progress && (\n                                <Descriptions.Item label=\"Progress\">\n                                    {transaction.progress}\n                                </Descriptions.Item>\n                            )}\n                            <Descriptions.Item label=\"Status\">\n                                {status === 'Not confirmed' ? (\n                                    <>\n                                        <Button\n                                            danger={true}\n                                            type=\"link\"\n                                            onClick={() =>\n                                                wsActions.cancelTransaction(\n                                                    account._id,\n                                                    record.transaction._id\n                                                )\n                                            }\n                                        >\n                                            Cancel\n                                        </Button>\n                                        {record.transaction.from ===\n                                            account._id && (\n                                            <Button\n                                                type=\"link\"\n                                                onClick={() =>\n                                                    wsActions.confirmTransaction(\n                                                        account._id,\n                                                        record.transaction._id\n                                                    )\n                                                }\n                                            >\n                                                Confirm\n                                            </Button>\n                                        )}\n                                    </>\n                                ) : (\n                                    status || 'Confirmed'\n                                )}\n                            </Descriptions.Item>\n                        </Descriptions>\n                    </Collapse.Panel>\n                )\n            })}\n        </Collapse>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n        transactionData: state.transactionData,\n        friendData: state.friendData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Transactions)\n","import React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport Tabs from 'antd/es/tabs'\nimport Wallet from './Wallet'\nimport Transactions from './Transactions'\nimport WishlistAndPerks from './WishlistAndPerks'\n\nconst Shop = props => {\n    useEffect(() => {\n        props.setPageTitle({ main: 'Shop', sub: 'My items' })\n    }, [])\n\n    return props.account._id ? (\n        <Tabs\n            style={{\n                background: 'transparent',\n                boxShadow: 'none',\n                margin: '0',\n                marginTop: '-15px',\n            }}\n        >\n            <Tabs.TabPane tab=\"My shop\" key={1}>\n                <WishlistAndPerks\n                    mode=\"shop\"\n                    listKey=\"perks\"\n                    account={props.account}\n                />\n            </Tabs.TabPane>\n            <Tabs.TabPane tab=\"Wallet\" key={3}>\n                <Wallet />\n            </Tabs.TabPane>\n            <Tabs.TabPane tab=\"Transactions\" key={4}>\n                <Transactions />\n            </Tabs.TabPane>\n        </Tabs>\n    ) : (\n        <span />\n    )\n}\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Shop)\n","import React, { useEffect, useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport isEqual from 'lodash.isequal'\n\nimport Post from '../../components/Post/Post'\n\nimport UserButton from '../../components/UserButton/UserButton'\nimport Divider from 'antd/es/divider'\n\nconst DashboardPosts = props => {\n    const {\n        account,\n        friendData,\n        statePosts,\n        progressData,\n        groupData,\n        currentPosts,\n    } = props\n\n    const [posts, setPosts] = useState([])\n    const [startTime] = useState(new Date().getTime())\n\n    const sortPosts = (a, b) => {\n        const aN = a.notifications.filter(item => item.user !== account._id)\n        const bN = b.notifications.filter(item => item.user !== account._id)\n        if (aN.length === 0 && bN.length > 0) return 1\n        else if (aN.length > 0 && bN.length === 0) return -1\n        else if (aN.length === 0 && bN.length === 0) return 0\n        else\n            return new Date(aN[0].date).getTime() <\n                new Date(bN[0].date).getTime()\n                ? 1\n                : -1\n    }\n\n    const sortNotifications = (a, b) =>\n        new Date(a.date).getTime() < new Date(b.date).getTime() ? 1 : -1\n\n    useEffect(() => {\n        if (currentPosts) {\n            const newPosts = currentPosts\n                .filter(item => statePosts[item])\n                .map(item => statePosts[item])\n\n            const newUnseenPosts = []\n            const newOldPosts = []\n            let oldPosts = [...posts]\n            for (let post of newPosts) {\n                let oldPostIndex = oldPosts.findIndex(item => {\n                    return item._id.toString() === post._id.toString()\n                })\n                if (oldPostIndex === -1) {\n                    if (\n                        post.notifications &&\n                        post.notifications.length > 0 &&\n                        new Date(post.notifications[0].date).getTime() >\n                            startTime\n                    ) {\n                        newUnseenPosts.push(post)\n                    } else {\n                        newOldPosts.push(post)\n                    }\n                } else {\n                    oldPosts[oldPostIndex] = post\n                }\n            }\n\n            for (let post of newOldPosts) {\n                const index = oldPosts.findIndex(item => {\n                    if (\n                        item &&\n                        item.notifications &&\n                        item.notifications.length > 0\n                    ) {\n                        return (\n                            new Date(item.notifications[0]).getTime() >\n                            new Date(post.notifications[0]).getTime()\n                        )\n                    } else return false\n                })\n                if (index === -1) {\n                    oldPosts.push(post)\n                } else {\n                    oldPosts.splice(index, 0, post)\n                }\n            }\n\n            let resultPosts = [...newUnseenPosts, ...oldPosts]\n            if (posts.length === 0) {\n                resultPosts = resultPosts.sort(sortPosts)\n            }\n            setPosts(resultPosts)\n        }\n    }, [currentPosts, statePosts])\n    if (!account._id) return null\n\n    let lastNotifications = []\n    for (let progress of account.progresses) {\n        if (progressData[progress])\n            lastNotifications = [\n                ...lastNotifications,\n                ...progressData[progress].notifications.filter(\n                    item =>\n                        item.code === 'add post' && item.user !== account._id\n                ),\n            ]\n    }\n\n    for (let group of account.groups) {\n        if (groupData[group])\n            lastNotifications = [\n                ...lastNotifications,\n                ...groupData[group].notifications.filter(\n                    item =>\n                        item.code === 'add post' && item.user !== account._id\n                ),\n            ]\n    }\n\n    lastNotifications = lastNotifications\n        .sort(sortNotifications)\n        .map(item => item.details.postId)\n        .slice(0, 10)\n\n    const neededPosts = [\n        ...new Set([\n            ...account.followPosts,\n            ...account.myPosts,\n            ...posts.map(post => post._id),\n            ...lastNotifications,\n        ]),\n    ]\n    if (!isEqual(currentPosts, neededPosts))\n        props.setData({ currentPosts: neededPosts })\n\n    props.setPageTitle({ main: 'Dashboard', sub: '' })\n\n    return posts.map(item => {\n        let text = null\n        const nots = item.notifications.filter(not => not.user !== account._id)\n        const not = nots.length > 0 ? nots[0] : null\n        if (not) {\n            switch (not.code) {\n                case 'edit wishlist item':\n                    text = 'edited item in wishlist.'\n\n                    break\n                case 'edit goal':\n                    text = 'edited goal.'\n\n                    break\n                case 'edit perk':\n                    text = 'edited item in shop.'\n\n                    break\n\n                case 'comment':\n                    text = 'added a comment.'\n\n                    break\n                case 'edit comment':\n                    text = 'edited a comment.'\n\n                    break\n                case 'like':\n                    text = 'added a like.'\n\n                    break\n                case 'dislike':\n                    text = 'removed a like.'\n\n                    break\n                default:\n                    text = null\n                    break\n            }\n        }\n        return (\n            <>\n                <div\n                    style={{\n                        height: '5px',\n                        background: '#ddd',\n                        width: 'calc(100% + 8px)',\n                        position: 'absolute',\n                        left: '-8px',\n                    }}\n                />\n                <div style={{ paddingTop: '10px' }}>\n                    {text && (\n                        <>\n                            <span>\n                                <UserButton\n                                    id={not.user}\n                                    noAva={true}\n                                    span={true}\n                                    style={{ fontWeight: 'bold' }}\n                                />{' '}\n                                {text}\n                            </span>\n                            <Divider\n                                type=\"horizontal\"\n                                style={{ margin: '5px 0' }}\n                            />\n                        </>\n                    )}\n                    <Post\n                        friendData={friendData}\n                        account={account}\n                        post={item}\n                        progressData={progressData}\n                        groupData={groupData}\n                    />\n                </div>\n            </>\n        )\n    })\n}\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        account: state.account,\n        statePosts: state.post,\n        progress: state.progress,\n        friendData: state.friendData,\n        progressData: state.progressData,\n        groupData: state.groupData,\n        currentPosts: state.currentPosts,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: data => {\n            dispatch(actions.setData(data))\n        },\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(DashboardPosts)\n)\n","import React from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\n\nimport Card from 'antd/es/card'\nimport Button from 'antd/es/button'\nimport UserButton from '../../components/UserButton/UserButton'\n\nconst DashboardEvents = props => {\n    const { lastNotifications } = props\n    const getRewardText = item =>\n        item.details.reward.money\n            ? '$' + item.details.reward.money\n            : item.details.reward.simple || item.details.reward.itemName\n    return lastNotifications.map(item => {\n        let text = null\n\n        switch (item.code) {\n            case 'change name':\n                text = (\n                    <span>\n                        {' '}\n                        <UserButton id={item.user} /> changed name.\n                    </span>\n                )\n                break\n            case 'delete account':\n                text = (\n                    <span>\n                        {item.user}\n                        deleted account.\n                    </span>\n                )\n                break\n            case 'friend request':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> wants to become friends\n                        with you.\n                    </span>\n                )\n                break\n            case 'friend add':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> and{' '}\n                        <UserButton id={item.details.friend} /> became friends.\n                    </span>\n                )\n                break\n            case 'unfriend':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> and{' '}\n                        <UserButton id={item.details.friend} /> stopped being\n                        friends.\n                    </span>\n                )\n                break\n            case 'add wishlist item':\n            case 'edit wishlist item':\n                text = (\n                    <span>\n                        <UserButton id={item.user} />{' '}\n                        {item.code === 'add wishlist item'\n                            ? 'added to wishlist a new item'\n                            : 'edited in wishlist'}{' '}\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/wishlist/${item.user}/${\n                                        item.details.itemId\n                                    }`\n                                )\n                            }\n                        >\n                            {item.details.itemName}\n                        </Button>{' '}\n                        .\n                    </span>\n                )\n                break\n            case 'delete wishlist item':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> deleted{' '}\n                        {item.details.itemName} from wishlist.\n                    </span>\n                )\n                break\n            case 'add goal':\n            case 'edit goal':\n                text = (\n                    <span>\n                        <UserButton id={item.user} />{' '}\n                        {item.code === 'add goal'\n                            ? 'added a new goal'\n                            : 'edited goal'}{' '}\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/goals/${item.user}/${item.details.itemId}`\n                                )\n                            }\n                        >\n                            {item.details.itemName}\n                        </Button>{' '}\n                        .\n                    </span>\n                )\n                break\n            case 'delete goal':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> deleted{' '}\n                        {item.details.itemName} from goals.\n                    </span>\n                )\n                break\n            case 'add perk':\n            case 'edit perk':\n                text = (\n                    <span>\n                        <UserButton id={item.user} />{' '}\n                        {item.code === 'add perk'\n                            ? 'added to shop a new item'\n                            : 'edited in shop'}{' '}\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/shop/${item.user}/${item.details.itemId}`\n                                )\n                            }\n                        >\n                            {item.details.itemName}\n                        </Button>{' '}\n                        .\n                    </span>\n                )\n                break\n            case 'delete perk':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> deleted{' '}\n                        {item.details.itemName} from shop.\n                    </span>\n                )\n                break\n            case 'buy perk':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> bought\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/shop/${item.user}/${item.details.itemId}`\n                                )\n                            }\n                        >\n                            {item.details.itemName} (${item.details.price})\n                        </Button>{' '}\n                        from <UserButton id={item.details.owner} /> .\n                    </span>\n                )\n                break\n            case 'cancel transaction':\n            case 'confirm transaction':\n                text = (\n                    <span>\n                        <UserButton id={item.user} />{' '}\n                        {item.code === 'cancel transaction'\n                            ? 'cancelled'\n                            : 'confirmed'}\n                        purchase of\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/shop/${item.user}/${item.details.itemId}`\n                                )\n                            }\n                        >\n                            {item.details.itemName} (${item.details.price})\n                        </Button>{' '}\n                        by <UserButton id={item.details.buyer} /> .\n                    </span>\n                )\n                break\n            case 'start progress':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> started participating in\n                        progress\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/progresses/${item.details.itemId}`\n                                )\n                            }\n                        >\n                            {item.details.itemName}\n                        </Button>{' '}\n                        as {item.details.as}.\n                    </span>\n                )\n                break\n            case 'approve milestone':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> approved milestone{' '}\n                        {item.details.itemName} in\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/progresses/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </Button>\n                        .\n                    </span>\n                )\n                break\n            case 'disapprove milestone':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> disapproved milestone{' '}\n                        {item.details.itemName} in\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/progresses/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </Button>\n                        .\n                    </span>\n                )\n                break\n            case 'finish progress':\n                text = (\n                    <span>\n                        Progress{' '}\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/progresses/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </Button>\n                        was approved and finished.\n                    </span>\n                )\n                break\n            case 'milestone finish':\n                text = (\n                    <span>\n                        Milestone {item.details.itemName} in progress{' '}\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/progresses/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </Button>\n                        was approved and finished.\n                    </span>\n                )\n                break\n            case 'get reward':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> recieved{' '}\n                        {getRewardText(item)} as a reward from{' '}\n                        <UserButton id={item.details.from} /> in progress\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/progresses/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </Button>\n                        .\n                    </span>\n                )\n                break\n            case 'leave progress':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> left progress{' '}\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/progresses/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </Button>\n                        .\n                    </span>\n                )\n                break\n            case 'edit progress':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> edited progress{' '}\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/progresses/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </Button>\n                        {item.details.addedAccounts.length > 0 ? (\n                            <>\n                                {' '}\n                                and added{' '}\n                                {item.details.addedAccounts.map(ac => (\n                                    <UserButton id={ac} />\n                                ))}{' '}\n                            </>\n                        ) : (\n                            ''\n                        )}\n                        {item.details.droppedAccounts.length > 0 ? (\n                            <>\n                                {' '}\n                                and removed{' '}\n                                {item.details.droppedAccounts.map(ac => (\n                                    <UserButton id={ac} />\n                                ))}{' '}\n                            </>\n                        ) : (\n                            ''\n                        )}\n                        .\n                    </span>\n                )\n                break\n            case 'remove from progress':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> removed{' '}\n                        <UserButton id={item.details.account} /> from progress\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/progresses/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </Button>\n                        .\n                    </span>\n                )\n                break\n            case 'remove from progress':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> added{' '}\n                        <UserButton id={item.details.account} /> to progress\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/progresses/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </Button>\n                        .\n                    </span>\n                )\n                break\n            case 'add reward':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> added{' '}\n                        {getRewardText(item)} as a reward for\n                        {!item.details.for || item.details.for.length === 0\n                            ? 'all '\n                            : item.details.for.map(account => (\n                                  <>\n                                      <UserButton id={account} />,\n                                  </>\n                              ))}\n                        in progress\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/progresses/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </Button>\n                        .\n                    </span>\n                )\n                break\n            case 'delete reward':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> removed{' '}\n                        {getRewardText(item)} as a reward for{' '}\n                        {!item.details.for || item.details.for.length === 0\n                            ? 'all '\n                            : item.details.for.map(account => (\n                                  <>\n                                      <UserButton id={account} />,\n                                  </>\n                              ))}\n                        in progress\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/progresses/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </Button>\n                        .\n                    </span>\n                )\n                break\n            default:\n                text = 'New event'\n                break\n        }\n        return <Card>{text}</Card>\n    })\n}\nconst mapStateToProps = state => {\n    return {\n        lastNotifications: state.lastNotifications,\n    }\n}\n\nexport default withRouter(connect(mapStateToProps)(DashboardEvents))\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport * as wsActions from '../../websocketActions'\n\nimport Tabs from 'antd/es/tabs'\nimport DashboardPosts from './DashboardPosts'\nimport DashboardEvents from './DashboardEvents'\nimport Badge from 'antd/es/badge'\n\nconst Progress = props => {\n    const { account, lastNotifications } = props\n\n    if (!account._id) return null\n\n    props.setPageTitle({ main: 'Dashboard', sub: '' })\n\n    let numberOfUnseenNots = 0\n    for (let not of lastNotifications) {\n        if (parseInt(not.notId) > parseInt(account.lastSeenNot || 0))\n            numberOfUnseenNots++\n    }\n\n    return (\n        <Tabs\n            onChange={activeTab => {\n                if (activeTab === 'events') {\n                    const last = parseInt(\n                        lastNotifications.reduce((res, not) => {\n                            return parseInt(not.notId) > parseInt(res)\n                                ? not.notId\n                                : res\n                        }, 0)\n                    )\n                    if (\n                        lastNotifications.length > 0 &&\n                        parseInt(account.lastSeenNot) !== last\n                    ) {\n                        wsActions.setLastSeenNot(account._id, last)\n                    }\n                }\n            }}\n        >\n            <Tabs.TabPane tab=\"Posts\" key=\"posts\">\n                <DashboardPosts />\n            </Tabs.TabPane>\n\n            <Tabs.TabPane\n                tab={\n                    <Badge count={numberOfUnseenNots} offset={[10, 0]}>\n                        Events\n                    </Badge>\n                }\n                key=\"events\"\n            >\n                <DashboardEvents />\n            </Tabs.TabPane>\n        </Tabs>\n    )\n}\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n        lastNotifications: state.lastNotifications,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Progress)\n","import { webSocket } from '../containers/ConnectWebsocket/ConnectWebsocket'\n\nexport const setLastSeenNot = (accountId, notId) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'setLastSeenNot',\n                accountId,\n                notId,\n            })\n        )\n    }\n}\n","import React from 'react'\n\nimport * as wsActions from '../websocketActions'\nimport Menu from 'antd/es/menu'\nimport Dropdown from 'antd/es/dropdown'\nimport { EllipsisOutlined, DownOutlined } from '@ant-design/icons'\nimport Button from 'antd/es/button'\n\nconst FriendActionButton = props => {\n    const {\n        invitingFriends,\n        invitedFriends,\n        realFriends,\n        _id,\n        accountId,\n    } = props\n    if (!accountId) return []\n\n    if (accountId === _id) return [props.additionalButton]\n\n    const menu = (\n        <Menu onClick={({ domEvent }) => domEvent.stopPropagation()}>\n            {props.additionalButtons &&\n                props.additionalButtons.map((button, index) => (\n                    <Menu.Item key={index + 100} onClick={button.onClick}>\n                        {button.title}\n                    </Menu.Item>\n                ))}\n            {invitingFriends.find(item => item.friend === _id) ? (\n                <Menu.Item\n                    key=\"2\"\n                    onClick={() => wsActions.unfriend(accountId, _id)}\n                    danger={true}\n                >\n                    Decline\n                </Menu.Item>\n            ) : invitedFriends.find(item => item.friend === _id) ? (\n                <Menu.Item\n                    key=\"3\"\n                    onClick={() => wsActions.unfriend(accountId, _id)}\n                    danger={true}\n                >\n                    Cancel invitation\n                </Menu.Item>\n            ) : realFriends.find(item => item.friend === _id) ? (\n                <Menu.Item\n                    key=\"4\"\n                    onClick={() => wsActions.unfriend(accountId, _id)}\n                    danger={true}\n                >\n                    Unfriend\n                </Menu.Item>\n            ) : (\n                <Menu.Item\n                    key=\"5\"\n                    onClick={() => wsActions.addFriend(accountId, _id)}\n                >\n                    Become friends\n                </Menu.Item>\n            )}\n        </Menu>\n    )\n    return invitingFriends.find(item => item.friend === _id) ? (\n        <Dropdown.Button\n            type=\"primary\"\n            overlay={menu}\n            trigger={['click']}\n            onClick={e => {\n                e.preventDefault()\n                e.stopPropagation()\n                wsActions.acceptFriend(accountId, _id)\n            }}\n        >\n            Accept\n        </Dropdown.Button>\n    ) : (\n        <Dropdown overlay={menu} trigger={['click']}>\n            <a\n                // className=\"ant-dropdown-link\"\n                onClick={e => {\n                    e.preventDefault()\n                    e.stopPropagation()\n                }}\n            >\n                <Button type=\"link\">\n                    {props.asText ? (\n                        <>\n                            Actions <DownOutlined />\n                        </>\n                    ) : (\n                        <EllipsisOutlined />\n                    )}\n                </Button>\n            </a>\n        </Dropdown>\n    )\n}\n\nexport default FriendActionButton\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport * as actions from '../store/actions'\nimport { withRouter } from 'react-router-dom'\n\nimport Card from 'antd/es/card'\nimport friendActionButton from './FriendActionButton'\nimport UserButton from './UserButton/UserButton'\n\nconst FriendCard = props => {\n    const friendActions = friendActionButton({\n        accountId: props.account ? props.account._id : '',\n        realFriends: props.realFriends,\n        invitedFriends: props.invitedFriends,\n        invitingFriends: props.invitingFriends,\n        _id: props.friend._id,\n        asIcons: true,\n\n        additionalButtons: [\n            {\n                title: 'See profile',\n                onClick: () =>\n                    props.history.push('/profile/' + props.friend._id),\n            },\n        ],\n    })\n\n    return (\n        <Card\n            type=\"inner\"\n            style={{ width: '100%' }}\n            bordered={false}\n            extra={friendActions}\n            title={<UserButton id={props.friend._id} size={50} />}\n        />\n    )\n}\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n        isAuthed: state.isAuthed,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: (data, pulledFrom) =>\n            dispatch(actions.setData(data, pulledFrom)),\n        tryAuth: (props, forceAuth) =>\n            dispatch(actions.tryAuth(props, forceAuth)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(FriendCard)\n)\n","import React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport * as wsActions from '../../websocketActions'\nimport Card from 'antd/es/card'\nimport Button from 'antd/es/button'\nimport Modal from 'antd/es/modal'\n\nimport Input from 'antd/es/input'\nimport Form from 'antd/es/form'\n\nimport FriendCard from '../../components/FriendCard'\nimport { nicknameRules } from '../../constants/fieldRules'\n\nconst AddFriends = props => {\n    useEffect(() => {\n        props.setFriendSearchResult({})\n    }, [props.addFriendOpen])\n\n    const {\n        addFriendOpen,\n        setAddFriendOpen,\n        searchResult,\n        realFriends,\n        invitedFriends,\n        invitingFriends,\n    } = props\n    const layout = {\n        labelCol: { span: 8 },\n        wrapperCol: { span: 16 },\n    }\n    const tailLayout = {\n        wrapperCol: { offset: 8, span: 16 },\n    }\n\n    return (\n        <Modal\n            title=\"Add friend\"\n            visible={addFriendOpen}\n            maskClosable\n            closable\n            onCancel={() => setAddFriendOpen(false)}\n            footer={\n                <Button key=\"back\" onClick={() => setAddFriendOpen(false)}>\n                    Return\n                </Button>\n            }\n            destroyOnClose={true}\n        >\n            <p>To find a friend you need to enter your friend's nickname.</p>\n            <Form\n                name=\"dynamic_form_nest_item\"\n                onFinish={value => wsActions.searchFriends(value.search)}\n                autoComplete=\"off\"\n                {...layout}\n            >\n                <Form.Item label=\"Search\" name=\"search\" rules={nicknameRules}>\n                    <Input placeholder=\"Must be more than 2 characters long\" />\n                </Form.Item>\n\n                <Form.Item {...tailLayout}>\n                    <Button type=\"primary\" htmlType=\"submit\" size=\"large\">\n                        Search\n                    </Button>\n                </Form.Item>\n            </Form>\n            {searchResult._id && (\n                <Card title=\"Search result\">\n                    <FriendCard\n                        {...props}\n                        friend={searchResult}\n                        realFriends={realFriends}\n                        invitingFriends={invitingFriends}\n                        invitedFriends={invitedFriends}\n                    />\n                </Card>\n            )}\n        </Modal>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        searchResult: state.friendSearchResult,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setFriendSearchResult: data =>\n            dispatch(actions.setFriendSearchResult(data)),\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(AddFriends)\n","import React from 'react'\nimport { withRouter } from 'react-router-dom'\n\nimport FriendCard from '../../components/FriendCard'\n\nconst pendingFriends = props => {\n    const { realFriends, invitedFriends, invitingFriends } = props\n    return (\n        <>\n            {invitingFriends.length > 0 && (\n                <>\n                    <h2>People invited me to be friends</h2>\n                    {invitingFriends.map(friend => (\n                        <FriendCard\n                            key={friend._id}\n                            {...props}\n                            friend={friend}\n                            realFriends={realFriends}\n                            invitingFriends={invitingFriends}\n                            invitedFriends={invitedFriends}\n                        />\n                    ))}\n                </>\n            )}\n\n            {invitedFriends.length > 0 && (\n                <>\n                    <h2>I invited these people</h2>\n                    {invitedFriends.map(friend => (\n                        <FriendCard\n                            key={friend._id}\n                            {...props}\n                            friend={friend}\n                            realFriends={realFriends}\n                            invitingFriends={invitingFriends}\n                            invitedFriends={invitedFriends}\n                        />\n                    ))}\n                </>\n            )}\n        </>\n    )\n}\n\nexport default withRouter(pendingFriends)\n","import React, { useState, useEffect } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\n\nimport FriendCard from '../../components/FriendCard'\nimport AddCard from '../../components/AddCard/AddCard'\nimport AddFriends from './AddFriends'\nimport PendingFriends from './PendingFriends'\nimport Tabs from 'antd/es/tabs'\nimport Empty from 'antd/es/empty'\nimport Badge from 'antd/es/badge'\n\nconst Friends = props => {\n    const [addFriendOpen, setAddFriendOpen] = useState()\n\n    useEffect(() => {\n        props.setPageTitle({ main: 'Friends', sub: '' })\n    }, [])\n\n    const { account, friendData } = props\n    if (!account._id) return null\n    const realFriends = [],\n        invitedFriends = [],\n        invitingFriends = []\n\n    if (account.friends) {\n        for (let friend of account.friends) {\n            const fullFriend = { ...friendData[friend.friend], ...friend }\n            if (fullFriend) {\n                if (fullFriend.status === 'friend') realFriends.push(fullFriend)\n                else if (fullFriend.status === 'invited')\n                    invitedFriends.push(fullFriend)\n                else if (fullFriend.status === 'inviting')\n                    invitingFriends.push(fullFriend)\n            }\n        }\n    }\n    const confirmedFriends =\n        realFriends.length > 0 ? (\n            realFriends.map(friend => (\n                <FriendCard\n                    key={friend._id}\n                    {...props}\n                    friend={friend}\n                    realFriends={realFriends}\n                    invitingFriends={invitingFriends}\n                    invitedFriends={invitedFriends}\n                />\n            ))\n        ) : (\n            <Empty\n                image=\"https://websiter.s3.us-east-2.amazonaws.com/image+4.jpg\"\n                imageStyle={{ height: '250px', marginTop: '50px' }}\n                description={false}\n            />\n        )\n\n    return (\n        <>\n            <AddCard\n                title=\"Add friend\"\n                sub=\"Find by nickname\"\n                action={() => setAddFriendOpen(true)}\n            />\n            {invitedFriends.length > 0 || invitingFriends.length > 0 ? (\n                <Tabs>\n                    <Tabs.TabPane key=\"confirmed\" tab=\"Confrmed\">\n                        {confirmedFriends}\n                    </Tabs.TabPane>\n\n                    <Tabs.TabPane\n                        tab={\n                            <Badge\n                                count={invitingFriends.length}\n                                offset={[10, 0]}\n                            >\n                                Pending\n                            </Badge>\n                        }\n                        key=\"pending\"\n                    >\n                        <PendingFriends\n                            realFriends={realFriends}\n                            invitedFriends={invitedFriends}\n                            invitingFriends={invitingFriends}\n                        />\n                    </Tabs.TabPane>\n                </Tabs>\n            ) : (\n                confirmedFriends\n            )}\n            <AddFriends\n                addFriendOpen={addFriendOpen}\n                setAddFriendOpen={setAddFriendOpen}\n                realFriends={realFriends}\n                invitedFriends={invitedFriends}\n                invitingFriends={invitingFriends}\n                account={account}\n            />\n        </>\n    )\n}\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n        friendData: state.friendData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Friends)\n)\n","import React, { useEffect, useState } from 'react'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport PageHeader from 'antd/es/page-header'\nimport Form from 'antd/es/form'\nimport Button from 'antd/es/button'\nimport Input from 'antd/es/input'\n\nimport { withRouter } from 'react-router-dom'\nimport Card from 'antd/es/card'\nimport Upload from 'antd/es/upload'\nimport * as classes from './Account.module.css'\n\nimport LoadingOutlined from '@ant-design/icons/LoadingOutlined'\nimport PlusOutlined from '@ant-design/icons/PlusOutlined'\n\nimport { uploadFile } from '../../utils/uploadFile'\nimport Avatar from 'antd/es/avatar'\nimport getAvatar from '../../utils/getAvatar'\nimport Modal from 'antd/es/modal'\nimport { accountNameRules } from '../../constants/fieldRules'\nimport * as wsActions from '../../websocketActions'\nimport message from 'antd/es/message'\nimport Dropdown from 'antd/es/dropdown'\nimport Menu from 'antd/es/menu'\n\nconst Account = props => {\n    const [deleteVisible, setDeleteVisible] = useState()\n    const [deleteField, setDeleteField] = useState('')\n    const { account } = props\n\n    useEffect(() => {\n        props.setPageTitle({ main: 'Account', sub: '' })\n    }, [])\n\n    const loading = false\n\n    const layout = {\n        labelCol: { span: 8 },\n        wrapperCol: { span: 16 },\n    }\n    const tailLayout = {\n        wrapperCol: { offset: 8, span: 0 },\n    }\n    return account && account.name ? (\n        <Card>\n            <Upload\n                name=\"avatar\"\n                listType=\"picture-card\"\n                className={classes.Avatar}\n                showUploadList={false}\n                customRequest={({ file }) => {\n                    uploadFile(file, 800, 'avatar', () => {\n                        props.increaseAvatarV()\n                    })\n                }}\n            >\n                {account.image ? (\n                    <Avatar\n                        src={getAvatar(account._id, account.image)}\n                        size={150}\n                        style={{ margin: '25px' }}\n                    />\n                ) : (\n                    <div>\n                        {loading ? <LoadingOutlined /> : <PlusOutlined />}\n                        <div className=\"ant-upload-text\">Upload</div>\n                    </div>\n                )}\n            </Upload>\n            <Form\n                name=\"dynamic_form_nest_item\"\n                onFinish={value => wsActions.editAccount(value, account._id)}\n                autoComplete=\"off\"\n                {...layout}\n                initialValues={{\n                    name: account.name,\n                    nickname: account._id,\n                }}\n            >\n                <Form.Item label=\"Name\" name=\"name\" rules={accountNameRules}>\n                    <Input placeholder=\"Must be more than 1 character long\" />\n                </Form.Item>\n                <Form.Item label=\"Nickname\" name=\"nickname\">\n                    <Input disabled={true} />\n                </Form.Item>\n                <Form.Item\n                    {...tailLayout}\n                    style={{\n                        flex: 'none',\n                        maxWidth: ' 100%',\n                        overflow: 'hidden',\n                    }}\n                >\n                    <Dropdown.Button\n                        type=\"primary\"\n                        htmlType=\"submit\"\n                        size=\"large\"\n                        overlay={\n                            <Menu>\n                                <Menu.Item\n                                    danger={true}\n                                    onClick={() => setDeleteVisible(true)}\n                                >\n                                    Delete account\n                                </Menu.Item>\n                            </Menu>\n                        }\n                    >\n                        Save\n                    </Dropdown.Button>\n                </Form.Item>\n            </Form>\n            <Modal\n                title=\"Delete account\"\n                visible={deleteVisible}\n                onOk={() => {\n                    if (deleteField !== account._id) {\n                        message.warning('The nickmanme is not correct.')\n                    } else {\n                        wsActions.deleteAccount(account._id)\n                    }\n                }}\n                onCancel={() => {\n                    setDeleteVisible(false)\n                    setDeleteField('')\n                }}\n            >\n                <p>\n                    Please enter your nickname and press Ok to delete your\n                    account.\n                </p>\n                <Input onChange={e => setDeleteField(e.target.value)} />\n            </Modal>\n        </Card>\n    ) : null\n}\n\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n        increaseAvatarV: () => dispatch(actions.increaseAvatarV()),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Account)\n)\n","import { webSocket } from '../containers/ConnectWebsocket/ConnectWebsocket'\n\nexport const deleteAccount = id => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'deleteAccount',\n                accountId: id,\n            })\n        )\n    }\n}\n\nexport const editAccount = (value, id) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'editAccount',\n                name: value.name,\n                accountId: id,\n            })\n        )\n    }\n}\n","import React, { useEffect, useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport Avatar from 'antd/es/avatar'\nimport Card from 'antd/es/card'\n\nimport friendActionButton from '../../components/FriendActionButton'\nimport FriendCard from '../../components/FriendCard'\nimport Tabs from 'antd/es/tabs'\nimport Progresses from '../Progresses/Progresses'\nimport Wallet from '../Shop/Wallet'\nimport PerkCard from '../Shop/PerkCard'\nimport getAvatar from '../../utils/getAvatar'\nimport pullData from '../../utils/pullData'\nimport UserButton from '../../components/UserButton/UserButton'\n\nconst Profile = props => {\n    const [data, setData] = useState({})\n    const { profile, friendData, account } = props.isAuthed ? props : data\n\n    useEffect(() => {\n        const pathParts = props.history.location.pathname.split('/')\n        if (pathParts.length > 2) {\n            const profileId = pathParts[2]\n            if (props.isAuthed) {\n                props.setData({ currentProfile: profileId })\n            } else {\n                pullData(props, data, setData, { forceAuth: false }, data => {\n                    const friendData = {}\n                    for (let friend of data.friendData)\n                        friendData[friend._id] = friend\n                    const progressData = {}\n                    for (let progress of data.progressData)\n                        progressData[progress._id] = progress\n                    const groupData = {}\n                    for (let group of data.groupData)\n                        groupData[group._id] = group\n\n                    props.setData({\n                        profile: data.profile,\n                        friendData,\n                        progressData,\n                        groupData,\n                        account: {},\n                    })\n                })\n            }\n        }\n    }, [props.isAuthed, props.history.location.pathname])\n\n    if (!profile || !profile._id) return null\n    props.setPageTitle({ main: profile.name, sub: '' })\n\n    const realFriends = [],\n        invitedFriends = [],\n        invitingFriends = []\n    if (profile && profile.friends && account && account._id) {\n        for (let friend of account.friends) {\n            if (friend.status === 'friend') realFriends.push(friend)\n            else if (friend.status === 'invited') invitedFriends.push(friend)\n            else if (friend.status === 'inviting') invitingFriends.push(friend)\n        }\n    }\n    const friendActions = friendActionButton({\n        accountId: account ? account._id : '',\n        realFriends: realFriends,\n        invitedFriends: invitedFriends,\n        invitingFriends: invitingFriends,\n        _id: profile._id,\n        additionalButton: null,\n        asText: true,\n    })\n    return (\n        <Card>\n            <div style={{ textAlign: 'center', marginBottom: '50px' }}>\n                <Avatar\n                    src={getAvatar(profile._id, profile.image)}\n                    size={200}\n                />\n                <h1>{profile.name}</h1>\n                <h3>({profile._id})</h3>\n                {friendActions}\n            </div>\n            <Tabs>\n                <Tabs.TabPane tab=\"Activity\" key={0}>\n                    <Progresses fromProfile={true} />\n                </Tabs.TabPane>\n\n                <Tabs.TabPane tab=\"Friends\" key={1}>\n                    {profile.friends\n                        .filter(friend => friend.status === 'friend')\n                        .map(friend => {\n                            const oneFriendData = {\n                                ...friendData[friend.friend],\n                                ...friend.friend,\n                            }\n\n                            return (\n                                <FriendCard\n                                    key={oneFriendData._id}\n                                    {...props}\n                                    account={account}\n                                    friend={oneFriendData}\n                                    realFriends={realFriends}\n                                    invitingFriends={invitingFriends}\n                                    invitedFriends={invitedFriends}\n                                />\n                            )\n                        })}\n                </Tabs.TabPane>\n                <Tabs.TabPane tab=\"Goals\" key={3}>\n                    {profile.goals.map((goal, index) => (\n                        <PerkCard\n                            key={index}\n                            perk={goal}\n                            perkId={goal.itemId}\n                            owner={profile}\n                            account={account || {}}\n                            setEditedPerk={() => {}}\n                            setEditPerkOpen={() => {}}\n                            onlyBuy={true}\n                            mode=\"goals\"\n                        />\n                    ))}\n                </Tabs.TabPane>\n                <Tabs.TabPane tab=\"Shop\" key={4}>\n                    {profile.perks &&\n                        profile.perks.map((perk, index) => (\n                            <PerkCard\n                                key={index}\n                                perk={perk}\n                                perkId={perk.perkId}\n                                owner={profile}\n                                account={account || {}}\n                                onlyBuy={true}\n                                mode=\"shop\"\n                            />\n                        ))}\n                </Tabs.TabPane>\n                <Tabs.TabPane tab=\"Wallet\" key={5}>\n                    <Wallet pulledProfile={profile} account={profile} />\n                </Tabs.TabPane>\n                <Tabs.TabPane tab=\"Wishlist\" key={6}>\n                    {profile.wishlist.map((item, index) => (\n                        <PerkCard\n                            key={index}\n                            perk={item}\n                            perkId={item.itemId}\n                            owner={profile}\n                            account={account || {}}\n                            setEditedPerk={() => {}}\n                            setEditPerkOpen={() => {}}\n                            onlyBuy={true}\n                            mode=\"wishlist\"\n                        />\n                    ))}\n                </Tabs.TabPane>\n            </Tabs>\n        </Card>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n        profile: state.profile,\n        isAuthed: state.isAuthed,\n        friendData: state.friendData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: data => dispatch(actions.setData(data)),\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n        tryAuth: (props, forceAuth) =>\n            dispatch(actions.tryAuth(props, forceAuth)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Profile)\n)\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport Button from 'antd/es/button'\nimport message from 'antd/es/message'\n\nimport Input from 'antd/es/input'\nimport PageHeader from 'antd/es/page-header'\nimport Form from 'antd/es/form'\nimport { withRouter } from 'react-router-dom'\nimport axios from 'axios'\nimport { nicknameRules, accountNameRules } from '../../constants/fieldRules'\nimport * as actions from '../../store/actions'\n\nconst ActivateAccount = props => {\n    if (!props.isAuthed) props.history.push('/logout')\n    const onFinish = value => {\n        axios\n            .post('/api/activate-account', {\n                ...value,\n            })\n            .then(res => {\n                if (res.data.success) {\n                    message.success('Your account has been activated!')\n                    props.setAccountActivated(false)\n                    props.history.push('/account')\n                } else {\n                    if (res.data.nicknameNotUnique) {\n                        message.warning(\n                            'The nickname is taken. Choose another nickname please.'\n                        )\n                    }\n                    if (res.data.errorCode) {\n                        message.error(\n                            'Something is wrong with the data. Please try one more time with new data.'\n                        )\n                    }\n                }\n            })\n            .catch(err => {})\n    }\n\n    const layout = {\n        labelCol: { span: 8 },\n        wrapperCol: { span: 16 },\n    }\n    const tailLayout = {\n        wrapperCol: { offset: 8, span: 16 },\n    }\n\n    return (\n        <>\n            <PageHeader\n                className=\"site-page-header\"\n                title=\"Activate your account\"\n                backIcon={false}\n            />\n            <Form\n                name=\"dynamic_form_nest_item\"\n                onFinish={onFinish}\n                autoComplete=\"off\"\n                {...layout}\n            >\n                <Form.Item label=\"Name\" name=\"name\" rules={accountNameRules}>\n                    <Input placeholder=\"Must be more than 1 character long\" />\n                </Form.Item>\n                <Form.Item\n                    label=\"Nickname\"\n                    name=\"nickname\"\n                    rules={nicknameRules}\n                >\n                    <Input placeholder=\"Must be more than 1 character long\" />\n                </Form.Item>\n                <Form.Item {...tailLayout}>\n                    <Button type=\"primary\" htmlType=\"submit\" size=\"large\">\n                        Save\n                    </Button>\n                </Form.Item>\n            </Form>\n        </>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        user: state.user,\n        account: state.account,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n        setAccountActivated: value =>\n            dispatch(actions.setAccountActivated(value)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(ActivateAccount)\n)\n","import React, { useEffect, useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport Card from 'antd/es/card'\nimport pullData from '../../utils/pullData'\nimport Descriptions from 'antd/es/descriptions'\nimport Post from '../../components/Post/Post'\nimport UserButton from '../../components/UserButton/UserButton'\nimport ImageCarousel from '../../components/UI/ImageCarousel/ImageCarousel'\n\nconst { Item } = Descriptions\n\nconst Perk = props => {\n    const [data, setData] = useState({})\n    const { account } = props\n    useEffect(() => {\n        const pathParts = props.history.location.pathname.split('/')\n        if (pathParts.length > 3) {\n            const accountId = pathParts[2]\n            if (props.isAuthed && account._id === accountId) {\n                const perk = account.perks.find(\n                    item => item.perkId === pathParts[3]\n                )\n                setData({ profile: account, perk })\n            } else {\n                pullData(props, data, setData, { forceAuth: false }, data => {\n                    const friendData = {}\n                    for (let friend of data.friendData)\n                        friendData[friend._id] = friend\n\n                    props.setData({\n                        post: { [data.post._id]: data.post },\n                        friendData,\n                    })\n                })\n            }\n        }\n    }, [props.isAuthed])\n    if (!data.perk) return null\n    const { perk, profile } = data\n    props.setData({ currentPosts: perk.post })\n    if (perk) {\n        props.setPageTitle({ main: perk.name, sub: profile._id })\n    }\n\n    const getAccounts = items => {\n        if (profile && props.friendData) {\n            return items.map(item => <UserButton id={item} />)\n        } else return items\n    }\n\n    return perk ? (\n        <Card\n            title={\n                <span>\n                    Item from <UserButton id={profile._id} /> shop\n                </span>\n            }\n            bordered={false}\n        >\n            <ImageCarousel images={perk.images} />\n\n            <h1>{perk.name}</h1>\n            <p style={{ whiteSpace: 'pre-wrap' }}>{perk.description}</p>\n\n            <Descriptions\n                title=\"Goal description\"\n                bordered\n                column={{ xxl: 4, xl: 3, lg: 3, md: 3, sm: 2, xs: 1 }}\n            >\n                <Item label=\"Available for\">{getAccounts(perk.users)}</Item>\n                <Item label=\"Price\">{perk.price}</Item>\n            </Descriptions>\n            <Post\n                noStartMessage={true}\n                post={props.post[perk.post]}\n                account={props.account}\n                friendData={props.friendData}\n                showReplies={true}\n            />\n        </Card>\n    ) : null\n}\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        account: state.account,\n        post: state.post,\n        friendData: state.friendData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: data => {\n            dispatch(actions.setData(data))\n        },\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Perk)\n)\n","import React, { useEffect, useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport Card from 'antd/es/card'\nimport pullData from '../../utils/pullData'\nimport Post from '../../components/Post/Post'\nimport ImageCarousel from '../../components/UI/ImageCarousel/ImageCarousel'\nimport UserButton from '../../components/UserButton/UserButton'\n\nconst WishlistItem = props => {\n    const [data, setData] = useState({})\n    const { account } = props\n    useEffect(() => {\n        const pathParts = props.history.location.pathname.split('/')\n        if (pathParts.length > 3) {\n            const accountId = pathParts[2]\n            if (props.isAuthed && account._id === accountId) {\n                const wishlistItem = account.wishlist.find(\n                    item => item.itemId === pathParts[3]\n                )\n                setData({ profile: account, wishlistItem })\n            } else {\n                pullData(props, data, setData, { forceAuth: false }, data => {\n                    const friendData = {}\n                    for (let friend of data.friendData)\n                        friendData[friend._id] = friend\n\n                    props.setData({\n                        post: { [data.post._id]: data.post },\n                        friendData,\n                    })\n                })\n            }\n        }\n    }, [props.isAuthed])\n    if (!data.wishlistItem) return null\n    const { wishlistItem, profile } = data\n    props.setData({ currentPosts: wishlistItem.post })\n    if (wishlistItem) {\n        props.setPageTitle({ main: wishlistItem.name, sub: profile._id })\n    }\n    return wishlistItem ? (\n        <Card\n            title={\n                <span>\n                    <UserButton id={profile._id} /> wishlist\n                </span>\n            }\n            bordered={false}\n        >\n            <ImageCarousel images={wishlistItem.images} />\n\n            <h1>{wishlistItem.name}</h1>\n            <p style={{ whiteSpace: 'pre-wrap' }}>{wishlistItem.description}</p>\n            <Post\n                noStartMessage={true}\n                post={props.post[wishlistItem.post]}\n                account={props.account}\n                friendData={props.friendData}\n                showReplies={true}\n            />\n        </Card>\n    ) : null\n}\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        account: state.account,\n        post: state.post,\n        friendData: state.friendData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: data => {\n            dispatch(actions.setData(data))\n        },\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(WishlistItem)\n)\n","import React, { useEffect } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport WishlistAndPerks from '../Shop/WishlistAndPerks'\n\nconst Wishlist = props => {\n    useEffect(() => {\n        props.setPageTitle({ main: 'Wishlist', sub: '' })\n    }, [])\n\n    return (\n        <>\n            {props.account._id ? (\n                <WishlistAndPerks mode=\"wishlist\" account={props.account} />\n            ) : (\n                <span />\n            )}\n        </>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Wishlist)\n)\n","import React, { useEffect, useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\n\nimport Modal from 'antd/es/modal'\nimport Button from 'antd/es/button'\nimport Card from 'antd/es/card'\nimport Post from '../../components/Post/Post'\nimport AddPost from '../../components/Post/AddPost'\nimport Tabs from 'antd/es/tabs'\nimport AddCard from '../../components/AddCard/AddCard'\nimport ProgressCard from '../Progresses/ProgressCard'\nimport AddProgress from '../Progresses/AddProgress'\n\nconst Group = props => {\n    const [state, setState] = useState({})\n    const [startProgressVisible, setStartProgressVisible] = useState(false)\n\n    const groupId = props.history.location.pathname.split('/')[2]\n    useEffect(() => {\n        props.setData({ currentGroup: groupId })\n    }, [props.isAuthed])\n\n    const { group, account, friendData, posts, progressData } = props\n\n    if (!group._id) return null\n    props.setData({ currentPosts: group.posts })\n\n    props.setPageTitle({ main: group.name, sub: group.worker })\n\n    const loadedProgresses = group.progresses\n        .filter(item => progressData[item])\n        .map(item => progressData[item])\n\n    const editGoal = (\n        <Modal\n            title=\"Add goal\"\n            visible={startProgressVisible}\n            maskClosable\n            closable\n            onCancel={() => setStartProgressVisible(false)}\n            width=\"100%\"\n            footer={\n                <Button\n                    key=\"back\"\n                    onClick={() => setStartProgressVisible(false)}\n                >\n                    Close\n                </Button>\n            }\n            destroyOnClose={true}\n        >\n            <AddProgress\n                setStartProgressVisible={setStartProgressVisible}\n                account={account}\n                friendData={props.friendData}\n                inGroup={group._id}\n            />\n        </Modal>\n    )\n    return friendData ? (\n        <>\n            <Tabs>\n                <Tabs.TabPane tab=\"Posts\" key=\"posts\">\n                    <AddPost\n                        parent={groupId}\n                        account={account}\n                        parentType=\"progress\"\n                        // onSend={() => setEditingMessage('')}\n                    />\n                    {group.posts.map(postId => {\n                        if (posts[postId]) {\n                            const post = posts[postId]\n                            return (\n                                <Card>\n                                    <Post\n                                        friendData={friendData}\n                                        account={account}\n                                        post={post}\n                                    />\n                                </Card>\n                            )\n                        } else return null\n                    })}\n                </Tabs.TabPane>\n                <Tabs.TabPane tab=\"Progresses\" key=\"progresses\">\n                    <AddCard\n                        title=\"Start a new progress\"\n                        sub=\"Rich your goals or help others!\"\n                        action={() => {\n                            setStartProgressVisible(true)\n                        }}\n                    />\n                    {loadedProgresses.map((progress, index) => (\n                        <ProgressCard key={index} progress={progress} />\n                    ))}\n                    {editGoal}\n                </Tabs.TabPane>\n            </Tabs>\n\n            <Modal\n                visible={state.previewImage}\n                footer={null}\n                onCancel={() => setState({ ...state, previewImage: '' })}\n            >\n                <img\n                    alt=\"example\"\n                    style={{ width: '100%' }}\n                    src={state.previewImage}\n                />\n            </Modal>\n        </>\n    ) : null\n}\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        account: state.account,\n        posts: state.post,\n        group: state.group,\n        friendData: state.friendData,\n        progressData: state.progressData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: data => {\n            dispatch(actions.setData(data))\n        },\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Group)\n)\n","import React from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport isEqual from 'lodash.isequal'\nconst NotificationsTracker = props => {\n    const { account, friendData, progressData, groupData } = props\n\n    const sortNotifiacations = (a, b) =>\n        new Date(a.date).getTime() < new Date(b.date).getTime() ? 1 : -1\n\n    if (!account._id) return null\n\n    let lastNotifications = []\n    for (let progress of account.progresses) {\n        if (progressData[progress])\n            lastNotifications = [\n                ...lastNotifications,\n                ...progressData[progress].notifications,\n            ]\n    }\n\n    for (let group of account.groups) {\n        if (groupData[group])\n            lastNotifications = [\n                ...lastNotifications,\n                ...groupData[group].notifications,\n            ]\n    }\n\n    for (let friend of account.friends) {\n        if (\n            friendData[friend.friend] &&\n            friend.status === 'friend' &&\n            friendData[friend.friend].notifications\n        )\n            lastNotifications = [\n                ...lastNotifications,\n                ...friendData[friend.friend].notifications,\n            ]\n    }\n    const filterSameNot = (res, not, index, arr) => {\n        if (!res.find(item => item.notId === not.notId)) {\n            res.push(not)\n        }\n        return res\n    }\n    lastNotifications = lastNotifications.reduce(filterSameNot, [])\n\n    lastNotifications = lastNotifications.sort(sortNotifiacations).slice(0, 100)\n\n    lastNotifications = [\n        ...lastNotifications,\n        ...account.myNotifications,\n    ].filter(item => item.code !== 'add post')\n\n    lastNotifications = lastNotifications.reduce(filterSameNot, [])\n    lastNotifications = lastNotifications.sort(sortNotifiacations)\n    if (!isEqual(lastNotifications, props.lastNotifications)) {\n        props.setData({ lastNotifications })\n    }\n\n    return <span />\n}\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        account: state.account,\n        statePosts: state.post,\n        progress: state.progress,\n        friendData: state.friendData,\n        progressData: state.progressData,\n        groupData: state.groupData,\n        lastNotifications: state.lastNotifications,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: data => {\n            dispatch(actions.setData(data))\n        },\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(NotificationsTracker)\n)\n","import React, { useEffect } from 'react'\nimport { Route, Switch, withRouter, Redirect } from 'react-router-dom'\n\nimport Auth from './containers/Auth/Auth'\nimport AuthTest from './containers/Auth/AuthTest'\nimport './components/UI/loadStyles'\nimport AccountLayout from './components/Layout/Layout'\nimport Goals from './containers/Goals/Goals'\nimport Goal from './containers/Goals/Goal'\nimport Progresses from './containers/Progresses/Progresses'\nimport Progress from './containers/Progress/Progress'\nimport Shop from './containers/Shop/Shop'\nimport Dashboard from './containers/Dashboard/Dashboard'\n\nimport Friends from './containers/Friends/Friends'\nimport Account from './containers/Account/Account'\nimport Profile from './containers/Profile/Profile'\n\nimport ActivateAccount from './containers/ActivateAccount/ActivateAccount'\nimport Cookies from 'universal-cookie'\nimport Perk from './containers/Shop/Perk'\n\nimport WishlistItem from './containers/Wishlist/WishlistItem'\nimport Wishlist from './containers/Wishlist/Wishlist'\nimport { connect } from 'react-redux'\nimport * as actions from './store/actions'\nimport ConnectWebsocket from './containers/ConnectWebsocket/ConnectWebsocket'\nimport Group from './containers/Group/Group'\nimport NotificationsTracker from './containers/Dashboard/NotificationsTracker'\n\nconst cookies = new Cookies()\n\nconst App = props => {\n    const { isAuthed } = props\n    useEffect(() => {\n        props.tryAuth(props)\n    }, [])\n\n    const redirectTo = cookies.get('redirectto')\n\n    if (redirectTo) {\n        cookies.remove('redirectto', {\n            path: '/',\n        })\n    }\n\n    const Logout = () => {\n        props.logout()\n        return <Redirect to=\"/login\" />\n    }\n\n    let routes = (\n        <Switch>\n            <Route path=\"/goals\" exact component={Goals} />\n            <Route path=\"/goals\" component={Goal} />\n\n            <Route path=\"/progresses\" exact component={Progresses} />\n            <Route path=\"/progresses\" component={Progress} />\n            <Route path=\"/groups\" component={Group} />\n\n            <Route path=\"/profile\" component={Profile} />\n\n            <Route path=\"/friends\" exact component={Friends} />\n\n            <Route path=\"/account\" exact component={Account} />\n            <Route path=\"/dashboard\" exact component={Dashboard} />\n\n            <Route path=\"/shop\" exact component={Shop} />\n            <Route path=\"/shop\" component={Perk} />\n            <Route path=\"/wishlist\" exact component={Wishlist} />\n            <Route path=\"/wishlist\" component={WishlistItem} />\n            {!isAuthed && <Route path=\"/login\" exact component={Auth} />}\n            <Route path=\"/logout\" exact component={Logout} />\n\n            <Route path=\"/activate-account\" exact component={ActivateAccount} />\n\n            {process.env.NODE_ENV === 'development' && !isAuthed && (\n                <Route path=\"/logintest\" exact component={AuthTest} />\n            )}\n            {isAuthed ? <Redirect to=\"/dashboard\" /> : <Redirect to=\"/login\" />}\n        </Switch>\n    )\n\n    if (props.accountNotActive) {\n        routes = (\n            <Switch>\n                {!isAuthed && <Route path=\"/login\" exact component={Auth} />}\n                <Route path=\"/logout\" exact component={Logout} />\n\n                <Route\n                    path=\"/activate-account\"\n                    exact\n                    component={ActivateAccount}\n                />\n\n                {process.env.NODE_ENV === 'development' && !isAuthed && (\n                    <Route path=\"/logintest\" exact component={AuthTest} />\n                )}\n                {isAuthed ? (\n                    <Redirect to=\"/activate-account\" />\n                ) : (\n                    <Redirect to=\"/login\" />\n                )}\n            </Switch>\n        )\n    }\n\n    return redirectTo ? (\n        <Redirect to={redirectTo} />\n    ) : (\n        <>\n            <div style={{ height: '100%' }}>\n                <AccountLayout>{routes}</AccountLayout>\n                {isAuthed && <ConnectWebsocket />}\n                {isAuthed && <NotificationsTracker />}\n            </div>\n            {/* {this.props.loading && <Spinner cover />} */}\n        </>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        user: state.user,\n        account: state.account,\n        accountNotActive: state.accountNotActive,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        tryAuth: (props, forceAuth) =>\n            dispatch(actions.tryAuth(props, forceAuth)),\n        logout: () => dispatch(actions.logout()),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(App)\n)\n","import { createReducer } from '@reduxjs/toolkit'\n\nexport const initialState = {\n    isAuthed: false,\n    user: null,\n    currentAccount: '',\n    account: {},\n    friendData: {},\n    transactionData: {},\n    progressData: {},\n    currentProfile: '',\n    profile: {},\n    currentProgress: '',\n    currentGroup: '',\n    currentPosts: [],\n    progress: {},\n    post: {},\n    postData: {},\n    group: {},\n    groupData: {},\n    pageTitle: {},\n    lastUrl: '',\n    friendSearchResult: {},\n    accountNotActive: false,\n    lastNotifications: [],\n}\n\nconst reducer = createReducer(initialState, {\n    SET_DATA: (state: Object, action: Object) => {\n        if (action.data) {\n            for (let key of [\n                'user',\n                'account',\n                'isAuthed',\n                'currentAccount',\n                'currentProfile',\n                'currentPosts',\n                'currentGroup',\n                'profile',\n                'group',\n                'currentProgress',\n                'progress',\n                'lastNotifications',\n            ]) {\n                if (typeof action.data[key] !== 'undefined') {\n                    state[key] = action.data[key]\n                }\n            }\n            for (let key of [\n                'friendData',\n                'progressData',\n                'post',\n                'postData',\n                'groupData',\n                'transactionData',\n            ]) {\n                if (typeof action.data[key] !== 'undefined') {\n                    for (let attr in action.data[key]) {\n                        if (action.data[key][attr]) {\n                            state[key][attr] = action.data[key][attr]\n                        }\n                    }\n                }\n            }\n        }\n        if (state.user) {\n            if (state.user.currentAccount) {\n                state.currentAccount = state.user.currentAccount\n                state.accountNotActive = false\n            } else if (state.user.myAccount) {\n                state.currentAccount = state.user.myAccount\n                state.accountNotActive = false\n            } else {\n                state.accountNotActive = true\n            }\n        }\n    },\n    REMOVE_DATA: (state: Object, action: Object) => {\n        if (action.data) {\n            for (let key of [\n                'user',\n                'account',\n                'profile',\n                'progress',\n                'group',\n            ]) {\n                for (let item of action.data[key]) {\n                    if (state[key]._id === item) {\n                        state[key] = {}\n                    }\n                }\n            }\n            for (let key of [\n                'post',\n                'friendData',\n                'progressData',\n                'postData',\n                'groupData',\n                'transactionData',\n            ]) {\n                for (let item of action.data[key]) {\n                    delete state[key][item]\n                }\n            }\n        }\n    },\n    SET_FRIEND_SEARCH_RESULT: (state: Object, action: Object) => {\n        state.friendSearchResult = action.data\n    },\n    SET_FRIENDS_DATA: (state: Object, action: Object) => {\n        if (action.data) {\n            state.account.friendsData = action.data\n        }\n        if (action.data.perk) state.perk = action.data.perk\n    },\n    SET_AVATAR_V: (state: Object, action: Object) => {\n        state.account.image = action.v\n    },\n    INCREASE_AVATAR_V: (state: Object) => {\n        state.account.image = state.account.image + 1\n    },\n    SET_IS_AUTHED: (state: Object, action: Object) => {\n        state.isAuthed = action.id\n    },\n    SET_PAGE_TITLE: (state: Object, action: Object) => {\n        state.pageTitle = action.title\n    },\n    SAVE_LAST_URL: (state: Object, action: Object) => {\n        if (action.url !== '/login' && action.url !== '/logout')\n            state.lastUrl = action.url\n    },\n    SET_ACCOUNT_ACTIVATED: (state: Object, action: Object) => {\n        state.accountNotActive = action.value\n    },\n})\n\nexport default reducer\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter } from 'react-router-dom'\nimport axios from 'axios'\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly'\n\nimport './index.css'\nimport App from './App'\nimport reducer from './store/reducer/reducer'\n//import * as serviceWorker from './serviceWorker';\n\nif (process.env.NODE_ENV === 'development') {\n    axios.defaults.baseURL = 'http://my.websiter.test:5000'\n} else {\n    axios.defaults.baseURL = 'https://getreward.herokuapp.com'\n}\n// axios.defaults.withCredentials = true\n\nexport const store = createStore(\n    reducer,\n    composeWithDevTools(applyMiddleware(thunk))\n)\n\nconst app = (\n    <Provider store={store}>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </Provider>\n)\n\nconst root = document.getElementById('root')\n\nReactDOM.render(app, root)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}