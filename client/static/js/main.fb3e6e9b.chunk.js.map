{"version":3,"sources":["containers/Auth/Auth.module.css","components/UI/ImageCarousel/imageCarousel.module.css","containers/Account/Account.module.css","components/Layout/Layout.module.css","containers/Auth/Auth.tsx","containers/Auth/AuthTest.tsx","utils/getAvatar.js","components/Layout/LoginModal.tsx","components/Layout/Layout.tsx","utils/processRes.js","store/actions/auth.tsx","containers/ConnectWebsocket/methods/getListOfNeededResources.js","containers/ConnectWebsocket/methods/compareVersionsAndRerequest.js","containers/ConnectWebsocket/methods/getResourcesToMonitor.js","containers/ConnectWebsocket/ConnectWebsocket.tsx","store/actions/saveResources.tsx","containers/ConnectWebsocket/methods/requestResource.tsx","store/actions/updateResource.tsx","utils/uploadFile.js","constants/fieldLength.js","constants/fieldRules.js","containers/Shop/AddPerkForm.tsx","websocketActions/posts.tsx","websocketActions/wishlistAndPerks.tsx","websocketActions/friends.tsx","containers/Shop/AddPerk.tsx","components/MasonryCard.tsx","components/UI/MoreIcon.js","containers/Shop/PerkCard.tsx","components/AddCard/AddCard.tsx","utils/masonryBreakPoints.js","components/MasonryGrid.tsx","containers/Shop/WishlistAndPerks.tsx","containers/Goals/Goals.tsx","utils/pullData.js","components/Post/AddMessage.tsx","components/UI/ImageCarousel/ImageCarousel.tsx","components/UserButton/UserButton.tsx","components/Post/Message.tsx","components/Post/Post.tsx","containers/Goals/Goal.tsx","components/EditGoalAndProgressForm/connectionsSelect.tsx","components/Rewards/Rewards.tsx","websocketActions/progresses.tsx","components/EditGoalAndProgressForm/EditGoalAndProgressForm.tsx","containers/Progresses/AddProgress.tsx","containers/Progresses/GroupCard.tsx","containers/Progresses/Progresses.tsx","containers/Progress/ActivityTable.tsx","containers/Progress/EditProgress.tsx","containers/Progress/Activity.tsx","components/Post/AddPost.tsx","containers/Progress/Progress.tsx","containers/Shop/Wallet.tsx","containers/Shop/Transactions.tsx","containers/Shop/Shop.tsx","containers/Dashboard/DashboardPosts.tsx","containers/Dashboard/DashboardEvents.tsx","containers/Dashboard/Dashboard.tsx","websocketActions/dashboard.tsx","containers/Explore/Explore.tsx","components/FriendActionButton.tsx","components/FriendCard.tsx","containers/Friends/AddFriends.tsx","containers/Friends/PendingFriends.tsx","containers/Friends/Friends.tsx","containers/Account/Account.tsx","websocketActions/account.tsx","containers/Profile/Profile.tsx","containers/ActivateAccount/ActivateAccount.tsx","containers/Shop/Perk.tsx","containers/Wishlist/WishlistItem.tsx","containers/Wishlist/Wishlist.tsx","containers/Progresses/ProgressCard.tsx","containers/Group/Group.tsx","containers/Dashboard/NotificationsTracker.tsx","App.tsx","store/reducer/reducer.tsx","index.tsx"],"names":["module","exports","Container","socialButtons","Background","Dots","Avatar","Layout","Header","Footer","HideHeader","FooterButton","TopHeader","BottomHeader","Main","Button","MenuButtonContiner","QuickButtonContiner","PageTitle","cookies","Cookies","withRouter","connect","state","lastUrl","props","_useState","useState","_useState2","Object","slicedToArray","setState","_useState3","_useState4","cookieConsent","setCookieConsent","useEffect","checkCookieConsent","remeberMeParam","get","basicURL","react_default","a","createElement","className","classes","dist","onClick","window","location","concat","es_checkbox","checked","onChange","modal","title","visible","onOk","set","path","maxAge","onCancel","open","destroyOnClose","maskClosable","getAvatar","nickname","version","loginVisible","setLoginVisible","footer","width","style","maxWidth","fontWeight","lineHeight","marginBottom","fontSize","s","typography","Link","account","pageTitle","isAuthed","lastNotifications","isConnectingWS","menuVisible","setMenuVisible","lastScrollY","setLastScrollY","_useState5","_useState6","headerVisible","setHeaderVisible","_useState7","_useState8","_useState9","history","pathname","_useState10","pageAddress","setPageAddress","handleScroll","currentScrollY","scrollY","removeEventListener","addEventListener","scrollTo","top","left","behavior","toggleMenu","selectedKey","split","undefined","buttonProps","type","size","checkHighligh","url","ghost","openLink","push","isActivating","numberOfUnseenNots","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","not","value","parseInt","notId","lastSeenNot","err","return","logedIn","_id","Fragment","join","es_button","assign","icon","MenuOutlined_default","main","LogoutOutlined_default","margin","cursor","avatar","border","src","image","marginRight","spin","indicator","LoadingOutlined_default","color","children","badge","count","HomeFilled_default","RocketFilled_default","ShopFilled_default","friends","filter","item","status","length","TeamOutlined_default","drawer","closable","onClose","placement","es_menu","theme","mode","selectedKeys","_ref","key","overflowedIndicator","marginTop","Item","CoffeeOutlined_default","HeartFilled_default","UserOutlined_default","Layout_LoginModal","back_top","height","borderRadius","backgroundColor","textAlign","UpOutlined_default","processRes","res","data","logout","success","errorCode","message","warning","error","successCode","tryAuth","forceLogin","dispatch","sessionStorage","setItem","token","rememberMe","remove","userId","jwt","decode","axios","defaults","headers","post","put","delete","common","Accept","setIsAuthed","saveLastUrl","pathParts","includes","id","setData","setPageTitle","setFriendSearchResult","getListOfNeededResources","store","requestedResources","user","progress","group","progressData","friendData","postData","groupData","transactionData","neededResources","currentAccount","progresses","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","groups","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","followPosts","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","myPosts","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","transactions","transaction","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","friend","currentProfile","profile","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","currentGroup","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","users","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_iterator11","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_step12","_iterator12","posts","currentProgress","participants","owner","worker","toConsumableArray","experts","supporters","_iteratorNormalCompletion13","_didIteratorError13","_iteratorError13","_step13","_iterator13","_iteratorNormalCompletion14","_didIteratorError14","_iteratorError14","_step14","_iterator14","currentPosts","_iteratorNormalCompletion15","_didIteratorError15","_iteratorError15","_step15","_iterator15","postEl","_iteratorNormalCompletion16","_didIteratorError16","_iteratorError16","_step16","_iterator16","parent","parentType","parentId","reduce","obj","attr","Array","from","Set","notNeededExist","notNeededResources","check1","check2","removeData","compareVersionsAndRerequest","versions","webSocket","checkData","requestResource","check","__v","getResourcesToMonitor","resources","addData","require","create","propertyFilter","name","context","ConnectWebsocket","start","pingTimeout","WebSocket","heartbeat","_this","clearTimeout","setTimeout","close","send","JSON","stringify","messageCode","onopen","event","resourcesToMonitor","initializeRequestResources","onmessage","news","parse","messageText","setFriendsData","friendsData","saveResource","updateResource","code","update","text","onclose","checkInterval","readyState","clearInterval","setInterval","reRequestResourcesInterval","reRequestResources","_i","_arr","ids","nextProps","newRequestedResources","_loop","_arr2","_i2","this","setConnectingToWS","Component","pulledFrom","actions","getState","myAccount","find","notRequestedIds","applyDelta","source","delta","watchFields","result","cloneDeep","del","applyWithDot","keys","shift","applyUpdateToPart","updatedFields","applyDeleteToPart","splice","removedFields","field","indexOf","parState","element","defineProperty","updateData","uploadFile","file","filename","callback","alert","reader","FileReader","onload","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","resizeImageToSpecificSize","urltoFile","then","getSignedRequest","stop","_x","apply","arguments","readAsArrayBuffer","mimeType","match","fetch","arrayBuffer","buf","File","cb","resizeImageFromSrcToSpecificSize","target","readAsDataURL","img","Image","widthCoef","heightCoef","oc","document","octx","getContext","drawImage","toDataURL","fileName","response","doUploadFile","catch","signedRequest","Content-Type","console","log","fieldLength","nicknameRules","required","whitespace","min","max","pattern","nameRules","accountNameRules","descriptionRules","messageRules","priceRules","AddPerkForm","previewImage","setPreviewImage","connections","perkId","perk","deletePerk","onFinish","images","setImages","uploadImage","connectionsSelect","es_select","placeholder","getPopupContainer","trigger","parentNode","map","Option","_Form$useForm","Form","useForm","form","es_form","autoComplete","initialValues","labelCol","span","wrapperCol","label","valuePropName","getValueFromEvent","e","isArray","fileList","upload","listType","index","objectSpread","uid","onPreview","customRequest","_ref2","PlusOutlined_default","rules","input","TextArea","input_number","offset","htmlType","popconfirm","onConfirm","okText","cancelText","danger","alt","changeLikesMessage","messageId","accountId","postId","buyPerk","buyer","seller","unfriend","friendId","setPerk","wishlist","itemId","goals","goalId","perks","Shop_AddPerkForm","wsActions","setEditPerkOpen","processedValue","onClickLink","padding","wordBreak","float","body","MoreIcon","viewBox","transform","d","setEditedPerk","MasonryCard","card","extra","stopPropagation","onlyBuy","dropdown","overlay","bordered","price","AddCard","action","shape","icons_PlusOutlined","friendsBreakPoints","default","1600","1100","600","cardBreakPoints","700","350","MasonryGrid","react_masonry_css_es5_default","breakpointCols","columnClassName","WishlistAndPerks","editedPerk","editPerkOpen","editPerk","Shop_AddPerk","components_AddCard_AddCard","sub","listKey","Shop_PerkCard","Shop_WishlistAndPerks","pullData","options","imageLoading","setImageLoading","content","replyToUser","setMessageText","background","replyTo","bottom","comment","autoSize","minRows","maxRows","rows","messageValue","replyToMessage","editedMessage","editingMessage","onSend","SendOutlined_default","showUploadList","_ref3","PictureFilled_default","cancel","CloseCircleFilled_default","Modal","ImageCarousel","carousel","dots","backgroundImage","backgroundSize","backgroundPosition","backgroundRepeat","friendSearchResult","friendDataExp","getUserData","userName","userAvatar","noClick","handleClick","Group","noAva","noName","Message","replies","isStart","replyVisible","setReplyVisible","setReplyToUser","setEditingMessage","showReplies","setShowReplies","commentProps","timeago_react","datetime","date","live","tooltip","likes","LikeFilled_default","LikeOutlined_default","paddingLeft","author","components_UserButton_UserButton","messageType","details","display","UI_ImageCarousel_ImageCarousel","goal","startMessage","Post_AddMessage","isTop","reply","postOpen","setPostOpen","noStartMessage","Post_Message","divider","position","justifyContent","icons_LikeFilled","icons_LikeOutlined","CommentOutlined","messages","getNumberOfMessages","whiteSpace","description","components_Post_Post","EditGoalAndProgressForm_connectionsSelect","onSelect","previewReward","setPreviewReward","editedReward","setEditedReward","editedRewardIndex","setEditedRewardIndex","readOnly","rewardsGI","rewards","findIndex","rewardKey","setRewards","RewardButton","simple","money","itemName","onlyButton","for","marginLeft","progressId","rewardId","confirm","newRewards","indexIn","reward","rewardToSave","itemImages","_ref4","itemDescription","_ref5","hoverable","cover","descriptions","column","xxl","xl","lg","md","sm","xs","EditGoalAndProgressForm","milestones","setMilestones","withMilestones","setWithMilestones","newTabIndex","setNewTabIndex","_useState11","rewardsGroups","_useState12","addMilestone","milestone","newPanes","newKey","indexOfMile","mile","setFieldsValue","MilestoneControls","dropdown_dropdown","domEvent","finish","newMilestones","Divider","pane","preventDefault","milestonesValues","onValuesChange","changedValues","collapse","expandIconPosition","accordion","Panel","header","getFieldValue","components_Rewards_Rewards","AddProgress","components_EditGoalAndProgressForm_EditGoalAndProgressForm","setStartProgressVisible","inGroup","Meta","Card","TabPane","Tabs","forceAuth","loadedProgresses","loadedGroups","fromProfile","startProgressVisible","active","editGoal","Progresses_AddProgress","tab","Progresses_GroupCard","empty","imageStyle","ActivityTable","renderCheckbox","milestoneId","disabled","getCheckboxStatus","stage","approvedBy","destroyInactivePanel","stages","expert","Paragraph","ellipsis","expandable","symbol","paid","EditProgress","editProgressOpen","Descriptions","orientation","Progress_ActivityTable","toString","Progress_EditProgress","zIndex","icons_PictureFilled","icons_CloseCircleFilled","tabs","Progress_Activity","Post_AddPost","paddingTop","pulledProfile","wallet","amount","tableData","sorted","sort","b","Date","getTime","types","to","alignItems","layout","tag","es_tag","toUpperCase","format","cancelTransaction","record","confirmTransaction","boxShadow","Shop_Wallet","Shop_Transactions","statePosts","setPosts","startTime","sortPosts","aN","notifications","bN","newPosts","newUnseenPosts","newOldPosts","oldPosts","oldPostIndex","_loop2","_newOldPosts","resultPosts","slice","neededPosts","isEqual","nots","getRewardText","as","progressName","addedAccounts","ac","droppedAccounts","activeTab","last","Dashboard_DashboardPosts","Dashboard_DashboardEvents","isSearching","setIsSearching","foundProgresses","setFoundProgresses","setProgresses","noMore","setNoMore","noMorePopular","setNoMorePopular","searchValue","setSearchValue","_useState13","_useState14","setFriendData","onSearch","noNoMore","skip","newFriendData","Search","enterButton","allowClear","react_infinite_scroller_default","pageStart","loadMore","hasMore","loader","FriendActionButton","invitingFriends","invitedFriends","realFriends","additionalButton","menu","additionalButtons","button","asText","DownOutlined","friendActions","friendActionButton","asIcons","searchResult","addFriendOpen","setAddFriendOpen","search","components_FriendCard","fullFriend","confirmedFriends","PendingFriends","Friends_AddFriends","increaseAvatarV","deleteVisible","setDeleteVisible","deleteField","setDeleteField","flex","overflow","profileId","containers_Progresses_Progresses","oneFriendData","setAccountActivated","page_header","backIcon","nicknameNotUnique","items","Perk_Item","wishlistItem","groupId","Progresses_ProgressCard","sortNotifiacations","filterSameNot","arr","myNotifications","accountNotActive","redirectTo","Logout","react_router","routes","exact","component","Goals","Goal","Progresses","Progress","Profile","Friends","Account","Dashboard","Explore","Shop","Perk","Wishlist","WishlistItem","ActivateAccount","process","Auth","containers_ConnectWebsocket_ConnectWebsocket","Dashboard_NotificationsTracker","reducer","createReducer","SET_DATA","REMOVE_DATA","_i3","_arr3","_i4","_arr4","SET_FRIEND_SEARCH_RESULT","SET_FRIENDS_DATA","SET_AVATAR_V","v","INCREASE_AVATAR_V","SET_IS_AUTHED","SET_PAGE_TITLE","SAVE_LAST_URL","SET_ACCOUNT_ACTIVATED","SET_CONNECTING_WS","__webpack_require__","__webpack_exports__","src_store","baseURL","createStore","composeWithDevTools","applyMiddleware","thunk","app","es","react_router_dom","src_App","root","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.fb3e6e9b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Auth_Container__1KNy7\",\"socialButtons\":\"Auth_socialButtons__2wwH9\",\"Background\":\"Auth_Background__39m_a\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Dots\":\"imageCarousel_Dots__2JZGt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Avatar\":\"Account_Avatar__l4shx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Layout\":\"Layout_Layout__3t6t4\",\"Header\":\"Layout_Header__3lh1Y\",\"Footer\":\"Layout_Footer__1Dfqu\",\"HideHeader\":\"Layout_HideHeader__2WRsh\",\"FooterButton\":\"Layout_FooterButton__1lZv2\",\"TopHeader\":\"Layout_TopHeader__3_LuK\",\"BottomHeader\":\"Layout_BottomHeader__3DOBo\",\"Main\":\"Layout_Main__3usmk\",\"Button\":\"Layout_Button__1O5Hm\",\"MenuButtonContiner\":\"Layout_MenuButtonContiner__PpulB\",\"QuickButtonContiner\":\"Layout_QuickButtonContiner__4d4Lg\",\"PageTitle\":\"Layout_PageTitle__368dw\"};","import React, { useState, useEffect } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport Checkbox from 'antd/es/checkbox'\nimport Cookies from 'universal-cookie'\nimport classes from './Auth.module.css'\nimport Modal from 'antd/es/modal'\nimport {\n    FacebookLoginButton,\n    GithubLoginButton,\n    GoogleLoginButton,\n} from 'react-social-login-buttons'\n\nconst cookies = new Cookies()\n\nconst Auth = props => {\n    const [state, setState] = useState(false)\n    const [cookieConsent, setCookieConsent] = useState(false)\n\n    useEffect(() => {\n        checkCookieConsent()\n    })\n\n    let remeberMeParam = '?rememberme=false'\n    if (state) {\n        remeberMeParam = '?rememberme=true'\n    }\n\n    let redirectParam = '&redirect=/login'\n    if (props.lastUrl) {\n        redirectParam = '&redirect=' + props.lastUrl\n    }\n\n    const checkCookieConsent = () => {\n        const cookiesConsent = cookies.get('cookies_consent')\n        if (cookiesConsent) {\n            setCookieConsent(true)\n        }\n    }\n\n    const agreeWithCookies = () => {\n        cookies.set('cookies_consent', 'true', {\n            path: '/',\n            maxAge: 31530000,\n        })\n        checkCookieConsent()\n    }\n    const basicURL =\n        process.env.NODE_ENV !== 'development'\n            ? 'https://addspiration.com/api/auth/'\n            : 'http://my.websiter.test:5000/api/auth/'\n    return !cookieConsent ? (\n        <Modal\n            title=\"Cookies consent\"\n            visible={!cookieConsent}\n            onOk={agreeWithCookies}\n            onCancel={() => {\n                window.open('https://websiter.dev', '_self')\n            }}\n            destroyOnClose={true}\n            maskClosable={false}\n        >\n            <p>We use cookies only for login purposes. </p>\n            <p>\n                In order to proceed you need to agree with the use of cookies.\n            </p>\n        </Modal>\n    ) : (\n        <div className=\"contentDiv\">\n            <div className={classes.Container}>\n                <h1>Welcome to Websiter!</h1>\n                <h2>This is where great progresses live.</h2>\n                <h1>Continue with:</h1>\n                <div className={classes.socialButtons}>\n                    <FacebookLoginButton\n                        onClick={() =>\n                            (window.location =\n                                basicURL + `facebook/start${remeberMeParam}`)\n                        }\n                    />\n                    <GoogleLoginButton\n                        onClick={() =>\n                            (window.location =\n                                basicURL + `google/start${remeberMeParam}`)\n                        }\n                    />\n                    <GithubLoginButton\n                        onClick={() =>\n                            (window.location =\n                                basicURL + `github/start${remeberMeParam}`)\n                        }\n                    />\n                </div>\n                <Checkbox checked={state} onChange={() => setState(!state)}>\n                    Remember me\n                </Checkbox>\n            </div>\n            <div className={classes.Background} />\n        </div>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        lastUrl: state.lastUrl,\n    }\n}\n\nexport default withRouter(connect(mapStateToProps)(Auth))\n","import React from 'react'\n\nimport Form from 'antd/es/form'\nimport Input from 'antd/es/input'\nimport Button from 'antd/es/button'\nimport axios from 'axios'\nimport Cookies from 'universal-cookie'\n\nconst cookies = new Cookies()\n\nconst Auth = props => {\n    const layout = {\n        labelCol: { span: 8 },\n        wrapperCol: { span: 16 },\n    }\n    const tailLayout = {\n        wrapperCol: { offset: 8, span: 16 },\n    }\n    const onFinish = value => {\n        axios\n            .post('/api/authtest/' + value.id)\n            .then(res => {\n                cookies.set('auth_token', res.data.cookie)\n                props.onTryAutoSignup()\n            })\n            .catch(err => {})\n    }\n    return (\n        <Form\n            name=\"dynamic_form_nest_item\"\n            onFinish={onFinish}\n            autoComplete=\"off\"\n            {...layout}\n        >\n            <Form.Item\n                label=\"Id\"\n                name=\"id\"\n                rules={[\n                    { required: true, message: 'Please input the goal name.' },\n                ]}\n            >\n                <Input />\n            </Form.Item>\n            <Form.Item {...tailLayout}>\n                <Button type=\"primary\" htmlType=\"submit\" size=\"large\">\n                    Save\n                </Button>\n            </Form.Item>\n        </Form>\n    )\n}\n\nexport default Auth\n","export default (nickname, version) => {\n    if (!nickname) return ''\n    else {\n        return (\n            'https://websiter.s3.us-east-2.amazonaws.com/' +\n            nickname +\n            '/avatar?v=' +\n            (version || 0)\n        )\n    }\n}\n","import React, { useState, useEffect } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport Checkbox from 'antd/es/checkbox'\nimport Cookies from 'universal-cookie'\nimport classes from '../../containers/Auth/Auth.module.css'\nimport Modal from 'antd/es/modal'\nimport {\n    FacebookLoginButton,\n    GithubLoginButton,\n    GoogleLoginButton,\n} from 'react-social-login-buttons'\nimport Typography from 'antd/es/typography'\n\nconst cookies = new Cookies()\n\nconst LoginModal = props => {\n    const [state, setState] = useState(false)\n    const [cookieConsent, setCookieConsent] = useState(false)\n\n    useEffect(() => {\n        checkCookieConsent()\n    })\n\n    let remeberMeParam = '?rememberme=false'\n    if (state) {\n        remeberMeParam = '?rememberme=true'\n    }\n\n    let redirectParam = '&redirect=/login'\n    if (props.lastUrl) {\n        redirectParam = '&redirect=' + props.lastUrl\n    }\n\n    const checkCookieConsent = () => {\n        const cookiesConsent = cookies.get('cookies_consent')\n        if (cookiesConsent) {\n            setCookieConsent(true)\n        }\n    }\n\n    const agreeWithCookies = () => {\n        cookies.set('cookies_consent', 'true', {\n            path: '/',\n            maxAge: 31530000,\n        })\n        checkCookieConsent()\n    }\n    const basicURL =\n        process.env.NODE_ENV !== 'development'\n            ? 'https://addspiration.com/api/auth/'\n            : 'http://my.websiter.test:5000/api/auth/'\n    return (\n        <Modal\n            visible={props.loginVisible}\n            onOk={() => {}}\n            onCancel={() => props.setLoginVisible(false)}\n            destroyOnClose={true}\n            maskClosable={false}\n            footer={[]}\n            width=\"100%\"\n            style={{ maxWidth: '600px' }}\n        >\n            {!cookieConsent ? (\n                <Modal\n                    title=\"Cookies consent\"\n                    visible={!cookieConsent}\n                    onOk={agreeWithCookies}\n                    onCancel={() => {\n                        window.open('https://websiter.dev', '_self')\n                    }}\n                    destroyOnClose={true}\n                    maskClosable={false}\n                    width=\"100%\"\n                    style={{ maxWidth: '600px' }}\n                >\n                    <p style={{ marginBottom: '0.3em' }}>\n                        We use cookies only for login purposes.{' '}\n                    </p>\n                    <p>\n                        In order to proceed you need to agree with the use of\n                        cookies.\n                    </p>\n                </Modal>\n            ) : (\n                <div className=\"contentDiv\">\n                    <div className={classes.Container}>\n                        <h1\n                            style={{\n                                fontWeight: 'bold',\n                                lineHeight: '1.3em',\n                                marginBottom: 0,\n                                fontSize: '2.5em',\n                            }}\n                        >\n                            Welcome to Addspiration!\n                        </h1>\n                        <h3>This is where great inspiration lives.</h3>\n                        <div\n                            className={classes.socialButtons}\n                            style={{ marginBottom: '30px' }}\n                        >\n                            <FacebookLoginButton\n                                onClick={() =>\n                                    (window.location =\n                                        basicURL +\n                                        `facebook/start${remeberMeParam}`)\n                                }\n                            />\n                            <GoogleLoginButton\n                                s\n                                onClick={() =>\n                                    (window.location =\n                                        basicURL +\n                                        `google/start${remeberMeParam}`)\n                                }\n                            />\n                            <GithubLoginButton\n                                onClick={() =>\n                                    (window.location =\n                                        basicURL +\n                                        `github/start${remeberMeParam}`)\n                                }\n                            />\n                        </div>\n                        <Checkbox\n                            checked={state}\n                            onChange={() => setState(!state)}\n                        >\n                            <Typography.Link style={{ fontSize: '17px' }}>\n                                Remember me\n                            </Typography.Link>\n                        </Checkbox>\n                    </div>\n                    <div className={classes.Background} />\n                </div>\n            )}\n        </Modal>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        lastUrl: state.lastUrl,\n    }\n}\n\nexport default withRouter(connect(mapStateToProps)(LoginModal))\n","import React, { useState, useEffect } from 'react'\nimport { withRouter } from 'react-router-dom'\n\nimport { connect } from 'react-redux'\nimport Menu from 'antd/es/menu'\nimport Avatar from 'antd/es/avatar'\nimport Drawer from 'antd/es/drawer'\nimport Button from 'antd/es/button'\nimport Badge from 'antd/es/badge'\nimport * as classes from './Layout.module.css'\nimport CoffeeOutlined from '@ant-design/icons/CoffeeOutlined'\nimport LogoutOutlined from '@ant-design/icons/LogoutOutlined'\nimport UserOutlined from '@ant-design/icons/UserOutlined'\nimport HeartFilled from '@ant-design/icons/HeartFilled'\nimport RocketFilled from '@ant-design/icons/RocketFilled'\nimport TeamOutlined from '@ant-design/icons/TeamOutlined'\nimport MenuOutlined from '@ant-design/icons/MenuOutlined'\nimport ShopFilled from '@ant-design/icons/ShopFilled'\nimport HomeFilled from '@ant-design/icons/HomeFilled'\nimport getAvatar from '../../utils/getAvatar'\nimport LoginModal from './LoginModal'\nimport Spin from 'antd/es/spin'\nimport BackTop from 'antd/es/back-top'\nimport LoadingOutlined from '@ant-design/icons/LoadingOutlined'\nimport UpOutlined from '@ant-design/icons/UpOutlined'\n\nconst AccountLayout = props => {\n    const { account } = props\n    const [menuVisible, setMenuVisible] = useState()\n    const [lastScrollY, setLastScrollY] = useState(0)\n    const [headerVisible, setHeaderVisible] = useState(true)\n    const [loginVisible, setLoginVisible] = useState(false)\n    const [pageAddress, setPageAddress] = useState(\n        props.history.location.pathname\n    )\n\n    useEffect(() => {\n        const handleScroll = () => {\n            const currentScrollY = window.scrollY\n            if (window.scrollY < 100) setHeaderVisible(true)\n            else {\n                if (currentScrollY > lastScrollY) {\n                    setHeaderVisible(false)\n                } else {\n                    setHeaderVisible(true)\n                }\n            }\n            setLastScrollY(currentScrollY)\n        }\n        window.removeEventListener('scroll', handleScroll)\n        window.addEventListener('scroll', handleScroll)\n        if (pageAddress !== props.history.location.pathname) {\n            window.scrollTo({\n                top: 0,\n                left: 0,\n                behavior: 'smooth',\n            })\n            setPageAddress(props.history.location.pathname)\n        }\n        return () => window.removeEventListener('scroll', handleScroll)\n    }, [lastScrollY, props.history.location.pathname])\n    const toggleMenu = () => {\n        setMenuVisible(!menuVisible)\n    }\n    const selectedKey =\n        props.history.location.pathname.split('/')[1] || undefined\n\n    const buttonProps = {\n        type: 'link',\n        // ghost: true,\n        size: 'large',\n\n        className: classes.Button,\n    }\n    const checkHighligh = url =>\n        selectedKey === url\n            ? {\n                  ghost: false,\n                  type: 'link',\n              }\n            : { type: 'text' }\n    const openLink = url => props.history.push('/' + url)\n\n    const isActivating = props.history.location.pathname === '/activate-account'\n\n    let numberOfUnseenNots = 0\n\n    for (let not of props.lastNotifications) {\n        if (parseInt(not.notId) > parseInt(account.lastSeenNot || 0))\n            numberOfUnseenNots++\n    }\n    const logedIn = props.isAuthed && account._id\n    //!['/login', '/logout'].includes(props.history.location.pathname) ? (\n    return (\n        <>\n            <div className={classes.Layout}>\n                <header\n                    className={\n                        headerVisible\n                            ? classes.Header\n                            : [classes.Header, classes.HideHeader].join(' ')\n                    }\n                >\n                    <div className={classes.TopHeader}>\n                        <div className={classes.MenuButtonContiner}>\n                            {logedIn && (\n                                <>\n                                    {!isActivating && (\n                                        <Button\n                                            {...buttonProps}\n                                            icon={<MenuOutlined />}\n                                            onClick={toggleMenu}\n                                        />\n                                    )}\n                                    <div className={classes.PageTitle}>\n                                        {isActivating\n                                            ? 'Activate your account'\n                                            : props.pageTitle.main}\n                                    </div>\n                                </>\n                            )}\n                        </div>\n                        <div className={classes.QuickButtonContiner}>\n                            {logedIn ? (\n                                !isActivating ? (\n                                    <span\n                                        onClick={() => openLink('account')}\n                                        style={{\n                                            margin: '0px 10px',\n                                            cursor: 'pointer',\n                                        }}\n                                    >\n                                        <Avatar\n                                            style={{\n                                                border: '1px solid white',\n                                            }}\n                                            src={getAvatar(\n                                                account._id,\n                                                account.image\n                                            )}\n                                        />\n                                    </span>\n                                ) : (\n                                    <Button\n                                        {...buttonProps}\n                                        {...checkHighligh('friends')}\n                                        icon={<LogoutOutlined />}\n                                        onClick={() =>\n                                            props.history.push('/logout')\n                                        }\n                                    >\n                                        Logout\n                                    </Button>\n                                )\n                            ) : props.isConnectingWS ? (\n                                <>\n                                    <span style={{ marginRight: '30px' }}>\n                                        <Spin\n                                            indicator={\n                                                <LoadingOutlined\n                                                    style={{\n                                                        color: 'white',\n                                                        marginRight: '10px',\n                                                    }}\n                                                />\n                                            }\n                                        />{' '}\n                                        Trying to login\n                                    </span>\n                                    <Button\n                                        {...buttonProps}\n                                        {...checkHighligh('friends')}\n                                        icon={<LogoutOutlined />}\n                                        onClick={() =>\n                                            props.history.push('/logout')\n                                        }\n                                    >\n                                        Logout\n                                    </Button>\n                                </>\n                            ) : (\n                                <Button\n                                    {...buttonProps}\n                                    {...checkHighligh('friends')}\n                                    icon={<LogoutOutlined />}\n                                    onClick={() => setLoginVisible(true)}\n                                >\n                                    Sign in or Sign up\n                                </Button>\n                            )}\n                        </div>\n                    </div>\n                </header>\n                <main className={classes.Main}>{props.children}</main>\n                {!isActivating && logedIn && (\n                    <footer className={classes.Footer}>\n                        <Button\n                            {...buttonProps}\n                            {...checkHighligh('dashboard')}\n                            onClick={() => openLink('dashboard')}\n                        >\n                            <Badge count={numberOfUnseenNots}>\n                                <HomeFilled />{' '}\n                                <div className={classes.FooterButton}>\n                                    Dashboard\n                                </div>\n                            </Badge>\n                        </Button>\n\n                        <Button\n                            {...buttonProps}\n                            {...checkHighligh('progresses')}\n                            onClick={() => openLink('progresses')}\n                        >\n                            <Badge count={0}>\n                                <RocketFilled />\n                                <div className={classes.FooterButton}>\n                                    Progresses\n                                </div>\n                            </Badge>\n                        </Button>\n\n                        <Button\n                            {...buttonProps}\n                            {...checkHighligh('shop')}\n                            onClick={() => openLink('shop')}\n                        >\n                            <Badge count={0}>\n                                <ShopFilled />\n                                <div className={classes.FooterButton}>Shop</div>\n                            </Badge>\n                        </Button>\n\n                        <Button\n                            {...buttonProps}\n                            {...checkHighligh('friends')}\n                            onClick={() => openLink('friends')}\n                        >\n                            <Badge\n                                count={\n                                    account.friends.filter(\n                                        item => item.status === 'inviting'\n                                    ).length\n                                }\n                            >\n                                <TeamOutlined />\n                                <div className={classes.FooterButton}>\n                                    Friends\n                                </div>\n                            </Badge>\n                        </Button>\n                    </footer>\n                )}\n                {!isActivating && logedIn && (\n                    <Drawer\n                        closable={true}\n                        onClose={toggleMenu}\n                        visible={menuVisible}\n                        placement=\"left\"\n                    >\n                        <Menu\n                            theme=\"light\"\n                            mode=\"vertical\"\n                            selectedKeys={[selectedKey]}\n                            onClick={({ key }) => {\n                                props.history.push('/' + key)\n                                toggleMenu()\n                            }}\n                            overflowedIndicator={<MenuOutlined />}\n                            style={{ marginTop: '30px' }}\n                        >\n                            <Menu.Item key=\"explore\" icon={<CoffeeOutlined />}>\n                                Explore\n                            </Menu.Item>\n                            <Menu.Item key=\"dashboard\" icon={<HomeFilled />}>\n                                Dashboard\n                            </Menu.Item>\n                            <Menu.Item key=\"progresses\" icon={<RocketFilled />}>\n                                Progresses\n                            </Menu.Item>\n                            <Menu.Item key=\"shop\" icon={<ShopFilled />}>\n                                Shop\n                            </Menu.Item>\n                            <Menu.Item key=\"friends\" icon={<TeamOutlined />}>\n                                Friends\n                            </Menu.Item>\n                            {/* <Menu.Item key=\"goals\" icon={<AimOutlined />}>\n                                Goals\n                            </Menu.Item> */}\n                            <Menu.Item key=\"wishlist\" icon={<HeartFilled />}>\n                                Wishlist\n                            </Menu.Item>\n                            <Menu.Item key=\"account\" icon={<UserOutlined />}>\n                                Account\n                            </Menu.Item>\n                            <Menu.Item key=\"logout\" icon={<LogoutOutlined />}>\n                                Logout\n                            </Menu.Item>\n                        </Menu>\n                    </Drawer>\n                )}\n            </div>\n            <LoginModal\n                loginVisible={loginVisible}\n                setLoginVisible={setLoginVisible}\n            />\n            <BackTop>\n                <div\n                    style={{\n                        height: 40,\n                        width: 40,\n                        lineHeight: '40px',\n                        borderRadius: '100%',\n                        backgroundColor: '#1088e9',\n                        color: '#fff',\n                        textAlign: 'center',\n                        fontSize: 14,\n                    }}\n                >\n                    <UpOutlined />\n                </div>\n            </BackTop>\n        </>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n        pageTitle: state.pageTitle,\n        isAuthed: state.isAuthed,\n        lastNotifications: state.lastNotifications,\n        isConnectingWS: state.isConnectingWS,\n    }\n}\n\nexport default withRouter(connect(mapStateToProps)(AccountLayout))\n","import message from 'antd/es/message'\n\nexport default (res, props) => {\n    if (res.data.logout) props.history.push('/logout')\n    if (res.data.success === false) {\n        if (res.data.errorCode) {\n            switch (res.data.errorCode) {\n                case 'no account':\n                    message.warning('Account is not found. Please login.')\n                    break\n                case 'bad data':\n                    message.error(\n                        'Error. Please try one more time with correct data.'\n                    )\n                    break\n                case 'progress exist':\n                    message.warning('This progress already exists.')\n                    break\n                default:\n                    message.warning(\n                        'Something wrong has happened... Try again!'\n                    )\n                    break\n            }\n        } else {\n            message.error('Something failed')\n        }\n    } else {\n        if (res.data.successCode) {\n            switch (res.data.successCode) {\n                case 'avatar saved':\n                    message.success('The avatar image has been updated.')\n                    break\n                case 'success':\n                    message.success('Success!')\n                    break\n                case 'item saved':\n                    message.success('Item is saved')\n                    break\n                case 'prgress created':\n                    message.success('Progress has started!')\n                    break\n                default:\n                    message.success('Success!')\n                    break\n            }\n        }\n    }\n    if (res.data.status && res.data.status === 'no account')\n        props.history.push('/activate-account')\n}\n","import axios from 'axios'\n\nimport Cookies from 'universal-cookie'\nimport jwt from 'jsonwebtoken'\nimport processRes from '../../utils/processRes'\n\nconst cookies = new Cookies()\n\nexport const tryAuth = (props, forceLogin) => (dispatch: Object) => {\n    sessionStorage.setItem('systemRefresh', '0')\n    const token = cookies.get('auth_token')\n    const rememberMe = cookies.get('rememberme')\n    if (rememberMe) {\n        cookies.remove('rememberme', {\n            path: '/',\n        })\n        if (rememberMe === 'false') {\n            cookies.remove('auth_token', {\n                path: '/',\n            })\n        }\n    }\n    const userId = jwt.decode(token)\n    axios.defaults.headers.post['Content-Type'] = 'application/json'\n    axios.defaults.headers.put['Content-Type'] = 'application/json'\n    axios.defaults.headers.delete['Content-Type'] = 'application/json'\n    axios.defaults.headers.common.Accept = 'application/json'\n    if (token && userId) {\n        axios.defaults.headers.common['x-auth-token'] = token\n        axios.defaults.headers.post['x-auth-token'] = token\n        axios.defaults.headers.get['x-auth-token'] = token\n        axios.defaults.headers.delete['x-auth-token'] = token\n        axios.defaults.headers.put['x-auth-token'] = token\n        dispatch(setIsAuthed(userId._id))\n    } else {\n        dispatch(setIsAuthed(false))\n        dispatch(saveLastUrl(props.history.location.pathname))\n        const pathParts = props.history.location.pathname.split('/')\n        if (\n            pathParts.length === 2 &&\n            !['explore', 'login', 'logintest'].includes(pathParts[1])\n        )\n            props.history.push('/logout')\n\n        if (forceLogin) props.history.push('/logout')\n    }\n}\n\nconst saveLastUrl = url => ({\n    type: 'SAVE_LAST_URL',\n    url,\n})\n\nconst setIsAuthed = id => ({\n    type: 'SET_IS_AUTHED',\n    id,\n})\n\nexport const logout = () => dispatch => {\n    cookies.remove('rememberme', {\n        path: '/',\n    })\n    cookies.remove('auth_token', {\n        path: '/',\n    })\n    delete axios.defaults.headers.common['x-auth-token']\n    delete axios.defaults.headers.post['x-auth-token']\n    delete axios.defaults.headers.get['x-auth-token']\n    delete axios.defaults.headers.delete['x-auth-token']\n    delete axios.defaults.headers.put['x-auth-token']\n    dispatch(setIsAuthed(false))\n}\n\nexport const setData = data => ({\n    type: 'SET_DATA',\n    data,\n})\n\nexport const setConnectingToWS = data => ({\n    type: 'SET_CONNECTING_WS',\n    data,\n})\n\nexport const removeData = data => ({\n    type: 'REMOVE_DATA',\n    data,\n})\n\nexport const setFriendsData = data => ({\n    type: 'SET_FRIENDS_DATA',\n    data,\n})\n\nexport const setAvatarV = v => ({\n    type: 'SET_AVATAR_V',\n    v,\n})\n\nexport const increaseAvatarV = () => ({\n    type: 'INCREASE_AVATAR_V',\n})\n\nexport const setPageTitle = title => ({\n    type: 'SET_PAGE_TITLE',\n    title,\n})\n\nexport const buyPerk = (account, perk, owner, props) => dispatch => {\n    const currency = account.wallet.find(item => item.user === owner._id)\n    if (currency && currency.amount >= perk.price) {\n        axios\n            .post('/api/shop/buy', {\n                perkId: perk.perkId,\n                ownerId: owner._id,\n            })\n            .then(res => {\n                processRes(res)\n                if (res.data.success) {\n                    dispatch(setData(res.data, props.history.location.pathname))\n                }\n            })\n            .catch(err => {})\n    } else {\n        alert(\n            'You cannot buy this item as you do not have enough money from this user.'\n        )\n    }\n}\n\nexport const confirmTransaction = (transactionId, props) => dispatch => {\n    axios\n        .post('/api/shop/confirm', {\n            transactionId,\n        })\n        .then(res => {\n            processRes(res)\n            if (res.data.success) {\n                dispatch(setData(res.data, props.history.location.pathname))\n            }\n        })\n        .catch(err => {})\n}\n\nexport const cancelTransaction = (transactionId, props) => dispatch => {\n    axios\n        .post('/api/shop/cancel', {\n            transactionId,\n        })\n        .then(res => {\n            processRes(res)\n            if (res.data.success) {\n                dispatch(setData(res.data, props.history.location.pathname))\n            }\n        })\n        .catch(err => {})\n}\n\nexport const setFriendSearchResult = data => ({\n    type: 'SET_FRIEND_SEARCH_RESULT',\n    data,\n})\n\nexport const setAccountActivated = value => ({\n    type: 'SET_ACCOUNT_ACTIVATED',\n    value,\n})\n","export default props => {\n    const createEmptyObj = () => ({\n        user: [],\n        account: [],\n        progress: [],\n        post: [],\n        group: [],\n        progressData: [],\n        friendData: [],\n        postData: [],\n        groupData: [],\n        transactionData: [],\n    })\n    const { store } = props\n    const requestedResources = createEmptyObj()\n    const neededResources = createEmptyObj()\n    if (store.isAuthed) {\n        if (!store.user) {\n            requestedResources.user.push(store.isAuthed)\n        } else {\n            neededResources.user.push(store.user._id)\n            if (store.currentAccount) {\n                if (store.account._id !== store.currentAccount) {\n                    requestedResources.account.push(store.currentAccount)\n                } else {\n                    neededResources.account.push(store.account._id)\n                    for (let progress of store.account.progresses) {\n                        if (!store.progressData[progress]) {\n                            requestedResources.progressData.push(progress)\n                        }\n                        neededResources.progressData.push(progress)\n                    }\n                    for (let group of store.account.groups) {\n                        if (!store.groupData[group]) {\n                            requestedResources.groupData.push(group)\n                        }\n                        neededResources.groupData.push(group)\n                    }\n                    for (let post of store.account.followPosts) {\n                        if (!store.postData[post]) {\n                            requestedResources.postData.push(post)\n                        }\n                        neededResources.postData.push(post)\n                    }\n                    for (let post of store.account.myPosts) {\n                        if (!store.postData[post]) {\n                            requestedResources.postData.push(post)\n                        }\n                        neededResources.postData.push(post)\n                    }\n                    for (let transaction of store.account.transactions) {\n                        if (!store.transactionData[transaction]) {\n                            requestedResources.transactionData.push(transaction)\n                        }\n                        neededResources.transactionData.push(transaction)\n                    }\n                    for (let friend of store.account.friends) {\n                        if (!store.friendData[friend.friend]) {\n                            requestedResources.friendData.push(friend.friend)\n                        }\n                        neededResources.friendData.push(friend.friend)\n                    }\n                }\n            }\n            if (store.currentProfile) {\n                if (store.profile._id !== store.currentProfile) {\n                    requestedResources.account.push(store.currentProfile)\n                } else {\n                    neededResources.account.push(store.profile._id)\n                    for (let progress of store.profile.progresses) {\n                        if (!store.progressData[progress]) {\n                            requestedResources.progressData.push(progress)\n                        }\n                        neededResources.progressData.push(progress)\n                    }\n                    for (let group of store.profile.groups) {\n                        if (!store.groupData[group]) {\n                            requestedResources.groupData.push(group)\n                        }\n                        neededResources.groupData.push(group)\n                    }\n                    for (let friend of store.profile.friends) {\n                        if (!store.friendData[friend.friend]) {\n                            requestedResources.friendData.push(friend.friend)\n                        }\n                        neededResources.friendData.push(friend.friend)\n                    }\n                }\n            }\n            if (store.currentGroup) {\n                if (store.group._id !== store.currentGroup) {\n                    requestedResources.group.push(store.currentGroup)\n                } else {\n                    neededResources.group.push(store.group._id)\n                    for (let user of store.group.users) {\n                        if (!store.friendData[user]) {\n                            requestedResources.friendData.push(user)\n                        }\n                        neededResources.friendData.push(user)\n                    }\n                    for (let progress of store.group.progresses) {\n                        if (!store.progressData[progress]) {\n                            requestedResources.progressData.push(progress)\n                        }\n                        neededResources.progressData.push(progress)\n                    }\n                    for (let post of store.group.posts) {\n                        if (!store.postData[post]) {\n                            requestedResources.postData.push(post)\n                        }\n                        neededResources.postData.push(post)\n                    }\n                }\n            }\n            if (store.currentProgress) {\n                if (store.progress._id !== store.currentProgress) {\n                    requestedResources.progress.push(store.currentProgress)\n                } else {\n                    neededResources.progress.push(store.progress._id)\n                    let participants = []\n                    if (store.progress.owner)\n                        participants.push(store.progress.owner)\n                    if (store.progress.worker)\n                        participants.push(store.progress.worker)\n                    participants = [\n                        ...participants,\n                        ...(store.progress.experts || []),\n                        ...(store.progress.supporters || []),\n                    ]\n                    for (let friend of participants) {\n                        if (!store.friendData[friend]) {\n                            requestedResources.friendData.push(friend)\n                        }\n                        neededResources.friendData.push(friend)\n                    }\n                    for (let post of store.progress.posts) {\n                        if (!store.postData[post]) {\n                            requestedResources.postData.push(post)\n                        }\n                        neededResources.postData.push(post)\n                    }\n                }\n            }\n            if (store.currentPosts) {\n                for (let post of store.currentPosts) {\n                    const postEl = store.post[post]\n                    if (!postEl) {\n                        requestedResources.post.push(post)\n                    } else {\n                        neededResources.post.push(post)\n                        for (let friend of postEl.users) {\n                            if (!store.friendData[friend]) {\n                                requestedResources.friendData.push(friend)\n                            }\n                            neededResources.friendData.push(friend)\n                        }\n                        if (post.parent) {\n                            if (post.parent.parentType === 'progress')\n                                neededResources.progressData.push(\n                                    post.parent.parentId\n                                )\n                            else if (post.parent.parentType === 'group')\n                                neededResources.groupData.push(\n                                    post.parent.parentId\n                                )\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    const reduce = obj => {\n        for (let attr in obj) {\n            if (obj[attr]) {\n                obj[attr] = Array.from(new Set(obj[attr]))\n            }\n        }\n    }\n\n    reduce(neededResources)\n    const notNeededResources = createEmptyObj()\n    notNeededResources.profile = []\n    let notNeededExist\n    const check1 = (key, mode) => {\n        if (\n            store[mode]._id &&\n            !neededResources[key].includes(store[mode]._id)\n        ) {\n            notNeededResources[mode].push(store[mode]._id)\n            notNeededExist = true\n        }\n    }\n    const check2 = key => {\n        for (let attr in store[key]) {\n            if (!neededResources[key].includes(attr)) {\n                notNeededResources[key].push(attr)\n                notNeededExist = true\n            }\n        }\n    }\n    check1('account', 'account')\n    check1('account', 'profile')\n    check1('group', 'group')\n    check1('progress', 'progress')\n    check2('post')\n    check2('friendData')\n    check2('progressData')\n    check2('transactionData')\n    check2('postData')\n    check2('groupData')\n\n    if (notNeededExist) {\n        props.removeData(notNeededResources)\n    }\n\n    reduce(requestedResources)\n\n    return requestedResources\n}\n","import requestResource from './requestResource'\n\nexport default (versions, state, store, webSocket) => {\n    const notNeededResources = {\n        user: [],\n        account: [],\n        progress: [],\n        post: [],\n        group: [],\n        progressData: [],\n        friendData: [],\n        postData: [],\n        groupData: [],\n        transactionData: [],\n    }\n\n    const checkData = key => {\n        for (let attr in versions[key]) {\n            if (typeof versions[key][attr] !== 'undefined') {\n                if (store[key][attr]) {\n                    if (store[key][attr] !== versions[key][attr]) {\n                        requestResource(key, [attr], state)\n                    }\n                } else notNeededResources[key].push(attr)\n            }\n        }\n    }\n\n    const check = key => {\n        for (let attr in versions[key]) {\n            if (typeof versions[key][attr] !== 'undefined') {\n                if (store[key]._id === attr) {\n                    if (store[key].__v !== versions[key][attr]) {\n                        requestResource(key, [attr], state)\n                    }\n                    if (!store[key]._id) notNeededResources[key].push(attr)\n                } else notNeededResources[key].push(attr)\n            }\n        }\n    }\n\n    for (let attr in versions.user) {\n        if (typeof versions.user[attr] !== 'undefined') {\n            if (store.user._id === attr) {\n                if (store.user.__v !== versions.user[attr]) {\n                    requestResource('user', [attr], state)\n                }\n            } else notNeededResources.user.push(attr)\n        }\n    }\n\n    for (let attr in versions.account) {\n        if (typeof versions.account[attr] !== 'undefined') {\n            if (store.account._id === attr) {\n                if (store.account.__v !== versions.account[attr]) {\n                    requestResource('account', [attr], state)\n                }\n            }\n            if (store.profile._id === attr) {\n                if (store.profile.__v !== versions.account[attr]) {\n                    requestResource('account', [attr], state)\n                }\n                if (!store.account._id) notNeededResources.account.push(attr)\n            }\n        }\n        if (store.account._id !== attr && store.profile._id !== attr)\n            notNeededResources.account.push(attr)\n    }\n\n    check('progress')\n    check('group')\n\n    checkData('post')\n    checkData('friendData')\n    checkData('progressData')\n    checkData('postData')\n    checkData('groupData')\n    checkData('transactionData')\n\n    if (\n        notNeededResources.user.length > 0 ||\n        notNeededResources.account.length > 0 ||\n        notNeededResources.progress.length > 0 ||\n        notNeededResources.post.length > 0 ||\n        notNeededResources.group.length > 0 ||\n        notNeededResources.friendData.length > 0 ||\n        notNeededResources.progressData.length > 0 ||\n        notNeededResources.postData.length > 0 ||\n        notNeededResources.groupData.length > 0 ||\n        notNeededResources.transactionData.length > 0\n    ) {\n        return notNeededResources\n    }\n}\n","export default props => {\n    const { store } = props\n    const resources = {\n        user: {},\n        account: {},\n        progress: {},\n        post: {},\n        group: {},\n        transactionData: {},\n        friendData: {},\n        progressData: {},\n        groupData: {},\n        postData: {},\n    }\n\n    if (store.user && store.user._id) {\n        resources.user[store.user._id] = store.user.__v\n    }\n\n    if (store.account._id) {\n        resources.account[store.account._id] = store.account.__v\n    }\n    if (store.profile._id) {\n        resources.account[store.profile._id] = store.profile.__v\n    }\n    if (store.progress._id) {\n        resources.progress[store.progress._id] = store.progress.__v\n    }\n    if (store.group._id) {\n        resources.group[store.group._id] = store.group.__v\n    }\n\n    const addData = key => {\n        for (let item in store[key]) {\n            if (typeof store[key][item] !== 'undefined') {\n                if (store[key][item]._id) {\n                    resources[key][store[key][item]._id] = store[key][item].__v\n                }\n            }\n        }\n    }\n\n    addData('post')\n    addData('friendData')\n    addData('postData')\n    addData('groupData')\n    addData('progressData')\n    addData('TransactionData')\n\n    return resources\n}\n","import React, { Component } from 'react'\nimport axios from 'axios'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport message from 'antd/es/message'\nimport * as wsActions from '../../websocketActions'\nimport cloneDeep from 'lodash.clonedeep'\nimport getListOfNeededResources from './methods/getListOfNeededResources'\nimport compareVersionsAndRerequest from './methods/compareVersionsAndRerequest'\nimport getResourcesToMonitor from './methods/getResourcesToMonitor'\nconst diffpatcher = require('jsondiffpatch/dist/jsondiffpatch.umd.js').create({\n    propertyFilter: (name, context) => name !== 'patch',\n})\n\nexport let webSocket = false\n\nclass ConnectWebsocket extends Component {\n    state = {\n        user: [],\n        account: [],\n        progress: [],\n        post: [],\n        group: [],\n        friendData: [],\n        progressData: [],\n        postData: [],\n        groupData: [],\n        transactionData: [],\n    }\n    start = () => {\n        let url\n        if (process.env.NODE_ENV === 'development') {\n            url = 'ws://my.websiter.test:5000'\n        } else {\n            url = 'wss://addspiration.com'\n        }\n        let pingTimeout\n        webSocket = new WebSocket(url)\n\n        const heartbeat = versions => {\n            let notNeededResources\n            if (versions) {\n                notNeededResources = compareVersionsAndRerequest(\n                    versions,\n                    this.state,\n                    this.props.store,\n                    webSocket\n                )\n            }\n            clearTimeout(pingTimeout)\n\n            pingTimeout = setTimeout(() => {\n                webSocket.close()\n            }, 30000 + 1000)\n\n            webSocket.send(\n                JSON.stringify({\n                    messageCode: 'heartbeat',\n                    notNeededResources,\n                    //get back list of online friends\n                })\n            )\n        }\n\n        webSocket.onopen = event => {\n            const resourcesToMonitor = getResourcesToMonitor(this.props)\n            webSocket.send(\n                JSON.stringify({\n                    messageCode: 'auth',\n                    user: axios.defaults.headers.common['x-auth-token'],\n                    resourcesToMonitor,\n                    // progressId: this.props.progress._id,\n                })\n            )\n            this.initializeRequestResources(this.props)\n            heartbeat()\n        }\n\n        webSocket.onmessage = event => {\n            const news = JSON.parse(event.data)\n\n            switch (news.messageCode) {\n                case 'heartbeat':\n                    heartbeat(news.versions)\n                    break\n                case 'logout':\n                    this.props.logout()\n                    this.props.history.push('/logout')\n                    break\n\n                case 'successMessage':\n                    message.success(news.messageText)\n                    break\n                case 'errorMessage':\n                    message.error(news.messageText)\n                    break\n                case 'friendsData':\n                    this.props.setFriendsData(news.friendsData)\n                    break\n                case 'redirectToProgresses':\n                    this.props.history.push('/progresses')\n                    break\n                case 'addResource':\n                    this.props.saveResource(news.resources, news.type)\n                    break\n                case 'updateResource':\n                    this.props.updateResource(\n                        news.code,\n                        news.id,\n                        news.update,\n                        this.state\n                    )\n                    break\n                case 'friendSearchResult':\n                    this.props.setFriendSearchResult(news.data)\n                    break\n\n                // case 'update':\n                //     let newProgress\n                //     let oldProgress = cloneDeep(this.props.progress)\n                //     if (oldProgress.__v === news.progress.__v - 1) {\n                //         newProgress = diffpatcher.patch(\n                //             oldProgress,\n                //             news.progress.patch\n                //         )\n                //         newProgress.__v = news.progress.__v\n                //         this.props.setData(\n                //             {\n                //                 progress: newProgress,\n                //             },\n                //             this.props.history.location.pathname\n                //         )\n                //     }\n                //     wsActions.getFriendsData(\n                //         newProgress || this.props.progress,\n                //         this.props.account.friends\n                //     )\n                //     break\n                case 'error':\n                    message.error(news.text)\n                    break\n                // case 'notFoundResource':\n                //     this.markNotFoundResource(data)\n                //     break\n                default:\n                    break\n            }\n        }\n        webSocket.onclose = event => {\n            clearTimeout(pingTimeout)\n        }\n    }\n\n    // markNotFoundResource = data => {\n    //     const requestedResources = this.state.requestedResources.filter(\n    //         item => item.id.toString() === data._id.toString()\n    //     )\n    //     this.setState({ requestedResources })\n    // }\n\n    checkInterval = null\n\n    check = () => {\n        if (!webSocket || webSocket.readyState === 3) {\n            clearInterval(this.checkInterval)\n            this.checkInterval = setInterval(this.check, 5000)\n            this.start()\n        }\n    }\n    componentWillMount() {\n        this.checkInterval = setInterval(this.check, 50)\n    }\n\n    reRequestResourcesInterval = null\n    reRequestResources = () => {\n        for (let group of [\n            'user',\n            'account',\n            'progress',\n            'post',\n            'group',\n            'postData',\n            'groupData',\n            'progressData',\n            'friendData',\n            'transactionData',\n        ]) {\n            if (this.state[group].length > 0) {\n                if (webSocket && webSocket.readyState === 1) {\n                    webSocket.send(\n                        JSON.stringify({\n                            messageCode: 'requestResource',\n                            ids: this.state[group],\n                            type: group,\n                        })\n                    )\n                }\n            }\n        }\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.checkInterval)\n        if (webSocket) {\n            webSocket.close()\n        }\n        this.props.setConnectingToWS(false)\n    }\n    componentDidMount() {\n        this.props.setConnectingToWS(true)\n    }\n    componentWillReceiveProps(nextProps) {\n        this.initializeRequestResources(nextProps)\n    }\n\n    initializeRequestResources = nextProps => {\n        const newRequestedResources = getListOfNeededResources(nextProps)\n        for (let group of [\n            'user',\n            'account',\n            'progress',\n            'post',\n            'group',\n            'postData',\n            'groupData',\n            'progressData',\n            'friendData',\n            'transactionData',\n        ]) {\n            if (newRequestedResources[group].length > 0) {\n                if (webSocket && webSocket.readyState === 1) {\n                    webSocket.send(\n                        JSON.stringify({\n                            messageCode: 'requestResource',\n                            ids: newRequestedResources[group].filter(\n                                item => !this.state[group].includes(item)\n                            ),\n                            type: group,\n                        })\n                    )\n                }\n            }\n        }\n        this.setState(() => newRequestedResources)\n        clearInterval(this.reRequestResourcesInterval)\n        this.reRequestResourcesInterval = setInterval(\n            this.reRequestResources,\n            3000\n        )\n    }\n\n    render() {\n        return null\n    }\n}\nconst mapStateToProps = state => {\n    return {\n        store: state,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: (data, pulledFrom) =>\n            dispatch(actions.setData(data, pulledFrom)),\n        removeData: data => dispatch(actions.removeData(data)),\n        saveResource: (data, type) =>\n            dispatch(actions.saveResource(data, type)),\n        setFriendsData: data => dispatch(actions.setFriendsData(data)),\n\n        updateResource: (code, id, update, state) =>\n            dispatch(actions.updateResource(code, id, update, state)),\n        setFriendSearchResult: data =>\n            dispatch(actions.setFriendSearchResult(data)),\n        setConnectingToWS: data => dispatch(actions.setConnectingToWS(data)),\n\n        logout: () => dispatch(actions.logout()),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(ConnectWebsocket)\n)\n","import { setData } from './auth'\n\nexport const saveResource = (data, type) => (dispatch, getState) => {\n    if (data.length > 0) {\n        const state = getState()\n        switch (type) {\n            case 'user':\n                const user = data[0]\n                let currentAccount = user.currentAccount\n                if (!currentAccount) currentAccount = user.myAccount\n                // if(!currentAccount)\n                //activate-account\n                dispatch(setData({ user, currentAccount }))\n                break\n            case 'account':\n                const account = data.find(\n                    item => item._id === state.currentAccount\n                )\n                if (account) {\n                    dispatch(setData({ account }))\n                }\n\n                const profile = data.find(\n                    item => item._id === state.currentProfile\n                )\n                if (profile) {\n                    dispatch(setData({ profile }))\n                }\n\n                break\n            case 'progress':\n                const progress = data.find(\n                    item => item._id === state.currentProgress\n                )\n                if (progress) {\n                    dispatch(setData({ progress }))\n                }\n                break\n            case 'group':\n                const group = data.find(item => item._id === state.currentGroup)\n                if (group) {\n                    dispatch(setData({ group }))\n                }\n                break\n            case 'post':\n                let post = {}\n                for (let item of data) {\n                    post[item._id] = item\n                }\n                dispatch(setData({ post }))\n                break\n            case 'friendData':\n                let friendData = {}\n                for (let item of data) {\n                    friendData[item._id] = item\n                }\n                dispatch(setData({ friendData }))\n                break\n            case 'progressData':\n                let progressData = {}\n                for (let item of data) {\n                    progressData[item._id] = item\n                }\n                dispatch(setData({ progressData }))\n                break\n            case 'transactionData':\n                let transactionData = {}\n                for (let item of data) {\n                    transactionData[item._id] = item\n                }\n                dispatch(setData({ transactionData }))\n                break\n            case 'postData':\n                let postData = {}\n                for (let item of data) {\n                    postData[item._id] = item\n                }\n                dispatch(setData({ postData }))\n                break\n            case 'groupData':\n                let groupData = {}\n                for (let item of data) {\n                    groupData[item._id] = item\n                }\n                dispatch(setData({ groupData }))\n                break\n            default:\n                break\n        }\n    }\n}\n","import { webSocket } from '../ConnectWebsocket'\n\nexport default (type, ids, state) => {\n    const notRequestedIds = ids.filter(id => !state[type].includes(id))\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'requestResource',\n                ids: notRequestedIds,\n                type,\n            })\n        )\n    }\n}\n","import requestResource from '../../containers/ConnectWebsocket/methods/requestResource'\nimport * as actions from './index'\nimport cloneDeep from 'lodash.clonedeep'\n\nconst applyDelta = (source, delta, watchFields) => {\n    // console.log('---------------------------APLY DELTA------------------------')\n    // console.log('----------------source----------------')\n    // console.log(source)\n    // console.log('----------------delta-------------------')\n    // console.log(delta)\n    const result = cloneDeep(source)\n\n    const applyUpdateToPart = (res, del, watchFields) => {\n        const applyWithDot = (res, keys, del) => {\n            if (keys.length > 1) {\n                const key = keys.shift()\n                applyWithDot(res[key], keys, del)\n            } else {\n                if (typeof res === 'array') {\n                    res.push(del)\n                } else {\n                    res[keys[0]] = del\n                }\n            }\n        }\n        for (let attr in del) {\n            const keys = attr.split('.')\n            if (!watchFields || watchFields.includes(keys[0])) {\n                if (typeof del[attr] !== 'undefined') {\n                    applyWithDot(res, keys, del[attr])\n                }\n            }\n        }\n    }\n\n    applyUpdateToPart(result, delta.updatedFields, watchFields)\n\n    const applyDeleteToPart = (result, keys) => {\n        if (keys.length > 1) {\n            const key = keys.shift()\n            applyDeleteToPart(result[key], keys)\n        } else {\n            if (typeof result === 'object') {\n                delete result[keys[0]]\n            } else if (typeof result === 'array') {\n                result.splice(keys[0], 1)\n            }\n        }\n    }\n\n    for (let field of delta.removedFields) {\n        if (field.indexOf('.') > -1) {\n            const keys = field.split('.')\n            if (!watchFields || watchFields.includes(keys[0]))\n                applyDeleteToPart(result, keys)\n        } else {\n            delete result[field]\n        }\n    }\n    return result\n}\n\nexport const updateResource = (code, id, update, parState) => (\n    dispatch,\n    getState\n) => {\n    if (update && id && code) {\n        const state = getState()\n        const check = key => {\n            if (state[key]._id === id) {\n                if (state[key].__v === update.updatedFields.__v - 1) {\n                    const element = applyDelta(state[key], update)\n                    dispatch(actions.setData({ [key]: element }))\n                } else {\n                    if (state[key].id) requestResource(code, [id], parState)\n                }\n            }\n        }\n        const check2 = (key, watchFields) => {\n            let updateData = {\n                [key]: cloneDeep(state[key]),\n            }\n            const friend = updateData[key][id]\n            if (friend) {\n                if (friend.__v === update.updatedFields.__v - 1) {\n                    updateData[key][id] = applyDelta(\n                        friend,\n                        update,\n                        watchFields\n                    )\n                    dispatch(actions.setData(updateData))\n                } else {\n                    requestResource(code, [id], parState)\n                }\n            }\n        }\n        switch (code) {\n            case 'user':\n                check('user')\n                break\n            case 'account':\n                check('account')\n                check('profile')\n                break\n            case 'progress':\n                check('progress')\n                break\n            case 'group':\n                check('group')\n                break\n            case 'post':\n                dispatch(actions.setData(check2(code)))\n                break\n            case 'friendData':\n                dispatch(\n                    actions.setData(\n                        check2(code, ['name', 'image', 'notifications', '__v'])\n                    )\n                )\n                break\n            case 'progressData':\n                dispatch(\n                    actions.setData(\n                        check2(code, [\n                            'owner',\n                            'worker',\n                            'goal',\n                            'notifications',\n                            '__v',\n                        ])\n                    )\n                )\n                break\n            case 'postData':\n                dispatch(\n                    actions.setData(check2(code, ['notifications', '__v']))\n                )\n                break\n            case 'groupData':\n                dispatch(\n                    actions.setData(check2(code, ['notifications', '__v']))\n                )\n                break\n            case 'transactionData':\n                dispatch(actions.setData(check2(code)))\n                break\n            default:\n                break\n        }\n    }\n}\n","import axios from 'axios'\nimport message from 'antd/es/message'\n\nexport const uploadFile = (file, size, filename, callback) => {\n    if (file == null) {\n        return alert('No file selected.')\n    }\n\n    const reader = new FileReader()\n    reader.onload = async event => {\n        resizeImageToSpecificSize(file, { width: size, height: size }, data => {\n            urltoFile(data, '/120').then(function(file) {\n                getSignedRequest(file, filename, callback)\n            })\n        })\n    }\n\n    reader.readAsArrayBuffer(file)\n}\n\nconst urltoFile = (url, filename, mimeType) => {\n    mimeType = mimeType || (url.match(/^data:([^;]+);/) || '')[1]\n    return fetch(url)\n        .then(function(res) {\n            return res.arrayBuffer()\n        })\n        .then(function(buf) {\n            return new File([buf], filename, { type: 'image/jpeg' })\n        })\n}\n\nconst resizeImageToSpecificSize = (file, size, cb) => {\n    if (file) {\n        var reader = new FileReader()\n        reader.onload = function(event) {\n            resizeImageFromSrcToSpecificSize(event.target.result, size, cb)\n        }\n        reader.readAsDataURL(file)\n    }\n}\n\nconst resizeImageFromSrcToSpecificSize = (src, size, cb) => {\n    var data\n    var img = new Image()\n    img.onload = function() {\n        const widthCoef = img.width / size.width\n        const heightCoef = img.height / size.height\n        var oc = document.createElement('canvas'),\n            octx = oc.getContext('2d')\n        oc.width = img.width\n        oc.height = img.height\n        octx.drawImage(img, 0, 0)\n        if (widthCoef > 1 || heightCoef > 1) {\n            if (img.width > img.height) {\n                oc.height = (img.height / img.width) * size.width\n                oc.width = size.width\n            } else {\n                oc.width = (img.width / img.height) * size.width\n                oc.height = size.width\n            }\n        }\n        octx.drawImage(oc, 0, 0, oc.width, oc.height)\n        octx.drawImage(img, 0, 0, oc.width, oc.height)\n        data = oc.toDataURL('image/jpeg', 0.6)\n        cb(data)\n    }\n    img.src = src\n}\n\nconst getSignedRequest = (file, fileName, callback) => {\n    return axios\n        .post('/api/sign-s3', {\n            fileName,\n        })\n        .then(response => {\n            doUploadFile(file, response.data, callback)\n        })\n        .catch(err => {})\n}\n\nconst doUploadFile = (file, data, callback) => {\n    return axios\n        .put(data.signedRequest, file, {\n            headers: {\n                'Content-Type': 'multipart/form-data',\n            },\n        })\n        .then(response => {\n            callback(data.url)\n            message.success('The image has been saved.')\n        })\n        .catch(err => {\n            console.log(err)\n        })\n}\n","export default {\n    name: 200,\n    description: 10000,\n    message: 10000,\n}\n","import fieldLength from './fieldLength'\n\nexport const nicknameRules = [\n    {\n        required: true,\n        message: 'Nickname is too short. Minimal length is 2.',\n        whitespace: true,\n        min: 2,\n    },\n    {\n        message: `Nickname is too long. Miximum length is ${fieldLength.name}.`,\n        whitespace: true,\n        max: fieldLength.name,\n    },\n    {\n        pattern: /^[a-zA-Z0-9_-]*$/,\n        message: \"Nickname should contain only letters, numbers, '-' and '_'.\",\n    },\n]\n\nexport const nameRules = [\n    {\n        required: true,\n        min: 1,\n        whitespace: true,\n        message: 'Name is too short. Minimal length is 1.',\n    },\n    {\n        max: fieldLength.name,\n        message: `Name is too long. Miximum length is ${fieldLength.name}.`,\n    },\n]\n\nexport const accountNameRules = [\n    {\n        required: true,\n        min: 2,\n        whitespace: true,\n        message: 'Name is too short. Minimal length is 2.',\n    },\n    {\n        max: fieldLength.name,\n        message: `Name is too long. Miximum length is ${fieldLength.name}.`,\n    },\n]\n\nexport const descriptionRules = [\n    {\n        max: fieldLength.description,\n        message: `Description is too long. Miximum length is ${\n            fieldLength.description\n        }.`,\n    },\n]\n\nexport const messageRules = [\n    {\n        min: 1,\n        whitespace: true,\n        message: 'Message is too short. Minimal length is 1.',\n    },\n    {\n        max: fieldLength.message,\n        message: `Message is too long. Miximum length is ${\n            fieldLength.message\n        }.`,\n    },\n]\n\nexport const priceRules = [\n    {\n        required: true,\n        message: 'Please input the item price.',\n    },\n]\n","import React, { useState } from 'react'\nimport Modal from 'antd/es/modal'\n\nimport Button from 'antd/es/button'\nimport Input from 'antd/es/input'\nimport InputNumber from 'antd/es/input-number'\nimport Form from 'antd/es/form'\nimport Select from 'antd/es/select'\nimport Upload from 'antd/es/upload'\nimport PlusOutlined from '@ant-design/icons/PlusOutlined'\n\nimport Avatar from 'antd/es/avatar'\nimport Popconfirm from 'antd/es/popconfirm'\nimport {\n    nameRules,\n    descriptionRules,\n    priceRules,\n} from '../../constants/fieldRules'\nimport getAvatar from '../../utils/getAvatar'\n\nconst AddPerkForm = props => {\n    const [previewImage, setPreviewImage] = useState('')\n    const {\n        connections,\n        perkId,\n        perk,\n        deletePerk,\n        onFinish,\n        images,\n        setImages,\n        uploadImage,\n    } = props\n\n    const layout = {\n        labelCol: { span: 8 },\n        wrapperCol: { span: 16 },\n    }\n    const tailLayout = {\n        wrapperCol: { offset: 8, span: 16 },\n    }\n\n    const connectionsSelect = (\n        <Select\n            mode=\"multiple\"\n            style={{ width: '100%' }}\n            placeholder=\"Please select\"\n            getPopupContainer={trigger => trigger.parentNode}\n        >\n            {connections.map(item => (\n                <Select.Option key={item._id}>\n                    <Avatar\n                        src={getAvatar(item._id, item.image)}\n                        size={20}\n                        style={{ marginRight: '10px' }}\n                    />\n                    {item.name} - ({item._id})\n                </Select.Option>\n            ))}\n        </Select>\n    )\n    const [form] = Form.useForm()\n\n    const normFile = e => {\n        if (Array.isArray(e)) {\n            return e\n        }\n        return e && e.fileList.map(image => image.url)\n    }\n\n    return !props.perkId || perk ? (\n        <>\n            <Form\n                form={form}\n                name=\"dynamic_form_nest_item\"\n                onFinish={onFinish}\n                autoComplete=\"off\"\n                initialValues={perk || {}}\n                {...layout}\n            >\n                <Form.Item\n                    name=\"images\"\n                    label=\"Images\"\n                    valuePropName=\"images\"\n                    getValueFromEvent={normFile}\n                >\n                    <Upload\n                        listType=\"picture-card\"\n                        fileList={images.map((image, index) => ({\n                            ...image,\n                            uid: index,\n                        }))}\n                        onPreview={file => {\n                            setPreviewImage(file.url)\n                        }}\n                        onChange={({ fileList }) => setImages(fileList)}\n                        customRequest={({ file }) => {\n                            uploadImage(file)\n                        }}\n                    >\n                        {images.length >= 8 ? null : (\n                            <div>\n                                <PlusOutlined />\n                                <div className=\"ant-upload-text\">Upload</div>\n                            </div>\n                        )}\n                    </Upload>\n                </Form.Item>\n                <Form.Item label=\"Name\" name=\"name\" rules={nameRules}>\n                    <Input placeholder=\"New item\" />\n                </Form.Item>\n                <Form.Item\n                    label=\"Description\"\n                    name=\"description\"\n                    rules={descriptionRules}\n                >\n                    <Input.TextArea placeholder=\"Write a few words about this item.\" />\n                </Form.Item>\n\n                {props.mode === 'shop' && (\n                    <Form.Item label=\"Available for\" name=\"users\">\n                        {connectionsSelect}\n                    </Form.Item>\n                )}\n\n                {props.mode === 'shop' && (\n                    <Form.Item label=\"Price\" name=\"price\" rules={priceRules}>\n                        <InputNumber />\n                    </Form.Item>\n                )}\n\n                <Form.Item {...tailLayout}>\n                    <Button type=\"primary\" htmlType=\"submit\" size=\"large\">\n                        Save\n                    </Button>\n\n                    {perkId && (\n                        <Popconfirm\n                            title=\"Are you sure you want to delete this item?\"\n                            onConfirm={deletePerk}\n                            onCancel={() => {}}\n                            okText=\"Confirm\"\n                            cancelText=\"Cancel\"\n                        >\n                            <Button type=\"link\" danger size=\"large\">\n                                Delete\n                            </Button>\n                        </Popconfirm>\n                    )}\n                </Form.Item>\n            </Form>\n            <Modal\n                visible={previewImage}\n                footer={null}\n                onCancel={() => setPreviewImage('')}\n            >\n                <img\n                    alt=\"example\"\n                    style={{ width: '100%' }}\n                    src={previewImage}\n                />\n            </Modal>\n        </>\n    ) : null\n}\n\nexport default AddPerkForm\n","import { webSocket } from '../containers/ConnectWebsocket/ConnectWebsocket'\n\nexport const sendMessage = (\n    accountId,\n    postId,\n    messageValue,\n    image,\n    replyToMessage,\n    editedMessage\n) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'sendMessage',\n                messageValue,\n                image,\n                postId,\n                accountId,\n                replyToMessage,\n                editedMessage,\n            })\n        )\n    }\n}\n\nexport const changeLikesMessage = (\n    messageCode,\n    messageId,\n    accountId,\n    postId\n) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode,\n                messageId,\n                accountId,\n                postId,\n            })\n        )\n    }\n}\n\nexport const addPost = (\n    accountId,\n    parentId,\n    parentType,\n    messageValue,\n    images\n) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'addPost',\n                accountId,\n                parentId,\n                parentType,\n                messageValue,\n                images,\n            })\n        )\n    }\n}\n","import { webSocket } from '../containers/ConnectWebsocket/ConnectWebsocket'\n\nexport const savePerk = (accountId, id, value, mode) => {\n    if (accountId && webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode:\n                    mode === 'wishlist'\n                        ? 'saveWishlistItem'\n                        : mode === 'goals'\n                        ? 'saveGoal'\n                        : 'savePerk',\n                id,\n                value,\n                accountId,\n            })\n        )\n    }\n}\n\nexport const deletePerk = (accountId, id, mode) => {\n    if (accountId && id && webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode:\n                    mode === 'wishlist'\n                        ? 'deleteWishlistItem'\n                        : mode === 'goals'\n                        ? 'deleteGoal'\n                        : 'deletePerk',\n                id,\n                accountId,\n            })\n        )\n    }\n}\n\nexport const buyPerk = (buyer, seller, perkId) => {\n    if (perkId && buyer && seller && webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'buyPerk',\n                perkId,\n                buyer,\n                seller,\n            })\n        )\n    }\n}\n","import { webSocket } from '../containers/ConnectWebsocket/ConnectWebsocket'\n\nexport const searchFriends = search => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'searchFriends',\n                search,\n            })\n        )\n    }\n}\n\nexport const addFriend = (accountId, friendId) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'addFriend',\n                accountId,\n                friendId,\n            })\n        )\n    }\n}\n\nexport const acceptFriend = (accountId, friendId) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'acceptFriend',\n                accountId,\n                friendId,\n            })\n        )\n    }\n}\n\nexport const unfriend = (accountId, friendId) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'unfriend',\n                accountId,\n                friendId,\n            })\n        )\n    }\n}\n","import React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { uploadFile } from '../../utils/uploadFile'\nimport AddPerkForm from './AddPerkForm'\nimport { withRouter } from 'react-router-dom'\nimport * as wsActions from '../../websocketActions'\n\nconst AddPerk = props => {\n    const [perk, setPerk] = useState()\n    const [images, setImages] = useState([])\n    const { account, mode } = props\n    const perkId = props.perkId || ''\n    useEffect(() => {\n        if (perkId) {\n            const perk =\n                mode === 'wishlist'\n                    ? account.wishlist.find(item => item.itemId === perkId)\n                    : mode === 'goals'\n                    ? account.goals.find(item => item.goalId === perkId)\n                    : account.perks.find(item => item.perkId === perkId)\n            if (perk) {\n                setPerk(perk)\n                setImages(\n                    perk.images.map((url, index) => ({\n                        url,\n                        uid: index,\n                    }))\n                )\n            }\n        }\n    }, [])\n\n    const connections = [\n        account,\n        ...account.friends\n            .filter(friend => friend.status === 'friend')\n            .map(friend => props.friendData[friend.friend]),\n    ]\n\n    const uploadImage = file => {\n        uploadFile(file, 800, undefined, url => {\n            setImages(\n                [...images, { url }].map((image, index) => ({\n                    ...image,\n                    uid: index,\n                }))\n            )\n        })\n    }\n\n    return !props.perkId || perk ? (\n        <AddPerkForm\n            connections={connections}\n            perkId={perkId}\n            perk={perk}\n            deletePerk={() => {\n                wsActions.deletePerk(account._id, perkId, mode)\n                props.setEditPerkOpen(false)\n            }}\n            onFinish={value => {\n                const processedValue = {\n                    ...value,\n                    images: images.map(image => image.url),\n                }\n                wsActions.savePerk(account._id, perkId, processedValue, mode)\n                props.setEditPerkOpen(false)\n            }}\n            images={images}\n            setImages={setImages}\n            uploadImage={uploadImage}\n            mode={props.mode}\n        />\n    ) : null\n}\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n        friendData: state.friendData,\n    }\n}\nexport default withRouter(connect(mapStateToProps)(AddPerk))\n","import React from 'react'\nimport { withRouter } from 'react-router-dom'\n\nexport default withRouter(props => (\n    <div\n        onClick={() => props.history.push(props.onClickLink)}\n        style={{ cursor: 'pointer' }}\n    >\n        <img\n            style={{\n                width: '100%',\n                borderRadius: '15px',\n            }}\n            src={props.images.length > 0 ? props.images[0] : ''}\n        />\n        <div style={{ padding: '5px 0px', wordBreak: 'break-word' }}>\n            {props.actions && (\n                <div style={{ float: 'left' }}>{props.actions}</div>\n            )}\n            <span style={{ float: 'none' }}>{props.body}</span>\n        </div>\n    </div>\n))\n","import React from 'react'\n\nexport default props => (\n    <svg\n        viewBox=\"0 0 24 24\"\n        width=\"24\"\n        height=\"24\"\n        style={{ transform: 'rotate(90deg)' }}\n    >\n        <path d=\"M2 10h4v4H2v-4zm8 4h4v-4h-4v4zm8-4v4h4v-4h-4z\" />\n    </svg>\n)\n","import React from 'react'\nimport { withRouter } from 'react-router-dom'\n\nimport * as wsActions from '../../websocketActions'\nimport Dropdown from 'antd/es/dropdown'\nimport Menu from 'antd/es/menu'\nimport Button from 'antd/es/button'\nimport MasonryCard from '../../components/MasonryCard'\nimport EditFilled from '@ant-design/icons/EditFilled'\nimport Card from 'antd/es/card'\nimport MoreIcon from '../../components/UI/MoreIcon'\n\nconst PerkCard = props => {\n    const {\n        perk,\n        perkId,\n        owner,\n        account,\n        setEditedPerk,\n        setEditPerkOpen,\n        mode,\n    } = props\n\n    return (\n        <MasonryCard\n            onClickLink={`/${mode || 'shop'}/${owner._id}/${perkId}`}\n            images={perk.images}\n            body={\n                <Card\n                    extra={\n                        <span onClick={e => e.stopPropagation()}>\n                            {owner._id === account._id &&\n                            !props.onlyBuy &&\n                            props.mode === 'shop' ? (\n                                <Dropdown.Button\n                                    type=\"primary\"\n                                    key=\"1\"\n                                    onClick={() =>\n                                        wsActions.buyPerk(\n                                            account._id,\n                                            owner._id,\n                                            perkId\n                                        )\n                                    }\n                                    overlay={\n                                        <Menu>\n                                            <Menu.Item\n                                                key=\"0\"\n                                                onClick={() => {\n                                                    setEditedPerk(perkId)\n                                                    setEditPerkOpen(true)\n                                                }}\n                                            >\n                                                Edit\n                                            </Menu.Item>\n                                        </Menu>\n                                    }\n                                >\n                                    Buy\n                                </Dropdown.Button>\n                            ) : props.mode === 'shop' ? (\n                                <Button\n                                    type=\"primary\"\n                                    onClick={() =>\n                                        wsActions.buyPerk(\n                                            account._id,\n                                            owner._id,\n                                            perkId\n                                        )\n                                    }\n                                >\n                                    Buy\n                                </Button>\n                            ) : owner._id === account._id && !props.onlyBuy ? (\n                                <Dropdown\n                                    trigger={['click', 'hover']}\n                                    overlay={\n                                        <Menu>\n                                            <Menu.Item\n                                                key=\"0\"\n                                                onClick={() => {\n                                                    setEditedPerk(perkId)\n                                                    setEditPerkOpen(true)\n                                                }}\n                                            >\n                                                Edit\n                                            </Menu.Item>\n                                        </Menu>\n                                    }\n                                >\n                                    <Button type=\"link\">\n                                        <MoreIcon />\n                                    </Button>\n                                </Dropdown>\n                            ) : null}\n                        </span>\n                    }\n                    title={''}\n                    style={{ width: '100%' }}\n                    type=\"inner\"\n                    bordered={false}\n                >\n                    <span style={{ fontWeight: 'bold' }}>\n                        {perk.name}\n                        {mode === 'shop' && ` ($${perk.price})`}\n                    </span>\n                </Card>\n            }\n        />\n    )\n}\n\nexport default withRouter(PerkCard)\n","import React from 'react'\nimport Button from 'antd/es/button'\nimport { PlusOutlined } from '@ant-design/icons'\n\nconst AddCard = props => (\n    <Button\n        onClick={props.action}\n        type=\"primary\"\n        shape=\"round\"\n        icon={<PlusOutlined />}\n        size=\"large\"\n    >\n        {props.title}\n    </Button>\n)\n\nexport default AddCard\n","export const friendsBreakPoints = {\n    default: 4,\n    1600: 3,\n    1100: 2,\n    600: 1,\n}\n\nexport const cardBreakPoints = {\n    default: 4,\n    1100: 3,\n    700: 2,\n    350: 1,\n}\n","import React from 'react'\nimport Masonry from 'react-masonry-css'\nimport {\n    cardBreakPoints,\n    friendsBreakPoints,\n} from '../utils/masonryBreakPoints'\n\nexport default props => (\n    <div style={{ marginTop: '40px', ...props.style }}>\n        <Masonry\n            breakpointCols={3}\n            className=\"my-masonry-grid\"\n            columnClassName=\"my-masonry-grid_column\"\n            breakpointCols={\n                props.friends ? friendsBreakPoints : cardBreakPoints\n            }\n        >\n            {props.children}\n        </Masonry>\n    </div>\n)\n","import React, { useState } from 'react'\nimport Modal from 'antd/es/modal'\nimport Button from 'antd/es/button'\nimport AddPerk from './AddPerk'\nimport PerkCard from './PerkCard'\nimport AddCard from '../../components/AddCard/AddCard'\nimport { cardBreakPoints } from '../../utils/masonryBreakPoints'\nimport Masonry from 'react-masonry-css'\nimport MasonryGrid from '../../components/MasonryGrid'\nimport MasonryCard from '../../components/MasonryCard'\n\nconst WishlistAndPerks = props => {\n    const [editedPerk, setEditedPerk] = useState('')\n    const [editPerkOpen, setEditPerkOpen] = useState()\n\n    const { account } = props\n\n    const editPerk = (\n        <Modal\n            title=\"Add item\"\n            visible={editPerkOpen}\n            maskClosable\n            closable\n            onCancel={() => setEditPerkOpen(false)}\n            width=\"90%\"\n            footer={\n                <Button key=\"back\" onClick={() => setEditPerkOpen(false)}>\n                    Close\n                </Button>\n            }\n            destroyOnClose={true}\n        >\n            <AddPerk\n                setEditPerkOpen={setEditPerkOpen}\n                perkId={editedPerk}\n                mode={props.mode}\n            />\n        </Modal>\n    )\n\n    return account._id ? (\n        <>\n            <AddCard\n                action={() => {\n                    setEditedPerk('')\n                    setEditPerkOpen(true)\n                }}\n                title=\"Add item\"\n                sub={props.mode === 'shop' && 'Set price'}\n            />\n            <MasonryGrid>\n                {account[props.listKey || props.mode] &&\n                    account[props.listKey || props.mode].map((perk, index) => (\n                        <PerkCard\n                            key={index}\n                            perk={perk}\n                            perkId={\n                                props.mode === 'wishlist' ||\n                                props.mode === 'goals'\n                                    ? perk.itemId\n                                    : perk.perkId\n                            }\n                            owner={account}\n                            account={account}\n                            setEditedPerk={setEditedPerk}\n                            setEditPerkOpen={setEditPerkOpen}\n                            mode={props.mode}\n                            style={{ cursor: 'pointer' }}\n                        />\n                    ))}\n            </MasonryGrid>\n\n            {editPerk}\n        </>\n    ) : null\n}\n\nexport default WishlistAndPerks\n","import React, { useEffect } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport WishlistAndPerks from '../Shop/WishlistAndPerks'\n\nconst Goals = props => {\n    useEffect(() => {\n        props.setPageTitle({ main: 'Goals', sub: '' })\n    }, [])\n\n    return props.account._id ? (\n        <WishlistAndPerks mode=\"goals\" account={props.account} />\n    ) : (\n        <span />\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Goals)\n)\n","import axios from 'axios'\nimport processRes from './processRes'\nexport default (props, data, setData, options, callback) => {\n    // if (typeof props.isAuthed === 'undefined') return\n    // options = {\n    //     forceAuth: true,\n    //     forceActivate: true,\n    //     pullData: true,\n    //     ...(options || {}),\n    // }\n\n    // if (!props.isAuthed) {\n    //     props.tryAuth(props, options.forceAuth)\n    // }\n\n    // if (options.pullData) {\n    axios\n        .get('/api' + props.history.location.pathname)\n        .then(res => {\n            processRes(res, props)\n            // if (options.forceActivate) {\n            //     if (props.isAuthed && res.data.status === 'no account') {\n            //         props.history.push('/activate-account')\n            //     }\n            // }\n\n            setData(res.data)\n            callback(res.data)\n        })\n        .catch(err => {})\n    // }\n}\n","import React, { useState, useEffect } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport Button from 'antd/es/button'\nimport Comment from 'antd/es/comment'\nimport Avatar from 'antd/es/avatar'\nimport Input from 'antd/es/input'\nimport Form from 'antd/es/form'\nimport Upload from 'antd/es/upload'\nimport PictureFilled from '@ant-design/icons/PictureFilled'\nimport LoadingOutlined from '@ant-design/icons/LoadingOutlined'\nimport CloseCircleFilled from '@ant-design/icons/CloseCircleFilled'\nimport SendOutlined from '@ant-design/icons/SendOutlined'\nimport { uploadFile } from '../../utils/uploadFile'\nimport * as wsActions from '../../websocketActions'\nimport getAvatar from '../../utils/getAvatar'\nimport { messageRules } from '../../constants/fieldRules'\nimport { PlusOutlined } from '@ant-design/icons'\nimport message from 'antd/es/message'\nimport Modal from 'antd/es/modal/Modal'\n\nconst AddMessage = props => {\n    const [previewImage, setPreviewImage] = useState('')\n    const [imageLoading, setImageLoading] = useState(false)\n    const [images, setImages] = useState(props.images || [])\n    const { post, account } = props\n\n    const [messageText, setMessageText] = useState(\n        props.content ||\n            (props.replyToUser ? '@' + props.replyToUser + ' ' : '')\n    )\n\n    useEffect(() => {\n        setMessageText(\n            props.content ||\n                (props.replyToUser ? '@' + props.replyToUser + ' ' : '')\n        )\n    }, [props.replyToUser, props.content])\n\n    const uploadImage = file => {\n        uploadFile(file, 800, undefined, url => {\n            setImages([...images, url])\n        })\n    }\n\n    return post && account._id ? (\n        <div\n            style={{\n                background: '#fff',\n\n                ...(props.replyTo\n                    ? {}\n                    : {\n                          width: '100%',\n                          bottom: '-200px',\n                          left: '0px',\n                          //   position: 'absolute',\n                      }),\n            }}\n        >\n            <Comment\n                avatar={<Avatar src={getAvatar(account._id, account.image)} />}\n                content={\n                    <>\n                        <Form.Item rules={messageRules} style={{ margin: 0 }}>\n                            <Input.TextArea\n                                autoSize={{\n                                    minRows: 1,\n                                    maxRows: 3,\n                                }}\n                                rows={1}\n                                onChange={e => setMessageText(e.target.value)}\n                                value={messageText}\n                                placeholder=\"Write a comment\"\n                            />\n                        </Form.Item>\n                        {images.length > 0 && (\n                            <Form.Item style={{ margin: 0 }}>\n                                <Upload\n                                    listType=\"picture-card\"\n                                    fileList={images.map((image, index) => ({\n                                        url: image,\n                                        uid: index,\n                                    }))}\n                                    onPreview={file => {\n                                        setPreviewImage(file.url)\n                                    }}\n                                    onChange={({ fileList }) =>\n                                        setImages(\n                                            fileList.map(image => image.url)\n                                        )\n                                    }\n                                    customRequest={({ file }) => {\n                                        uploadImage(file)\n                                    }}\n                                >\n                                    {images.length >= 8 ? null : (\n                                        <div>\n                                            <PlusOutlined />\n                                            <div className=\"ant-upload-text\">\n                                                Upload\n                                            </div>\n                                        </div>\n                                    )}\n                                </Upload>\n                            </Form.Item>\n                        )}\n                        <Form.Item style={{ margin: 0 }}>\n                            <Button\n                                htmlType=\"submit\"\n                                onClick={() => {\n                                    wsActions.sendMessage(\n                                        account._id,\n                                        post._id,\n                                        messageText,\n                                        images,\n                                        props.replyTo,\n                                        props.editingMessage\n                                    )\n                                    setMessageText('')\n                                    setImages([])\n                                    if (props.onSend) props.onSend()\n                                }}\n                                icon={<SendOutlined />}\n                                type=\"text\"\n                            >\n                                Send\n                            </Button>\n                            <Upload\n                                showUploadList={false}\n                                customRequest={({ file }) => {\n                                    if (images.length > 8) {\n                                        message.warning(\n                                            'You can not attach more than 8 images.'\n                                        )\n                                        return\n                                    }\n                                    setImageLoading(true)\n                                    uploadFile(file, 800, undefined, url => {\n                                        setImageLoading(false)\n                                        setImages([...images, url])\n                                    })\n                                }}\n                            >\n                                <Button\n                                    type=\"text\"\n                                    icon={\n                                        imageLoading ? (\n                                            <LoadingOutlined />\n                                        ) : (\n                                            <PictureFilled />\n                                        )\n                                    }\n                                >\n                                    Image\n                                </Button>\n                            </Upload>\n                            {props.cancel && (\n                                <Button\n                                    onClick={props.cancel}\n                                    icon={<CloseCircleFilled />}\n                                    type=\"text\"\n                                >\n                                    Cancel\n                                </Button>\n                            )}\n                        </Form.Item>\n                    </>\n                }\n            />\n            <Modal\n                visible={previewImage}\n                footer={null}\n                onCancel={() => setPreviewImage('')}\n            >\n                <img\n                    alt=\"example\"\n                    style={{ width: '100%' }}\n                    src={previewImage}\n                />\n            </Modal>\n        </div>\n    ) : null\n}\n\nexport default withRouter(AddMessage)\n","import React from 'react'\nimport Carousel from 'antd/es/carousel'\nimport classes from './imageCarousel.module.css'\n\nconst ImageCarousel = props =>\n    props.images && props.images.length > 0 ? (\n        <Carousel\n            style={{ width: props.size || 'auto' }}\n            dots={{ className: classes.Dots }}\n        >\n            {props.images.map(\n                (image, index) =>\n                    image && (\n                        <div key={index}>\n                            <div\n                                style={{\n                                    backgroundImage: 'url(\"' + image + '\")',\n                                    backgroundSize: props.type || 'contain',\n                                    backgroundPosition: 'center',\n                                    width: props.size || '100%',\n                                    height:\n                                        props.height || props.size || '300px',\n                                    backgroundRepeat: 'no-repeat',\n                                }}\n                            />\n                        </div>\n                    )\n            )}\n        </Carousel>\n    ) : null\n\nexport default ImageCarousel\n","import React from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\n\nimport Button from 'antd/es/button'\nimport Avatar from 'antd/es/avatar'\nimport getAvatar from '../../utils/getAvatar'\nimport Typography from 'antd/es/typography'\n\nconst UserButton = props => {\n    const { account, profile, id, friendSearchResult } = props\n    const friendData = props.friendDataExp || props.friendData\n    const getUserData = id =>\n        id === account._id\n            ? account\n            : id === profile._id\n            ? profile\n            : id === friendSearchResult._id\n            ? friendSearchResult\n            : friendData[id]\n    const userName = id => (getUserData(id) ? getUserData(id).name : id)\n    const userAvatar = id =>\n        getUserData(id) ? (\n            <span\n                key={id}\n                onClick={() => {\n                    if (!props.noClick) handleClick(id)\n                }}\n            >\n                <Avatar\n                    src={getAvatar(id, getUserData(id).image)}\n                    size={props.size || (props.noClick ? 20 : 40)}\n                    style={props.group ? {} : { margin: ' 0 5px' }}\n                />\n            </span>\n        ) : null\n\n    const handleClick = id => props.history.push('/profile/' + (id || props.id))\n    return props.group ? (\n        <span onClick={e => e.stopPropagation()}>\n            <Avatar.Group style={{ margin: ' 0 5px' }}>\n                {props.ids.map(id => userAvatar(id))}\n            </Avatar.Group>\n        </span>\n    ) : props.noClick ? (\n        <>\n            {!props.noAva && userAvatar(id)}\n            {!props.noName && userName(id)}\n        </>\n    ) : props.span ? (\n        <span\n            style={{ cursor: 'pointer', fontWeight: 'bold', ...props.style }}\n            onClick={e => {\n                e.stopPropagation()\n                handleClick()\n            }}\n        >\n            {!props.noAva && userAvatar(id)}\n            {!props.noName && userName(id)}\n        </span>\n    ) : (\n        <Button\n            type=\"link\"\n            style={{ padding: '0px 5px', height: 'auto', ...props.style }}\n            onClick={e => {\n                e.stopPropagation()\n                handleClick()\n            }}\n        >\n            {!props.noAva && userAvatar(id)}\n\n            {!props.noName && userName(id)}\n        </Button>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        account: state.account,\n        profile: state.profile,\n        friendData: state.friendData,\n        friendSearchResult: state.friendSearchResult,\n    }\n}\n\nexport default withRouter(connect(mapStateToProps)(UserButton))\n","import React, { useState } from 'react'\nimport { withRouter } from 'react-router-dom'\n\nimport Comment from 'antd/es/comment'\n\nimport Tooltip from 'antd/es/tooltip'\nimport Avatar from 'antd/es/avatar'\nimport TimeAgo from 'timeago-react'\n\nimport * as wsActions from '../../websocketActions'\nimport LikeFilled from '@ant-design/icons/LikeFilled'\nimport LikeOutlined from '@ant-design/icons/LikeOutlined'\nimport AddMessage from './AddMessage'\nimport getAvatar from '../../utils/getAvatar'\nimport Button from 'antd/es/button'\nimport ImageCarousel from '../UI/ImageCarousel/ImageCarousel'\nimport UserButton from '../UserButton/UserButton'\n\nconst Message = props => {\n    const {\n        account,\n        state,\n        setState,\n        message,\n        friendData,\n        progressData,\n        groupData,\n        post,\n        replies,\n        isStart,\n    } = props\n    const [replyVisible, setReplyVisible] = useState(false)\n    const [replyToUser, setReplyToUser] = useState('')\n    const [editingMessage, setEditingMessage] = useState('')\n    const [showReplies, setShowReplies] = useState(false)\n    const commentProps = {\n        actions: !props.isStart && [\n            <span>\n                <TimeAgo datetime={message.date} live />\n            </span>,\n            <span key=\"comment-basic-like\">\n                <Tooltip title=\"Like\">\n                    {message.likes.includes(account._id) ? (\n                        <LikeFilled\n                            onClick={() =>\n                                wsActions.changeLikesMessage(\n                                    'dislikeMessage',\n                                    message.messageId,\n                                    account._id,\n                                    post._id\n                                )\n                            }\n                        />\n                    ) : (\n                        <LikeOutlined\n                            onClick={() =>\n                                wsActions.changeLikesMessage(\n                                    'likeMessage',\n                                    message.messageId,\n                                    account._id,\n                                    post._id\n                                )\n                            }\n                        />\n                    )}\n                </Tooltip>\n                <span style={{ paddingLeft: '8px' }}>\n                    {message.likes.length}\n                </span>\n            </span>,\n\n            message.author !== account._id && (\n                <span\n                    key=\"comment-basic-reply-to\"\n                    onClick={() => {\n                        if (props.setReplyVisible) {\n                            props.setReplyVisible(true)\n                            props.setReplyToUser(props.message.author)\n                        } else {\n                            setReplyVisible(true)\n                            setReplyToUser('')\n                        }\n                        setShowReplies(true)\n                    }}\n                >\n                    Reply\n                </span>\n            ),\n            message.author === account._id && (\n                <span\n                    key=\"comment-basic-reply-to\"\n                    onClick={() => setEditingMessage(message.messageId)}\n                >\n                    Edit\n                </span>\n            ),\n        ],\n        avatar: <UserButton noName={true} id={message.author} span={true} />,\n        content: isStart ? (\n            <>\n                {message.messageType === 'wishlist' && (\n                    <>\n                        {' '}\n                        <span\n                            style={{\n                                fontWeight: 'bold',\n                                cursor: 'pointer',\n                                margin: '10px 0px 0px ',\n                            }}\n                            onClick={() =>\n                                props.history.push(\n                                    `/wishlist/${message.details.owner}/${\n                                        message.details.itemId\n                                    }`\n                                )\n                            }\n                        >\n                            {message.details.name}\n                        </span>\n                    </>\n                )}\n                {message.text && <p>{message.text}</p>}\n            </>\n        ) : (\n            <>\n                <div\n                    style={{\n                        background: '#eee',\n                        borderRadius: '5px',\n                        padding: '3px 10px',\n                        display:\n                            message.image && message.image.length > 0\n                                ? 'block'\n                                : 'inline-block',\n                    }}\n                >\n                    <UserButton\n                        id={message.author}\n                        span={true}\n                        noAva={true}\n                        style={{ fontWeight: 'bold' }}\n                    />\n\n                    {message.image && message.image.length > 0 && (\n                        <ImageCarousel\n                            images={message.image}\n                            height=\"60vmin\"\n                            type=\"contain\"\n                        />\n                    )}\n\n                    {message.text && <p>{message.text}</p>}\n                </div>\n                <div />\n            </>\n        ),\n        author: isStart && (\n            <span\n                style={{ color: '#333', fontWeight: 'bold', fontSize: '14px' }}\n            >\n                <UserButton id={message.author} span={true} noAva={true} />{' '}\n                <span style={{ fontWeight: 'normal' }}>in</span>{' '}\n                {post.parent &&\n                    progressData &&\n                    progressData[post.parent.parentId] && (\n                        <span\n                            style={{ cursor: 'pointer' }}\n                            onClick={() =>\n                                props.history.push(\n                                    '/progresses/' + post.parent.parentId\n                                )\n                            }\n                        >\n                            {progressData[post.parent.parentId].goal.name}\n                        </span>\n                    )}\n                {post.startMessage &&\n                    ['wishlist', 'perk', 'goal'].includes(\n                        post.startMessage.messageType\n                    ) && (\n                        <span\n                            style={{ cursor: 'pointer' }}\n                            onClick={() =>\n                                props.history.push('/profile/' + message.author)\n                            }\n                        >\n                            {post.startMessage.messageType === 'wishlist'\n                                ? 'Wishlist'\n                                : post.startMessage.messageType === 'goals'\n                                ? 'Goals'\n                                : 'Shop'}\n                        </span>\n                    )}\n            </span>\n        ),\n        datetime: isStart && (\n            <span style={{ color: '#333' }}>\n                <TimeAgo datetime={message.date} live />\n            </span>\n        ),\n    }\n    return account && friendData ? (\n        account._id !== message.author || !editingMessage ? (\n            <Comment {...commentProps}>\n                {props.isTop && replies && replies.length > 0 ? (\n                    showReplies ? (\n                        replies.map((reply, index) => (\n                            <Message\n                                key={index}\n                                message={reply}\n                                post={post}\n                                account={account}\n                                friendData={friendData}\n                                setReplyVisible={setReplyVisible}\n                                setReplyToUser={setReplyToUser}\n                            />\n                        ))\n                    ) : (\n                        <Button\n                            type=\"text\"\n                            onClick={() => setShowReplies(true)}\n                        >\n                            Show {replies.length} replies\n                        </Button>\n                    )\n                ) : null}\n\n                {props.isTop && replyVisible ? (\n                    <AddMessage\n                        post={post}\n                        account={account}\n                        replyTo={message.messageId}\n                        replyToUser={replyToUser}\n                        cancel={() => setReplyVisible(false)}\n                    />\n                ) : null}\n            </Comment>\n        ) : (\n            <AddMessage\n                post={post}\n                account={account}\n                replyTo={message.messageId}\n                editingMessage={editingMessage}\n                content={message.text}\n                images={message.image}\n                onSend={() => setEditingMessage('')}\n                cancel={() => setEditingMessage('')}\n            />\n        )\n    ) : null\n}\n\nexport default withRouter(Message)\n","import React, { useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport * as wsActions from '../../websocketActions'\nimport Message from './Message'\nimport { LikeOutlined, LikeFilled, CommentOutlined } from '@ant-design/icons'\nimport AddMessage from './AddMessage'\nimport Divider from 'antd/es/divider'\nimport Button from 'antd/es/button'\n\nconst Post = props => {\n    const { post, account, friendData, progressData, groupData } = props\n    const [postOpen, setPostOpen] = useState(props.showReplies)\n    const getNumberOfMessages = messages => {\n        let result = 0\n        for (let item of messages) {\n            result = result + 1 + item.replies.length\n        }\n        return result\n    }\n    return post ? (\n        <>\n            {!props.noStartMessage && (\n                <>\n                    <Message\n                        message={post.startMessage}\n                        post={post}\n                        account={account}\n                        friendData={friendData}\n                        progressData={progressData}\n                        groupData={groupData}\n                        replies={[]}\n                        isStart={true}\n                    />\n                    {post.startMessage.image &&\n                        post.startMessage.image.length > 0 && (\n                            <img\n                                style={{\n                                    width: '100%',\n                                }}\n                                src={post.startMessage.image[0]}\n                            />\n                        )}\n                </>\n            )}\n            <Divider type=\"horizontal\" style={{ margin: '5px 0' }} />\n\n            <div\n                style={{\n                    textAlign: 'left',\n                    // marginBottom: '200px',\n                    position: 'relative',\n                }}\n            >\n                <div\n                    style={{ display: 'flex', justifyContent: 'space-around' }}\n                >\n                    <span key=\"comment-basic-like\">\n                        <Button type=\"text\">\n                            {post.startMessage.likes.includes(account._id) ? (\n                                <LikeFilled\n                                    style={{ fontSize: '20px' }}\n                                    onClick={() =>\n                                        wsActions.changeLikesMessage(\n                                            'dislikeMessage',\n                                            post.startMessage.messageId,\n                                            account._id,\n                                            post._id\n                                        )\n                                    }\n                                />\n                            ) : (\n                                <LikeOutlined\n                                    style={{ fontSize: '20px' }}\n                                    onClick={() =>\n                                        wsActions.changeLikesMessage(\n                                            'likeMessage',\n                                            post.startMessage.messageId,\n                                            account._id,\n                                            post._id\n                                        )\n                                    }\n                                />\n                            )}\n                            Likes\n                            <span style={{ paddingLeft: '8px' }}>\n                                {post.startMessage.likes.length}\n                            </span>\n                        </Button>\n                    </span>\n                    <span>\n                        <Button onClick={() => setPostOpen(true)} type=\"text\">\n                            <CommentOutlined style={{ fontSize: '20px' }} />\n                            Comment\n                            <span style={{ paddingLeft: '8px' }}>\n                                {getNumberOfMessages(post.messages)}\n                            </span>\n                        </Button>\n                    </span>\n                </div>\n                <Divider type=\"horizontal\" style={{ margin: '5px 0' }} />\n                {postOpen && (\n                    <>\n                        <AddMessage post={post} account={account} />\n                        {post.messages && post.messages.length\n                            ? post.messages.map((message, index) => (\n                                  <Message\n                                      key={index}\n                                      message={message}\n                                      post={post}\n                                      account={account}\n                                      friendData={friendData}\n                                      replies={message.replies}\n                                      isTop={true}\n                                  />\n                              ))\n                            : null}\n                    </>\n                )}\n            </div>\n        </>\n    ) : null\n}\n\nexport default withRouter(Post)\n","import React, { useEffect, useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport Card from 'antd/es/card'\nimport pullData from '../../utils/pullData'\nimport Post from '../../components/Post/Post'\nimport UserButton from '../../components/UserButton/UserButton'\nimport ImageCarousel from '../../components/UI/ImageCarousel/ImageCarousel'\n\nconst Goal = props => {\n    const [data, setData] = useState({})\n    const { account } = props\n    useEffect(() => {\n        const pathParts = props.history.location.pathname.split('/')\n        if (pathParts.length > 3) {\n            const accountId = pathParts[2]\n            if (props.isAuthed && account._id === accountId) {\n                const goal = account.goals.find(\n                    item => item.itemId === pathParts[3]\n                )\n                setData({ profile: account, goal })\n            } else {\n                pullData(props, data, setData, { forceAuth: false }, data => {\n                    const friendData = {}\n                    for (let friend of data.friendData)\n                        friendData[friend._id] = friend\n\n                    props.setData({\n                        post: { [data.post._id]: data.post },\n                        friendData,\n                    })\n                })\n            }\n        }\n    }, [props.isAuthed])\n    if (!data.goal) return null\n    const { goal, profile } = data\n    props.setData({ currentPosts: goal.post })\n    if (goal) {\n        props.setPageTitle({ main: goal.name, sub: profile._id })\n    }\n    return goal ? (\n        <Card\n            title={\n                <span>\n                    Goal from <UserButton id={profile._id} /> goals\n                </span>\n            }\n            bordered={false}\n        >\n            <ImageCarousel images={goal.images} />\n\n            <h1>{goal.name}</h1>\n            <p style={{ whiteSpace: 'pre-wrap' }}>{goal.description}</p>\n            <Post\n                noStartMessage={true}\n                post={props.post[goal.post]}\n                account={props.account}\n                friendData={props.friendData}\n                showReplies={true}\n            />\n        </Card>\n    ) : null\n}\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        account: state.account,\n        post: state.post,\n        friendData: state.friendData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: data => {\n            dispatch(actions.setData(data))\n        },\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Goal)\n)\n","import React from 'react'\n\nimport Select from 'antd/es/select'\nimport UserButton from '../UserButton/UserButton'\n\nexport default (account, friendData, value?, onSelect?) => (\n    <Select\n        mode=\"multiple\"\n        style={{ width: '100%' }}\n        placeholder=\"Please select\"\n        value={value}\n        onChange={onSelect}\n        getPopupContainer={trigger => trigger.parentNode}\n    >\n        {[\n            account,\n            ...account.friends\n                .filter(friend => friend.status === 'friend')\n                .map(friend => friendData[friend.friend]),\n        ].map(item => (\n            <Select.Option key={item._id}>\n                <UserButton id={item._id} noClick={true} />\n            </Select.Option>\n        ))}\n    </Select>\n)\n","import React, { useState } from 'react'\nimport Modal from 'antd/es/modal'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as wsActions from '../../websocketActions'\nimport Button from 'antd/es/button'\nimport Input from 'antd/es/input'\nimport InputNumber from 'antd/es/input-number'\nimport Form from 'antd/es/form'\nimport Select from 'antd/es/select'\n\nimport Upload from 'antd/es/upload'\nimport Divider from 'antd/es/divider'\nimport PlusOutlined from '@ant-design/icons/PlusOutlined'\n\nimport { uploadFile } from '../../utils/uploadFile'\nimport {\n    descriptionRules,\n    nameRules,\n    priceRules,\n} from '../../constants/fieldRules'\nimport connectionsSelect from '../EditGoalAndProgressForm/connectionsSelect'\nimport Descriptions from 'antd/es/descriptions'\nimport UserButton from '../UserButton/UserButton'\nimport Dropdown from 'antd/es/dropdown'\nimport Menu from 'antd/es/menu'\nimport Card from 'antd/es/card'\nimport MoreIcon from '../UI/MoreIcon'\n\nconst Rewards = props => {\n    const [previewImage, setPreviewImage] = useState('')\n    const [previewReward, setPreviewReward] = useState()\n    const [editedReward, setEditedReward] = useState()\n    const [editedRewardIndex, setEditedRewardIndex] = useState()\n    const { account, friendData, readOnly, progress } = props\n    const rewardsGI = props.rewards.findIndex(\n        item => item.key === props.rewardKey\n    )\n\n    if (rewardsGI === -1 && props.setRewards)\n        props.setRewards([\n            ...props.rewards,\n            {\n                key: props.rewardKey,\n                rewards: [],\n            },\n        ])\n    const RewardButton = props => (\n        <Button type=\"link\" onClick={() => setPreviewReward(props.item)}>\n            {props.item.mode === 'simple'\n                ? props.item.simple\n                : props.item.mode === 'money'\n                ? props.item.money + ' (money)'\n                : props.item.mode === 'item'\n                ? props.item.itemName\n                : ''}\n        </Button>\n    )\n\n    return rewardsGI >= 0 ? (\n        <div>\n            {props.onlyButton ? (\n                props.rewards[rewardsGI].rewards.map((item, index) => (\n                    <RewardButton item={item} />\n                ))\n            ) : (\n                <Form.Item label={props.label} key={props.rewardKey}>\n                    <ol>\n                        {props.rewards[rewardsGI].rewards.map((item, index) => {\n                            return (\n                                <li key={index}>\n                                    <RewardButton item={item} />\n                                    <UserButton\n                                        id={item.owner}\n                                        noName={true}\n                                    />{' '}\n                                    in\n                                    {item.for && item.for.length > 0 ? (\n                                        <UserButton\n                                            id={item.for}\n                                            noName={true}\n                                        />\n                                    ) : (\n                                        <span\n                                            style={{\n                                                fontWeight: 'bold',\n                                                marginLeft: '5px',\n                                            }}\n                                        >\n                                            All\n                                        </span>\n                                    )}\n                                    {item.owner === account._id && !readOnly && (\n                                        <>\n                                            <Dropdown\n                                                overlay={\n                                                    <Menu>\n                                                        <Menu.Item\n                                                            onClick={() => {\n                                                                setEditedRewardIndex(\n                                                                    index\n                                                                )\n                                                                setEditedReward(\n                                                                    item\n                                                                )\n                                                            }}\n                                                        >\n                                                            Edit\n                                                        </Menu.Item>\n\n                                                        <Menu.Item\n                                                            onClick={() => {\n                                                                if (\n                                                                    !window.confirm(\n                                                                        'Are you sure you want to delete this item?'\n                                                                    )\n                                                                )\n                                                                    return\n                                                                if (\n                                                                    props.setRewards\n                                                                ) {\n                                                                    const newRewards = [\n                                                                        ...props.rewards,\n                                                                    ]\n                                                                    newRewards[\n                                                                        rewardsGI\n                                                                    ] = {\n                                                                        ...newRewards[\n                                                                            rewardsGI\n                                                                        ],\n                                                                        rewards: newRewards[\n                                                                            rewardsGI\n                                                                        ].rewards.filter(\n                                                                            (\n                                                                                item,\n                                                                                indexIn\n                                                                            ) =>\n                                                                                indexIn !==\n                                                                                index\n                                                                        ),\n                                                                    }\n                                                                    props.setRewards(\n                                                                        newRewards\n                                                                    )\n                                                                } else {\n                                                                    wsActions.deleteReward(\n                                                                        account._id,\n                                                                        progress._id,\n                                                                        props.rewardKey,\n                                                                        item.rewardId\n                                                                    )\n                                                                }\n                                                            }}\n                                                        >\n                                                            Delete\n                                                        </Menu.Item>\n                                                    </Menu>\n                                                }\n                                            >\n                                                <Button type=\"link\">\n                                                    <MoreIcon />\n                                                </Button>\n                                            </Dropdown>\n                                        </>\n                                    )}\n                                </li>\n                            )\n                        })}\n                    </ol>\n\n                    {!readOnly && (\n                        <Button\n                            type=\"link\"\n                            onClick={() => {\n                                setEditedRewardIndex('new')\n                                setEditedReward({ mode: 'simple' })\n                            }}\n                        >\n                            <PlusOutlined />\n                            Add rewards\n                        </Button>\n                    )}\n                </Form.Item>\n            )}\n            <Modal\n                visible={editedReward}\n                title={\n                    editedReward === 'new' ? 'Add new reward' : 'Edit reward'\n                }\n                closable={true}\n                onCancel={() => setEditedReward()}\n                onOk={() => {\n                    let rewardToSave = {}\n                    if (editedReward.mode === 'money') {\n                        rewardToSave.money = editedReward.money\n                        rewardToSave.mode = editedReward.mode\n                        rewardToSave.for = editedReward.for\n                        rewardToSave.rewardId = editedReward.rewardId\n                    } else {\n                        rewardToSave = { ...editedReward, money: undefined }\n                    }\n                    rewardToSave.owner = account._id\n\n                    if (props.setRewards) {\n                        const newRewards = [...props.rewards]\n\n                        if (editedRewardIndex === 'new')\n                            newRewards[rewardsGI] = {\n                                ...newRewards[rewardsGI],\n                                rewards: [\n                                    ...newRewards[rewardsGI].rewards,\n                                    rewardToSave,\n                                ],\n                            }\n                        else\n                            newRewards[rewardsGI] = {\n                                ...newRewards[rewardsGI],\n                                rewards: newRewards[rewardsGI].rewards.map(\n                                    (item, index) => {\n                                        if (index === editedRewardIndex)\n                                            return rewardToSave\n                                        else return item\n                                    }\n                                ),\n                            }\n                        props.setRewards(newRewards)\n                        setEditedReward()\n                        setEditedRewardIndex()\n                    } else {\n                        wsActions.saveReward(\n                            account._id,\n                            progress._id,\n                            props.rewardKey,\n                            rewardToSave\n                        )\n                        setEditedReward()\n                        setEditedRewardIndex()\n                    }\n                }}\n                destroyOnClose={true}\n                okText=\"Save\"\n            >\n                {editedReward && (\n                    <>\n                        <Form.Item label=\"Reward type\">\n                            <Select\n                                placeholder=\"Type\"\n                                value={editedReward.mode}\n                                onSelect={value => {\n                                    setEditedReward({\n                                        ...editedReward,\n                                        mode: value,\n                                    })\n                                }}\n                                style={{ width: '100%' }}\n                                getPopupContainer={trigger =>\n                                    trigger.parentNode\n                                }\n                            >\n                                <Select.Option key=\"simple\" value=\"simple\">\n                                    Simple reward\n                                </Select.Option>\n                                <Select.Option key=\"item\" value=\"item\">\n                                    Item reward\n                                </Select.Option>\n                                <Select.Option key=\"money\" value=\"money\">\n                                    Money reward\n                                </Select.Option>\n                            </Select>\n                        </Form.Item>\n                        <Form.Item label=\"Reward for\">\n                            {connectionsSelect(\n                                account,\n                                friendData,\n                                editedReward.for,\n                                value => {\n                                    setEditedReward({\n                                        ...editedReward,\n                                        for: value,\n                                    })\n                                }\n                            )}\n                            <p>(leave blank for all)</p>\n                        </Form.Item>\n                        <Divider type=\"horizontal\" />\n                        {editedReward.mode === 'simple' ? (\n                            <Form.Item\n                                label=\"Description\"\n                                rules={[\n                                    ...descriptionRules,\n                                    {\n                                        required: true,\n                                        min: 1,\n                                        whitespace: true,\n                                        message:\n                                            'Desription is too short. Minimal length is 1.',\n                                    },\n                                ]}\n                            >\n                                <Input.TextArea\n                                    value={editedReward.simple}\n                                    onChange={({ target: { value } }) =>\n                                        setEditedReward({\n                                            ...editedReward,\n                                            simple: value,\n                                        })\n                                    }\n                                    placeholder=\"Explain how you will reward\"\n                                />\n                            </Form.Item>\n                        ) : editedReward.mode === 'money' ? (\n                            <Form.Item label=\"Amount\" rules={priceRules}>\n                                <InputNumber\n                                    value={editedReward.money}\n                                    onChange={value => {\n                                        setEditedReward({\n                                            ...editedReward,\n                                            money: value,\n                                        })\n                                    }}\n                                />\n                            </Form.Item>\n                        ) : (\n                            <>\n                                <Form.Item label=\"Images\">\n                                    <Upload\n                                        listType=\"picture-card\"\n                                        fileList={(\n                                            editedReward.itemImages || []\n                                        ).map((url, index) => ({\n                                            url,\n                                            uid: index,\n                                        }))}\n                                        onPreview={file => {\n                                            setPreviewImage(file.url)\n                                        }}\n                                        onChange={({ fileList }) => {\n                                            setEditedReward({\n                                                ...editedReward,\n                                                itemImages: fileList.map(\n                                                    image => image.url\n                                                ),\n                                            })\n                                        }}\n                                        customRequest={({ file }) => {\n                                            uploadFile(\n                                                file,\n                                                800,\n                                                undefined,\n                                                url => {\n                                                    setEditedReward({\n                                                        ...editedReward,\n                                                        itemImages: [\n                                                            ...(editedReward.itemImages ||\n                                                                []),\n                                                            url,\n                                                        ],\n                                                    })\n                                                }\n                                            )\n                                        }}\n                                    >\n                                        {(editedReward.itemImages || [])\n                                            .length >= 8 ? null : (\n                                            <div>\n                                                <PlusOutlined />\n                                                <div className=\"ant-upload-text\">\n                                                    Upload\n                                                </div>\n                                            </div>\n                                        )}\n                                    </Upload>\n                                </Form.Item>\n                                <Form.Item label=\"Name\" rules={nameRules}>\n                                    <Input\n                                        value={editedReward.itemName}\n                                        onChange={({ target: { value } }) =>\n                                            setEditedReward({\n                                                ...editedReward,\n                                                itemName: value,\n                                            })\n                                        }\n                                    />\n                                </Form.Item>\n                                <Form.Item\n                                    label=\"Description\"\n                                    rules={descriptionRules}\n                                >\n                                    <Input.TextArea\n                                        value={editedReward.itemDescription}\n                                        onChange={({ target: { value } }) =>\n                                            setEditedReward({\n                                                ...editedReward,\n                                                itemDescription: value,\n                                            })\n                                        }\n                                    />\n                                </Form.Item>\n                            </>\n                        )}\n                    </>\n                )}\n            </Modal>\n            <Modal\n                visible={previewImage}\n                footer={null}\n                onCancel={() => setPreviewImage('')}\n            >\n                <img\n                    alt=\"example\"\n                    style={{ width: '100%' }}\n                    src={previewImage}\n                />\n            </Modal>\n            <Modal\n                visible={previewReward}\n                footer={null}\n                onCancel={() => setPreviewReward()}\n                title=\"Reward details\"\n            >\n                {previewReward ? (\n                    <>\n                        {previewReward.itemImages &&\n                            previewReward.itemImages.map((image, index) => (\n                                <span\n                                    key={index}\n                                    onClick={() => setPreviewImage(image)}\n                                >\n                                    <Card\n                                        type=\"inner\"\n                                        style={{\n                                            width: 200,\n                                            display: 'inline-block',\n                                        }}\n                                        hoverable\n                                        cover={\n                                            <div\n                                                style={{\n                                                    backgroundImage:\n                                                        'url(' + image + ')',\n                                                    height: 200,\n                                                    width: 200,\n                                                    backgroundSize: 'cover',\n                                                }}\n                                            />\n                                        }\n                                    />\n                                </span>\n                            ))}\n\n                        <Descriptions\n                            title=\"Reward description\"\n                            bordered\n                            column={{\n                                xxl: 4,\n                                xl: 3,\n                                lg: 3,\n                                md: 3,\n                                sm: 2,\n                                xs: 1,\n                            }}\n                        >\n                            {previewReward.mode === 'item' && (\n                                <Descriptions.Item label=\"Name\">\n                                    {previewReward.itemName}\n                                </Descriptions.Item>\n                            )}\n                            {previewReward.mode === 'item' && (\n                                <Descriptions.Item label=\"Description\">\n                                    <p style={{ whiteSpace: 'pre-wrap' }}>\n                                        {previewReward.itemDescription}\n                                    </p>\n                                </Descriptions.Item>\n                            )}\n                            {previewReward.mode === 'simple' && (\n                                <Descriptions.Item label=\"Description\">\n                                    <p style={{ whiteSpace: 'pre-wrap' }}>\n                                        {previewReward.simple}\n                                    </p>\n                                </Descriptions.Item>\n                            )}\n                            {previewReward.mode === 'money' && (\n                                <Descriptions.Item label=\"Money\">\n                                    {previewReward.money}\n                                </Descriptions.Item>\n                            )}\n                        </Descriptions>\n                    </>\n                ) : null}\n            </Modal>\n        </div>\n    ) : null\n}\n\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        account: state.account,\n        friendData: state.friendData,\n        progress: state.progress,\n    }\n}\n\nexport default withRouter(connect(mapStateToProps)(Rewards))\n","import { webSocket } from '../containers/ConnectWebsocket/ConnectWebsocket'\n\nexport const changeStage = (data, value, milestoneId) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'changeStage',\n                milestoneId,\n                value,\n                progressId: data.progress._id,\n                accountId: data.account._id,\n            })\n        )\n    }\n}\n\nexport const leaveProgress = data => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'leaveProgress',\n                progressId: data.progress._id,\n                accountId: data.account._id,\n            })\n        )\n    }\n}\n\nexport const createGroup = (accountId, progressId) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'createGroup',\n                progressId,\n                accountId,\n            })\n        )\n    }\n}\n\nexport const getFriendsData = (progress, accountFriends) => {\n    if (webSocket && webSocket.readyState === 1) {\n        if (progress) {\n            let accountIds = [\n                progress.owner,\n                progress.worker,\n                ...progress.goal.supporters,\n                ...progress.goal.experts,\n                ...accountFriends,\n            ]\n\n            accountIds = [...new Set(accountIds)]\n\n            webSocket.send(\n                JSON.stringify({\n                    messageCode: 'getFriendsData',\n                    accountIds,\n                })\n            )\n        }\n    }\n}\n\nexport const editGoalInProgress = (data, value) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'editGoalInProgress',\n                progressId: data.progress._id,\n                accountId: data.account._id,\n                value,\n            })\n        )\n    }\n}\n\nexport const startProgress = (accountId, value, inGroup) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'startProgress',\n                accountId,\n                value,\n                inGroup,\n            })\n        )\n    }\n}\n\nexport const deleteReward = (accountId, progressId, rewardKey, rewardId) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'deleteReward',\n                accountId,\n                progressId,\n                rewardKey,\n                rewardId,\n            })\n        )\n    }\n}\n\nexport const saveReward = (accountId, progressId, rewardKey, reward) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'saveReward',\n                accountId,\n                progressId,\n                rewardKey,\n                reward,\n            })\n        )\n    }\n}\n","import React, { useState } from 'react'\nimport Modal from 'antd/es/modal'\n\nimport Button from 'antd/es/button'\nimport Input from 'antd/es/input'\nimport Form from 'antd/es/form'\nimport Collapse from 'antd/es/collapse'\nimport Divider from 'antd/es/divider'\nimport Upload from 'antd/es/upload'\nimport PlusOutlined from '@ant-design/icons/PlusOutlined'\n\nimport { uploadFile } from '../../utils/uploadFile'\nimport Rewards from '../Rewards/Rewards'\nimport { nameRules, descriptionRules } from '../../constants/fieldRules'\nimport connectionsSelect from './connectionsSelect'\nimport Dropdown from 'antd/es/dropdown/dropdown'\nimport { sisOutlined } from '@ant-design/icons'\nimport Menu from 'antd/es/menu'\nimport MoreIcon from '../UI/MoreIcon'\n\nconst EditGoalAndProgressForm = props => {\n    const { goal, account, friendData } = props\n\n    const [milestones, setMilestones] = useState(\n        (goal && goal.milestones) || [\n            { name: 'Start', key: 'start' },\n            { name: 'Finish', key: 'finish' },\n        ]\n    )\n\n    const [images, setImages] = useState(\n        (goal &&\n            goal.images.map((url, index) => ({\n                url,\n                uid: index,\n            }))) ||\n            []\n    )\n    const [withMilestones, setWithMilestones] = useState(\n        goal && goal.withMilestones\n    )\n    const [previewImage, setPreviewImage] = useState('')\n    const [newTabIndex, setNewTabIndex] = useState(\n        (goal && goal.newTabIndex) || 2\n    )\n\n    const [rewards, setRewards] = useState((goal && goal.rewardsGroups) || [])\n\n    const onFinish = value => {\n        const milestonesValues = []\n        for (let milestone of milestones) {\n            milestonesValues.push({\n                ...value[milestone.key],\n                key: milestone.key,\n                name: milestone.name,\n            })\n        }\n\n        props.onFinish({\n            ...value,\n            images: images.map(image => image.url),\n            milestones,\n            milestonesValues,\n            newTabIndex,\n            rewardsGroups: rewards,\n        })\n    }\n\n    const addMilestone = milestone => {\n        const newPanes = [...milestones]\n        const newKey = `mile${newTabIndex}`\n        if (typeof milestone !== 'undefined') {\n            const indexOfMile = milestones.findIndex(\n                mile => mile.key === milestone\n            )\n            if (indexOfMile < 0) return\n            newPanes.splice(indexOfMile + 1, 0, {\n                key: newKey,\n                name: 'New milestone',\n            })\n        } else {\n            if (newPanes.find(item => item.key === 'finish'))\n                newPanes.splice(newPanes.length - 1, 0, {\n                    key: newKey,\n                    name: 'New milestone',\n                })\n            else\n                newPanes.push({\n                    key: newKey,\n                    name: 'New milestone',\n                })\n        }\n        setMilestones(newPanes)\n        setNewTabIndex(newTabIndex + 1)\n        form.setFieldsValue({\n            [newKey]: { key: newKey, name: 'New milestone' },\n        })\n    }\n\n    const layout = {\n        labelCol: { span: 8 },\n        wrapperCol: { span: 16 },\n    }\n    const tailLayout = {\n        wrapperCol: { offset: 8, span: 16 },\n    }\n\n    const [form] = Form.useForm()\n\n    const normFile = e => {\n        if (Array.isArray(e)) {\n            return e\n        }\n        return e && e.fileList.map(image => image.url)\n    }\n\n    const connections = connectionsSelect(account, friendData)\n\n    const MilestoneControls = props => {\n        const moveMilestoneUp = () => {\n            const indexOfMile = milestones.findIndex(\n                mile => mile.key === props.milestone\n            )\n            if (indexOfMile <= 0) return\n            const newMilestones = [...milestones]\n            newMilestones.splice(\n                indexOfMile - 1,\n                0,\n                newMilestones.splice(indexOfMile, 1)[0]\n            )\n            setMilestones(newMilestones)\n        }\n\n        const moveMilestoneDown = () => {\n            const indexOfMile = milestones.findIndex(\n                mile => mile.key === props.milestone\n            )\n            if (indexOfMile < 0 || indexOfMile >= milestones.length - 1) return\n            const newMilestones = [...milestones]\n            newMilestones.splice(\n                indexOfMile + 1,\n                0,\n                newMilestones.splice(indexOfMile, 1)[0]\n            )\n            setMilestones(newMilestones)\n        }\n\n        const addMilestoneBelow = () => {\n            addMilestone(props.milestone)\n        }\n\n        const deleteMilestone = () => {\n            const newPanes = milestones.filter(\n                pane => pane.key !== props.milestone\n            )\n            setMilestones(newPanes)\n        }\n\n        return (\n            <Dropdown\n                overlay={\n                    <Menu\n                        onClick={({ domEvent }) => domEvent.stopPropagation()}\n                    >\n                        {!props.finish && (\n                            <Menu.Item key=\"0\" onClick={addMilestoneBelow}>\n                                Add a milestone below\n                            </Menu.Item>\n                        )}\n                        {!props.finish && !props.start && (\n                            <Menu.Item key=\"1\" onClick={moveMilestoneUp}>\n                                Move up\n                            </Menu.Item>\n                        )}\n                        {!props.finish && !props.start && (\n                            <Menu.Item key=\"2\" onClick={moveMilestoneDown}>\n                                Move down\n                            </Menu.Item>\n                        )}\n                        <Menu.Divider />\n                        <Menu.Item\n                            key=\"3\"\n                            danger={true}\n                            onClick={deleteMilestone}\n                        >\n                            Delete\n                        </Menu.Item>\n                    </Menu>\n                }\n                trigger={['click', 'hover']}\n            >\n                <a\n                    className=\"ant-dropdown-link\"\n                    onClick={e => {\n                        e.preventDefault()\n                        e.stopPropagation()\n                    }}\n                >\n                    <MoreIcon />\n                </a>\n            </Dropdown>\n        )\n    }\n    return !props.goalId || goal ? (\n        <>\n            <Form\n                form={form}\n                name=\"dynamic_form_nest_item\"\n                onFinish={onFinish}\n                autoComplete=\"off\"\n                initialValues={\n                    goal || {\n                        name: 'New achievement',\n                        start: {\n                            name: 'Start',\n                            key: 'start',\n                            description: 'This is the start of the progress.',\n                        },\n                        finish: {\n                            name: 'Finish',\n                            key: 'finish',\n                            description: 'This is the finish of the progress.',\n                        },\n                    }\n                }\n                {...layout}\n                onValuesChange={changedValues => {\n                    for (let attr in changedValues) {\n                        const index = milestones.findIndex(\n                            item => item.key === attr\n                        )\n\n                        if (index > -1) {\n                            if (changedValues[attr].name) {\n                                const newMilestones = [...milestones]\n                                newMilestones[index] = {\n                                    ...newMilestones[index],\n                                    name: changedValues[attr].name,\n                                }\n                                setMilestones(newMilestones)\n                            }\n                        }\n                        if (attr === 'withMilestones') {\n                            setWithMilestones(changedValues[attr])\n                        }\n                    }\n                }}\n            >\n                <Form.Item\n                    name=\"images\"\n                    label=\"Images\"\n                    valuePropName=\"images\"\n                    getValueFromEvent={normFile}\n                >\n                    <Upload\n                        listType=\"picture-card\"\n                        fileList={images.map((image, index) => ({\n                            ...image,\n                            uid: index,\n                        }))}\n                        onPreview={file => {\n                            setPreviewImage(file.url)\n                        }}\n                        onChange={({ fileList }) => setImages(fileList)}\n                        customRequest={({ file }) => {\n                            uploadFile(file, 800, undefined, url => {\n                                setImages(\n                                    [...images, { url }].map(\n                                        (image, index) => ({\n                                            ...image,\n                                            uid: index,\n                                        })\n                                    )\n                                )\n                            })\n                        }}\n                    >\n                        {images.length >= 8 ? null : (\n                            <div>\n                                <PlusOutlined />\n                                <div className=\"ant-upload-text\">Upload</div>\n                            </div>\n                        )}\n                    </Upload>\n                </Form.Item>\n                <Form.Item label=\"Name\" name=\"name\" rules={nameRules}>\n                    <Input />\n                </Form.Item>\n                <Form.Item\n                    label=\"Description\"\n                    name=\"description\"\n                    rules={descriptionRules}\n                >\n                    <Input.TextArea\n                        autoSize={{ minRows: 4, maxRows: 20 }}\n                        placeholder=\"Write a few words about why this goal is important and how to achieve it.\"\n                    />\n                </Form.Item>\n\n                <Form.Item label=\"Achievers\" name=\"users\">\n                    {connections}\n                </Form.Item>\n\n                <Form.Item label=\"Experts\" name=\"experts\">\n                    {connections}\n                </Form.Item>\n                <Form.Item label=\"Supporters\" name=\"supporters\">\n                    {connections}\n                </Form.Item>\n\n                <Divider>Milestones</Divider>\n                <Collapse expandIconPosition=\"right\" accordion>\n                    {[\n                        ...(milestones.find(item => item.key === 'start')\n                            ? [milestones.find(item => item.key === 'start')]\n                            : []),\n                        ...milestones.filter(\n                            item =>\n                                item.key !== 'start' && item.key !== 'finish'\n                        ),\n                        ...(milestones.find(item => item.key === 'finish')\n                            ? [milestones.find(item => item.key === 'finish')]\n                            : []),\n                    ].map(milestone => {\n                        return (\n                            <Collapse.Panel\n                                header={\n                                    form.getFieldValue([\n                                        milestone.key,\n                                        'name',\n                                    ]) || milestone.name\n                                }\n                                key={milestone.key}\n                                extra={\n                                    <MilestoneControls\n                                        milestone={milestone.key}\n                                        start={milestone.key === 'start'}\n                                        finish={milestone.key === 'finish'}\n                                    />\n                                }\n                            >\n                                <Form.Item\n                                    label=\"Name\"\n                                    name={[milestone.key, 'name']}\n                                    rules={nameRules}\n                                >\n                                    <Input />\n                                </Form.Item>\n                                <Form.Item\n                                    label=\"Description\"\n                                    name={[milestone.key, 'description']}\n                                    rules={descriptionRules}\n                                >\n                                    <Input.TextArea placeholder=\"Write a few words about why this milestone is important and how to achieve it.\" />\n                                </Form.Item>\n                                <Rewards\n                                    rewardKey={milestone.key}\n                                    label=\"Rewards\"\n                                    rewards={rewards}\n                                    setRewards={setRewards}\n                                />\n                            </Collapse.Panel>\n                        )\n                    })}\n                </Collapse>\n                <Button type=\"link\" onClick={() => addMilestone()}>\n                    <PlusOutlined /> Add a new milestone\n                </Button>\n\n                <Form.Item {...tailLayout}>\n                    <Button type=\"primary\" htmlType=\"submit\" size=\"large\">\n                        Save\n                    </Button>\n                </Form.Item>\n            </Form>\n            <Modal\n                visible={previewImage}\n                footer={null}\n                onCancel={() => setPreviewImage('')}\n            >\n                <img\n                    alt=\"example\"\n                    style={{ width: '100%' }}\n                    src={previewImage}\n                />\n            </Modal>\n        </>\n    ) : null\n}\n\nexport default EditGoalAndProgressForm\n","import React from 'react'\nimport * as wsActions from '../../websocketActions'\n\nimport EditGoalAndProgressForm from '../../components/EditGoalAndProgressForm/EditGoalAndProgressForm'\n\nconst AddProgress = props =>\n    props.account._id ? (\n        <EditGoalAndProgressForm\n            onFinish={value => {\n                props.setStartProgressVisible(false)\n                wsActions.startProgress(props.account._id, value, props.inGroup)\n            }}\n            account={props.account}\n            friendData={props.friendData}\n        />\n    ) : null\n\nexport default AddProgress\n","import React from 'react'\nimport { withRouter } from 'react-router-dom'\n\nimport Card from 'antd/es/card'\n\nconst { Meta } = Card\n\nconst GroupCard = props => {\n    const { group } = props\n\n    return (\n        <div\n            style={{\n                display: 'inline-block',\n                margin: '4px 8px',\n            }}\n            onClick={() => props.history.push('/groups/' + group._id)}\n        >\n            <Card\n                type=\"inner\"\n                style={{\n                    width: 200,\n                }}\n                hoverable\n                cover={\n                    <div\n                        onClick={() =>\n                            props.history.push('/groups/' + group._id)\n                        }\n                        style={{\n                            backgroundImage:\n                                'url(' +\n                                (group.images &&\n                                    group.images.length > 0 &&\n                                    group.images[0]) +\n                                ')',\n                            height: 200,\n                            width: 200,\n                            backgroundSize: 'cover',\n                        }}\n                    />\n                }\n            >\n                <Meta title={group.name} />\n            </Card>\n        </div>\n    )\n}\n\nexport default withRouter(GroupCard)\n","import React, { useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport Tabs from 'antd/es/tabs'\nimport Button from 'antd/es/button'\nimport Empty from 'antd/es/empty'\nimport ProgressCard from './ProgressCard'\nimport AddCard from '../../components/AddCard/AddCard'\nimport Modal from 'antd/es/modal/Modal'\nimport AddProgress from './AddProgress'\nimport GroupCard from './GroupCard'\nimport Masonry from 'react-masonry-css'\nimport { cardBreakPoints } from '../../utils/masonryBreakPoints'\nimport MasonryGrid from '../../components/MasonryGrid'\nimport MasonryCard from '../../components/MasonryCard'\nimport UserButton from '../../components/UserButton/UserButton'\n\nconst { TabPane } = Tabs\n\nconst Progresses = props => {\n    const { fromProfile, progressData, account, groupData, profile } = props\n\n    const { progresses, groups } = fromProfile ? profile : account\n    const [startProgressVisible, setStartProgressVisible] = useState(false)\n    if (!fromProfile) props.setPageTitle({ main: 'Progresses', sub: '' })\n    let loadedProgresses, loadedGroups\n    if (progresses) {\n        loadedProgresses = progresses\n            .filter(item => progressData[item])\n            .map(item => progressData[item])\n        loadedGroups = groups\n            .filter(item => groupData[item] && groupData[item].active)\n            .map(item => groupData[item])\n    }\n\n    const editGoal = fromProfile ? null : loadedProgresses && loadedGroups ? (\n        <Modal\n            title=\"Add progress\"\n            visible={startProgressVisible}\n            maskClosable\n            closable\n            onCancel={() => setStartProgressVisible(false)}\n            width=\"100%\"\n            style={{ maxWidth: '1000px' }}\n            footer={\n                <Button\n                    key=\"back\"\n                    onClick={() => setStartProgressVisible(false)}\n                >\n                    Close\n                </Button>\n            }\n            destroyOnClose={true}\n        >\n            <AddProgress\n                setStartProgressVisible={setStartProgressVisible}\n                account={account}\n                friendData={props.friendData}\n            />\n        </Modal>\n    ) : null\n\n    const innerTabs =\n        loadedProgresses && loadedGroups ? (\n            <>\n                <TabPane tab=\"Progresses\" key=\"progresses\">\n                    {!fromProfile && (\n                        <>\n                            <AddCard\n                                title=\"Start a new progress\"\n                                sub=\"Rich your goals or help others!\"\n                                action={() => {\n                                    setStartProgressVisible(true)\n                                }}\n                            />\n                            {editGoal}\n                        </>\n                    )}\n                    <MasonryGrid>\n                        {loadedProgresses.map((item, index) => (\n                            <MasonryCard\n                                key={index}\n                                onClickLink={'/progresses/' + item._id}\n                                images={item.goal.images}\n                                body={\n                                    <>\n                                        <UserButton\n                                            ids={item.goal.users}\n                                            group={true}\n                                        />\n                                        <span style={{ fontWeight: 'bold' }}>\n                                            {item.name}\n                                        </span>\n                                    </>\n                                }\n                            />\n                        ))}\n                    </MasonryGrid>\n                </TabPane>\n                <TabPane tab=\"Groups\" key=\"groups\">\n                    {loadedGroups.length > 0 ? (\n                        loadedGroups.map((group, index) => (\n                            <GroupCard key={index} group={group} />\n                        ))\n                    ) : (\n                        <Empty\n                            imageStyle={{\n                                height: 160,\n                            }}\n                            description={\n                                <span>\n                                    Here you will find your groups. Groups can\n                                    be created in existing progresses.\n                                </span>\n                            }\n                        />\n                    )}\n                </TabPane>\n            </>\n        ) : null\n\n    return loadedProgresses && loadedGroups ? (\n        // <Tabs\n        //     style={{\n        //         background: 'transparent',\n        //         boxShadow: 'none',\n        //         margin: '0',\n        //         marginTop: '-15px',\n        //     }}\n        // >\n        //     {innerTabs}\n        // </Tabs>\n        <div>\n            {!fromProfile && (\n                <>\n                    <AddCard\n                        title=\"Start a new progress\"\n                        sub=\"Rich your goals or help others!\"\n                        action={() => {\n                            setStartProgressVisible(true)\n                        }}\n                    />\n                    {editGoal}\n                </>\n            )}\n            <MasonryGrid style={{ marginTop: '40px' }}>\n                {loadedProgresses.map((item, index) => (\n                    <MasonryCard\n                        key={index}\n                        onClickLink={'/progresses/' + item._id}\n                        images={item.goal.images}\n                        body={\n                            <>\n                                <UserButton\n                                    ids={item.goal.users}\n                                    group={true}\n                                />\n                                <span style={{ fontWeight: 'bold' }}>\n                                    {item.name}\n                                </span>\n                            </>\n                        }\n                    />\n                ))}\n            </MasonryGrid>\n        </div>\n    ) : null\n\n    // ) : (\n    //     <Empty\n    //         imageStyle={{\n    //             height: 160,\n    //         }}\n    //         description={\n    //             <span>\n    //                 This user has no progresses. You can create a goal and\n    //                 invite this user.\n    //             </span>\n    //         }\n    //     />\n    // )\n}\n\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n        profile: state.profile,\n        isAuthed: state.isAuthed,\n        progressData: state.progressData,\n        groupData: state.groupData,\n        friendData: state.friendData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: (data, pulledFrom) =>\n            dispatch(actions.setData(data, pulledFrom)),\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n        tryAuth: (props, forceAuth) =>\n            dispatch(actions.tryAuth(props, forceAuth)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Progresses)\n)\n","import React from 'react'\nimport Checkbox from 'antd/es/checkbox'\nimport Descriptions from 'antd/es/descriptions'\n\nimport * as wsActions from '../../websocketActions'\nimport Rewards from '../../components/Rewards/Rewards'\nimport UserButton from '../../components/UserButton/UserButton'\nimport Collapse from 'antd/es/collapse'\nimport Badge from 'antd/es/badge'\nimport Typography from 'antd/es/typography'\nimport Divider from 'antd/es/divider'\n\nconst ActivityTable = props => {\n    const { progress, account } = props\n    const { goal } = progress\n    const { rewardsGroups } = goal\n\n    const renderCheckbox = ({ checked, milestoneId, disabled }) => (\n        <Checkbox\n            checked={checked}\n            onChange={e =>\n                wsActions.changeStage(props, e.target.checked, milestoneId)\n            }\n            disabled={disabled}\n        />\n    )\n\n    const getCheckboxStatus = (id, stage, milestone) => {\n        return {\n            checked: stage.approvedBy.find(item => item.accountId === id),\n            milestoneId: milestone.key,\n            disabled: id !== account._id,\n        }\n    }\n\n    return (\n        <Collapse\n            expandIconPosition=\"right\"\n            style={{ marginBottom: '50px' }}\n            destroyInactivePanel={true}\n            accordion\n        >\n            {goal.milestonesValues.map(milestone => {\n                const stage = progress.stages.find(\n                    stage => stage.milestoneId === milestone.key\n                ) || { approvedBy: [] }\n\n                const experts = goal.experts.map(expert => (\n                    <Descriptions.Item\n                        key={expert}\n                        label={\n                            <>\n                                <UserButton\n                                    id={expert}\n                                    noAva={true}\n                                    span={true}\n                                />{' '}\n                                {' (expert)'}\n                            </>\n                        }\n                    >\n                        {renderCheckbox(\n                            getCheckboxStatus(expert, stage, milestone)\n                        )}\n                    </Descriptions.Item>\n                ))\n\n                const users = goal.users.map(user => (\n                    <Descriptions.Item\n                        key={user}\n                        label={\n                            <>\n                                <UserButton\n                                    id={user}\n                                    noAva={true}\n                                    span={true}\n                                />{' '}\n                                {' (achiever)'}\n                            </>\n                        }\n                    >\n                        {renderCheckbox(\n                            getCheckboxStatus(user, stage, milestone)\n                        )}\n                    </Descriptions.Item>\n                ))\n\n                const owner = [\n                    <Descriptions.Item\n                        key={progress.owner}\n                        label={\n                            <>\n                                <UserButton\n                                    id={progress.owner}\n                                    noAva={true}\n                                    span={true}\n                                />{' '}\n                                {' (owner)'}\n                            </>\n                        }\n                    >\n                        {renderCheckbox(\n                            getCheckboxStatus(progress.owner, stage, milestone)\n                        )}\n                    </Descriptions.Item>,\n                ]\n                return (\n                    <Collapse.Panel\n                        header={\n                            <Badge\n                                color={stage.status ? 'green' : 'blue'}\n                                text={milestone.name}\n                            />\n                        }\n                        key={milestone.key}\n\n                        // extra={}\n                    >\n                        <Divider style={{ marginTop: '0px', fontSize: '15px' }}>\n                            Status\n                        </Divider>\n\n                        <Descriptions\n                            bordered\n                            column={{\n                                xxl: 4,\n                                xl: 3,\n                                lg: 3,\n                                md: 3,\n                                sm: 2,\n                                xs: 1,\n                            }}\n                        >\n                            <Descriptions.Item label=\"Current status\">\n                                {stage.status ? (\n                                    <Badge\n                                        status=\"success\"\n                                        text=\"Is complete\"\n                                    />\n                                ) : (\n                                    <Badge\n                                        status=\"processing\"\n                                        text=\"In process\"\n                                    />\n                                )}\n                            </Descriptions.Item>\n                            {users}\n                            {owner}\n                            {experts}\n                        </Descriptions>\n                        {milestone.description && (\n                            <>\n                                <Divider style={{ fontSize: '15px' }}>\n                                    Description\n                                </Divider>\n                                <Typography.Paragraph\n                                    ellipsis={{\n                                        rows: 3,\n                                        expandable: true,\n                                        symbol: 'more',\n                                    }}\n                                    style={{ whiteSpace: 'pre-wrap' }}\n                                >\n                                    {milestone.description}\n                                </Typography.Paragraph>\n                            </>\n                        )}\n\n                        {stage.status && (\n                            <>\n                                <Divider style={{ fontSize: '15px' }}>\n                                    Paid rewards\n                                </Divider>\n\n                                <Rewards\n                                    rewardKey={1}\n                                    rewards={[{ rewards: stage.paid, key: 1 }]}\n                                    readOnly={true}\n                                />\n                            </>\n                        )}\n                        <Divider style={{ fontSize: '15px' }}>Rewards</Divider>\n                        <Rewards\n                            rewardKey={milestone.key}\n                            rewards={rewardsGroups}\n                        />\n                    </Collapse.Panel>\n                )\n            })}\n        </Collapse>\n    )\n}\nexport default ActivityTable\n","import React from 'react'\n\nimport * as wsActions from '../../websocketActions'\nimport EditGoalAndProgressForm from '../../components/EditGoalAndProgressForm/EditGoalAndProgressForm'\n\nconst EditProgress = props => {\n    const { progress, account, state, setState, friendData } = props\n\n    const milestonesValues = {}\n    for (let milestone of progress.goal.milestonesValues) {\n        milestonesValues[milestone.key] = milestone\n    }\n    const goal = { ...progress.goal, ...milestonesValues }\n\n    const onFinish = value => {\n        wsActions.editGoalInProgress(props, value)\n        setState({ ...state, editProgressOpen: false })\n    }\n\n    return goal ? (\n        <EditGoalAndProgressForm\n            goal={goal}\n            onFinish={onFinish}\n            account={account}\n            friendData={friendData}\n        />\n    ) : null\n}\n\nexport default EditProgress\n","import React from 'react'\nimport { withRouter } from 'react-router-dom'\nimport Button from 'antd/es/button'\nimport Divider from 'antd/es/divider'\nimport Modal from 'antd/es/modal'\n\nimport Descriptions from 'antd/es/descriptions'\n\nconst { Item } = Descriptions\n\nimport * as wsActions from '../../websocketActions'\nimport ActivityTable from './ActivityTable'\nimport EditProgress from './EditProgress'\nimport Popconfirm from 'antd/es/popconfirm'\nimport Typography from 'antd/es/typography'\nimport UserButton from '../../components/UserButton/UserButton'\nimport ImageCarousel from '../../components/UI/ImageCarousel/ImageCarousel'\n\nconst Activity = props => {\n    const { account, progress, state, setState, friendData } = props\n    const { goal } = progress\n    return goal ? (\n        <>\n            {goal.images.length > 0 && <ImageCarousel images={goal.images} />}\n\n            <h1>{goal.name}</h1>\n            <Typography.Paragraph\n                ellipsis={{\n                    rows: 3,\n                    expandable: true,\n                    symbol: 'more',\n                }}\n                style={{ whiteSpace: 'pre-wrap' }}\n            >\n                {goal.description}\n            </Typography.Paragraph>\n\n            <Descriptions\n                bordered\n                column={{ xxl: 4, xl: 3, lg: 3, md: 3, sm: 2, xs: 1 }}\n            >\n                <Item label=\"Status\">{progress.status}</Item>\n                <Item label=\"Worker\">\n                    {goal.users && <UserButton ids={goal.users} group={true} />}\n                </Item>\n                <Item label=\"Owner\">\n                    <UserButton id={progress.owner} noName={true} />\n                </Item>\n                <Item label=\"Supporters\">\n                    {goal.supporters && (\n                        <UserButton ids={goal.supporters} group={true} />\n                    )}\n                </Item>\n                <Item label=\"Experts\">\n                    {goal.experts && (\n                        <UserButton ids={goal.experts} group={true} />\n                    )}\n                </Item>\n            </Descriptions>\n            <Divider orientation=\"center\" type=\"horizontal\">\n                Milestones\n            </Divider>\n            <ActivityTable\n                progress={progress}\n                account={account}\n                state={state}\n                setState={setState}\n            />\n            {account._id === progress.owner && (\n                <Button\n                    style={{ margin: '0px 20px 50px 0px' }}\n                    type=\"primary\"\n                    onClick={() => {\n                        setState({ ...state, editProgressOpen: true })\n                    }}\n                >\n                    Edit progress\n                </Button>\n            )}\n            {account._id === progress.owner && (\n                <Popconfirm\n                    title=\"Create a group if you want to have more similar prgresses with the same people.\"\n                    onConfirm={() =>\n                        wsActions.createGroup(account._id, progress._id)\n                    }\n                >\n                    <Button\n                        style={{ margin: '0px 20px 50px 0px' }}\n                        type=\"primary\"\n                    >\n                        Create a group\n                    </Button>\n                </Popconfirm>\n            )}\n            {account.progresses &&\n                account.progresses.includes(progress._id.toString()) && (\n                    <Button\n                        danger={true}\n                        onClick={() => {\n                            wsActions.leaveProgress(props)\n                        }}\n                    >\n                        Leave the progress\n                    </Button>\n                )}\n\n            <Modal\n                visible={state.editProgressOpen}\n                footer={null}\n                onCancel={() => setState({ ...state, editProgressOpen: false })}\n                closable={true}\n                destroyOnClose={true}\n                width=\"100%\"\n                style={{ maxWidth: '1000px' }}\n            >\n                <EditProgress\n                    progress={progress}\n                    account={account}\n                    state={state}\n                    setState={setState}\n                    friendData={friendData}\n                />\n            </Modal>\n        </>\n    ) : null\n}\n\nexport default withRouter(Activity)\n","import React, { useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport Button from 'antd/es/button'\nimport Comment from 'antd/es/comment'\nimport Avatar from 'antd/es/avatar'\nimport Input from 'antd/es/input'\nimport Form from 'antd/es/form'\nimport Upload from 'antd/es/upload'\nimport PictureOutlined from '@ant-design/icons/PictureOutlined'\nimport LoadingOutlined from '@ant-design/icons/LoadingOutlined'\nimport SendOutlined from '@ant-design/icons/SendOutlined'\nimport { uploadFile } from '../../utils/uploadFile'\nimport * as wsActions from '../../websocketActions'\nimport getAvatar from '../../utils/getAvatar'\nimport { messageRules } from '../../constants/fieldRules'\nimport {\n    PlusOutlined,\n    CloseCircleFilled,\n    PictureFilled,\n} from '@ant-design/icons'\nimport Modal from 'antd/es/modal/Modal'\n\nconst AddPost = props => {\n    const [previewImage, setPreviewImage] = useState('')\n    const [imageLoading, setImageLoading] = useState(false)\n    const [images, setImages] = useState([])\n\n    const { parent, account, parentType } = props\n\n    const [messageText, setMessageText] = useState(\n        props.content ||\n            (props.replyToUser ? '@' + props.replyToUser + ' ' : '')\n    )\n\n    const uploadImage = file => {\n        uploadFile(file, 800, undefined, url => {\n            setImages([...images, url])\n        })\n    }\n    return account._id ? (\n        <div\n            style={{\n                background: '#fff',\n                padding: '0px 10px',\n                bottom: '0px',\n                left: '0px',\n                zIndex: 1000,\n            }}\n        >\n            <h2>Post something new</h2>\n            <Comment\n                avatar={<Avatar src={getAvatar(account._id, account.image)} />}\n                content={\n                    <>\n                        <Form.Item rules={messageRules}>\n                            <Input.TextArea\n                                autoSize={{\n                                    minRows: 1,\n                                    maxRows: 3,\n                                }}\n                                rows={1}\n                                onChange={e => setMessageText(e.target.value)}\n                                value={messageText}\n                            />\n                        </Form.Item>\n                        {images.length > 0 && (\n                            <Form.Item style={{ margin: 0 }}>\n                                <Upload\n                                    listType=\"picture-card\"\n                                    fileList={images.map((image, index) => ({\n                                        url: image,\n                                        uid: index,\n                                    }))}\n                                    onPreview={file => {\n                                        setPreviewImage(file.url)\n                                    }}\n                                    onChange={({ fileList }) =>\n                                        setImages(\n                                            fileList.map(image => image.url)\n                                        )\n                                    }\n                                    customRequest={({ file }) => {\n                                        uploadImage(file)\n                                    }}\n                                >\n                                    {images.length >= 8 ? null : (\n                                        <div>\n                                            <PlusOutlined />\n                                            <div className=\"ant-upload-text\">\n                                                Upload\n                                            </div>\n                                        </div>\n                                    )}\n                                </Upload>\n                            </Form.Item>\n                        )}\n                        <Form.Item>\n                            <Button\n                                htmlType=\"submit\"\n                                onClick={() => {\n                                    wsActions.addPost(\n                                        account._id,\n                                        parent,\n                                        parentType,\n                                        messageText,\n                                        images\n                                    )\n                                    setMessageText('')\n                                    setImages([])\n                                    if (props.onSend) props.onSend()\n                                }}\n                                icon={<SendOutlined />}\n                                type=\"text\"\n                            >\n                                Send\n                            </Button>\n                            <Upload\n                                showUploadList={false}\n                                customRequest={({ file }) => {\n                                    if (images.length > 8) {\n                                        message.warning(\n                                            'You can not attach more than 8 images.'\n                                        )\n                                        return\n                                    }\n                                    setImageLoading(true)\n                                    uploadFile(file, 800, undefined, url => {\n                                        setImageLoading(false)\n                                        setImages([...images, url])\n                                    })\n                                }}\n                            >\n                                <Button\n                                    type=\"text\"\n                                    icon={\n                                        imageLoading ? (\n                                            <LoadingOutlined />\n                                        ) : (\n                                            <PictureFilled />\n                                        )\n                                    }\n                                >\n                                    Image\n                                </Button>\n                            </Upload>\n                            {messageText || images.length ? (\n                                <Button\n                                    onClick={() => {\n                                        setMessageText('')\n                                        setImages([])\n                                    }}\n                                    icon={<CloseCircleFilled />}\n                                    type=\"text\"\n                                >\n                                    Cancel\n                                </Button>\n                            ) : null}\n                        </Form.Item>\n                    </>\n                }\n            />\n            <Modal\n                visible={previewImage}\n                footer={null}\n                onCancel={() => setPreviewImage('')}\n            >\n                <img\n                    alt=\"example\"\n                    style={{ width: '100%' }}\n                    src={previewImage}\n                />\n            </Modal>\n        </div>\n    ) : null\n}\n\nexport default withRouter(AddPost)\n","import React, { useEffect, useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\n\nimport Modal from 'antd/es/modal'\nimport Activity from './Activity'\nimport Card from 'antd/es/card'\nimport Post from '../../components/Post/Post'\nimport AddPost from '../../components/Post/AddPost'\nimport Tabs from 'antd/es/tabs'\nimport pullData from '../../utils/pullData'\n\nconst Progress = props => {\n    const [state, setState] = useState({})\n\n    const [data, setData] = useState({})\n    const pathParts = props.history.location.pathname.split('/')\n    const progressId = pathParts.length > 2 ? pathParts[2] : ''\n    if (!progressId) return null\n    useEffect(() => {\n        if (props.isAuthed) {\n            props.setData({ currentProgress: progressId })\n        } else {\n            pullData(props, data, setData, { forceAuth: false }, data => {\n                const friendData = {}\n                for (let friend of data.friendData)\n                    friendData[friend._id] = friend\n                const post = {}\n                for (let item of data.post) post[item._id] = item\n\n                props.setData({\n                    friendData,\n                    posts: post,\n                    account: {},\n                    progress: data.progress,\n                })\n            })\n        }\n    }, [props.isAuthed, props.history.location.pathname])\n\n    const { progress, account, friendData, posts } = props.isAuthed\n        ? props\n        : { ...data, account: {} }\n\n    if (!progress || !progress._id) return null\n    props.setData({ currentPosts: progress.posts })\n\n    const { goal } = progress\n    if (goal) props.setPageTitle({ main: goal.name, sub: progress.worker })\n    return goal && friendData ? (\n        <div className=\"contentDiv\">\n            <Tabs>\n                <Tabs.TabPane tab=\"Details\" key=\"details\">\n                    <Activity\n                        state={state}\n                        setState={setState}\n                        progress={progress}\n                        account={account}\n                        friendData={friendData}\n                    />\n                </Tabs.TabPane>\n                <Tabs.TabPane tab=\"Posts\" key=\"posts\">\n                    {account._id && (\n                        <AddPost\n                            parent={progressId}\n                            account={account}\n                            parentType=\"progress\"\n                            // onSend={() => setEditingMessage('')}\n                        />\n                    )}\n                    {progress.posts.map(postId => {\n                        if (posts[postId]) {\n                            const post = posts[postId]\n                            return (\n                                <div key={postId}>\n                                    <div\n                                        style={{\n                                            height: '5px',\n                                            background: '#ddd',\n                                            width: 'calc(100% + 8px)',\n                                            position: 'absolute',\n                                            left: '-8px',\n                                        }}\n                                    />\n                                    <div style={{ paddingTop: '10px' }}>\n                                        <Post\n                                            friendData={friendData}\n                                            account={account}\n                                            post={post}\n                                        />\n                                    </div>\n                                </div>\n                            )\n                        } else return null\n                    })}\n                </Tabs.TabPane>\n            </Tabs>\n            <Modal\n                visible={state.previewImage}\n                footer={null}\n                onCancel={() => setState({ ...state, previewImage: '' })}\n            >\n                <img\n                    alt=\"example\"\n                    style={{ width: '100%' }}\n                    src={state.previewImage}\n                />\n            </Modal>\n        </div>\n    ) : null\n}\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        account: state.account,\n        posts: state.post,\n        progress: state.progress,\n        friendData: state.friendData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: data => {\n            dispatch(actions.setData(data))\n        },\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Progress)\n)\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { withRouter } from 'react-router-dom'\nimport Card from 'antd/es/card'\nimport Button from 'antd/es/button'\nimport UserButton from '../../components/UserButton/UserButton'\nimport MasonryGrid from '../../components/MasonryGrid'\n\nconst Wallet = props => {\n    const account = props.pulledProfile || props.account\n    return account.wallet ? (\n        <div>\n            <MasonryGrid>\n                {account.wallet.map((money, index) => (\n                    <div\n                        onClick={() =>\n                            props.history.push('/profile/' + money.user)\n                        }\n                        key={index}\n                    >\n                        <Card\n                            type=\"inner\"\n                            style={{ width: '100%' }}\n                            bordered={false}\n                            extra={<Button type=\"primary\">Visit shop</Button>}\n                            title={''}\n                        >\n                            <div>\n                                <span style={{ fontWeight: 'bold' }}>\n                                    ${money.amount}\n                                </span>\n                                <UserButton id={money.user} />\n                            </div>\n                        </Card>\n                    </div>\n                ))}\n            </MasonryGrid>\n        </div>\n    ) : null\n}\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n        isAuthed: state.isAuthed,\n    }\n}\n\nexport default withRouter(connect(mapStateToProps)(Wallet))\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { withRouter } from 'react-router-dom'\nimport * as actions from '../../store/actions'\nimport Button from 'antd/es/button'\nimport Tag from 'antd/es/tag'\nimport TimeAgo from 'timeago-react'\nimport Avatar from 'antd/es/avatar'\nimport getAvatar from '../../utils/getAvatar'\nimport Rewards from '../../components/Rewards/Rewards'\nimport Collapse from 'antd/es/collapse'\nimport Badge from 'antd/es/badge'\nimport UserButton from '../../components/UserButton/UserButton'\nimport Descriptions from 'antd/es/descriptions'\nimport date from 'date-and-time'\nimport Typography from 'antd/es/typography'\n\nconst Transactions = props => {\n    props.setPageTitle({ main: 'Shop', sub: 'Transactions' })\n\n    const { account, transactionData, friendData } = props\n    if (!account || !account._id) return null\n\n    const transactions = account.transactions\n        .filter(item => transactionData[item])\n        .map(item => transactionData[item])\n\n    const columns = [\n        {\n            title: 'Type',\n            dataIndex: 'types',\n            key: 'types',\n            render: types => (\n                <>\n                    {types.map(tag => {\n                        let color = tag.length > 5 ? 'geekblue' : 'green'\n                        if (tag === 'loser') {\n                            color = 'volcano'\n                        }\n                        return (\n                            <Tag color={color} key={tag}>\n                                {tag.toUpperCase()}\n                            </Tag>\n                        )\n                    })}\n                </>\n            ),\n        },\n        {\n            title: 'With',\n            dataIndex: 'user',\n            key: 'user',\n            render: user => {\n                const friend = friendData[user]\n                return friend ? (\n                    <Button\n                        type=\"link\"\n                        style={{ padding: 0 }}\n                        onClick={() => props.history.push('/profile/' + user)}\n                    >\n                        <Avatar\n                            src={getAvatar(user, friend.image)}\n                            style={{ marginRight: '5px' }}\n                        />\n                        {friend.name + ' (' + friend._id + ')'}\n                    </Button>\n                ) : (\n                    user\n                )\n            },\n        },\n        {\n            title: 'Item',\n            dataIndex: 'perk',\n            key: 'perk',\n            render: perk =>\n                perk.simple || (\n                    <Rewards\n                        rewardKey={1}\n                        label=\"Rewards\"\n                        rewards={[{ rewards: [perk], key: 1 }]}\n                        readOnly={true}\n                    />\n                ),\n        },\n        {\n            title: 'Amount',\n            dataIndex: 'amount',\n            key: 'amount',\n            render: amount => (amount > 0 ? amount : ''),\n        },\n        {\n            title: 'Date',\n            dataIndex: 'date',\n            key: 'date',\n            render: date => <TimeAgo datetime={date} live />,\n        },\n        {\n            title: 'Progress',\n            dataIndex: 'progress',\n            key: 'progress',\n            render: progress => (\n                <Button\n                    type=\"link\"\n                    onClick={() =>\n                        props.history.push('/progresses/' + progress)\n                    }\n                >\n                    {progress}\n                </Button>\n            ),\n        },\n        {\n            title: 'Status',\n            key: 'status',\n            dataIndex: 'status',\n            render: (status, record) => {\n                if (status === 'Not confirmed') {\n                    return (\n                        <>\n                            <Button\n                                danger={true}\n                                type=\"link\"\n                                onClick={() =>\n                                    wsActions.cancelTransaction(\n                                        account._id,\n                                        record.transaction._id\n                                    )\n                                }\n                            >\n                                Cancel\n                            </Button>\n                            {record.transaction.from === account._id && (\n                                <Button\n                                    type=\"link\"\n                                    onClick={() =>\n                                        wsActions.confirmTransaction(\n                                            account._id,\n                                            record.transaction._id\n                                        )\n                                    }\n                                >\n                                    Confirm\n                                </Button>\n                            )}\n                        </>\n                    )\n                }\n                return status\n            },\n        },\n    ]\n\n    const tableData = []\n    let sorted = [...transactions]\n    sorted = sorted.sort((a, b) =>\n        new Date(a.date).getTime() < new Date(b.date).getTime() ? 1 : -1\n    )\n    for (let transaction of sorted) {\n        const types = []\n        if (transaction.from === account._id && transaction.to === account.id) {\n            types.push('internal')\n        }\n        if (transaction.to === account._id) {\n            if (transaction.progress) {\n                types.push('earn')\n                if (!transaction.amount) types.push('item')\n                else types.push('money')\n            } else {\n                if (transaction.item && transaction.amount) {\n                    types.push('buy')\n                    types.push('item')\n                } else {\n                    types.push('recieve gift')\n                    if (!transaction.amount) types.push('item')\n                    else types.push('money')\n                }\n            }\n        } else if (transaction.from === account._id) {\n            if (transaction.progress) {\n                types.push('pay')\n                if (!transaction.amount) types.push('item')\n                else types.push('money')\n            } else {\n                if (transaction.item && transaction.amount) {\n                    types.push('sell')\n                    types.push('item')\n                } else {\n                    types.push('send gift')\n                    if (!transaction.amount) types.push('item')\n                    else types.push('money')\n                }\n            }\n        }\n\n        const user =\n            transaction.to !== account._id ? transaction.to : transaction.from\n\n        tableData.push({\n            key: tableData.length,\n            types,\n            user,\n            perk: transaction.item,\n            amount: transaction.amount,\n            date: transaction.date,\n            progress: transaction.progress,\n            status: transaction.status,\n            transaction,\n        })\n    }\n    return (\n        <Collapse\n            expandIconPosition=\"right\"\n            style={{ marginBottom: '50px' }}\n            destroyInactivePanel={true}\n            accordion\n        >\n            {sorted.map((transaction, index) => {\n                const types = []\n                if (\n                    transaction.from === account._id &&\n                    transaction.to === account.id\n                ) {\n                    types.push('internal')\n                }\n                if (transaction.to === account._id) {\n                    if (transaction.progress) {\n                        types.push('earn')\n                        if (!transaction.amount) types.push('item')\n                        else types.push('money')\n                    } else {\n                        if (transaction.item && transaction.amount) {\n                            types.push('buy')\n                            types.push('item')\n                        } else {\n                            types.push('recieve gift')\n                            if (!transaction.amount) types.push('item')\n                            else types.push('money')\n                        }\n                    }\n                } else if (transaction.from === account._id) {\n                    if (transaction.progress) {\n                        types.push('pay')\n                        if (!transaction.amount) types.push('item')\n                        else types.push('money')\n                    } else {\n                        if (transaction.item && transaction.amount) {\n                            types.push('sell')\n                            types.push('item')\n                        } else {\n                            types.push('send gift')\n                            if (!transaction.amount) types.push('item')\n                            else types.push('money')\n                        }\n                    }\n                }\n\n                const user =\n                    transaction.to !== account._id\n                        ? transaction.to\n                        : transaction.from\n\n                tableData.push({\n                    key: tableData.length,\n                    types,\n                    user,\n                    perk: transaction.item,\n                    amount: transaction.amount,\n                    date: transaction.date,\n                    progress: transaction.progress,\n                    status: transaction.status,\n                    transaction,\n                })\n                const { item: reward } = transaction\n                return (\n                    <Collapse.Panel\n                        style={{ padding: 0 }}\n                        header={\n                            <>\n                                <div\n                                    style={{\n                                        display: 'flex',\n                                        alignItems: 'center',\n                                    }}\n                                >\n                                    <Badge\n                                        color={\n                                            transaction.status ===\n                                            'Not confirmed'\n                                                ? 'blue'\n                                                : transaction.status ===\n                                                  'Cancelled'\n                                                ? 'red'\n                                                : 'green'\n                                        }\n                                    />\n                                    <Typography.Paragraph\n                                        ellipsis={{ rows: 1 }}\n                                        style={{ display: 'inline', margin: 0 }}\n                                    >\n                                        {reward.mode === 'simple'\n                                            ? reward.simple\n                                            : reward.mode === 'money'\n                                            ? reward.money + ' (money)'\n                                            : reward.mode === 'item'\n                                            ? reward.itemName\n                                            : ''}\n                                    </Typography.Paragraph>\n                                    <UserButton\n                                        noName={true}\n                                        id={\n                                            transaction.to !== account._id\n                                                ? transaction.to\n                                                : transaction.from\n                                        }\n                                    />\n                                </div>\n                                <div>\n                                    <TimeAgo datetime={transaction.date} live />\n                                </div>\n                            </>\n                        }\n                        key={index}\n\n                        // extra={}\n                    >\n                        <Descriptions\n                            layout=\"vertical\"\n                            size=\"small\"\n                            bordered\n                            column={{\n                                xxl: 4,\n                                xl: 3,\n                                lg: 3,\n                                md: 3,\n                                sm: 2,\n                                xs: 1,\n                            }}\n                        >\n                            <Descriptions.Item label=\"Type\">\n                                {types.map(tag => {\n                                    let color =\n                                        tag.length > 5 ? 'geekblue' : 'green'\n                                    if (tag === 'loser') {\n                                        color = 'volcano'\n                                    }\n                                    return (\n                                        <Tag color={color} key={tag}>\n                                            {tag.toUpperCase()}\n                                        </Tag>\n                                    )\n                                })}\n                            </Descriptions.Item>\n                            <Descriptions.Item label=\"Transaction with\">\n                                <UserButton\n                                    id={\n                                        transaction.to !== account._id\n                                            ? transaction.to\n                                            : transaction.from\n                                    }\n                                />\n                            </Descriptions.Item>\n\n                            <Descriptions.Item label=\"Item\">\n                                {\n                                    <Rewards\n                                        onlyButton={true}\n                                        rewardKey={1}\n                                        label=\"Rewards\"\n                                        rewards={[\n                                            {\n                                                rewards: [transaction.item],\n                                                key: 1,\n                                            },\n                                        ]}\n                                        readOnly={true}\n                                    />\n                                }\n                            </Descriptions.Item>\n\n                            {transaction.amount && (\n                                <Descriptions.Item label=\"Amount\">\n                                    {transaction.amount}\n                                </Descriptions.Item>\n                            )}\n                            <Descriptions.Item label=\"Date\">\n                                {date.format(\n                                    new Date(transaction.date),\n                                    'YYYY/MM/DD HH:mm:ss'\n                                )}\n                            </Descriptions.Item>\n\n                            {transaction.progress && transaction.progressId && (\n                                <Descriptions.Item label=\"Progress\">\n                                    <Button\n                                        type=\"text\"\n                                        onClick={() =>\n                                            props.history.push(\n                                                '/progresses/' +\n                                                    transaction.progressId\n                                            )\n                                        }\n                                    >\n                                        {transaction.progress}\n                                    </Button>\n                                </Descriptions.Item>\n                            )}\n                            <Descriptions.Item label=\"Status\">\n                                {status === 'Not confirmed' ? (\n                                    <>\n                                        <Button\n                                            danger={true}\n                                            type=\"link\"\n                                            onClick={() =>\n                                                wsActions.cancelTransaction(\n                                                    account._id,\n                                                    record.transaction._id\n                                                )\n                                            }\n                                        >\n                                            Cancel\n                                        </Button>\n                                        {record.transaction.from ===\n                                            account._id && (\n                                            <Button\n                                                type=\"link\"\n                                                onClick={() =>\n                                                    wsActions.confirmTransaction(\n                                                        account._id,\n                                                        record.transaction._id\n                                                    )\n                                                }\n                                            >\n                                                Confirm\n                                            </Button>\n                                        )}\n                                    </>\n                                ) : (\n                                    status || 'Confirmed'\n                                )}\n                            </Descriptions.Item>\n                        </Descriptions>\n                    </Collapse.Panel>\n                )\n            })}\n        </Collapse>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n        transactionData: state.transactionData,\n        friendData: state.friendData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Transactions)\n)\n","import React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport Tabs from 'antd/es/tabs'\nimport Wallet from './Wallet'\nimport Transactions from './Transactions'\nimport WishlistAndPerks from './WishlistAndPerks'\n\nconst Shop = props => {\n    useEffect(() => {\n        props.setPageTitle({ main: 'Shop', sub: 'My items' })\n    }, [])\n\n    return props.account._id ? (\n        <div>\n            <Tabs\n                style={{\n                    background: 'transparent',\n                    boxShadow: 'none',\n                    margin: '0',\n                    marginTop: '-15px',\n                }}\n            >\n                <Tabs.TabPane tab=\"My shop\" key={1}>\n                    <WishlistAndPerks\n                        mode=\"shop\"\n                        listKey=\"perks\"\n                        account={props.account}\n                    />\n                </Tabs.TabPane>\n                <Tabs.TabPane tab=\"Wallet\" key={3}>\n                    <Wallet />\n                </Tabs.TabPane>\n                <Tabs.TabPane tab=\"Transactions\" key={4}>\n                    <Transactions />\n                </Tabs.TabPane>\n            </Tabs>\n        </div>\n    ) : (\n        <span />\n    )\n}\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Shop)\n","import React, { useEffect, useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport isEqual from 'lodash.isequal'\n\nimport Post from '../../components/Post/Post'\n\nimport UserButton from '../../components/UserButton/UserButton'\nimport Divider from 'antd/es/divider'\n\nconst DashboardPosts = props => {\n    const {\n        account,\n        friendData,\n        statePosts,\n        progressData,\n        groupData,\n        currentPosts,\n    } = props\n\n    const [posts, setPosts] = useState([])\n    const [startTime] = useState(new Date().getTime())\n\n    const sortPosts = (a, b) => {\n        const aN = a.notifications.filter(item => item.user !== account._id)\n        const bN = b.notifications.filter(item => item.user !== account._id)\n        if (aN.length === 0 && bN.length > 0) return 1\n        else if (aN.length > 0 && bN.length === 0) return -1\n        else if (aN.length === 0 && bN.length === 0) return 0\n        else\n            return new Date(aN[0].date).getTime() <\n                new Date(bN[0].date).getTime()\n                ? 1\n                : -1\n    }\n\n    const sortNotifications = (a, b) =>\n        new Date(a.date).getTime() < new Date(b.date).getTime() ? 1 : -1\n\n    useEffect(() => {\n        if (currentPosts) {\n            const newPosts = currentPosts\n                .filter(item => statePosts[item])\n                .map(item => statePosts[item])\n\n            const newUnseenPosts = []\n            const newOldPosts = []\n            let oldPosts = [...posts]\n            for (let post of newPosts) {\n                let oldPostIndex = oldPosts.findIndex(item => {\n                    return item._id.toString() === post._id.toString()\n                })\n                if (oldPostIndex === -1) {\n                    if (\n                        post.notifications &&\n                        post.notifications.length > 0 &&\n                        new Date(post.notifications[0].date).getTime() >\n                            startTime\n                    ) {\n                        newUnseenPosts.push(post)\n                    } else {\n                        newOldPosts.push(post)\n                    }\n                } else {\n                    oldPosts[oldPostIndex] = post\n                }\n            }\n\n            for (let post of newOldPosts) {\n                const index = oldPosts.findIndex(item => {\n                    if (\n                        item &&\n                        item.notifications &&\n                        item.notifications.length > 0\n                    ) {\n                        return (\n                            new Date(item.notifications[0]).getTime() >\n                            new Date(post.notifications[0]).getTime()\n                        )\n                    } else return false\n                })\n                if (index === -1) {\n                    oldPosts.push(post)\n                } else {\n                    oldPosts.splice(index, 0, post)\n                }\n            }\n\n            let resultPosts = [...newUnseenPosts, ...oldPosts]\n            if (posts.length === 0) {\n                resultPosts = resultPosts.sort(sortPosts)\n            }\n            setPosts(resultPosts)\n        }\n    }, [currentPosts, statePosts])\n    if (!account._id) return null\n\n    let lastNotifications = []\n    for (let progress of account.progresses) {\n        if (progressData[progress])\n            lastNotifications = [\n                ...lastNotifications,\n                ...progressData[progress].notifications.filter(\n                    item =>\n                        item.code === 'add post' && item.user !== account._id\n                ),\n            ]\n    }\n\n    for (let group of account.groups) {\n        if (groupData[group])\n            lastNotifications = [\n                ...lastNotifications,\n                ...groupData[group].notifications.filter(\n                    item =>\n                        item.code === 'add post' && item.user !== account._id\n                ),\n            ]\n    }\n\n    lastNotifications = lastNotifications\n        .sort(sortNotifications)\n        .map(item => item.details.postId)\n        .slice(0, 10)\n\n    const neededPosts = [\n        ...new Set([\n            ...account.followPosts,\n            ...account.myPosts,\n            ...posts.map(post => post._id),\n            ...lastNotifications,\n        ]),\n    ]\n    if (!isEqual(currentPosts, neededPosts))\n        props.setData({ currentPosts: neededPosts })\n\n    props.setPageTitle({ main: 'Dashboard', sub: '' })\n\n    return posts.map(item => {\n        let text = null\n        const nots = item.notifications.filter(not => not.user !== account._id)\n        const not = nots.length > 0 ? nots[0] : null\n        if (not) {\n            switch (not.code) {\n                case 'edit wishlist item':\n                    text = 'edited item in wishlist.'\n\n                    break\n                case 'edit goal':\n                    text = 'edited goal.'\n\n                    break\n                case 'edit perk':\n                    text = 'edited item in shop.'\n\n                    break\n\n                case 'comment':\n                    text = 'added a comment.'\n\n                    break\n                case 'edit comment':\n                    text = 'edited a comment.'\n\n                    break\n                case 'like':\n                    text = 'added a like.'\n\n                    break\n                case 'dislike':\n                    text = 'removed a like.'\n\n                    break\n                default:\n                    text = null\n                    break\n            }\n        }\n        return (\n            <>\n                <div\n                    style={{\n                        height: '5px',\n                        background: '#ddd',\n                        width: 'calc(100% + 8px)',\n                        position: 'absolute',\n                        left: '-8px',\n                    }}\n                />\n                <div style={{ paddingTop: '10px' }}>\n                    {text && (\n                        <>\n                            <span>\n                                <UserButton\n                                    id={not.user}\n                                    noAva={true}\n                                    span={true}\n                                    style={{ fontWeight: 'bold' }}\n                                />{' '}\n                                {text}\n                            </span>\n                            <Divider\n                                type=\"horizontal\"\n                                style={{ margin: '5px 0' }}\n                            />\n                        </>\n                    )}\n                    <Post\n                        friendData={friendData}\n                        account={account}\n                        post={item}\n                        progressData={progressData}\n                        groupData={groupData}\n                    />\n                </div>\n            </>\n        )\n    })\n}\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        account: state.account,\n        statePosts: state.post,\n        progress: state.progress,\n        friendData: state.friendData,\n        progressData: state.progressData,\n        groupData: state.groupData,\n        currentPosts: state.currentPosts,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: data => {\n            dispatch(actions.setData(data))\n        },\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(DashboardPosts)\n)\n","import React from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\n\nimport Card from 'antd/es/card'\nimport UserButton from '../../components/UserButton/UserButton'\nimport Comment from 'antd/es/comment'\nimport Divider from 'antd/es/divider'\n\nconst DashboardEvents = props => {\n    const { lastNotifications } = props\n    const getRewardText = item => (\n        <span style={{ fontWeight: 'bold' }}>\n            {item.details.reward.money\n                ? '$' + item.details.reward.money\n                : item.details.reward.simple || item.details.reward.itemName}\n        </span>\n    )\n    return lastNotifications.map(item => {\n        let text = null\n\n        switch (item.code) {\n            case 'change name':\n                text = (\n                    <span>\n                        {' '}\n                        <UserButton span={true} noAva={true} id={item.user} />\n                        {' changed name.'}\n                    </span>\n                )\n                break\n            case 'delete account':\n                text = (\n                    <span>\n                        {item.user}\n                        deleted account.\n                    </span>\n                )\n                break\n            case 'friend request':\n                text = (\n                    <span>\n                        <UserButton span={true} noAva={true} id={item.user} />\n                        {' wants to become friends with you.'}\n                    </span>\n                )\n                break\n            case 'friend add':\n                text = (\n                    <span>\n                        <UserButton span={true} noAva={true} id={item.user} />\n                        {' and '}\n                        <UserButton\n                            span={true}\n                            noAva={true}\n                            id={item.details.friend}\n                        />\n                        {' became friends.'}\n                    </span>\n                )\n                break\n            case 'unfriend':\n                text = (\n                    <span>\n                        <UserButton span={true} noAva={true} id={item.user} />\n                        {' and '}\n                        <UserButton\n                            span={true}\n                            noAva={true}\n                            id={item.details.friend}\n                        />\n                        {' stopped being friends.'}\n                    </span>\n                )\n                break\n            case 'add wishlist item':\n            case 'edit wishlist item':\n                text = (\n                    <span>\n                        <UserButton span={true} noAva={true} id={item.user} />{' '}\n                        {item.code === 'add wishlist item'\n                            ? 'added to wishlist a new item'\n                            : 'edited in wishlist'}{' '}\n                        <span\n                            style={{ fontWeight: 'bold' }}\n                            onClick={() =>\n                                props.history.push(\n                                    `/wishlist/${item.user}/${\n                                        item.details.itemId\n                                    }`\n                                )\n                            }\n                        >\n                            {item.details.itemName}\n                        </span>{' '}\n                        .\n                    </span>\n                )\n                break\n            case 'delete wishlist item':\n                text = (\n                    <span>\n                        <UserButton span={true} noAva={true} id={item.user} />\n                        {' deleted '}\n                        {item.details.itemName} from wishlist.\n                    </span>\n                )\n                break\n            case 'add goal':\n            case 'edit goal':\n                text = (\n                    <span>\n                        <UserButton span={true} noAva={true} id={item.user} />{' '}\n                        {item.code === 'add goal'\n                            ? 'added a new goal'\n                            : 'edited goal'}{' '}\n                        <span\n                            style={{ fontWeight: 'bold' }}\n                            onClick={() =>\n                                props.history.push(\n                                    `/goals/${item.user}/${item.details.itemId}`\n                                )\n                            }\n                        >\n                            {item.details.itemName}\n                        </span>\n                        {' .'}\n                    </span>\n                )\n                break\n            case 'delete goal':\n                text = (\n                    <span>\n                        <UserButton span={true} noAva={true} id={item.user} />\n                        {' deleted '}\n                        {item.details.itemName} from goals.\n                    </span>\n                )\n                break\n            case 'add perk':\n            case 'edit perk':\n                text = (\n                    <span>\n                        <UserButton span={true} noAva={true} id={item.user} />{' '}\n                        {item.code === 'add perk'\n                            ? 'added to shop a new item'\n                            : 'edited in shop'}{' '}\n                        <span\n                            style={{ fontWeight: 'bold' }}\n                            onClick={() =>\n                                props.history.push(\n                                    `/shop/${item.user}/${item.details.itemId}`\n                                )\n                            }\n                        >\n                            {item.details.itemName}\n                        </span>\n                        {' .'}\n                    </span>\n                )\n                break\n            case 'delete perk':\n                text = (\n                    <span>\n                        <UserButton span={true} noAva={true} id={item.user} />\n                        {' deleted '}\n                        {item.details.itemName} from shop.\n                    </span>\n                )\n                break\n            case 'buy perk':\n                text = (\n                    <span>\n                        <UserButton span={true} noAva={true} id={item.user} />\n                        {' bought '}\n                        <span\n                            style={{ fontWeight: 'bold' }}\n                            onClick={() =>\n                                props.history.push(\n                                    `/shop/${item.user}/${item.details.itemId}`\n                                )\n                            }\n                        >\n                            {item.details.itemName} (${item.details.price})\n                        </span>\n                        {' from '}\n                        <UserButton\n                            span={true}\n                            noAva={true}\n                            id={item.details.owner}\n                        />\n                        {' .'}\n                    </span>\n                )\n                break\n            case 'cancel transaction':\n            case 'confirm transaction':\n                text = (\n                    <span>\n                        <UserButton span={true} noAva={true} id={item.user} />{' '}\n                        {item.code === 'cancel transaction'\n                            ? 'cancelled'\n                            : 'confirmed'}\n                        {' purchase of '}\n                        <span\n                            style={{ fontWeight: 'bold' }}\n                            onClick={() =>\n                                props.history.push(\n                                    `/shop/${item.user}/${item.details.itemId}`\n                                )\n                            }\n                        >\n                            {item.details.itemName} (${item.details.price})\n                        </span>\n                        {' by '}\n                        <UserButton\n                            span={true}\n                            noAva={true}\n                            id={item.details.buyer}\n                        />\n                        {' .'}\n                    </span>\n                )\n                break\n            case 'start progress':\n                text = (\n                    <span>\n                        <UserButton span={true} noAva={true} id={item.user} />\n                        {' started participating in progress '}\n                        <span\n                            style={{ fontWeight: 'bold' }}\n                            onClick={() =>\n                                props.history.push(\n                                    `/progresses/${item.details.itemId}`\n                                )\n                            }\n                        >\n                            {item.details.itemName}\n                        </span>\n                        {' as '}\n                        {item.details.as}.\n                    </span>\n                )\n                break\n            case 'approve milestone':\n                text = (\n                    <span>\n                        <UserButton span={true} noAva={true} id={item.user} />\n                        {' approved milestone '}\n                        <span style={{ fontWeight: 'bold' }}>\n                            {item.details.itemName}\n                        </span>\n                        {' in '}\n                        <span\n                            style={{ fontWeight: 'bold' }}\n                            onClick={() =>\n                                props.history.push(\n                                    `/progresses/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </span>\n                        .\n                    </span>\n                )\n                break\n            case 'disapprove milestone':\n                text = (\n                    <span>\n                        <UserButton span={true} noAva={true} id={item.user} />\n                        {' disapproved milestone '}\n                        <span style={{ fontWeight: 'bold' }}>\n                            {item.details.itemName}\n                        </span>\n                        {' in '}\n                        <span\n                            style={{ fontWeight: 'bold' }}\n                            onClick={() =>\n                                props.history.push(\n                                    `/progresses/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </span>\n                        .\n                    </span>\n                )\n                break\n            case 'finish progress':\n                text = (\n                    <span>\n                        {'Progress '}\n                        <span\n                            style={{ fontWeight: 'bold' }}\n                            onClick={() =>\n                                props.history.push(\n                                    `/progresses/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </span>\n                        {' was approved and finished.'}\n                    </span>\n                )\n                break\n            case 'milestone finish':\n                text = (\n                    <span>\n                        Milestone {item.details.itemName}\n                        {' in progress '}\n                        <span\n                            style={{ fontWeight: 'bold' }}\n                            onClick={() =>\n                                props.history.push(\n                                    `/progresses/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </span>\n                        {' was approved and finished.'}\n                    </span>\n                )\n                break\n            case 'get reward':\n                text = (\n                    <span>\n                        <UserButton span={true} noAva={true} id={item.user} />\n                        {' recieved '}\n                        {getRewardText(item)}\n                        {' as a reward from '}\n                        <UserButton\n                            span={true}\n                            noAva={true}\n                            id={item.details.from}\n                        />\n                        {' in progress '}\n                        <span\n                            style={{ fontWeight: 'bold' }}\n                            onClick={() =>\n                                props.history.push(\n                                    `/progresses/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </span>\n                        .\n                    </span>\n                )\n                break\n            case 'leave progress':\n                text = (\n                    <span>\n                        <UserButton span={true} noAva={true} id={item.user} />\n                        {' left progress '}\n                        <span\n                            style={{ fontWeight: 'bold' }}\n                            onClick={() =>\n                                props.history.push(\n                                    `/progresses/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </span>\n                        .\n                    </span>\n                )\n                break\n            case 'edit progress':\n                text = (\n                    <span>\n                        <UserButton span={true} noAva={true} id={item.user} />\n                        {' edited progress '}\n                        <span\n                            style={{ fontWeight: 'bold' }}\n                            onClick={() =>\n                                props.history.push(\n                                    `/progresses/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </span>\n                        {item.details.addedAccounts.length > 0 ? (\n                            <>\n                                {' and added '}\n                                {item.details.addedAccounts.map(ac => (\n                                    <UserButton\n                                        span={true}\n                                        noAva={true}\n                                        id={ac}\n                                    />\n                                ))}{' '}\n                            </>\n                        ) : (\n                            ''\n                        )}\n                        {item.details.droppedAccounts.length > 0 ? (\n                            <>\n                                {' and removed '}\n                                {item.details.droppedAccounts.map(ac => (\n                                    <UserButton\n                                        span={true}\n                                        noAva={true}\n                                        id={ac}\n                                    />\n                                ))}\n                                {' .'}\n                            </>\n                        ) : (\n                            '.'\n                        )}\n                    </span>\n                )\n                break\n            case 'remove from progress':\n                text = (\n                    <span>\n                        <UserButton span={true} noAva={true} id={item.user} />\n                        {' removed '}\n                        <UserButton\n                            span={true}\n                            noAva={true}\n                            id={item.details.account}\n                        />\n                        {' from progress '}\n                        <span\n                            style={{ fontWeight: 'bold' }}\n                            onClick={() =>\n                                props.history.push(\n                                    `/progresses/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </span>\n                        .\n                    </span>\n                )\n                break\n            case 'add to progress':\n                text = (\n                    <span>\n                        <UserButton span={true} noAva={true} id={item.user} />\n                        {' added '}\n                        <UserButton\n                            span={true}\n                            noAva={true}\n                            id={item.details.account}\n                        />\n                        {' to progress '}\n                        <span\n                            style={{ fontWeight: 'bold' }}\n                            onClick={() =>\n                                props.history.push(\n                                    `/progresses/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </span>\n                        .\n                    </span>\n                )\n                break\n            case 'add reward':\n                text = (\n                    <span>\n                        <UserButton span={true} noAva={true} id={item.user} />\n                        {' added '}\n                        {getRewardText(item)} as a reward for\n                        {!item.details.for || item.details.for.length === 0\n                            ? ' all '\n                            : item.details.for.map(account => (\n                                  <>\n                                      <UserButton\n                                          noAva={true}\n                                          span={true}\n                                          id={account}\n                                      />\n                                      ,\n                                  </>\n                              ))}\n                        {' in progress '}\n                        <span\n                            style={{ fontWeight: 'bold' }}\n                            onClick={() =>\n                                props.history.push(\n                                    `/progresses/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </span>\n                        .\n                    </span>\n                )\n                break\n            case 'delete reward':\n                text = (\n                    <span>\n                        <UserButton span={true} noAva={true} id={item.user} />\n                        {' removed '}\n                        {getRewardText(item)}\n                        {' as a reward for '}\n                        {!item.details.for || item.details.for.length === 0\n                            ? ' all '\n                            : item.details.for.map(account => (\n                                  <>\n                                      <UserButton\n                                          span={true}\n                                          noAva={true}\n                                          id={account}\n                                      />\n                                      ,\n                                  </>\n                              ))}\n                        {' in progress '}\n                        <span\n                            style={{ fontWeight: 'bold' }}\n                            onClick={() =>\n                                props.history.push(\n                                    `/progresses/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </span>\n                        .\n                    </span>\n                )\n                break\n            default:\n                text = 'New event'\n                break\n        }\n        return (\n            <>\n                <Divider style={{ margin: '5px 0px' }} />\n                <Comment\n                    avatar={\n                        <UserButton noName={true} id={item.user} span={true} />\n                    }\n                    content={text}\n                />\n            </>\n        )\n\n        // <Card>{text}</Card>\n    })\n}\nconst mapStateToProps = state => {\n    return {\n        lastNotifications: state.lastNotifications,\n    }\n}\n\nexport default withRouter(connect(mapStateToProps)(DashboardEvents))\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport * as wsActions from '../../websocketActions'\n\nimport Tabs from 'antd/es/tabs'\nimport DashboardPosts from './DashboardPosts'\nimport DashboardEvents from './DashboardEvents'\nimport Badge from 'antd/es/badge'\n\nconst Progress = props => {\n    const { account, lastNotifications } = props\n\n    if (!account._id) return null\n\n    props.setPageTitle({ main: 'Dashboard', sub: '' })\n\n    let numberOfUnseenNots = 0\n    for (let not of lastNotifications) {\n        if (parseInt(not.notId) > parseInt(account.lastSeenNot || 0))\n            numberOfUnseenNots++\n    }\n\n    return (\n        <div className=\"contentDiv\">\n            <Tabs\n                onChange={activeTab => {\n                    if (activeTab === 'events') {\n                        const last = parseInt(\n                            lastNotifications.reduce((res, not) => {\n                                return parseInt(not.notId) > parseInt(res)\n                                    ? not.notId\n                                    : res\n                            }, 0)\n                        )\n                        if (\n                            lastNotifications.length > 0 &&\n                            parseInt(account.lastSeenNot) !== last\n                        ) {\n                            wsActions.setLastSeenNot(account._id, last)\n                        }\n                    }\n                }}\n            >\n                <Tabs.TabPane tab=\"Posts\" key=\"posts\">\n                    <DashboardPosts />\n                </Tabs.TabPane>\n\n                <Tabs.TabPane\n                    tab={\n                        <Badge count={numberOfUnseenNots} offset={[10, 0]}>\n                            Events\n                        </Badge>\n                    }\n                    key=\"events\"\n                >\n                    <DashboardEvents />\n                </Tabs.TabPane>\n            </Tabs>\n        </div>\n    )\n}\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n        lastNotifications: state.lastNotifications,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Progress)\n","import { webSocket } from '../containers/ConnectWebsocket/ConnectWebsocket'\n\nexport const setLastSeenNot = (accountId, notId) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'setLastSeenNot',\n                accountId,\n                notId,\n            })\n        )\n    }\n}\n","import React, { useState } from 'react'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport axios from 'axios'\nimport InfiniteScroll from 'react-infinite-scroller'\nimport message from 'antd/es/message'\n\nimport Input from 'antd/es/input'\nimport UserButton from '../../components/UserButton/UserButton'\nimport MasonryGrid from '../../components/MasonryGrid'\nimport MasonryCard from '../../components/MasonryCard'\n\nconst Explore = props => {\n    const [isSearching, setIsSearching] = useState(false)\n    const [foundProgresses, setFoundProgresses] = useState([])\n    const [progresses, setProgresses] = useState([])\n    const [noMore, setNoMore] = useState(false)\n    const [noMorePopular, setNoMorePopular] = useState(false)\n    const [searchValue, setSearchValue] = useState('')\n    const [friendData, setFriendData] = useState({})\n\n    const onSearch = (value, noNoMore) => {\n        if (!noMore || noNoMore) {\n            setNoMore(true)\n            axios\n                .post('/api/explore/search', {\n                    value: value || searchValue,\n                    skip: noNoMore ? 0 : foundProgresses.length,\n                })\n                .then(res => {\n                    if (res.data.success) {\n                        setNoMore(res.data.noMore)\n                        setFoundProgresses(res.data.progresses)\n                        if (res.data.progresses.length === 0)\n                            message.warning('There are no progresses found.')\n                        const newFriendData = {}\n                        for (let friend of res.data.friends) {\n                            newFriendData[friend._id] = friend\n                        }\n                        setFriendData(newFriendData)\n                    } else {\n                        if (res.data.errorCode) {\n                            message.error(\n                                'Something is wrong with the data. Please try one more time with new data.'\n                            )\n                        }\n                    }\n                })\n                .catch(err => {})\n        }\n    }\n\n    const onGetPopular = () => {\n        console.log('lets get more')\n        console.log(noMorePopular)\n        if (!noMorePopular) {\n            setNoMorePopular(true)\n            axios\n                .post('/api/explore/popular', {\n                    skip: progresses.length,\n                })\n                .then(res => {\n                    if (res.data.success) {\n                        setNoMorePopular(res.data.noMore)\n                        setProgresses([...progresses, ...res.data.progresses])\n                        const newFriendData = {}\n                        for (let friend of res.data.friends) {\n                            newFriendData[friend._id] = friend\n                        }\n                        setFriendData(newFriendData)\n                    } else {\n                        if (res.data.errorCode) {\n                            message.error(\n                                'Something is wrong with the data. Please try one more time with new data.'\n                            )\n                        }\n                    }\n                })\n                .catch(err => {})\n        }\n    }\n\n    props.setPageTitle({ main: 'Explore', sub: '' })\n    console.log('we are here')\n    console.log(noMorePopular)\n    return (\n        <div>\n            <Input.Search\n                placeholder=\"Find great progresses!\"\n                onSearch={value => {\n                    if (value) {\n                        setIsSearching(true)\n                        if (value !== searchValue) {\n                            setNoMore(false)\n                            setFoundProgresses([])\n                            setSearchValue(value)\n                            onSearch(value, true)\n                        }\n                    } else {\n                        setNoMore(false)\n                        setSearchValue(value)\n                        setIsSearching(false)\n                    }\n                }}\n                onChange={e => {\n                    if (!e.target.value) {\n                        setNoMore(false)\n                        setFoundProgresses([])\n                        setIsSearching(false)\n                        setSearchValue('')\n                    }\n                }}\n                enterButton\n                allowClear\n                style={{\n                    maxWidth: '500px',\n                    borderRadius: '10px',\n                }}\n            />\n            {isSearching ? (\n                foundProgresses.length > 0 ? (\n                    <InfiniteScroll\n                        pageStart={0}\n                        loadMore={onSearch(searchValue)}\n                        hasMore={!noMore}\n                        loader={\n                            <div className=\"loader\" key={0}>\n                                Loading ...\n                            </div>\n                        }\n                    >\n                        <MasonryGrid>\n                            {foundProgresses.map((item, index) => (\n                                <MasonryCard\n                                    key={index}\n                                    onClickLink={'/progresses/' + item._id}\n                                    images={item.goal.images}\n                                    body={\n                                        <>\n                                            {/* <UserButton\n                                                noName={true}\n                                                id={item.owner}\n                                                friendDataExp={friendData}\n                                            /> */}\n                                            <span\n                                                style={{ fontWeight: 'bold' }}\n                                            >\n                                                {item.name}\n                                            </span>\n                                        </>\n                                    }\n                                />\n                            ))}\n                        </MasonryGrid>\n                    </InfiniteScroll>\n                ) : null\n            ) : (\n                <InfiniteScroll\n                    pageStart={0}\n                    loadMore={onGetPopular}\n                    hasMore={!noMorePopular}\n                    loader={\n                        <div className=\"loader\" key={0}>\n                            Loading ...\n                        </div>\n                    }\n                >\n                    <MasonryGrid>\n                        {progresses.map((item, index) => (\n                            <MasonryCard\n                                key={index}\n                                onClickLink={'/progresses/' + item._id}\n                                images={item.goal.images}\n                                body={\n                                    <>\n                                        {/* <UserButton\n                                            noName={true}\n                                            id={item.owner}\n                                            friendDataExp={friendData}\n                                        /> */}\n                                        <span style={{ fontWeight: 'bold' }}>\n                                            {item.name}\n                                        </span>\n                                    </>\n                                }\n                            />\n                        ))}\n                    </MasonryGrid>\n                </InfiniteScroll>\n            )}\n        </div>\n    )\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n        setData: data => dispatch(actions.setData(data)),\n    }\n}\n\nexport default connect(\n    null,\n    mapDispatchToProps\n)(Explore)\n","import React from 'react'\n\nimport * as wsActions from '../websocketActions'\nimport Menu from 'antd/es/menu'\nimport Dropdown from 'antd/es/dropdown'\nimport { DownOutlined } from '@ant-design/icons'\nimport Button from 'antd/es/button'\nimport MoreIcon from './UI/MoreIcon'\n\nconst FriendActionButton = props => {\n    const {\n        invitingFriends,\n        invitedFriends,\n        realFriends,\n        _id,\n        accountId,\n    } = props\n    if (!accountId) return []\n\n    if (accountId === _id) return [props.additionalButton]\n\n    const menu = (\n        <Menu onClick={({ domEvent }) => domEvent.stopPropagation()}>\n            {props.additionalButtons &&\n                props.additionalButtons.map((button, index) => (\n                    <Menu.Item key={index + 100} onClick={button.onClick}>\n                        {button.title}\n                    </Menu.Item>\n                ))}\n            {invitingFriends.find(item => item.friend === _id) ? (\n                <Menu.Item\n                    key=\"2\"\n                    onClick={() => wsActions.unfriend(accountId, _id)}\n                    danger={true}\n                >\n                    Decline\n                </Menu.Item>\n            ) : invitedFriends.find(item => item.friend === _id) ? (\n                <Menu.Item\n                    key=\"3\"\n                    onClick={() => wsActions.unfriend(accountId, _id)}\n                    danger={true}\n                >\n                    Cancel invitation\n                </Menu.Item>\n            ) : realFriends.find(item => item.friend === _id) ? (\n                <Menu.Item\n                    key=\"4\"\n                    onClick={() => wsActions.unfriend(accountId, _id)}\n                    danger={true}\n                >\n                    Unfriend\n                </Menu.Item>\n            ) : null}\n        </Menu>\n    )\n    return invitingFriends.find(item => item.friend === _id) ? (\n        <Dropdown.Button\n            type=\"primary\"\n            overlay={menu}\n            trigger={['click', 'hover']}\n            onClick={e => {\n                e.preventDefault()\n                e.stopPropagation()\n                wsActions.acceptFriend(accountId, _id)\n            }}\n        >\n            Accept\n        </Dropdown.Button>\n    ) : ![...realFriends, ...invitingFriends, ...invitedFriends].find(\n          item => item.friend === _id\n      ) ? (\n        <Dropdown.Button\n            type=\"primary\"\n            overlay={menu}\n            trigger={['click', 'hover']}\n            onClick={e => {\n                e.preventDefault()\n                e.stopPropagation()\n                wsActions.addFriend(accountId, _id)\n            }}\n        >\n            Add\n        </Dropdown.Button>\n    ) : (\n        <Dropdown overlay={menu} trigger={['click']}>\n            <a\n                // className=\"ant-dropdown-link\"\n                onClick={e => {\n                    e.preventDefault()\n                    e.stopPropagation()\n                }}\n            >\n                <Button type={props.asText ? 'primary' : 'link'}>\n                    {props.asText ? (\n                        <>\n                            Actions <DownOutlined />\n                        </>\n                    ) : (\n                        <MoreIcon />\n                    )}\n                </Button>\n            </a>\n        </Dropdown>\n    )\n}\n\nexport default FriendActionButton\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport * as actions from '../store/actions'\nimport { withRouter } from 'react-router-dom'\n\nimport Card from 'antd/es/card'\nimport friendActionButton from './FriendActionButton'\nimport UserButton from './UserButton/UserButton'\n\nconst FriendCard = props => {\n    const friendActions = friendActionButton({\n        accountId: props.account ? props.account._id : '',\n        realFriends: props.realFriends,\n        invitedFriends: props.invitedFriends,\n        invitingFriends: props.invitingFriends,\n        _id: props.friend._id,\n        asIcons: true,\n\n        additionalButtons: [\n            {\n                title: 'See profile',\n                onClick: () =>\n                    props.history.push('/profile/' + props.friend._id),\n            },\n        ],\n    })\n\n    return (\n        <Card\n            style={{ width: '100%' }}\n            type=\"inner\"\n            bordered={false}\n            extra={friendActions}\n            title={<UserButton id={props.friend._id} size={50} />}\n        />\n    )\n}\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n        isAuthed: state.isAuthed,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: (data, pulledFrom) =>\n            dispatch(actions.setData(data, pulledFrom)),\n        tryAuth: (props, forceAuth) =>\n            dispatch(actions.tryAuth(props, forceAuth)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(FriendCard)\n)\n","import React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport * as wsActions from '../../websocketActions'\nimport Card from 'antd/es/card'\nimport Button from 'antd/es/button'\nimport Modal from 'antd/es/modal'\n\nimport Input from 'antd/es/input'\nimport Form from 'antd/es/form'\n\nimport FriendCard from '../../components/FriendCard'\nimport { nicknameRules } from '../../constants/fieldRules'\n\nconst AddFriends = props => {\n    useEffect(() => {\n        props.setFriendSearchResult({})\n    }, [props.addFriendOpen])\n\n    const {\n        addFriendOpen,\n        setAddFriendOpen,\n        searchResult,\n        realFriends,\n        invitedFriends,\n        invitingFriends,\n    } = props\n    const layout = {\n        labelCol: { span: 8 },\n        wrapperCol: { span: 16 },\n    }\n    const tailLayout = {\n        wrapperCol: { offset: 8, span: 16 },\n    }\n\n    return (\n        <Modal\n            title=\"Add friend\"\n            visible={addFriendOpen}\n            maskClosable\n            closable\n            onCancel={() => setAddFriendOpen(false)}\n            footer={\n                <Button key=\"back\" onClick={() => setAddFriendOpen(false)}>\n                    Return\n                </Button>\n            }\n            destroyOnClose={true}\n        >\n            <p>To find a friend you need to enter your friend's nickname.</p>\n            <Form\n                name=\"dynamic_form_nest_item\"\n                onFinish={value => wsActions.searchFriends(value.search)}\n                autoComplete=\"off\"\n                {...layout}\n            >\n                <Form.Item label=\"Search\" name=\"search\" rules={nicknameRules}>\n                    <Input placeholder=\"Must be more than 2 characters long\" />\n                </Form.Item>\n\n                <Form.Item {...tailLayout}>\n                    <Button type=\"primary\" htmlType=\"submit\" size=\"large\">\n                        Search\n                    </Button>\n                </Form.Item>\n            </Form>\n            {searchResult._id && (\n                <Card title=\"Search result\">\n                    <FriendCard\n                        {...props}\n                        friend={searchResult}\n                        realFriends={realFriends}\n                        invitingFriends={invitingFriends}\n                        invitedFriends={invitedFriends}\n                    />\n                </Card>\n            )}\n        </Modal>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        searchResult: state.friendSearchResult,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setFriendSearchResult: data =>\n            dispatch(actions.setFriendSearchResult(data)),\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(AddFriends)\n","import React from 'react'\nimport { withRouter } from 'react-router-dom'\nimport Masonry from 'react-masonry-css'\nimport { friendsBreakPoints } from '../../utils/masonryBreakPoints'\n\nimport FriendCard from '../../components/FriendCard'\nimport MasonryGrid from '../../components/MasonryGrid'\n\nconst pendingFriends = props => {\n    const { realFriends, invitedFriends, invitingFriends } = props\n    return (\n        <>\n            {invitingFriends.length > 0 && (\n                <>\n                    <h2>People invited me to be friends</h2>\n                    <MasonryGrid friends={true}>\n                        {invitingFriends.map(friend => (\n                            <FriendCard\n                                key={friend._id}\n                                {...props}\n                                friend={friend}\n                                realFriends={realFriends}\n                                invitingFriends={invitingFriends}\n                                invitedFriends={invitedFriends}\n                            />\n                        ))}\n                    </MasonryGrid>\n                </>\n            )}\n\n            {invitedFriends.length > 0 && (\n                <>\n                    <h2>I invited these people</h2>\n                    <MasonryGrid friends={true}>\n                        {invitedFriends.map(friend => (\n                            <FriendCard\n                                key={friend._id}\n                                {...props}\n                                friend={friend}\n                                realFriends={realFriends}\n                                invitingFriends={invitingFriends}\n                                invitedFriends={invitedFriends}\n                            />\n                        ))}\n                    </MasonryGrid>\n                </>\n            )}\n        </>\n    )\n}\n\nexport default withRouter(pendingFriends)\n","import React, { useState, useEffect } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\n\nimport FriendCard from '../../components/FriendCard'\nimport AddCard from '../../components/AddCard/AddCard'\nimport AddFriends from './AddFriends'\nimport PendingFriends from './PendingFriends'\nimport Tabs from 'antd/es/tabs'\nimport Empty from 'antd/es/empty'\nimport Badge from 'antd/es/badge'\nimport Masonry from 'react-masonry-css'\nimport { friendsBreakPoints } from '../../utils/masonryBreakPoints'\nimport MasonryGrid from '../../components/MasonryGrid'\n\nconst Friends = props => {\n    const [addFriendOpen, setAddFriendOpen] = useState()\n\n    useEffect(() => {\n        props.setPageTitle({ main: 'Friends', sub: '' })\n    }, [])\n\n    const { account, friendData } = props\n    if (!account._id) return null\n    const realFriends = [],\n        invitedFriends = [],\n        invitingFriends = []\n\n    if (account.friends) {\n        for (let friend of account.friends) {\n            const fullFriend = { ...friendData[friend.friend], ...friend }\n            if (fullFriend) {\n                if (fullFriend.status === 'friend') realFriends.push(fullFriend)\n                else if (fullFriend.status === 'invited')\n                    invitedFriends.push(fullFriend)\n                else if (fullFriend.status === 'inviting')\n                    invitingFriends.push(fullFriend)\n            }\n        }\n    }\n\n    const confirmedFriends =\n        realFriends.length > 0 ? (\n            <MasonryGrid friends={true}>\n                {realFriends.map(friend => (\n                    <FriendCard\n                        key={friend._id}\n                        {...props}\n                        friend={friend}\n                        realFriends={realFriends}\n                        invitingFriends={invitingFriends}\n                        invitedFriends={invitedFriends}\n                    />\n                ))}\n            </MasonryGrid>\n        ) : (\n            <Empty\n                image=\"https://websiter.s3.us-east-2.amazonaws.com/image+4.jpg\"\n                imageStyle={{ height: '250px', marginTop: '50px' }}\n                description={false}\n            />\n        )\n    return (\n        <div>\n            <AddCard\n                title=\"Add friend\"\n                sub=\"Find by nickname\"\n                action={() => setAddFriendOpen(true)}\n            />\n            {invitedFriends.length > 0 || invitingFriends.length > 0 ? (\n                <Tabs>\n                    <Tabs.TabPane key=\"confirmed\" tab=\"Confrmed\">\n                        {confirmedFriends}\n                    </Tabs.TabPane>\n\n                    <Tabs.TabPane\n                        tab={\n                            <Badge\n                                count={invitingFriends.length}\n                                offset={[10, 0]}\n                            >\n                                Pending\n                            </Badge>\n                        }\n                        key=\"pending\"\n                    >\n                        <PendingFriends\n                            realFriends={realFriends}\n                            invitedFriends={invitedFriends}\n                            invitingFriends={invitingFriends}\n                        />\n                    </Tabs.TabPane>\n                </Tabs>\n            ) : (\n                confirmedFriends\n            )}\n            <AddFriends\n                addFriendOpen={addFriendOpen}\n                setAddFriendOpen={setAddFriendOpen}\n                realFriends={realFriends}\n                invitedFriends={invitedFriends}\n                invitingFriends={invitingFriends}\n                account={account}\n            />\n        </div>\n    )\n}\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n        friendData: state.friendData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Friends)\n)\n","import React, { useEffect, useState } from 'react'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport PageHeader from 'antd/es/page-header'\nimport Form from 'antd/es/form'\nimport Button from 'antd/es/button'\nimport Input from 'antd/es/input'\n\nimport { withRouter } from 'react-router-dom'\nimport Card from 'antd/es/card'\nimport Upload from 'antd/es/upload'\nimport * as classes from './Account.module.css'\n\nimport LoadingOutlined from '@ant-design/icons/LoadingOutlined'\nimport PlusOutlined from '@ant-design/icons/PlusOutlined'\n\nimport { uploadFile } from '../../utils/uploadFile'\nimport Avatar from 'antd/es/avatar'\nimport getAvatar from '../../utils/getAvatar'\nimport Modal from 'antd/es/modal'\nimport { accountNameRules } from '../../constants/fieldRules'\nimport * as wsActions from '../../websocketActions'\nimport message from 'antd/es/message'\nimport Dropdown from 'antd/es/dropdown'\nimport Menu from 'antd/es/menu'\n\nconst Account = props => {\n    const [deleteVisible, setDeleteVisible] = useState()\n    const [deleteField, setDeleteField] = useState('')\n    const { account } = props\n\n    useEffect(() => {\n        props.setPageTitle({ main: 'Account', sub: '' })\n    }, [])\n\n    const loading = false\n\n    const layout = {\n        labelCol: { span: 8 },\n        wrapperCol: { span: 16 },\n    }\n    const tailLayout = {\n        wrapperCol: { offset: 8, span: 0 },\n    }\n    return account && account.name ? (\n        <div className=\"contentDiv\">\n            <Card>\n                <Upload\n                    name=\"avatar\"\n                    listType=\"picture-card\"\n                    className={classes.Avatar}\n                    showUploadList={false}\n                    customRequest={({ file }) => {\n                        uploadFile(file, 800, 'avatar', () => {\n                            props.increaseAvatarV()\n                        })\n                    }}\n                >\n                    {account.image ? (\n                        <Avatar\n                            src={getAvatar(account._id, account.image)}\n                            size={150}\n                            style={{ margin: '25px' }}\n                        />\n                    ) : (\n                        <div>\n                            {loading ? <LoadingOutlined /> : <PlusOutlined />}\n                            <div className=\"ant-upload-text\">Upload</div>\n                        </div>\n                    )}\n                </Upload>\n                <Form\n                    name=\"dynamic_form_nest_item\"\n                    onFinish={value =>\n                        wsActions.editAccount(value, account._id)\n                    }\n                    autoComplete=\"off\"\n                    {...layout}\n                    initialValues={{\n                        name: account.name,\n                        nickname: account._id,\n                    }}\n                >\n                    <Form.Item\n                        label=\"Name\"\n                        name=\"name\"\n                        rules={accountNameRules}\n                    >\n                        <Input placeholder=\"Must be more than 1 character long\" />\n                    </Form.Item>\n                    <Form.Item label=\"Nickname\" name=\"nickname\">\n                        <Input disabled={true} />\n                    </Form.Item>\n                    <Form.Item\n                        {...tailLayout}\n                        style={{\n                            flex: 'none',\n                            maxWidth: ' 100%',\n                            overflow: 'hidden',\n                        }}\n                    >\n                        <Dropdown.Button\n                            type=\"primary\"\n                            htmlType=\"submit\"\n                            size=\"large\"\n                            overlay={\n                                <Menu>\n                                    <Menu.Item\n                                        danger={true}\n                                        onClick={() => setDeleteVisible(true)}\n                                    >\n                                        Delete account\n                                    </Menu.Item>\n                                </Menu>\n                            }\n                        >\n                            Save\n                        </Dropdown.Button>\n                    </Form.Item>\n                </Form>\n                <Modal\n                    title=\"Delete account\"\n                    visible={deleteVisible}\n                    onOk={() => {\n                        if (deleteField !== account._id) {\n                            message.warning('The nickmanme is not correct.')\n                        } else {\n                            wsActions.deleteAccount(account._id)\n                        }\n                    }}\n                    onCancel={() => {\n                        setDeleteVisible(false)\n                        setDeleteField('')\n                    }}\n                >\n                    <p>\n                        Please enter your nickname and press Ok to delete your\n                        account.\n                    </p>\n                    <Input onChange={e => setDeleteField(e.target.value)} />\n                </Modal>\n            </Card>\n        </div>\n    ) : null\n}\n\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n        increaseAvatarV: () => dispatch(actions.increaseAvatarV()),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Account)\n)\n","import { webSocket } from '../containers/ConnectWebsocket/ConnectWebsocket'\n\nexport const deleteAccount = id => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'deleteAccount',\n                accountId: id,\n            })\n        )\n    }\n}\n\nexport const editAccount = (value, id) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'editAccount',\n                name: value.name,\n                accountId: id,\n            })\n        )\n    }\n}\n","import React, { useEffect, useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport Avatar from 'antd/es/avatar'\nimport Card from 'antd/es/card'\n\nimport friendActionButton from '../../components/FriendActionButton'\nimport FriendCard from '../../components/FriendCard'\nimport Tabs from 'antd/es/tabs'\nimport Progresses from '../Progresses/Progresses'\nimport Wallet from '../Shop/Wallet'\nimport PerkCard from '../Shop/PerkCard'\nimport getAvatar from '../../utils/getAvatar'\nimport pullData from '../../utils/pullData'\nimport UserButton from '../../components/UserButton/UserButton'\nimport MasonryGrid from '../../components/MasonryGrid'\n\nconst Profile = props => {\n    const [data, setData] = useState({})\n    const { profile, friendData, account } = props.isAuthed ? props : data\n\n    useEffect(() => {\n        const pathParts = props.history.location.pathname.split('/')\n        if (pathParts.length > 2) {\n            const profileId = pathParts[2]\n            if (props.isAuthed) {\n                props.setData({ currentProfile: profileId })\n            } else {\n                pullData(props, data, setData, { forceAuth: false }, data => {\n                    const friendData = {}\n                    for (let friend of data.friendData)\n                        friendData[friend._id] = friend\n                    const progressData = {}\n                    for (let progress of data.progressData)\n                        progressData[progress._id] = progress\n                    const groupData = {}\n                    for (let group of data.groupData)\n                        groupData[group._id] = group\n\n                    props.setData({\n                        // profile: data.profile,\n                        friendData,\n                        progressData,\n                        groupData,\n                        account: {},\n                    })\n                })\n            }\n        }\n    }, [props.isAuthed, props.history.location.pathname])\n\n    if (!profile || !profile._id) return null\n    props.setPageTitle({ main: profile.name, sub: '' })\n\n    const realFriends = [],\n        invitedFriends = [],\n        invitingFriends = []\n    if (profile && profile.friends && account && account._id) {\n        for (let friend of account.friends) {\n            if (friend.status === 'friend') realFriends.push(friend)\n            else if (friend.status === 'invited') invitedFriends.push(friend)\n            else if (friend.status === 'inviting') invitingFriends.push(friend)\n        }\n    }\n    const friendActions = friendActionButton({\n        accountId: account ? account._id : '',\n        realFriends: realFriends,\n        invitedFriends: invitedFriends,\n        invitingFriends: invitingFriends,\n        _id: profile._id,\n        additionalButton: null,\n        asText: true,\n    })\n    return (\n        <div>\n            <Card>\n                <div style={{ textAlign: 'center', marginBottom: '50px' }}>\n                    <Avatar\n                        src={getAvatar(profile._id, profile.image)}\n                        size={200}\n                    />\n                    <h1>{profile.name}</h1>\n                    <h3>({profile._id})</h3>\n                    {friendActions}\n                </div>\n                <Tabs>\n                    <Tabs.TabPane tab=\"Progresses\" key={0}>\n                        <Progresses fromProfile={true} />\n                    </Tabs.TabPane>\n\n                    <Tabs.TabPane tab=\"Friends\" key={1}>\n                        <MasonryGrid friends={true}>\n                            {profile.friends\n                                .filter(friend => friend.status === 'friend')\n                                .map(friend => {\n                                    const oneFriendData = {\n                                        ...friendData[friend.friend],\n                                        ...friend.friend,\n                                    }\n\n                                    return (\n                                        <FriendCard\n                                            key={oneFriendData._id}\n                                            {...props}\n                                            account={account}\n                                            friend={oneFriendData}\n                                            realFriends={realFriends}\n                                            invitingFriends={invitingFriends}\n                                            invitedFriends={invitedFriends}\n                                        />\n                                    )\n                                })}\n                        </MasonryGrid>\n                    </Tabs.TabPane>\n                    {/* <Tabs.TabPane tab=\"Goals\" key={3}>\n                        {profile.goals.map((goal, index) => (\n                            <PerkCard\n                                key={index}\n                                perk={goal}\n                                perkId={goal.itemId}\n                                owner={profile}\n                                account={account || {}}\n                                setEditedPerk={() => {}}\n                                setEditPerkOpen={() => {}}\n                                onlyBuy={true}\n                                mode=\"goals\"\n                            />\n                        ))}\n                    </Tabs.TabPane> */}\n                    <Tabs.TabPane tab=\"Shop\" key={4}>\n                        <MasonryGrid>\n                            {profile.perks &&\n                                profile.perks.map((perk, index) => (\n                                    <PerkCard\n                                        key={index}\n                                        perk={perk}\n                                        perkId={perk.perkId}\n                                        owner={profile}\n                                        account={account || {}}\n                                        onlyBuy={true}\n                                        mode=\"shop\"\n                                    />\n                                ))}\n                        </MasonryGrid>\n                    </Tabs.TabPane>\n                    <Tabs.TabPane tab=\"Wallet\" key={5}>\n                        <Wallet pulledProfile={profile} account={profile} />\n                    </Tabs.TabPane>\n                    <Tabs.TabPane tab=\"Wishlist\" key={6}>\n                        <MasonryGrid>\n                            {profile.wishlist.map((item, index) => (\n                                <PerkCard\n                                    key={index}\n                                    perk={item}\n                                    perkId={item.itemId}\n                                    owner={profile}\n                                    account={account || {}}\n                                    setEditedPerk={() => {}}\n                                    setEditPerkOpen={() => {}}\n                                    onlyBuy={true}\n                                    mode=\"wishlist\"\n                                />\n                            ))}\n                        </MasonryGrid>\n                    </Tabs.TabPane>\n                </Tabs>\n            </Card>\n        </div>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n        profile: state.profile,\n        isAuthed: state.isAuthed,\n        friendData: state.friendData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: data => dispatch(actions.setData(data)),\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n        tryAuth: (props, forceAuth) =>\n            dispatch(actions.tryAuth(props, forceAuth)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Profile)\n)\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport Button from 'antd/es/button'\nimport message from 'antd/es/message'\n\nimport Input from 'antd/es/input'\nimport PageHeader from 'antd/es/page-header'\nimport Form from 'antd/es/form'\nimport { withRouter } from 'react-router-dom'\nimport axios from 'axios'\nimport { nicknameRules, accountNameRules } from '../../constants/fieldRules'\nimport * as actions from '../../store/actions'\n\nconst ActivateAccount = props => {\n    if (!props.isAuthed) props.history.push('/logout')\n    const onFinish = value => {\n        axios\n            .post('/api/activate-account', {\n                ...value,\n            })\n            .then(res => {\n                if (res.data.success) {\n                    message.success('Your account has been activated!')\n                    props.setAccountActivated(false)\n                    props.history.push('/account')\n                } else {\n                    if (res.data.nicknameNotUnique) {\n                        message.warning(\n                            'The nickname is taken. Choose another nickname please.'\n                        )\n                    }\n                    if (res.data.errorCode) {\n                        message.error(\n                            'Something is wrong with the data. Please try one more time with new data.'\n                        )\n                    }\n                }\n            })\n            .catch(err => {})\n    }\n\n    const layout = {\n        labelCol: { span: 8 },\n        wrapperCol: { span: 16 },\n    }\n    const tailLayout = {\n        wrapperCol: { offset: 8, span: 16 },\n    }\n\n    return (\n        <>\n            <PageHeader\n                className=\"site-page-header\"\n                title=\"Activate your account\"\n                backIcon={false}\n            />\n            <Form\n                name=\"dynamic_form_nest_item\"\n                onFinish={onFinish}\n                autoComplete=\"off\"\n                {...layout}\n            >\n                <Form.Item label=\"Name\" name=\"name\" rules={accountNameRules}>\n                    <Input placeholder=\"Must be more than 1 character long\" />\n                </Form.Item>\n                <Form.Item\n                    label=\"Nickname\"\n                    name=\"nickname\"\n                    rules={nicknameRules}\n                >\n                    <Input placeholder=\"Must be more than 1 character long\" />\n                </Form.Item>\n                <Form.Item {...tailLayout}>\n                    <Button type=\"primary\" htmlType=\"submit\" size=\"large\">\n                        Save\n                    </Button>\n                </Form.Item>\n            </Form>\n        </>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        user: state.user,\n        account: state.account,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n        setAccountActivated: value =>\n            dispatch(actions.setAccountActivated(value)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(ActivateAccount)\n)\n","import React, { useEffect, useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport Card from 'antd/es/card'\nimport pullData from '../../utils/pullData'\nimport Descriptions from 'antd/es/descriptions'\nimport Post from '../../components/Post/Post'\nimport UserButton from '../../components/UserButton/UserButton'\nimport ImageCarousel from '../../components/UI/ImageCarousel/ImageCarousel'\n\nconst { Item } = Descriptions\n\nconst Perk = props => {\n    const [data, setData] = useState({})\n    const { account } = props\n    useEffect(() => {\n        const pathParts = props.history.location.pathname.split('/')\n        if (pathParts.length > 3) {\n            const accountId = pathParts[2]\n            if (props.isAuthed && account._id === accountId) {\n                const perk = account.perks.find(\n                    item => item.perkId === pathParts[3]\n                )\n                setData({ profile: account, perk })\n            } else {\n                pullData(props, data, setData, { forceAuth: false }, data => {\n                    const friendData = {}\n                    for (let friend of data.friendData)\n                        friendData[friend._id] = friend\n\n                    props.setData({\n                        post: { [data.post._id]: data.post },\n                        friendData,\n                    })\n                })\n            }\n        }\n    }, [props.isAuthed])\n    if (!data.perk) return null\n    const { perk, profile } = data\n    props.setData({ currentPosts: perk.post })\n    if (perk) {\n        props.setPageTitle({ main: perk.name, sub: profile._id })\n    }\n\n    const getAccounts = items => {\n        if (profile && props.friendData) {\n            return items.map(item => <UserButton id={item} />)\n        } else return items\n    }\n\n    return perk ? (\n        <div className=\"contentDiv\">\n            <Card\n                title={\n                    <span>\n                        Item from <UserButton id={profile._id} /> shop\n                    </span>\n                }\n                bordered={false}\n            >\n                <ImageCarousel images={perk.images} />\n\n                <h1>{perk.name}</h1>\n                <p style={{ whiteSpace: 'pre-wrap' }}>{perk.description}</p>\n\n                <Descriptions\n                    title=\"Goal description\"\n                    bordered\n                    column={{ xxl: 4, xl: 3, lg: 3, md: 3, sm: 2, xs: 1 }}\n                >\n                    <Item label=\"Available for\">{getAccounts(perk.users)}</Item>\n                    <Item label=\"Price\">{perk.price}</Item>\n                </Descriptions>\n                <Post\n                    noStartMessage={true}\n                    post={props.post[perk.post]}\n                    account={props.account}\n                    friendData={props.friendData}\n                    showReplies={true}\n                />\n            </Card>\n        </div>\n    ) : null\n}\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        account: state.account,\n        post: state.post,\n        friendData: state.friendData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: data => {\n            dispatch(actions.setData(data))\n        },\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Perk)\n)\n","import React, { useEffect, useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport Card from 'antd/es/card'\nimport pullData from '../../utils/pullData'\nimport Post from '../../components/Post/Post'\nimport ImageCarousel from '../../components/UI/ImageCarousel/ImageCarousel'\nimport UserButton from '../../components/UserButton/UserButton'\n\nconst WishlistItem = props => {\n    const [data, setData] = useState({})\n    const { account } = props\n    useEffect(() => {\n        const pathParts = props.history.location.pathname.split('/')\n        if (pathParts.length > 3) {\n            const accountId = pathParts[2]\n            if (props.isAuthed && account._id === accountId) {\n                const wishlistItem = account.wishlist.find(\n                    item => item.itemId === pathParts[3]\n                )\n                setData({ profile: account, wishlistItem })\n            } else {\n                pullData(props, data, setData, { forceAuth: false }, data => {\n                    const friendData = {}\n                    for (let friend of data.friendData)\n                        friendData[friend._id] = friend\n\n                    props.setData({\n                        post: { [data.post._id]: data.post },\n                        friendData,\n                    })\n                })\n            }\n        }\n    }, [props.isAuthed])\n    if (!data.wishlistItem) return null\n    const { wishlistItem, profile } = data\n    props.setData({ currentPosts: wishlistItem.post })\n    if (wishlistItem) {\n        props.setPageTitle({ main: wishlistItem.name, sub: profile._id })\n    }\n    return wishlistItem ? (\n        <div className=\"contentDiv\">\n            <Card\n                title={\n                    <span>\n                        <UserButton id={profile._id} /> wishlist\n                    </span>\n                }\n                bordered={false}\n            >\n                <ImageCarousel images={wishlistItem.images} />\n\n                <h1>{wishlistItem.name}</h1>\n                <p style={{ whiteSpace: 'pre-wrap' }}>\n                    {wishlistItem.description}\n                </p>\n                <Post\n                    noStartMessage={true}\n                    post={props.post[wishlistItem.post]}\n                    account={props.account}\n                    friendData={props.friendData}\n                    showReplies={true}\n                />\n            </Card>\n        </div>\n    ) : null\n}\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        account: state.account,\n        post: state.post,\n        friendData: state.friendData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: data => {\n            dispatch(actions.setData(data))\n        },\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(WishlistItem)\n)\n","import React, { useEffect } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport WishlistAndPerks from '../Shop/WishlistAndPerks'\n\nconst Wishlist = props => {\n    useEffect(() => {\n        props.setPageTitle({ main: 'Wishlist', sub: '' })\n    }, [])\n\n    return (\n        <div>\n            {props.account._id ? (\n                <WishlistAndPerks mode=\"wishlist\" account={props.account} />\n            ) : (\n                <span />\n            )}\n        </div>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Wishlist)\n)\n","import React from 'react'\nimport { withRouter } from 'react-router-dom'\n\nimport Card from 'antd/es/card'\nimport UserButton from '../../components/UserButton/UserButton'\nimport ImageCarousel from '../../components/UI/ImageCarousel/ImageCarousel'\n\nconst ProgressCard = props => {\n    const { progress } = props\n    const { goal } = progress\n    return (\n        <Card\n            type=\"inner\"\n            style={{ width: '100%', cursor: 'pointer' }}\n            bordered={false}\n            title={\n                <div\n                    onClick={() =>\n                        props.history.push('/progresses/' + progress._id)\n                    }\n                    style={{\n                        display: 'flex',\n                        alignItems: 'center',\n                    }}\n                >\n                    {goal.images.length > 0 && (\n                        <div style={{ width: '50px', marginRight: '20px' }}>\n                            <ImageCarousel images={goal.images} size={50} />\n                        </div>\n                    )}\n                    {goal.name} -{' '}\n                    <UserButton id={progress.owner} noName={true} /> in\n                    <UserButton ids={progress.goal.users} group={true} />\n                </div>\n            }\n        />\n    )\n}\n\nexport default withRouter(ProgressCard)\n","import React, { useEffect, useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\n\nimport Modal from 'antd/es/modal'\nimport Button from 'antd/es/button'\nimport Card from 'antd/es/card'\nimport Post from '../../components/Post/Post'\nimport AddPost from '../../components/Post/AddPost'\nimport Tabs from 'antd/es/tabs'\nimport AddCard from '../../components/AddCard/AddCard'\nimport ProgressCard from '../Progresses/ProgressCard'\nimport AddProgress from '../Progresses/AddProgress'\n\nconst Group = props => {\n    const [state, setState] = useState({})\n    const [startProgressVisible, setStartProgressVisible] = useState(false)\n\n    const groupId = props.history.location.pathname.split('/')[2]\n    useEffect(() => {\n        props.setData({ currentGroup: groupId })\n    }, [props.isAuthed])\n\n    const { group, account, friendData, posts, progressData } = props\n\n    if (!group._id) return null\n    props.setData({ currentPosts: group.posts })\n\n    props.setPageTitle({ main: group.name, sub: group.worker })\n\n    const loadedProgresses = group.progresses\n        .filter(item => progressData[item])\n        .map(item => progressData[item])\n\n    const editGoal = (\n        <Modal\n            title=\"Add goal\"\n            visible={startProgressVisible}\n            maskClosable\n            closable\n            onCancel={() => setStartProgressVisible(false)}\n            width=\"100%\"\n            style={{ maxWidth: '1000px' }}\n            footer={\n                <Button\n                    key=\"back\"\n                    onClick={() => setStartProgressVisible(false)}\n                >\n                    Close\n                </Button>\n            }\n            destroyOnClose={true}\n        >\n            <AddProgress\n                setStartProgressVisible={setStartProgressVisible}\n                account={account}\n                friendData={props.friendData}\n                inGroup={group._id}\n            />\n        </Modal>\n    )\n    return friendData ? (\n        <>\n            <Tabs>\n                <Tabs.TabPane tab=\"Posts\" key=\"posts\">\n                    <AddPost\n                        parent={groupId}\n                        account={account}\n                        parentType=\"progress\"\n                        // onSend={() => setEditingMessage('')}\n                    />\n                    {group.posts.map(postId => {\n                        if (posts[postId]) {\n                            const post = posts[postId]\n                            return (\n                                <Card>\n                                    <Post\n                                        friendData={friendData}\n                                        account={account}\n                                        post={post}\n                                    />\n                                </Card>\n                            )\n                        } else return null\n                    })}\n                </Tabs.TabPane>\n                <Tabs.TabPane tab=\"Progresses\" key=\"progresses\">\n                    <AddCard\n                        title=\"Start a new progress\"\n                        sub=\"Rich your goals or help others!\"\n                        action={() => {\n                            setStartProgressVisible(true)\n                        }}\n                    />\n                    {loadedProgresses.map((progress, index) => (\n                        <ProgressCard key={index} progress={progress} />\n                    ))}\n                    {editGoal}\n                </Tabs.TabPane>\n            </Tabs>\n\n            <Modal\n                visible={state.previewImage}\n                footer={null}\n                onCancel={() => setState({ ...state, previewImage: '' })}\n            >\n                <img\n                    alt=\"example\"\n                    style={{ width: '100%' }}\n                    src={state.previewImage}\n                />\n            </Modal>\n        </>\n    ) : null\n}\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        account: state.account,\n        posts: state.post,\n        group: state.group,\n        friendData: state.friendData,\n        progressData: state.progressData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: data => {\n            dispatch(actions.setData(data))\n        },\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Group)\n)\n","import React from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport isEqual from 'lodash.isequal'\nconst NotificationsTracker = props => {\n    const { account, friendData, progressData, groupData } = props\n\n    const sortNotifiacations = (a, b) =>\n        new Date(a.date).getTime() < new Date(b.date).getTime() ? 1 : -1\n\n    if (!account._id) return null\n\n    let lastNotifications = []\n    for (let progress of account.progresses) {\n        if (progressData[progress])\n            lastNotifications = [\n                ...lastNotifications,\n                ...progressData[progress].notifications,\n            ]\n    }\n\n    for (let group of account.groups) {\n        if (groupData[group])\n            lastNotifications = [\n                ...lastNotifications,\n                ...groupData[group].notifications,\n            ]\n    }\n\n    for (let friend of account.friends) {\n        if (\n            friendData[friend.friend] &&\n            friend.status === 'friend' &&\n            friendData[friend.friend].notifications\n        )\n            lastNotifications = [\n                ...lastNotifications,\n                ...friendData[friend.friend].notifications,\n            ]\n    }\n    const filterSameNot = (res, not, index, arr) => {\n        if (!res.find(item => item.notId === not.notId)) {\n            res.push(not)\n        }\n        return res\n    }\n    lastNotifications = lastNotifications.reduce(filterSameNot, [])\n\n    lastNotifications = lastNotifications.sort(sortNotifiacations).slice(0, 100)\n\n    lastNotifications = [\n        ...lastNotifications,\n        ...account.myNotifications,\n    ].filter(item => item.code !== 'add post')\n\n    lastNotifications = lastNotifications.reduce(filterSameNot, [])\n    lastNotifications = lastNotifications.sort(sortNotifiacations)\n    if (!isEqual(lastNotifications, props.lastNotifications)) {\n        props.setData({ lastNotifications })\n    }\n\n    return <span />\n}\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        account: state.account,\n        statePosts: state.post,\n        progress: state.progress,\n        friendData: state.friendData,\n        progressData: state.progressData,\n        groupData: state.groupData,\n        lastNotifications: state.lastNotifications,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: data => {\n            dispatch(actions.setData(data))\n        },\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(NotificationsTracker)\n)\n","import React, { useEffect } from 'react'\nimport { Route, Switch, withRouter, Redirect } from 'react-router-dom'\n\nimport Auth from './containers/Auth/Auth'\nimport AuthTest from './containers/Auth/AuthTest'\nimport './components/UI/loadStyles'\nimport AccountLayout from './components/Layout/Layout'\nimport Goals from './containers/Goals/Goals'\nimport Goal from './containers/Goals/Goal'\nimport Progresses from './containers/Progresses/Progresses'\nimport Progress from './containers/Progress/Progress'\nimport Shop from './containers/Shop/Shop'\nimport Dashboard from './containers/Dashboard/Dashboard'\nimport Explore from './containers/Explore/Explore'\n\nimport Friends from './containers/Friends/Friends'\nimport Account from './containers/Account/Account'\nimport Profile from './containers/Profile/Profile'\n\nimport ActivateAccount from './containers/ActivateAccount/ActivateAccount'\nimport Cookies from 'universal-cookie'\nimport Perk from './containers/Shop/Perk'\n\nimport WishlistItem from './containers/Wishlist/WishlistItem'\nimport Wishlist from './containers/Wishlist/Wishlist'\nimport { connect } from 'react-redux'\nimport * as actions from './store/actions'\nimport ConnectWebsocket from './containers/ConnectWebsocket/ConnectWebsocket'\nimport Group from './containers/Group/Group'\nimport NotificationsTracker from './containers/Dashboard/NotificationsTracker'\n\nconst cookies = new Cookies()\n\nconst App = props => {\n    const { isAuthed } = props\n    useEffect(() => {\n        props.tryAuth(props)\n    }, [])\n\n    const redirectTo = cookies.get('redirectto')\n\n    if (redirectTo) {\n        cookies.remove('redirectto', {\n            path: '/',\n        })\n    }\n\n    const Logout = () => {\n        props.logout()\n        return <Redirect to=\"/explore\" />\n    }\n\n    let routes = (\n        <Switch>\n            <Route path=\"/goals\" exact component={Goals} />\n            <Route path=\"/goals\" component={Goal} />\n\n            <Route path=\"/progresses\" exact component={Progresses} />\n            <Route path=\"/progresses\" component={Progress} />\n            <Route path=\"/groups\" component={Group} />\n\n            <Route path=\"/profile\" component={Profile} />\n\n            <Route path=\"/friends\" exact component={Friends} />\n\n            <Route path=\"/account\" exact component={Account} />\n            <Route path=\"/dashboard\" exact component={Dashboard} />\n            <Route path=\"/explore\" exact component={Explore} />\n\n            <Route path=\"/shop\" exact component={Shop} />\n            <Route path=\"/shop\" component={Perk} />\n            <Route path=\"/wishlist\" exact component={Wishlist} />\n            <Route path=\"/wishlist\" component={WishlistItem} />\n            {/* {!isAuthed && <Route path=\"/login\" exact component={Auth} />} */}\n            <Route path=\"/logout\" exact component={Logout} />\n\n            <Route path=\"/activate-account\" exact component={ActivateAccount} />\n\n            {process.env.NODE_ENV === 'development' && !isAuthed && (\n                <Route path=\"/logintest\" exact component={AuthTest} />\n            )}\n            <Redirect to=\"/explore\" />\n        </Switch>\n    )\n\n    if (props.accountNotActive) {\n        routes = (\n            <Switch>\n                {!isAuthed && <Route path=\"/login\" exact component={Auth} />}\n                <Route path=\"/logout\" exact component={Logout} />\n\n                <Route\n                    path=\"/activate-account\"\n                    exact\n                    component={ActivateAccount}\n                />\n\n                {process.env.NODE_ENV === 'development' && !isAuthed && (\n                    <Route path=\"/logintest\" exact component={AuthTest} />\n                )}\n                {isAuthed ? (\n                    <Redirect to=\"/activate-account\" />\n                ) : (\n                    <Redirect to=\"/login\" />\n                )}\n            </Switch>\n        )\n    }\n\n    return redirectTo ? (\n        <Redirect to={redirectTo} />\n    ) : (\n        <>\n            <div style={{ height: '100%' }}>\n                <AccountLayout>{routes}</AccountLayout>\n                {isAuthed && <ConnectWebsocket />}\n                {isAuthed && <NotificationsTracker />}\n            </div>\n            {/* {this.props.loading && <Spinner cover />} */}\n        </>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        user: state.user,\n        account: state.account,\n        accountNotActive: state.accountNotActive,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        tryAuth: (props, forceAuth) =>\n            dispatch(actions.tryAuth(props, forceAuth)),\n        logout: () => dispatch(actions.logout()),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(App)\n)\n","import { createReducer } from '@reduxjs/toolkit'\n\nexport const initialState = {\n    isAuthed: false,\n    user: null,\n    currentAccount: '',\n    account: {},\n    friendData: {},\n    transactionData: {},\n    progressData: {},\n    currentProfile: '',\n    profile: {},\n    currentProgress: '',\n    currentGroup: '',\n    currentPosts: [],\n    progress: {},\n    post: {},\n    postData: {},\n    group: {},\n    groupData: {},\n    pageTitle: {},\n    lastUrl: '',\n    friendSearchResult: {},\n    accountNotActive: false,\n    lastNotifications: [],\n    isConnectingWS: false,\n}\n\nconst reducer = createReducer(initialState, {\n    SET_DATA: (state: Object, action: Object) => {\n        if (action.data) {\n            for (let key of [\n                'user',\n                'account',\n                'isAuthed',\n                'currentAccount',\n                'currentProfile',\n                'currentPosts',\n                'currentGroup',\n                'profile',\n                'group',\n                'currentProgress',\n                'progress',\n                'lastNotifications',\n            ]) {\n                if (typeof action.data[key] !== 'undefined') {\n                    state[key] = action.data[key]\n                }\n            }\n            for (let key of [\n                'friendData',\n                'progressData',\n                'post',\n                'postData',\n                'groupData',\n                'transactionData',\n            ]) {\n                if (typeof action.data[key] !== 'undefined') {\n                    for (let attr in action.data[key]) {\n                        if (action.data[key][attr]) {\n                            state[key][attr] = action.data[key][attr]\n                        }\n                    }\n                }\n            }\n        }\n        if (state.user) {\n            if (state.user.currentAccount) {\n                state.currentAccount = state.user.currentAccount\n                state.accountNotActive = false\n            } else if (state.user.myAccount) {\n                state.currentAccount = state.user.myAccount\n                state.accountNotActive = false\n            } else {\n                state.accountNotActive = true\n            }\n        }\n    },\n    REMOVE_DATA: (state: Object, action: Object) => {\n        if (action.data) {\n            for (let key of [\n                'user',\n                'account',\n                'profile',\n                'progress',\n                'group',\n            ]) {\n                for (let item of action.data[key]) {\n                    if (state[key]._id === item) {\n                        state[key] = {}\n                    }\n                }\n            }\n            for (let key of [\n                'post',\n                'friendData',\n                'progressData',\n                'postData',\n                'groupData',\n                'transactionData',\n            ]) {\n                for (let item of action.data[key]) {\n                    delete state[key][item]\n                }\n            }\n        }\n    },\n    SET_FRIEND_SEARCH_RESULT: (state: Object, action: Object) => {\n        state.friendSearchResult = action.data\n    },\n\n    SET_FRIENDS_DATA: (state: Object, action: Object) => {\n        if (action.data) {\n            state.account.friendsData = action.data\n        }\n        if (action.data.perk) state.perk = action.data.perk\n    },\n    SET_AVATAR_V: (state: Object, action: Object) => {\n        state.account.image = action.v\n    },\n    INCREASE_AVATAR_V: (state: Object) => {\n        state.account.image = state.account.image + 1\n    },\n    SET_IS_AUTHED: (state: Object, action: Object) => {\n        state.isAuthed = action.id\n    },\n    SET_PAGE_TITLE: (state: Object, action: Object) => {\n        state.pageTitle = action.title\n    },\n    SAVE_LAST_URL: (state: Object, action: Object) => {\n        if (action.url !== '/login' && action.url !== '/logout')\n            state.lastUrl = action.url\n    },\n    SET_ACCOUNT_ACTIVATED: (state: Object, action: Object) => {\n        state.accountNotActive = action.value\n    },\n    SET_CONNECTING_WS: (state: Object, action: Object) => {\n        state.isConnectingWS = action.data\n    },\n})\n\nexport default reducer\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter } from 'react-router-dom'\nimport axios from 'axios'\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly'\n\nimport './index.css'\nimport App from './App'\nimport reducer from './store/reducer/reducer'\n//import * as serviceWorker from './serviceWorker';\n\nif (process.env.NODE_ENV === 'development') {\n    axios.defaults.baseURL = 'http://my.websiter.test:5000'\n} else {\n    axios.defaults.baseURL = 'https://addspiration.com'\n}\n// axios.defaults.withCredentials = true\n\nexport const store = createStore(\n    reducer,\n    composeWithDevTools(applyMiddleware(thunk))\n)\n\nconst app = (\n    <Provider store={store}>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </Provider>\n)\n\nconst root = document.getElementById('root')\n\nReactDOM.render(app, root)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}