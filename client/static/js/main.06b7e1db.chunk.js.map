{"version":3,"sources":["containers/Auth/Auth.module.css","components/UI/ImageCarousel/imageCarousel.module.css","containers/Settings/Settings.module.css","components/Layout/Layout.module.css","containers/Auth/Auth.tsx","containers/Auth/AuthTest.tsx","utils/getAvatar.js","components/Layout/LoginModal.tsx","components/Layout/Layout.tsx","utils/processRes.js","store/actions/auth.tsx","containers/ConnectWebsocket/methods/getListOfNeededResources.js","containers/ConnectWebsocket/methods/compareVersionsAndRerequest.js","containers/ConnectWebsocket/methods/getResourcesToMonitor.js","containers/ConnectWebsocket/ConnectWebsocket.tsx","store/actions/saveResources.tsx","containers/ConnectWebsocket/methods/requestResource.tsx","store/actions/updateResource.tsx","utils/uploadFile.js","constants/fieldLength.js","constants/fieldRules.js","containers/Shop/AddPerkForm.tsx","websocketActions/posts.tsx","websocketActions/account.tsx","websocketActions/wishlistAndPerks.tsx","websocketActions/friends.tsx","containers/Shop/AddPerk.tsx","components/MasonryCard.tsx","components/UI/MoreIcon.js","containers/Shop/PerkCard.tsx","components/AddCard/AddCard.tsx","utils/masonryBreakPoints.js","components/MasonryGrid.tsx","containers/Shop/WishlistAndPerks.tsx","containers/Goals/Goals.tsx","utils/pullData.js","components/Post/AddMessage.tsx","components/UI/ImageCarousel/ImageCarousel.tsx","components/UserButton/UserButton.tsx","components/Post/Message.tsx","components/Post/Post.tsx","containers/Goals/Goal.tsx","components/EditGoalAndProgressForm/connectionsSelect.tsx","components/Rewards/Rewards.tsx","websocketActions/progresses.tsx","components/EditGoalAndProgressForm/EditGoalAndProgressForm.tsx","containers/Progresses/AddProgress.tsx","containers/Progresses/GroupCard.tsx","containers/Progresses/Progresses.tsx","containers/Progress/ActivityTable.tsx","containers/Progress/EditProgress.tsx","components/FollowButton.tsx","containers/Progress/Activity.tsx","components/Post/AddPost.tsx","containers/Progress/Progress.tsx","containers/Shop/Wallet.tsx","containers/Shop/Transactions.tsx","containers/Shop/Shop.tsx","containers/Dashboard/DashboardPosts.tsx","containers/Dashboard/DashboardEvents.tsx","containers/Dashboard/Dashboard.tsx","websocketActions/dashboard.tsx","containers/Explore/Explore.tsx","components/FriendActionButton.tsx","components/FriendCard.tsx","containers/Friends/AddFriends.tsx","containers/Friends/PendingFriends.tsx","containers/Friends/Friends.tsx","containers/Settings/Settings.tsx","components/ProgressButton.tsx","containers/Profile/Profile.tsx","containers/ActivateAccount/ActivateAccount.tsx","containers/Shop/Perk.tsx","containers/Wishlist/WishlistItem.tsx","containers/Wishlist/Wishlist.tsx","containers/Progresses/ProgressCard.tsx","containers/Group/Group.tsx","containers/Dashboard/NotificationsTracker.tsx","App.tsx","store/reducer/reducer.tsx","index.tsx"],"names":["module","exports","Container","socialButtons","Background","Dots","Avatar","Layout","Header","Footer","HideHeader","FooterButton","TopHeader","BottomHeader","Main","Button","MenuButtonContiner","QuickButtonContiner","PageTitle","cookies","Cookies","withRouter","connect","state","lastUrl","props","_useState","useState","_useState2","Object","slicedToArray","setState","_useState3","_useState4","cookieConsent","setCookieConsent","useEffect","checkCookieConsent","remeberMeParam","get","basicURL","react_default","a","createElement","className","classes","dist","onClick","window","location","concat","es_checkbox","checked","onChange","modal","title","visible","onOk","set","path","maxAge","onCancel","open","destroyOnClose","maskClosable","getAvatar","nickname","version","loginVisible","setLoginVisible","footer","width","style","maxWidth","fontWeight","lineHeight","marginBottom","fontSize","s","typography","Link","account","pageTitle","isAuthed","lastNotifications","isConnectingWS","menuVisible","setMenuVisible","lastScrollY","setLastScrollY","_useState5","_useState6","headerVisible","setHeaderVisible","_useState7","_useState8","_useState9","history","pathname","_useState10","pageAddress","setPageAddress","handleScroll","currentScrollY","scrollY","removeEventListener","addEventListener","scrollTo","top","left","behavior","toggleMenu","selectedKey","split","undefined","buttonProps","type","size","checkHighligh","url","ghost","openLink","push","isActivating","numberOfUnseenNots","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","not","value","parseInt","notId","lastSeenNot","err","return","logedIn","_id","Fragment","join","es_button","assign","icon","MenuOutlined_default","main","LogoutOutlined_default","margin","cursor","avatar","border","src","image","marginRight","spin","indicator","LoadingOutlined_default","color","children","badge","count","HomeFilled_default","RocketFilled_default","ShopFilled_default","friends","filter","item","status","length","TeamOutlined_default","drawer","closable","onClose","placement","es_menu","theme","mode","selectedKeys","_ref","key","overflowedIndicator","marginTop","Item","CoffeeOutlined_default","HeartFilled_default","UserOutlined_default","SettingFilled_default","Layout_LoginModal","back_top","height","borderRadius","backgroundColor","textAlign","UpOutlined_default","processRes","res","data","logout","success","errorCode","message","warning","error","successCode","tryAuth","forceLogin","dispatch","sessionStorage","setItem","token","rememberMe","remove","userId","jwt","decode","axios","defaults","headers","post","put","delete","common","Accept","setIsAuthed","saveLastUrl","pathParts","includes","id","setData","setPageTitle","setFriendSearchResult","getListOfNeededResources","store","requestedResources","user","progress","group","progressData","friendData","postData","groupData","transactionData","neededResources","currentAccount","_i","_arr","toConsumableArray","progresses","followProgresses","groups","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","followPosts","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","myPosts","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","transactions","transaction","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","friend","_i2","_arr2","followingAccounts","followAccounts","currentProfile","profile","_i3","_arr3","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","_i4","_arr4","currentGroup","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","users","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","posts","currentProgress","participants","owner","worker","experts","supporters","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_iterator11","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_step12","_iterator12","currentPosts","_iteratorNormalCompletion13","_didIteratorError13","_iteratorError13","_step13","_iterator13","postEl","_iteratorNormalCompletion14","_didIteratorError14","_iteratorError14","_step14","_iterator14","parent","parentType","parentId","reduce","obj","attr","Array","from","Set","notNeededExist","notNeededResources","check1","check2","removeData","compareVersionsAndRerequest","versions","webSocket","checkData","requestResource","check","__v","getResourcesToMonitor","resources","addData","require","create","propertyFilter","name","context","ConnectWebsocket","start","pingTimeout","WebSocket","heartbeat","_this","clearTimeout","setTimeout","close","send","JSON","stringify","messageCode","onopen","event","resourcesToMonitor","initializeRequestResources","onmessage","news","parse","messageText","setFriendsData","friendsData","saveResource","updateResource","code","update","text","onclose","checkInterval","readyState","clearInterval","setInterval","reRequestResourcesInterval","reRequestResources","ids","nextProps","newRequestedResources","_loop","this","setConnectingToWS","Component","pulledFrom","actions","getState","myAccount","find","notRequestedIds","applyDelta","source","delta","watchFields","result","cloneDeep","del","applyWithDot","keys","shift","applyUpdateToPart","updatedFields","applyDeleteToPart","splice","removedFields","field","indexOf","parState","element","defineProperty","updateData","uploadFile","file","filename","callback","alert","reader","FileReader","onload","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","resizeImageToSpecificSize","urltoFile","then","getSignedRequest","stop","_x","apply","arguments","readAsArrayBuffer","mimeType","match","fetch","arrayBuffer","buf","File","cb","resizeImageFromSrcToSpecificSize","target","readAsDataURL","img","Image","widthCoef","heightCoef","oc","document","octx","getContext","drawImage","toDataURL","fileName","response","doUploadFile","catch","signedRequest","Content-Type","console","log","fieldLength","nicknameRules","required","whitespace","min","max","pattern","nameRules","accountNameRules","descriptionRules","messageRules","priceRules","AddPerkForm","previewImage","setPreviewImage","connections","perkId","perk","deletePerk","onFinish","images","setImages","uploadImage","connectionsSelect","es_select","placeholder","getPopupContainer","trigger","parentNode","map","Option","_Form$useForm","Form","useForm","form","es_form","autoComplete","initialValues","labelCol","span","wrapperCol","label","valuePropName","getValueFromEvent","e","isArray","fileList","upload","listType","index","objectSpread","uid","onPreview","customRequest","_ref2","PlusOutlined_default","rules","input","TextArea","input_number","offset","htmlType","popconfirm","onConfirm","okText","cancelText","danger","alt","changeLikesMessage","messageId","accountId","postId","followProgress","progressId","unfollowProgress","followAccount","accountFollow","unfollowAccount","buyPerk","buyer","seller","unfriend","friendId","setPerk","wishlist","itemId","goals","goalId","perks","Shop_AddPerkForm","wsActions","setEditPerkOpen","processedValue","onClickLink","display","padding","wordBreak","float","body","MoreIcon","viewBox","transform","d","setEditedPerk","MasonryCard","stopPropagation","onlyBuy","dropdown","overlay","price","AddCard","action","shape","icons_PlusOutlined","friendsBreakPoints","default","1600","1100","600","cardBreakPoints","700","350","MasonryGrid","react_masonry_css_es5_default","breakpointCols","columnClassName","WishlistAndPerks","editedPerk","editPerkOpen","editPerk","Shop_AddPerk","components_AddCard_AddCard","sub","listKey","Shop_PerkCard","Shop_WishlistAndPerks","pullData","options","imageLoading","setImageLoading","content","replyToUser","setMessageText","background","replyTo","bottom","comment","autoSize","minRows","maxRows","rows","messageValue","replyToMessage","editedMessage","editingMessage","onSend","SendOutlined_default","showUploadList","_ref3","PictureFilled_default","cancel","CloseCircleFilled_default","Modal","ImageCarousel","carousel","dots","backgroundImage","backgroundSize","backgroundPosition","backgroundRepeat","friendSearchResult","friendDataExp","getUserData","userName","userAvatar","noClick","handleClick","Group","noAva","noName","Message","replies","isStart","replyVisible","setReplyVisible","setReplyToUser","setEditingMessage","showReplies","setShowReplies","commentProps","timeago_react","datetime","date","live","tooltip","likes","LikeFilled_default","LikeOutlined_default","paddingLeft","author","components_UserButton_UserButton","messageType","details","UI_ImageCarousel_ImageCarousel","goal","startMessage","Post_AddMessage","isTop","reply","postOpen","setPostOpen","noStartMessage","Post_Message","divider","position","justifyContent","icons_LikeFilled","icons_LikeOutlined","CommentOutlined","messages","getNumberOfMessages","card","bordered","whiteSpace","description","components_Post_Post","EditGoalAndProgressForm_connectionsSelect","onSelect","_React$createElement","previewReward","setPreviewReward","editedReward","setEditedReward","editedRewardIndex","setEditedRewardIndex","readOnly","RewardButton","simple","money","itemName","rewards","onlyButton","rewardKey","for","marginLeft","rewardId","confirm","setRewards","indexIn","reward","rewardToSave","newRewards","itemImages","_ref4","itemDescription","_ref5","hoverable","cover","descriptions","column","xxl","xl","lg","md","sm","xs","Select","EditGoalAndProgressForm","repeat","days","onValuesChange","changedFields","allValues","setFieldsValue","sort","noStyle","shouldUpdate","prevValues","currentValues","getFieldValue","components_Rewards_Rewards","AddProgress","components_EditGoalAndProgressForm_EditGoalAndProgressForm","inGroup","setStartProgressVisible","removeAttribute","Meta","Card","TabPane","Tabs","forceAuth","loadedProgresses","loadedGroups","startProgressVisible","fromProfile","active","editGoal","Progresses_AddProgress","tab","Progresses_GroupCard","empty","imageStyle","moment","format","ActivityTable","isOwner","lastStages","stages","slice","Math","b","aS","aF","bS","bF","old","day","year","dayOfYear","startOf","endOf","week","month","now","abs","diff","nowStageId","stageId","tabs","defaultActiveKey","findIndex","toString","stage","stageDate","getStatus","dismissed","failBy","approvedBy","getTag","es_tag","expert","tabTitle","myStatus","stageStatus","textTransform","es_radio","paid","EditProgress","editProgressOpen","FollowButton","Descriptions","followersVisible","setFollowersVisible","Paragraph","ellipsis","expandable","symbol","getDay","Progress_ActivityTable","Progress_EditProgress","components_FollowButton","zIndex","icons_PictureFilled","icons_CloseCircleFilled","Progress_Activity","Post_AddPost","paddingTop","pulledProfile","wallet","amount","tableData","sorted","Date","getTime","types","to","collapse","expandIconPosition","destroyInactivePanel","accordion","Panel","header","alignItems","layout","tag","toUpperCase","cancelTransaction","record","confirmTransaction","boxShadow","Shop_Wallet","Shop_Transactions","statePosts","setPosts","startTime","sortPosts","aN","notifications","bN","newPosts","newUnseenPosts","newOldPosts","oldPosts","oldPostIndex","_loop2","_newOldPosts","resultPosts","neededPosts","isEqual","nots","getRewardText","stageName","as","getStageName","progressName","addedAccounts","ac","droppedAccounts","activeTab","last","Dashboard_DashboardPosts","Dashboard_DashboardEvents","isSearching","setIsSearching","foundProgresses","setFoundProgresses","setProgresses","noMore","setNoMore","noMorePopular","setNoMorePopular","_useState11","_useState12","searchValue","setSearchValue","onSearch","noNoMore","skip","newFriendData","Search","enterButton","allowClear","react_infinite_scroller_default","pageStart","loadMore","hasMore","loader","FriendActionButton","invitingFriends","invitedFriends","realFriends","additionalButton","menu","domEvent","additionalButtons","button","noFollow","preventDefault","asText","DownOutlined","friendActions","friendActionButton","asIcons","searchResult","addFriendOpen","setAddFriendOpen","search","components_FriendCard","fullFriend","confirmedFriends","PendingFriends","Friends_AddFriends","increaseAvatarV","deleteVisible","setDeleteVisible","deleteField","setDeleteField","disabled","flex","overflow","followingVisible","setFollowingVisible","profileId","containers_Progresses_Progresses","oneFriendData","components_ProgressButton","accountNotActive","setAccountActivated","page_header","backIcon","nicknameNotUnique","items","Perk_Item","wishlistItem","groupId","Progresses_ProgressCard","sortNotifiacations","filterSameNot","arr","myNotifications","redirectTo","Logout","react_router","routes","exact","component","Goals","Goal","Progresses","Progress","Profile","Friends","Settings","Dashboard","Explore","Shop","Perk","Wishlist","WishlistItem","ActivateAccount","process","Auth","containers_ConnectWebsocket_ConnectWebsocket","Dashboard_NotificationsTracker","reducer","createReducer","SET_DATA","REMOVE_DATA","SET_FRIEND_SEARCH_RESULT","SET_FRIENDS_DATA","SET_AVATAR_V","v","INCREASE_AVATAR_V","SET_IS_AUTHED","SET_PAGE_TITLE","SAVE_LAST_URL","SET_ACCOUNT_ACTIVATED","SET_CONNECTING_WS","__webpack_require__","__webpack_exports__","src_store","baseURL","createStore","composeWithDevTools","applyMiddleware","thunk","app","es","react_router_dom","src_App","root","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.06b7e1db.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Auth_Container__1KNy7\",\"socialButtons\":\"Auth_socialButtons__2wwH9\",\"Background\":\"Auth_Background__39m_a\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Dots\":\"imageCarousel_Dots__2JZGt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Avatar\":\"Settings_Avatar__1usz_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Layout\":\"Layout_Layout__3t6t4\",\"Header\":\"Layout_Header__3lh1Y\",\"Footer\":\"Layout_Footer__1Dfqu\",\"HideHeader\":\"Layout_HideHeader__2WRsh\",\"FooterButton\":\"Layout_FooterButton__1lZv2\",\"TopHeader\":\"Layout_TopHeader__3_LuK\",\"BottomHeader\":\"Layout_BottomHeader__3DOBo\",\"Main\":\"Layout_Main__3usmk\",\"Button\":\"Layout_Button__1O5Hm\",\"MenuButtonContiner\":\"Layout_MenuButtonContiner__PpulB\",\"QuickButtonContiner\":\"Layout_QuickButtonContiner__4d4Lg\",\"PageTitle\":\"Layout_PageTitle__368dw\"};","import React, { useState, useEffect } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport Checkbox from 'antd/es/checkbox'\nimport Cookies from 'universal-cookie'\nimport classes from './Auth.module.css'\nimport Modal from 'antd/es/modal'\nimport {\n    FacebookLoginButton,\n    GithubLoginButton,\n    GoogleLoginButton,\n} from 'react-social-login-buttons'\n\nconst cookies = new Cookies()\n\nconst Auth = props => {\n    const [state, setState] = useState(false)\n    const [cookieConsent, setCookieConsent] = useState(false)\n\n    useEffect(() => {\n        checkCookieConsent()\n    })\n\n    let remeberMeParam = '?rememberme=false'\n    if (state) {\n        remeberMeParam = '?rememberme=true'\n    }\n\n    let redirectParam = '&redirect=/login'\n    if (props.lastUrl) {\n        redirectParam = '&redirect=' + props.lastUrl\n    }\n\n    const checkCookieConsent = () => {\n        const cookiesConsent = cookies.get('cookies_consent')\n        if (cookiesConsent) {\n            setCookieConsent(true)\n        }\n    }\n\n    const agreeWithCookies = () => {\n        cookies.set('cookies_consent', 'true', {\n            path: '/',\n            maxAge: 31530000,\n        })\n        checkCookieConsent()\n    }\n    const basicURL =\n        process.env.NODE_ENV !== 'development'\n            ? 'https://addspire.com/api/auth/'\n            : 'http://my.websiter.test:5000/api/auth/'\n    return !cookieConsent ? (\n        <Modal\n            title=\"Cookies consent\"\n            visible={!cookieConsent}\n            onOk={agreeWithCookies}\n            onCancel={() => {\n                window.open('https://websiter.dev', '_self')\n            }}\n            destroyOnClose={true}\n            maskClosable={false}\n        >\n            <p>We use cookies only for login purposes. </p>\n            <p>\n                In order to proceed you need to agree with the use of cookies.\n            </p>\n        </Modal>\n    ) : (\n        <div className=\"contentDiv\">\n            <div className={classes.Container}>\n                <h1>Welcome to Addspire!</h1>\n                <h2>This is where great progresses live.</h2>\n                <h1>Continue with:</h1>\n                <div className={classes.socialButtons}>\n                    <FacebookLoginButton\n                        onClick={() =>\n                            (window.location =\n                                basicURL + `facebook/start${remeberMeParam}`)\n                        }\n                    />\n                    <GoogleLoginButton\n                        onClick={() =>\n                            (window.location =\n                                basicURL + `google/start${remeberMeParam}`)\n                        }\n                    />\n                    <GithubLoginButton\n                        onClick={() =>\n                            (window.location =\n                                basicURL + `github/start${remeberMeParam}`)\n                        }\n                    />\n                </div>\n                <Checkbox checked={state} onChange={() => setState(!state)}>\n                    Remember me\n                </Checkbox>\n            </div>\n            <div className={classes.Background} />\n        </div>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        lastUrl: state.lastUrl,\n    }\n}\n\nexport default withRouter(connect(mapStateToProps)(Auth))\n","import React from 'react'\n\nimport Form from 'antd/es/form'\nimport Input from 'antd/es/input'\nimport Button from 'antd/es/button'\nimport axios from 'axios'\nimport Cookies from 'universal-cookie'\n\nconst cookies = new Cookies()\n\nconst Auth = props => {\n    const layout = {\n        labelCol: { span: 8 },\n        wrapperCol: { span: 16 },\n    }\n    const tailLayout = {\n        wrapperCol: { offset: 8, span: 16 },\n    }\n    const onFinish = value => {\n        axios\n            .post('/api/authtest/' + value.id)\n            .then(res => {\n                cookies.set('auth_token', res.data.cookie)\n                props.onTryAutoSignup()\n            })\n            .catch(err => {})\n    }\n    return (\n        <Form\n            name=\"dynamic_form_nest_item\"\n            onFinish={onFinish}\n            autoComplete=\"off\"\n            {...layout}\n        >\n            <Form.Item\n                label=\"Id\"\n                name=\"id\"\n                rules={[\n                    { required: true, message: 'Please input the goal name.' },\n                ]}\n            >\n                <Input />\n            </Form.Item>\n            <Form.Item {...tailLayout}>\n                <Button type=\"primary\" htmlType=\"submit\" size=\"large\">\n                    Save\n                </Button>\n            </Form.Item>\n        </Form>\n    )\n}\n\nexport default Auth\n","export default (nickname, version) => {\n    if (!nickname) return ''\n    else {\n        return (\n            'https://websiter.s3.us-east-2.amazonaws.com/' +\n            nickname +\n            '/avatar?v=' +\n            (version || 0)\n        )\n    }\n}\n","import React, { useState, useEffect } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport Checkbox from 'antd/es/checkbox'\nimport Cookies from 'universal-cookie'\nimport classes from '../../containers/Auth/Auth.module.css'\nimport Modal from 'antd/es/modal'\nimport {\n    FacebookLoginButton,\n    GithubLoginButton,\n    GoogleLoginButton,\n} from 'react-social-login-buttons'\nimport Typography from 'antd/es/typography'\n\nconst cookies = new Cookies()\n\nconst LoginModal = props => {\n    const [state, setState] = useState(false)\n    const [cookieConsent, setCookieConsent] = useState(false)\n\n    useEffect(() => {\n        checkCookieConsent()\n    })\n\n    let remeberMeParam = '?rememberme=false'\n    if (state) {\n        remeberMeParam = '?rememberme=true'\n    }\n\n    let redirectParam = '&redirect=/login'\n    if (props.lastUrl) {\n        redirectParam = '&redirect=' + props.lastUrl\n    }\n\n    const checkCookieConsent = () => {\n        const cookiesConsent = cookies.get('cookies_consent')\n        if (cookiesConsent) {\n            setCookieConsent(true)\n        }\n    }\n\n    const agreeWithCookies = () => {\n        cookies.set('cookies_consent', 'true', {\n            path: '/',\n            maxAge: 31530000,\n        })\n        checkCookieConsent()\n    }\n    const basicURL =\n        process.env.NODE_ENV !== 'development'\n            ? 'https://addspire.com/api/auth/'\n            : 'http://my.websiter.test:5000/api/auth/'\n    return (\n        <Modal\n            visible={props.loginVisible}\n            onOk={() => {}}\n            onCancel={() => props.setLoginVisible(false)}\n            destroyOnClose={true}\n            maskClosable={false}\n            footer={[]}\n            width=\"100%\"\n            style={{ maxWidth: '600px' }}\n        >\n            {!cookieConsent ? (\n                <Modal\n                    title=\"Cookies consent\"\n                    visible={!cookieConsent}\n                    onOk={agreeWithCookies}\n                    onCancel={() => {\n                        window.open('https://addspire.com', '_self')\n                    }}\n                    destroyOnClose={true}\n                    maskClosable={false}\n                    width=\"100%\"\n                    style={{ maxWidth: '600px' }}\n                >\n                    <p style={{ marginBottom: '0.3em' }}>\n                        We use cookies only for login purposes.{' '}\n                    </p>\n                    <p>\n                        In order to proceed you need to agree with the use of\n                        cookies.\n                    </p>\n                </Modal>\n            ) : (\n                <div className=\"contentDiv\">\n                    <div className={classes.Container}>\n                        <h1\n                            style={{\n                                fontWeight: 'bold',\n                                lineHeight: '1.3em',\n                                marginBottom: 0,\n                                fontSize: '2.5em',\n                            }}\n                        >\n                            Welcome to Addspire!\n                        </h1>\n                        <h3>This is where great inspiration lives.</h3>\n                        <div\n                            className={classes.socialButtons}\n                            style={{ marginBottom: '30px' }}\n                        >\n                            <FacebookLoginButton\n                                onClick={() =>\n                                    (window.location =\n                                        basicURL +\n                                        `facebook/start${remeberMeParam}`)\n                                }\n                            />\n                            <GoogleLoginButton\n                                s\n                                onClick={() =>\n                                    (window.location =\n                                        basicURL +\n                                        `google/start${remeberMeParam}`)\n                                }\n                            />\n                            <GithubLoginButton\n                                onClick={() =>\n                                    (window.location =\n                                        basicURL +\n                                        `github/start${remeberMeParam}`)\n                                }\n                            />\n                        </div>\n                        <Checkbox\n                            checked={state}\n                            onChange={() => setState(!state)}\n                        >\n                            <Typography.Link style={{ fontSize: '17px' }}>\n                                Remember me\n                            </Typography.Link>\n                        </Checkbox>\n                    </div>\n                    <div className={classes.Background} />\n                </div>\n            )}\n        </Modal>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        lastUrl: state.lastUrl,\n    }\n}\n\nexport default withRouter(connect(mapStateToProps)(LoginModal))\n","import React, { useState, useEffect } from 'react'\nimport { withRouter } from 'react-router-dom'\n\nimport { connect } from 'react-redux'\nimport Menu from 'antd/es/menu'\nimport Avatar from 'antd/es/avatar'\nimport Drawer from 'antd/es/drawer'\nimport Button from 'antd/es/button'\nimport Badge from 'antd/es/badge'\nimport * as classes from './Layout.module.css'\nimport CoffeeOutlined from '@ant-design/icons/CoffeeOutlined'\nimport LogoutOutlined from '@ant-design/icons/LogoutOutlined'\nimport UserOutlined from '@ant-design/icons/UserOutlined'\nimport HeartFilled from '@ant-design/icons/HeartFilled'\nimport RocketFilled from '@ant-design/icons/RocketFilled'\nimport TeamOutlined from '@ant-design/icons/TeamOutlined'\nimport MenuOutlined from '@ant-design/icons/MenuOutlined'\nimport ShopFilled from '@ant-design/icons/ShopFilled'\nimport HomeFilled from '@ant-design/icons/HomeFilled'\nimport SettingFilled from '@ant-design/icons/SettingFilled'\nimport getAvatar from '../../utils/getAvatar'\nimport LoginModal from './LoginModal'\nimport Spin from 'antd/es/spin'\nimport BackTop from 'antd/es/back-top'\nimport LoadingOutlined from '@ant-design/icons/LoadingOutlined'\nimport UpOutlined from '@ant-design/icons/UpOutlined'\n\nconst AccountLayout = props => {\n    const { account } = props\n    const [menuVisible, setMenuVisible] = useState()\n    const [lastScrollY, setLastScrollY] = useState(0)\n    const [headerVisible, setHeaderVisible] = useState(true)\n    const [loginVisible, setLoginVisible] = useState(false)\n    const [pageAddress, setPageAddress] = useState(\n        props.history.location.pathname\n    )\n\n    useEffect(() => {\n        const handleScroll = () => {\n            const currentScrollY = window.scrollY\n            if (window.scrollY < 100) setHeaderVisible(true)\n            else {\n                if (currentScrollY > lastScrollY) {\n                    setHeaderVisible(false)\n                } else {\n                    setHeaderVisible(true)\n                }\n            }\n            setLastScrollY(currentScrollY)\n        }\n        window.removeEventListener('scroll', handleScroll)\n        window.addEventListener('scroll', handleScroll)\n        if (pageAddress !== props.history.location.pathname) {\n            window.scrollTo({\n                top: 0,\n                left: 0,\n                behavior: 'smooth',\n            })\n            setPageAddress(props.history.location.pathname)\n        }\n        return () => window.removeEventListener('scroll', handleScroll)\n    }, [lastScrollY, props.history.location.pathname])\n    const toggleMenu = () => {\n        setMenuVisible(!menuVisible)\n    }\n    const selectedKey =\n        props.history.location.pathname.split('/')[1] || undefined\n\n    const buttonProps = {\n        type: 'link',\n        // ghost: true,\n        size: 'large',\n\n        className: classes.Button,\n    }\n    const checkHighligh = url =>\n        selectedKey === url\n            ? {\n                  ghost: false,\n                  type: 'link',\n              }\n            : { type: 'text' }\n    const openLink = url => props.history.push('/' + url)\n\n    const isActivating = props.history.location.pathname === '/activate-account'\n\n    let numberOfUnseenNots = 0\n\n    for (let not of props.lastNotifications) {\n        if (parseInt(not.notId) > parseInt(account.lastSeenNot || 0))\n            numberOfUnseenNots++\n    }\n    const logedIn = props.isAuthed && account._id\n    //!['/login', '/logout'].includes(props.history.location.pathname) ? (\n    return (\n        <>\n            <div className={classes.Layout}>\n                <header\n                    className={\n                        headerVisible\n                            ? classes.Header\n                            : [classes.Header, classes.HideHeader].join(' ')\n                    }\n                >\n                    <div className={classes.TopHeader}>\n                        <div className={classes.MenuButtonContiner}>\n                            {logedIn && (\n                                <>\n                                    {!isActivating && (\n                                        <Button\n                                            {...buttonProps}\n                                            icon={<MenuOutlined />}\n                                            onClick={toggleMenu}\n                                        />\n                                    )}\n                                    <div className={classes.PageTitle}>\n                                        {isActivating\n                                            ? 'Activate your account'\n                                            : props.pageTitle.main}\n                                    </div>\n                                </>\n                            )}\n                        </div>\n                        <div className={classes.QuickButtonContiner}>\n                            {logedIn ? (\n                                !isActivating ? (\n                                    <span\n                                        onClick={() => openLink('account')}\n                                        style={{\n                                            margin: '0px 10px',\n                                            cursor: 'pointer',\n                                        }}\n                                    >\n                                        <Avatar\n                                            style={{\n                                                border: '1px solid white',\n                                            }}\n                                            src={getAvatar(\n                                                account._id,\n                                                account.image\n                                            )}\n                                        />\n                                    </span>\n                                ) : (\n                                    <Button\n                                        {...buttonProps}\n                                        {...checkHighligh('friends')}\n                                        icon={<LogoutOutlined />}\n                                        onClick={() =>\n                                            props.history.push('/logout')\n                                        }\n                                    >\n                                        Logout\n                                    </Button>\n                                )\n                            ) : props.isConnectingWS ? (\n                                <>\n                                    <span style={{ marginRight: '30px' }}>\n                                        <Spin\n                                            indicator={\n                                                <LoadingOutlined\n                                                    style={{\n                                                        color: 'white',\n                                                        marginRight: '10px',\n                                                    }}\n                                                />\n                                            }\n                                        />{' '}\n                                        Trying to login\n                                    </span>\n                                    <Button\n                                        {...buttonProps}\n                                        {...checkHighligh('friends')}\n                                        icon={<LogoutOutlined />}\n                                        onClick={() =>\n                                            props.history.push('/logout')\n                                        }\n                                    >\n                                        Logout\n                                    </Button>\n                                </>\n                            ) : (\n                                <Button\n                                    {...buttonProps}\n                                    {...checkHighligh('friends')}\n                                    icon={<LogoutOutlined />}\n                                    onClick={() => setLoginVisible(true)}\n                                >\n                                    Sign in or Sign up\n                                </Button>\n                            )}\n                        </div>\n                    </div>\n                </header>\n                <main className={classes.Main}>{props.children}</main>\n                {!isActivating && logedIn && (\n                    <footer className={classes.Footer}>\n                        <Button\n                            {...buttonProps}\n                            {...checkHighligh('dashboard')}\n                            onClick={() => openLink('dashboard')}\n                        >\n                            <Badge count={numberOfUnseenNots}>\n                                <HomeFilled />{' '}\n                                <div className={classes.FooterButton}>\n                                    Dashboard\n                                </div>\n                            </Badge>\n                        </Button>\n\n                        <Button\n                            {...buttonProps}\n                            {...checkHighligh('inspirations')}\n                            onClick={() => openLink('inspirations')}\n                        >\n                            <Badge count={0}>\n                                <RocketFilled />\n                                <div className={classes.FooterButton}>\n                                    Inspirations\n                                </div>\n                            </Badge>\n                        </Button>\n\n                        <Button\n                            {...buttonProps}\n                            {...checkHighligh('shop')}\n                            onClick={() => openLink('shop')}\n                        >\n                            <Badge count={0}>\n                                <ShopFilled />\n                                <div className={classes.FooterButton}>Shop</div>\n                            </Badge>\n                        </Button>\n\n                        <Button\n                            {...buttonProps}\n                            {...checkHighligh('friends')}\n                            onClick={() => openLink('friends')}\n                        >\n                            <Badge\n                                count={\n                                    account.friends.filter(\n                                        item => item.status === 'inviting'\n                                    ).length\n                                }\n                            >\n                                <TeamOutlined />\n                                <div className={classes.FooterButton}>\n                                    Friends\n                                </div>\n                            </Badge>\n                        </Button>\n                    </footer>\n                )}\n                {!isActivating && logedIn && (\n                    <Drawer\n                        closable={true}\n                        onClose={toggleMenu}\n                        visible={menuVisible}\n                        placement=\"left\"\n                    >\n                        <Menu\n                            theme=\"light\"\n                            mode=\"vertical\"\n                            selectedKeys={[selectedKey || 'main']}\n                            onClick={({ key }) => {\n                                props.history.push('/' + key)\n                                toggleMenu()\n                            }}\n                            overflowedIndicator={<MenuOutlined />}\n                            style={{ marginTop: '30px' }}\n                        >\n                            <Menu.Item key=\"main\" icon={<CoffeeOutlined />}>\n                                Explore\n                            </Menu.Item>\n                            <Menu.Item key=\"dashboard\" icon={<HomeFilled />}>\n                                Dashboard\n                            </Menu.Item>\n                            <Menu.Item\n                                key=\"inspirations\"\n                                icon={<RocketFilled />}\n                            >\n                                Inspirations\n                            </Menu.Item>\n                            <Menu.Item key=\"shop\" icon={<ShopFilled />}>\n                                Shop\n                            </Menu.Item>\n                            <Menu.Item key=\"friends\" icon={<TeamOutlined />}>\n                                Friends\n                            </Menu.Item>\n                            {/* <Menu.Item key=\"goals\" icon={<AimOutlined />}>\n                                Goals\n                            </Menu.Item> */}\n                            <Menu.Item key=\"wishlist\" icon={<HeartFilled />}>\n                                Wishlist\n                            </Menu.Item>\n                            <Menu.Item key=\"account\" icon={<UserOutlined />}>\n                                Account\n                            </Menu.Item>\n                            <Menu.Item key=\"settings\" icon={<SettingFilled />}>\n                                Settings\n                            </Menu.Item>\n                            <Menu.Item key=\"logout\" icon={<LogoutOutlined />}>\n                                Logout\n                            </Menu.Item>\n                        </Menu>\n                    </Drawer>\n                )}\n            </div>\n            <LoginModal\n                loginVisible={loginVisible}\n                setLoginVisible={setLoginVisible}\n            />\n            <BackTop>\n                <div\n                    style={{\n                        height: 40,\n                        width: 40,\n                        lineHeight: '40px',\n                        borderRadius: '100%',\n                        backgroundColor: '#1088e9',\n                        color: '#fff',\n                        textAlign: 'center',\n                        fontSize: 14,\n                    }}\n                >\n                    <UpOutlined />\n                </div>\n            </BackTop>\n        </>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n        pageTitle: state.pageTitle,\n        isAuthed: state.isAuthed,\n        lastNotifications: state.lastNotifications,\n        isConnectingWS: state.isConnectingWS,\n    }\n}\n\nexport default withRouter(connect(mapStateToProps)(AccountLayout))\n","import message from 'antd/es/message'\n\nexport default (res, props) => {\n    if (res.data.logout) props.history.push('/logout')\n    if (res.data.success === false) {\n        if (res.data.errorCode) {\n            switch (res.data.errorCode) {\n                case 'no account':\n                    message.warning('Account is not found. Please login.')\n                    break\n                case 'bad data':\n                    message.error(\n                        'Error. Please try one more time with correct data.'\n                    )\n                    break\n                case 'progress exist':\n                    message.warning('This progress already exists.')\n                    break\n                default:\n                    message.warning(\n                        'Something wrong has happened... Try again!'\n                    )\n                    break\n            }\n        } else {\n            message.error('Something failed')\n        }\n    } else {\n        if (res.data.successCode) {\n            switch (res.data.successCode) {\n                case 'avatar saved':\n                    message.success('The avatar image has been updated.')\n                    break\n                case 'success':\n                    message.success('Success!')\n                    break\n                case 'item saved':\n                    message.success('Item is saved')\n                    break\n                case 'prgress created':\n                    message.success('Progress has started!')\n                    break\n                default:\n                    message.success('Success!')\n                    break\n            }\n        }\n    }\n    if (res.data.status && res.data.status === 'no account')\n        props.history.push('/activate-account')\n}\n","import axios from 'axios'\n\nimport Cookies from 'universal-cookie'\nimport jwt from 'jsonwebtoken'\nimport processRes from '../../utils/processRes'\n\nconst cookies = new Cookies()\n\nexport const tryAuth = (props, forceLogin) => (dispatch: Object) => {\n    sessionStorage.setItem('systemRefresh', '0')\n    const token = cookies.get('auth_token')\n    const rememberMe = cookies.get('rememberme')\n    if (rememberMe) {\n        cookies.remove('rememberme', {\n            path: '/',\n        })\n        if (rememberMe === 'false') {\n            cookies.remove('auth_token', {\n                path: '/',\n            })\n        }\n    }\n    const userId = jwt.decode(token)\n    axios.defaults.headers.post['Content-Type'] = 'application/json'\n    axios.defaults.headers.put['Content-Type'] = 'application/json'\n    axios.defaults.headers.delete['Content-Type'] = 'application/json'\n    axios.defaults.headers.common.Accept = 'application/json'\n    if (token && userId) {\n        axios.defaults.headers.common['x-auth-token'] = token\n        axios.defaults.headers.post['x-auth-token'] = token\n        axios.defaults.headers.get['x-auth-token'] = token\n        axios.defaults.headers.delete['x-auth-token'] = token\n        axios.defaults.headers.put['x-auth-token'] = token\n        dispatch(setIsAuthed(userId._id))\n    } else {\n        dispatch(setIsAuthed(false))\n        dispatch(saveLastUrl(props.history.location.pathname))\n        const pathParts = props.history.location.pathname.split('/')\n        if (\n            pathParts.length === 2 &&\n            !['explore', 'login', 'logintest'].includes(pathParts[1])\n        )\n            props.history.push('/logout')\n\n        if (forceLogin) props.history.push('/logout')\n    }\n}\n\nconst saveLastUrl = url => ({\n    type: 'SAVE_LAST_URL',\n    url,\n})\n\nconst setIsAuthed = id => ({\n    type: 'SET_IS_AUTHED',\n    id,\n})\n\nexport const logout = () => dispatch => {\n    cookies.remove('rememberme', {\n        path: '/',\n    })\n    cookies.remove('auth_token', {\n        path: '/',\n    })\n    delete axios.defaults.headers.common['x-auth-token']\n    delete axios.defaults.headers.post['x-auth-token']\n    delete axios.defaults.headers.get['x-auth-token']\n    delete axios.defaults.headers.delete['x-auth-token']\n    delete axios.defaults.headers.put['x-auth-token']\n    dispatch(setIsAuthed(false))\n}\n\nexport const setData = data => ({\n    type: 'SET_DATA',\n    data,\n})\n\nexport const setConnectingToWS = data => ({\n    type: 'SET_CONNECTING_WS',\n    data,\n})\n\nexport const removeData = data => ({\n    type: 'REMOVE_DATA',\n    data,\n})\n\nexport const setFriendsData = data => ({\n    type: 'SET_FRIENDS_DATA',\n    data,\n})\n\nexport const setAvatarV = v => ({\n    type: 'SET_AVATAR_V',\n    v,\n})\n\nexport const increaseAvatarV = () => ({\n    type: 'INCREASE_AVATAR_V',\n})\n\nexport const setPageTitle = title => ({\n    type: 'SET_PAGE_TITLE',\n    title,\n})\n\nexport const buyPerk = (account, perk, owner, props) => dispatch => {\n    const currency = account.wallet.find(item => item.user === owner._id)\n    if (currency && currency.amount >= perk.price) {\n        axios\n            .post('/api/shop/buy', {\n                perkId: perk.perkId,\n                ownerId: owner._id,\n            })\n            .then(res => {\n                processRes(res)\n                if (res.data.success) {\n                    dispatch(setData(res.data, props.history.location.pathname))\n                }\n            })\n            .catch(err => {})\n    } else {\n        alert(\n            'You cannot buy this item as you do not have enough money from this user.'\n        )\n    }\n}\n\nexport const confirmTransaction = (transactionId, props) => dispatch => {\n    axios\n        .post('/api/shop/confirm', {\n            transactionId,\n        })\n        .then(res => {\n            processRes(res)\n            if (res.data.success) {\n                dispatch(setData(res.data, props.history.location.pathname))\n            }\n        })\n        .catch(err => {})\n}\n\nexport const cancelTransaction = (transactionId, props) => dispatch => {\n    axios\n        .post('/api/shop/cancel', {\n            transactionId,\n        })\n        .then(res => {\n            processRes(res)\n            if (res.data.success) {\n                dispatch(setData(res.data, props.history.location.pathname))\n            }\n        })\n        .catch(err => {})\n}\n\nexport const setFriendSearchResult = data => ({\n    type: 'SET_FRIEND_SEARCH_RESULT',\n    data,\n})\n\nexport const setAccountActivated = value => ({\n    type: 'SET_ACCOUNT_ACTIVATED',\n    value,\n})\n","export default props => {\n    const createEmptyObj = () => ({\n        user: [],\n        account: [],\n        progress: [],\n        post: [],\n        group: [],\n        progressData: [],\n        friendData: [],\n        postData: [],\n        groupData: [],\n        transactionData: [],\n    })\n    const { store } = props\n    const requestedResources = createEmptyObj()\n    const neededResources = createEmptyObj()\n    if (store.isAuthed) {\n        if (!store.user) {\n            requestedResources.user.push(store.isAuthed)\n        } else {\n            neededResources.user.push(store.user._id)\n            if (store.currentAccount) {\n                if (store.account._id !== store.currentAccount) {\n                    requestedResources.account.push(store.currentAccount)\n                } else {\n                    neededResources.account.push(store.account._id)\n                    for (let progress of [\n                        ...store.account.progresses,\n                        ...store.account.followProgresses,\n                    ]) {\n                        if (!store.progressData[progress]) {\n                            requestedResources.progressData.push(progress)\n                        }\n                        neededResources.progressData.push(progress)\n                    }\n                    for (let group of store.account.groups) {\n                        if (!store.groupData[group]) {\n                            requestedResources.groupData.push(group)\n                        }\n                        neededResources.groupData.push(group)\n                    }\n                    for (let post of store.account.followPosts) {\n                        if (!store.postData[post]) {\n                            requestedResources.postData.push(post)\n                        }\n                        neededResources.postData.push(post)\n                    }\n                    for (let post of store.account.myPosts) {\n                        if (!store.postData[post]) {\n                            requestedResources.postData.push(post)\n                        }\n                        neededResources.postData.push(post)\n                    }\n                    for (let transaction of store.account.transactions) {\n                        if (!store.transactionData[transaction]) {\n                            requestedResources.transactionData.push(transaction)\n                        }\n                        neededResources.transactionData.push(transaction)\n                    }\n                    for (let friend of store.account.friends) {\n                        if (!store.friendData[friend.friend]) {\n                            requestedResources.friendData.push(friend.friend)\n                        }\n                        neededResources.friendData.push(friend.friend)\n                    }\n                    for (let item of [\n                        ...store.account.followingAccounts,\n                        ...store.account.followAccounts,\n                    ]) {\n                        if (!store.friendData[item]) {\n                            requestedResources.friendData.push(item)\n                        }\n                        neededResources.friendData.push(item)\n                    }\n                }\n            }\n            if (store.currentProfile) {\n                if (store.profile._id !== store.currentProfile) {\n                    requestedResources.account.push(store.currentProfile)\n                } else {\n                    neededResources.account.push(store.profile._id)\n                    for (let progress of [\n                        ...store.profile.progresses,\n                        ...store.profile.followProgresses,\n                    ]) {\n                        if (!store.progressData[progress]) {\n                            requestedResources.progressData.push(progress)\n                        }\n                        neededResources.progressData.push(progress)\n                    }\n                    for (let group of store.profile.groups) {\n                        if (!store.groupData[group]) {\n                            requestedResources.groupData.push(group)\n                        }\n                        neededResources.groupData.push(group)\n                    }\n                    for (let friend of store.profile.friends) {\n                        if (!store.friendData[friend.friend]) {\n                            requestedResources.friendData.push(friend.friend)\n                        }\n                        neededResources.friendData.push(friend.friend)\n                    }\n                    for (let item of [\n                        ...store.profile.followingAccounts,\n                        ...store.profile.followAccounts,\n                    ]) {\n                        if (!store.friendData[item]) {\n                            requestedResources.friendData.push(item)\n                        }\n                        neededResources.friendData.push(item)\n                    }\n                }\n            }\n            if (store.currentGroup) {\n                if (store.group._id !== store.currentGroup) {\n                    requestedResources.group.push(store.currentGroup)\n                } else {\n                    neededResources.group.push(store.group._id)\n                    for (let user of store.group.users) {\n                        if (!store.friendData[user]) {\n                            requestedResources.friendData.push(user)\n                        }\n                        neededResources.friendData.push(user)\n                    }\n                    for (let progress of store.group.progresses) {\n                        if (!store.progressData[progress]) {\n                            requestedResources.progressData.push(progress)\n                        }\n                        neededResources.progressData.push(progress)\n                    }\n                    for (let post of store.group.posts) {\n                        if (!store.postData[post]) {\n                            requestedResources.postData.push(post)\n                        }\n                        neededResources.postData.push(post)\n                    }\n                }\n            }\n            if (store.currentProgress) {\n                if (store.progress._id !== store.currentProgress) {\n                    requestedResources.progress.push(store.currentProgress)\n                } else {\n                    neededResources.progress.push(store.progress._id)\n                    let participants = []\n                    if (store.progress.owner)\n                        participants.push(store.progress.owner)\n                    if (store.progress.worker)\n                        participants.push(store.progress.worker)\n                    participants = [\n                        ...participants,\n                        ...(store.progress.experts || []),\n                        ...(store.progress.supporters || []),\n                    ]\n                    for (let friend of participants) {\n                        if (!store.friendData[friend]) {\n                            requestedResources.friendData.push(friend)\n                        }\n                        neededResources.friendData.push(friend)\n                    }\n                    for (let post of store.progress.posts) {\n                        if (!store.postData[post]) {\n                            requestedResources.postData.push(post)\n                        }\n                        neededResources.postData.push(post)\n                    }\n                }\n            }\n            if (store.currentPosts) {\n                for (let post of store.currentPosts) {\n                    const postEl = store.post[post]\n                    if (!postEl) {\n                        requestedResources.post.push(post)\n                    } else {\n                        neededResources.post.push(post)\n                        for (let friend of postEl.users) {\n                            if (!store.friendData[friend]) {\n                                requestedResources.friendData.push(friend)\n                            }\n                            neededResources.friendData.push(friend)\n                        }\n                        if (post.parent) {\n                            if (post.parent.parentType === 'progress')\n                                neededResources.progressData.push(\n                                    post.parent.parentId\n                                )\n                            else if (post.parent.parentType === 'group')\n                                neededResources.groupData.push(\n                                    post.parent.parentId\n                                )\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    const reduce = obj => {\n        for (let attr in obj) {\n            if (obj[attr]) {\n                obj[attr] = Array.from(new Set(obj[attr]))\n            }\n        }\n    }\n\n    reduce(neededResources)\n    const notNeededResources = createEmptyObj()\n    notNeededResources.profile = []\n    let notNeededExist\n    const check1 = (key, mode) => {\n        if (\n            store[mode]._id &&\n            !neededResources[key].includes(store[mode]._id)\n        ) {\n            notNeededResources[mode].push(store[mode]._id)\n            notNeededExist = true\n        }\n    }\n    const check2 = key => {\n        for (let attr in store[key]) {\n            if (!neededResources[key].includes(attr)) {\n                notNeededResources[key].push(attr)\n                notNeededExist = true\n            }\n        }\n    }\n    check1('account', 'account')\n    check1('account', 'profile')\n    check1('group', 'group')\n    check1('progress', 'progress')\n    check2('post')\n    check2('friendData')\n    check2('progressData')\n    check2('transactionData')\n    check2('postData')\n    check2('groupData')\n\n    if (notNeededExist) {\n        props.removeData(notNeededResources)\n    }\n\n    reduce(requestedResources)\n\n    return requestedResources\n}\n","import requestResource from './requestResource'\n\nexport default (versions, state, store, webSocket) => {\n    const notNeededResources = {\n        user: [],\n        account: [],\n        progress: [],\n        post: [],\n        group: [],\n        progressData: [],\n        friendData: [],\n        postData: [],\n        groupData: [],\n        transactionData: [],\n    }\n\n    const checkData = key => {\n        for (let attr in versions[key]) {\n            if (typeof versions[key][attr] !== 'undefined') {\n                if (store[key][attr]) {\n                    if (store[key][attr] !== versions[key][attr]) {\n                        requestResource(key, [attr], state)\n                    }\n                } else notNeededResources[key].push(attr)\n            }\n        }\n    }\n\n    const check = key => {\n        for (let attr in versions[key]) {\n            if (typeof versions[key][attr] !== 'undefined') {\n                if (store[key]._id === attr) {\n                    if (store[key].__v !== versions[key][attr]) {\n                        requestResource(key, [attr], state)\n                    }\n                    if (!store[key]._id) notNeededResources[key].push(attr)\n                } else notNeededResources[key].push(attr)\n            }\n        }\n    }\n\n    for (let attr in versions.user) {\n        if (typeof versions.user[attr] !== 'undefined') {\n            if (store.user._id === attr) {\n                if (store.user.__v !== versions.user[attr]) {\n                    requestResource('user', [attr], state)\n                }\n            } else notNeededResources.user.push(attr)\n        }\n    }\n\n    for (let attr in versions.account) {\n        if (typeof versions.account[attr] !== 'undefined') {\n            if (store.account._id === attr) {\n                if (store.account.__v !== versions.account[attr]) {\n                    requestResource('account', [attr], state)\n                }\n            }\n            if (store.profile._id === attr) {\n                if (store.profile.__v !== versions.account[attr]) {\n                    requestResource('account', [attr], state)\n                }\n                if (!store.account._id) notNeededResources.account.push(attr)\n            }\n        }\n        if (store.account._id !== attr && store.profile._id !== attr)\n            notNeededResources.account.push(attr)\n    }\n\n    check('progress')\n    check('group')\n\n    checkData('post')\n    checkData('friendData')\n    checkData('progressData')\n    checkData('postData')\n    checkData('groupData')\n    checkData('transactionData')\n\n    if (\n        notNeededResources.user.length > 0 ||\n        notNeededResources.account.length > 0 ||\n        notNeededResources.progress.length > 0 ||\n        notNeededResources.post.length > 0 ||\n        notNeededResources.group.length > 0 ||\n        notNeededResources.friendData.length > 0 ||\n        notNeededResources.progressData.length > 0 ||\n        notNeededResources.postData.length > 0 ||\n        notNeededResources.groupData.length > 0 ||\n        notNeededResources.transactionData.length > 0\n    ) {\n        return notNeededResources\n    }\n}\n","export default props => {\n    const { store } = props\n    const resources = {\n        user: {},\n        account: {},\n        progress: {},\n        post: {},\n        group: {},\n        transactionData: {},\n        friendData: {},\n        progressData: {},\n        groupData: {},\n        postData: {},\n    }\n\n    if (store.user && store.user._id) {\n        resources.user[store.user._id] = store.user.__v\n    }\n\n    if (store.account._id) {\n        resources.account[store.account._id] = store.account.__v\n    }\n    if (store.profile._id) {\n        resources.account[store.profile._id] = store.profile.__v\n    }\n    if (store.progress._id) {\n        resources.progress[store.progress._id] = store.progress.__v\n    }\n    if (store.group._id) {\n        resources.group[store.group._id] = store.group.__v\n    }\n\n    const addData = key => {\n        for (let item in store[key]) {\n            if (typeof store[key][item] !== 'undefined') {\n                if (store[key][item]._id) {\n                    resources[key][store[key][item]._id] = store[key][item].__v\n                }\n            }\n        }\n    }\n\n    addData('post')\n    addData('friendData')\n    addData('postData')\n    addData('groupData')\n    addData('progressData')\n    addData('TransactionData')\n\n    return resources\n}\n","import React, { Component } from 'react'\nimport axios from 'axios'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport message from 'antd/es/message'\nimport * as wsActions from '../../websocketActions'\nimport cloneDeep from 'lodash.clonedeep'\nimport getListOfNeededResources from './methods/getListOfNeededResources'\nimport compareVersionsAndRerequest from './methods/compareVersionsAndRerequest'\nimport getResourcesToMonitor from './methods/getResourcesToMonitor'\nconst diffpatcher = require('jsondiffpatch/dist/jsondiffpatch.umd.js').create({\n    propertyFilter: (name, context) => name !== 'patch',\n})\n\nexport let webSocket = false\n\nclass ConnectWebsocket extends Component {\n    state = {\n        user: [],\n        account: [],\n        progress: [],\n        post: [],\n        group: [],\n        friendData: [],\n        progressData: [],\n        postData: [],\n        groupData: [],\n        transactionData: [],\n    }\n    start = () => {\n        let url\n        if (process.env.NODE_ENV === 'development') {\n            url = 'ws://my.websiter.test:5000'\n        } else {\n            url = 'wss://addspire.com'\n        }\n        let pingTimeout\n        webSocket = new WebSocket(url)\n\n        const heartbeat = versions => {\n            let notNeededResources\n            if (versions) {\n                notNeededResources = compareVersionsAndRerequest(\n                    versions,\n                    this.state,\n                    this.props.store,\n                    webSocket\n                )\n            }\n            clearTimeout(pingTimeout)\n\n            pingTimeout = setTimeout(() => {\n                webSocket.close()\n            }, 30000 + 1000)\n\n            webSocket.send(\n                JSON.stringify({\n                    messageCode: 'heartbeat',\n                    notNeededResources,\n                    //get back list of online friends\n                })\n            )\n        }\n\n        webSocket.onopen = event => {\n            const resourcesToMonitor = getResourcesToMonitor(this.props)\n            webSocket.send(\n                JSON.stringify({\n                    messageCode: 'auth',\n                    user: axios.defaults.headers.common['x-auth-token'],\n                    resourcesToMonitor,\n                    // progressId: this.props.progress._id,\n                })\n            )\n            this.initializeRequestResources(this.props)\n            heartbeat()\n        }\n\n        webSocket.onmessage = event => {\n            const news = JSON.parse(event.data)\n\n            switch (news.messageCode) {\n                case 'heartbeat':\n                    heartbeat(news.versions)\n                    break\n                case 'logout':\n                    this.props.logout()\n                    this.props.history.push('/logout')\n                    break\n\n                case 'successMessage':\n                    message.success(news.messageText)\n                    break\n                case 'errorMessage':\n                    message.error(news.messageText)\n                    break\n                case 'friendsData':\n                    this.props.setFriendsData(news.friendsData)\n                    break\n                case 'redirectToProgresses':\n                    this.props.history.push('/inspirations')\n                    break\n                case 'addResource':\n                    this.props.saveResource(news.resources, news.type)\n                    break\n                case 'updateResource':\n                    this.props.updateResource(\n                        news.code,\n                        news.id,\n                        news.update,\n                        this.state\n                    )\n                    break\n                case 'friendSearchResult':\n                    this.props.setFriendSearchResult(news.data)\n                    break\n\n                // case 'update':\n                //     let newProgress\n                //     let oldProgress = cloneDeep(this.props.progress)\n                //     if (oldProgress.__v === news.progress.__v - 1) {\n                //         newProgress = diffpatcher.patch(\n                //             oldProgress,\n                //             news.progress.patch\n                //         )\n                //         newProgress.__v = news.progress.__v\n                //         this.props.setData(\n                //             {\n                //                 progress: newProgress,\n                //             },\n                //             this.props.history.location.pathname\n                //         )\n                //     }\n                //     wsActions.getFriendsData(\n                //         newProgress || this.props.progress,\n                //         this.props.account.friends\n                //     )\n                //     break\n                case 'error':\n                    message.error(news.text)\n                    break\n                // case 'notFoundResource':\n                //     this.markNotFoundResource(data)\n                //     break\n                default:\n                    break\n            }\n        }\n        webSocket.onclose = event => {\n            clearTimeout(pingTimeout)\n        }\n    }\n\n    // markNotFoundResource = data => {\n    //     const requestedResources = this.state.requestedResources.filter(\n    //         item => item.id.toString() === data._id.toString()\n    //     )\n    //     this.setState({ requestedResources })\n    // }\n\n    checkInterval = null\n\n    check = () => {\n        if (!webSocket || webSocket.readyState === 3) {\n            clearInterval(this.checkInterval)\n            this.checkInterval = setInterval(this.check, 5000)\n            this.start()\n        }\n    }\n    componentWillMount() {\n        this.checkInterval = setInterval(this.check, 50)\n    }\n\n    reRequestResourcesInterval = null\n    reRequestResources = () => {\n        for (let group of [\n            'user',\n            'account',\n            'progress',\n            'post',\n            'group',\n            'postData',\n            'groupData',\n            'progressData',\n            'friendData',\n            'transactionData',\n        ]) {\n            if (this.state[group].length > 0) {\n                if (webSocket && webSocket.readyState === 1) {\n                    webSocket.send(\n                        JSON.stringify({\n                            messageCode: 'requestResource',\n                            ids: this.state[group],\n                            type: group,\n                        })\n                    )\n                }\n            }\n        }\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.checkInterval)\n        if (webSocket) {\n            webSocket.close()\n        }\n        this.props.setConnectingToWS(false)\n    }\n    componentDidMount() {\n        this.props.setConnectingToWS(true)\n    }\n    componentWillReceiveProps(nextProps) {\n        this.initializeRequestResources(nextProps)\n    }\n\n    initializeRequestResources = nextProps => {\n        const newRequestedResources = getListOfNeededResources(nextProps)\n        for (let group of [\n            'user',\n            'account',\n            'progress',\n            'post',\n            'group',\n            'postData',\n            'groupData',\n            'progressData',\n            'friendData',\n            'transactionData',\n        ]) {\n            if (newRequestedResources[group].length > 0) {\n                if (webSocket && webSocket.readyState === 1) {\n                    webSocket.send(\n                        JSON.stringify({\n                            messageCode: 'requestResource',\n                            ids: newRequestedResources[group].filter(\n                                item => !this.state[group].includes(item)\n                            ),\n                            type: group,\n                        })\n                    )\n                }\n            }\n        }\n        this.setState(() => newRequestedResources)\n        clearInterval(this.reRequestResourcesInterval)\n        this.reRequestResourcesInterval = setInterval(\n            this.reRequestResources,\n            3000\n        )\n    }\n\n    render() {\n        return null\n    }\n}\nconst mapStateToProps = state => {\n    return {\n        store: state,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: (data, pulledFrom) =>\n            dispatch(actions.setData(data, pulledFrom)),\n        removeData: data => dispatch(actions.removeData(data)),\n        saveResource: (data, type) =>\n            dispatch(actions.saveResource(data, type)),\n        setFriendsData: data => dispatch(actions.setFriendsData(data)),\n\n        updateResource: (code, id, update, state) =>\n            dispatch(actions.updateResource(code, id, update, state)),\n        setFriendSearchResult: data =>\n            dispatch(actions.setFriendSearchResult(data)),\n        setConnectingToWS: data => dispatch(actions.setConnectingToWS(data)),\n\n        logout: () => dispatch(actions.logout()),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(ConnectWebsocket)\n)\n","import { setData } from './auth'\n\nexport const saveResource = (data, type) => (dispatch, getState) => {\n    if (data.length > 0) {\n        const state = getState()\n        switch (type) {\n            case 'user':\n                const user = data[0]\n                let currentAccount = user.currentAccount\n                if (!currentAccount) currentAccount = user.myAccount\n                // if(!currentAccount)\n                //activate-account\n                dispatch(setData({ user, currentAccount }))\n                break\n            case 'account':\n                const account = data.find(\n                    item => item._id === state.currentAccount\n                )\n                if (account) {\n                    dispatch(setData({ account }))\n                }\n\n                const profile = data.find(\n                    item => item._id === state.currentProfile\n                )\n                if (profile) {\n                    dispatch(setData({ profile }))\n                }\n\n                break\n            case 'progress':\n                const progress = data.find(\n                    item => item._id === state.currentProgress\n                )\n                if (progress) {\n                    dispatch(setData({ progress }))\n                }\n                break\n            case 'group':\n                const group = data.find(item => item._id === state.currentGroup)\n                if (group) {\n                    dispatch(setData({ group }))\n                }\n                break\n            case 'post':\n                let post = {}\n                for (let item of data) {\n                    post[item._id] = item\n                }\n                dispatch(setData({ post }))\n                break\n            case 'friendData':\n                let friendData = {}\n                for (let item of data) {\n                    friendData[item._id] = item\n                }\n                dispatch(setData({ friendData }))\n                break\n            case 'progressData':\n                let progressData = {}\n                for (let item of data) {\n                    progressData[item._id] = item\n                }\n                dispatch(setData({ progressData }))\n                break\n            case 'transactionData':\n                let transactionData = {}\n                for (let item of data) {\n                    transactionData[item._id] = item\n                }\n                dispatch(setData({ transactionData }))\n                break\n            case 'postData':\n                let postData = {}\n                for (let item of data) {\n                    postData[item._id] = item\n                }\n                dispatch(setData({ postData }))\n                break\n            case 'groupData':\n                let groupData = {}\n                for (let item of data) {\n                    groupData[item._id] = item\n                }\n                dispatch(setData({ groupData }))\n                break\n            default:\n                break\n        }\n    }\n}\n","import { webSocket } from '../ConnectWebsocket'\n\nexport default (type, ids, state) => {\n    const notRequestedIds = ids.filter(id => !state[type].includes(id))\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'requestResource',\n                ids: notRequestedIds,\n                type,\n            })\n        )\n    }\n}\n","import requestResource from '../../containers/ConnectWebsocket/methods/requestResource'\nimport * as actions from './index'\nimport cloneDeep from 'lodash.clonedeep'\n\nconst applyDelta = (source, delta, watchFields) => {\n    // console.log('---------------------------APLY DELTA------------------------')\n    // console.log('----------------source----------------')\n    // console.log(source)\n    // console.log('----------------delta-------------------')\n    // console.log(delta)\n    const result = cloneDeep(source)\n\n    const applyUpdateToPart = (res, del, watchFields) => {\n        const applyWithDot = (res, keys, del) => {\n            if (keys.length > 1) {\n                const key = keys.shift()\n                applyWithDot(res[key], keys, del)\n            } else {\n                if (typeof res === 'array') {\n                    res.push(del)\n                } else {\n                    res[keys[0]] = del\n                }\n            }\n        }\n        for (let attr in del) {\n            const keys = attr.split('.')\n            if (!watchFields || watchFields.includes(keys[0])) {\n                if (typeof del[attr] !== 'undefined') {\n                    applyWithDot(res, keys, del[attr])\n                }\n            }\n        }\n    }\n\n    applyUpdateToPart(result, delta.updatedFields, watchFields)\n\n    const applyDeleteToPart = (result, keys) => {\n        if (keys.length > 1) {\n            const key = keys.shift()\n            applyDeleteToPart(result[key], keys)\n        } else {\n            if (typeof result === 'object') {\n                delete result[keys[0]]\n            } else if (typeof result === 'array') {\n                result.splice(keys[0], 1)\n            }\n        }\n    }\n\n    for (let field of delta.removedFields) {\n        if (field.indexOf('.') > -1) {\n            const keys = field.split('.')\n            if (!watchFields || watchFields.includes(keys[0]))\n                applyDeleteToPart(result, keys)\n        } else {\n            delete result[field]\n        }\n    }\n    return result\n}\n\nexport const updateResource = (code, id, update, parState) => (\n    dispatch,\n    getState\n) => {\n    if (update && id && code) {\n        const state = getState()\n        const check = key => {\n            if (state[key]._id === id) {\n                if (state[key].__v === update.updatedFields.__v - 1) {\n                    const element = applyDelta(state[key], update)\n                    dispatch(actions.setData({ [key]: element }))\n                } else {\n                    if (state[key].id) requestResource(code, [id], parState)\n                }\n            }\n        }\n        const check2 = (key, watchFields) => {\n            let updateData = {\n                [key]: cloneDeep(state[key]),\n            }\n            const friend = updateData[key][id]\n            if (friend) {\n                if (friend.__v === update.updatedFields.__v - 1) {\n                    updateData[key][id] = applyDelta(\n                        friend,\n                        update,\n                        watchFields\n                    )\n                    dispatch(actions.setData(updateData))\n                } else {\n                    requestResource(code, [id], parState)\n                }\n            }\n        }\n        switch (code) {\n            case 'user':\n                check('user')\n                break\n            case 'account':\n                check('account')\n                check('profile')\n                break\n            case 'progress':\n                check('progress')\n                break\n            case 'group':\n                check('group')\n                break\n            case 'post':\n                dispatch(actions.setData(check2(code)))\n                break\n            case 'friendData':\n                dispatch(\n                    actions.setData(\n                        check2(code, ['name', 'image', 'notifications', '__v'])\n                    )\n                )\n                break\n            case 'progressData':\n                dispatch(\n                    actions.setData(\n                        check2(code, [\n                            'owner',\n                            'worker',\n                            'goal',\n                            'notifications',\n                            '__v',\n                        ])\n                    )\n                )\n                break\n            case 'postData':\n                dispatch(\n                    actions.setData(check2(code, ['notifications', '__v']))\n                )\n                break\n            case 'groupData':\n                dispatch(\n                    actions.setData(check2(code, ['notifications', '__v']))\n                )\n                break\n            case 'transactionData':\n                dispatch(actions.setData(check2(code)))\n                break\n            default:\n                break\n        }\n    }\n}\n","import axios from 'axios'\nimport message from 'antd/es/message'\n\nexport const uploadFile = (file, size, filename, callback) => {\n    if (file == null) {\n        return alert('No file selected.')\n    }\n\n    const reader = new FileReader()\n    reader.onload = async event => {\n        resizeImageToSpecificSize(file, { width: size, height: size }, data => {\n            urltoFile(data, '/120').then(function(file) {\n                getSignedRequest(file, filename, callback)\n            })\n        })\n    }\n\n    reader.readAsArrayBuffer(file)\n}\n\nconst urltoFile = (url, filename, mimeType) => {\n    mimeType = mimeType || (url.match(/^data:([^;]+);/) || '')[1]\n    return fetch(url)\n        .then(function(res) {\n            return res.arrayBuffer()\n        })\n        .then(function(buf) {\n            return new File([buf], filename, { type: 'image/jpeg' })\n        })\n}\n\nconst resizeImageToSpecificSize = (file, size, cb) => {\n    if (file) {\n        var reader = new FileReader()\n        reader.onload = function(event) {\n            resizeImageFromSrcToSpecificSize(event.target.result, size, cb)\n        }\n        reader.readAsDataURL(file)\n    }\n}\n\nconst resizeImageFromSrcToSpecificSize = (src, size, cb) => {\n    var data\n    var img = new Image()\n    img.onload = function() {\n        const widthCoef = img.width / size.width\n        const heightCoef = img.height / size.height\n        var oc = document.createElement('canvas'),\n            octx = oc.getContext('2d')\n        oc.width = img.width\n        oc.height = img.height\n        octx.drawImage(img, 0, 0)\n        if (widthCoef > 1 || heightCoef > 1) {\n            if (img.width > img.height) {\n                oc.height = (img.height / img.width) * size.width\n                oc.width = size.width\n            } else {\n                oc.width = (img.width / img.height) * size.width\n                oc.height = size.width\n            }\n        }\n        octx.drawImage(oc, 0, 0, oc.width, oc.height)\n        octx.drawImage(img, 0, 0, oc.width, oc.height)\n        data = oc.toDataURL('image/jpeg', 0.6)\n        cb(data)\n    }\n    img.src = src\n}\n\nconst getSignedRequest = (file, fileName, callback) => {\n    return axios\n        .post('/api/sign-s3', {\n            fileName,\n        })\n        .then(response => {\n            doUploadFile(file, response.data, callback)\n        })\n        .catch(err => {})\n}\n\nconst doUploadFile = (file, data, callback) => {\n    return axios\n        .put(data.signedRequest, file, {\n            headers: {\n                'Content-Type': 'multipart/form-data',\n            },\n        })\n        .then(response => {\n            callback(data.url)\n            message.success('The image has been saved.')\n        })\n        .catch(err => {\n            console.log(err)\n        })\n}\n","export default {\n    name: 200,\n    description: 10000,\n    message: 10000,\n}\n","import fieldLength from './fieldLength'\n\nexport const nicknameRules = [\n    {\n        required: true,\n        message: 'Nickname is too short. Minimal length is 2.',\n        whitespace: true,\n        min: 2,\n    },\n    {\n        message: `Nickname is too long. Miximum length is ${fieldLength.name}.`,\n        whitespace: true,\n        max: fieldLength.name,\n    },\n    {\n        pattern: /^[a-zA-Z0-9_-]*$/,\n        message: \"Nickname should contain only letters, numbers, '-' and '_'.\",\n    },\n]\n\nexport const nameRules = [\n    {\n        required: true,\n        min: 1,\n        whitespace: true,\n        message: 'Name is too short. Minimal length is 1.',\n    },\n    {\n        max: fieldLength.name,\n        message: `Name is too long. Miximum length is ${fieldLength.name}.`,\n    },\n]\n\nexport const accountNameRules = [\n    {\n        required: true,\n        min: 2,\n        whitespace: true,\n        message: 'Name is too short. Minimal length is 2.',\n    },\n    {\n        max: fieldLength.name,\n        message: `Name is too long. Miximum length is ${fieldLength.name}.`,\n    },\n]\n\nexport const descriptionRules = [\n    {\n        max: fieldLength.description,\n        message: `Description is too long. Miximum length is ${\n            fieldLength.description\n        }.`,\n    },\n]\n\nexport const messageRules = [\n    {\n        min: 1,\n        whitespace: true,\n        message: 'Message is too short. Minimal length is 1.',\n    },\n    {\n        max: fieldLength.message,\n        message: `Message is too long. Miximum length is ${\n            fieldLength.message\n        }.`,\n    },\n]\n\nexport const priceRules = [\n    {\n        required: true,\n        message: 'Please input the item price.',\n    },\n]\n","import React, { useState } from 'react'\nimport Modal from 'antd/es/modal'\n\nimport Button from 'antd/es/button'\nimport Input from 'antd/es/input'\nimport InputNumber from 'antd/es/input-number'\nimport Form from 'antd/es/form'\nimport Select from 'antd/es/select'\nimport Upload from 'antd/es/upload'\nimport PlusOutlined from '@ant-design/icons/PlusOutlined'\n\nimport Avatar from 'antd/es/avatar'\nimport Popconfirm from 'antd/es/popconfirm'\nimport {\n    nameRules,\n    descriptionRules,\n    priceRules,\n} from '../../constants/fieldRules'\nimport getAvatar from '../../utils/getAvatar'\n\nconst AddPerkForm = props => {\n    const [previewImage, setPreviewImage] = useState('')\n    const {\n        connections,\n        perkId,\n        perk,\n        deletePerk,\n        onFinish,\n        images,\n        setImages,\n        uploadImage,\n    } = props\n\n    const layout = {\n        labelCol: { span: 8 },\n        wrapperCol: { span: 16 },\n    }\n    const tailLayout = {\n        wrapperCol: { offset: 8, span: 16 },\n    }\n\n    const connectionsSelect = (\n        <Select\n            mode=\"multiple\"\n            style={{ width: '100%' }}\n            placeholder=\"Please select\"\n            getPopupContainer={trigger => trigger.parentNode}\n        >\n            {connections.map(item => (\n                <Select.Option key={item._id}>\n                    <Avatar\n                        src={getAvatar(item._id, item.image)}\n                        size={20}\n                        style={{ marginRight: '10px' }}\n                    />\n                    {item.name} - ({item._id})\n                </Select.Option>\n            ))}\n        </Select>\n    )\n    const [form] = Form.useForm()\n\n    const normFile = e => {\n        if (Array.isArray(e)) {\n            return e\n        }\n        return e && e.fileList.map(image => image.url)\n    }\n\n    return !props.perkId || perk ? (\n        <>\n            <Form\n                form={form}\n                name=\"dynamic_form_nest_item\"\n                onFinish={onFinish}\n                autoComplete=\"off\"\n                initialValues={perk || {}}\n                {...layout}\n            >\n                <Form.Item\n                    name=\"images\"\n                    label=\"Images\"\n                    valuePropName=\"images\"\n                    getValueFromEvent={normFile}\n                >\n                    <Upload\n                        listType=\"picture-card\"\n                        fileList={images.map((image, index) => ({\n                            ...image,\n                            uid: index,\n                        }))}\n                        onPreview={file => {\n                            setPreviewImage(file.url)\n                        }}\n                        onChange={({ fileList }) => setImages(fileList)}\n                        customRequest={({ file }) => {\n                            uploadImage(file)\n                        }}\n                    >\n                        {images.length >= 8 ? null : (\n                            <div>\n                                <PlusOutlined />\n                                <div className=\"ant-upload-text\">Upload</div>\n                            </div>\n                        )}\n                    </Upload>\n                </Form.Item>\n                <Form.Item label=\"Name\" name=\"name\" rules={nameRules}>\n                    <Input placeholder=\"New item\" />\n                </Form.Item>\n                <Form.Item\n                    label=\"Description\"\n                    name=\"description\"\n                    rules={descriptionRules}\n                >\n                    <Input.TextArea placeholder=\"Write a few words about this item.\" />\n                </Form.Item>\n\n                {props.mode === 'shop' && (\n                    <Form.Item label=\"Available for\" name=\"users\">\n                        {connectionsSelect}\n                    </Form.Item>\n                )}\n\n                {props.mode === 'shop' && (\n                    <Form.Item label=\"Price\" name=\"price\" rules={priceRules}>\n                        <InputNumber />\n                    </Form.Item>\n                )}\n\n                <Form.Item {...tailLayout}>\n                    <Button type=\"primary\" htmlType=\"submit\" size=\"large\">\n                        Save\n                    </Button>\n\n                    {perkId && (\n                        <Popconfirm\n                            title=\"Are you sure you want to delete this item?\"\n                            onConfirm={deletePerk}\n                            onCancel={() => {}}\n                            okText=\"Confirm\"\n                            cancelText=\"Cancel\"\n                        >\n                            <Button type=\"link\" danger size=\"large\">\n                                Delete\n                            </Button>\n                        </Popconfirm>\n                    )}\n                </Form.Item>\n            </Form>\n            <Modal\n                visible={previewImage}\n                footer={null}\n                onCancel={() => setPreviewImage('')}\n            >\n                <img\n                    alt=\"example\"\n                    style={{ width: '100%' }}\n                    src={previewImage}\n                />\n            </Modal>\n        </>\n    ) : null\n}\n\nexport default AddPerkForm\n","import { webSocket } from '../containers/ConnectWebsocket/ConnectWebsocket'\n\nexport const sendMessage = (\n    accountId,\n    postId,\n    messageValue,\n    image,\n    replyToMessage,\n    editedMessage\n) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'sendMessage',\n                messageValue,\n                image,\n                postId,\n                accountId,\n                replyToMessage,\n                editedMessage,\n            })\n        )\n    }\n}\n\nexport const changeLikesMessage = (\n    messageCode,\n    messageId,\n    accountId,\n    postId\n) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode,\n                messageId,\n                accountId,\n                postId,\n            })\n        )\n    }\n}\n\nexport const addPost = (\n    accountId,\n    parentId,\n    parentType,\n    messageValue,\n    images\n) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'addPost',\n                accountId,\n                parentId,\n                parentType,\n                messageValue,\n                images,\n            })\n        )\n    }\n}\n","import { webSocket } from '../containers/ConnectWebsocket/ConnectWebsocket'\n\nexport const deleteAccount = id => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'deleteAccount',\n                accountId: id,\n            })\n        )\n    }\n}\n\nexport const editAccount = (value, id) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'editAccount',\n                name: value.name,\n                accountId: id,\n            })\n        )\n    }\n}\n\nexport const followProgress = (accountId, progressId) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'followProgress',\n                accountId,\n                progressId,\n            })\n        )\n    }\n}\nexport const unfollowProgress = (accountId, progressId) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'unfollowProgress',\n                accountId,\n                progressId,\n            })\n        )\n    }\n}\n\nexport const followAccount = (accountId, accountFollow) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'followAccount',\n                accountId,\n                accountFollow,\n            })\n        )\n    }\n}\nexport const unfollowAccount = (accountId, accountFollow) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'unfollowAccount',\n                accountId,\n                accountFollow,\n            })\n        )\n    }\n}\n","import { webSocket } from '../containers/ConnectWebsocket/ConnectWebsocket'\n\nexport const savePerk = (accountId, id, value, mode) => {\n    if (accountId && webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode:\n                    mode === 'wishlist'\n                        ? 'saveWishlistItem'\n                        : mode === 'goals'\n                        ? 'saveGoal'\n                        : 'savePerk',\n                id,\n                value,\n                accountId,\n            })\n        )\n    }\n}\n\nexport const deletePerk = (accountId, id, mode) => {\n    if (accountId && id && webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode:\n                    mode === 'wishlist'\n                        ? 'deleteWishlistItem'\n                        : mode === 'goals'\n                        ? 'deleteGoal'\n                        : 'deletePerk',\n                id,\n                accountId,\n            })\n        )\n    }\n}\n\nexport const buyPerk = (buyer, seller, perkId) => {\n    if (perkId && buyer && seller && webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'buyPerk',\n                perkId,\n                buyer,\n                seller,\n            })\n        )\n    }\n}\n","import { webSocket } from '../containers/ConnectWebsocket/ConnectWebsocket'\n\nexport const searchFriends = search => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'searchFriends',\n                search,\n            })\n        )\n    }\n}\n\nexport const addFriend = (accountId, friendId) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'addFriend',\n                accountId,\n                friendId,\n            })\n        )\n    }\n}\n\nexport const acceptFriend = (accountId, friendId) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'acceptFriend',\n                accountId,\n                friendId,\n            })\n        )\n    }\n}\n\nexport const unfriend = (accountId, friendId) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'unfriend',\n                accountId,\n                friendId,\n            })\n        )\n    }\n}\n","import React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { uploadFile } from '../../utils/uploadFile'\nimport AddPerkForm from './AddPerkForm'\nimport { withRouter } from 'react-router-dom'\nimport * as wsActions from '../../websocketActions'\n\nconst AddPerk = props => {\n    const [perk, setPerk] = useState()\n    const [images, setImages] = useState([])\n    const { account, mode } = props\n    const perkId = props.perkId || ''\n    useEffect(() => {\n        if (perkId) {\n            const perk =\n                mode === 'wishlist'\n                    ? account.wishlist.find(item => item.itemId === perkId)\n                    : mode === 'goals'\n                    ? account.goals.find(item => item.goalId === perkId)\n                    : account.perks.find(item => item.perkId === perkId)\n            if (perk) {\n                setPerk(perk)\n                setImages(\n                    perk.images.map((url, index) => ({\n                        url,\n                        uid: index,\n                    }))\n                )\n            }\n        }\n    }, [])\n\n    const connections = [\n        account,\n        ...account.friends\n            .filter(friend => friend.status === 'friend')\n            .map(friend => props.friendData[friend.friend]),\n    ]\n\n    const uploadImage = file => {\n        uploadFile(file, 800, undefined, url => {\n            setImages(\n                [...images, { url }].map((image, index) => ({\n                    ...image,\n                    uid: index,\n                }))\n            )\n        })\n    }\n\n    return !props.perkId || perk ? (\n        <AddPerkForm\n            connections={connections}\n            perkId={perkId}\n            perk={perk}\n            deletePerk={() => {\n                wsActions.deletePerk(account._id, perkId, mode)\n                props.setEditPerkOpen(false)\n            }}\n            onFinish={value => {\n                const processedValue = {\n                    ...value,\n                    images: images.map(image => image.url),\n                }\n                wsActions.savePerk(account._id, perkId, processedValue, mode)\n                props.setEditPerkOpen(false)\n            }}\n            images={images}\n            setImages={setImages}\n            uploadImage={uploadImage}\n            mode={props.mode}\n        />\n    ) : null\n}\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n        friendData: state.friendData,\n    }\n}\nexport default withRouter(connect(mapStateToProps)(AddPerk))\n","import React from 'react'\nimport { withRouter } from 'react-router-dom'\n\nexport default withRouter(props => (\n    <div\n        onClick={() => props.history.push(props.onClickLink)}\n        style={{ cursor: 'pointer' }}\n    >\n        {props.images && props.images.length > 0 && (\n            <img\n                style={{\n                    maxWidth: '100%',\n                    margin: 'auto',\n                    display: 'block',\n                    borderRadius: '15px',\n                }}\n                src={props.images.length > 0 ? props.images[0] : ''}\n            />\n        )}\n        <div style={{ padding: '5px 0px', wordBreak: 'break-word' }}>\n            {props.actions && (\n                <div style={{ float: 'right' }}>{props.actions}</div>\n            )}\n            <span style={{ float: 'none' }}>{props.body}</span>\n        </div>\n    </div>\n))\n","import React from 'react'\n\nexport default props => (\n    <svg\n        viewBox=\"0 0 24 24\"\n        width=\"18\"\n        height=\"18\"\n        style={{ transform: 'rotate(90deg)', display: 'block' }}\n    >\n        <path d=\"M2 10h4v4H2v-4zm8 4h4v-4h-4v4zm8-4v4h4v-4h-4z\" />\n    </svg>\n)\n","import React from 'react'\nimport { withRouter } from 'react-router-dom'\n\nimport * as wsActions from '../../websocketActions'\nimport Dropdown from 'antd/es/dropdown'\nimport Menu from 'antd/es/menu'\nimport Button from 'antd/es/button'\nimport MasonryCard from '../../components/MasonryCard'\nimport EditFilled from '@ant-design/icons/EditFilled'\nimport Card from 'antd/es/card'\nimport MoreIcon from '../../components/UI/MoreIcon'\n\nconst PerkCard = props => {\n    const {\n        perk,\n        perkId,\n        owner,\n        account,\n        setEditedPerk,\n        setEditPerkOpen,\n        mode,\n    } = props\n\n    return (\n        <MasonryCard\n            onClickLink={`/${mode || 'shop'}/${owner._id}/${perkId}`}\n            images={perk.images}\n            actions={\n                <span onClick={e => e.stopPropagation()}>\n                    {owner._id === account._id &&\n                    !props.onlyBuy &&\n                    props.mode === 'shop' ? (\n                        <Dropdown.Button\n                            type=\"primary\"\n                            key=\"1\"\n                            onClick={() =>\n                                wsActions.buyPerk(\n                                    account._id,\n                                    owner._id,\n                                    perkId\n                                )\n                            }\n                            overlay={\n                                <Menu>\n                                    <Menu.Item\n                                        key=\"0\"\n                                        onClick={() => {\n                                            setEditedPerk(perkId)\n                                            setEditPerkOpen(true)\n                                        }}\n                                    >\n                                        Edit\n                                    </Menu.Item>\n                                </Menu>\n                            }\n                        >\n                            Buy\n                        </Dropdown.Button>\n                    ) : props.mode === 'shop' ? (\n                        <Button\n                            type=\"primary\"\n                            onClick={() =>\n                                wsActions.buyPerk(\n                                    account._id,\n                                    owner._id,\n                                    perkId\n                                )\n                            }\n                        >\n                            Buy\n                        </Button>\n                    ) : owner._id === account._id && !props.onlyBuy ? (\n                        <Dropdown\n                            trigger={['click', 'hover']}\n                            overlay={\n                                <Menu>\n                                    <Menu.Item\n                                        key=\"0\"\n                                        onClick={() => {\n                                            setEditedPerk(perkId)\n                                            setEditPerkOpen(true)\n                                        }}\n                                    >\n                                        Edit\n                                    </Menu.Item>\n                                </Menu>\n                            }\n                        >\n                            <Button type=\"link\">\n                                <MoreIcon />\n                            </Button>\n                        </Dropdown>\n                    ) : null}\n                </span>\n            }\n            body={\n                <span style={{ fontWeight: 'bold' }}>\n                    {perk.name}\n                    {mode === 'shop' && ` ($${perk.price})`}\n                </span>\n            }\n        />\n    )\n}\n\nexport default withRouter(PerkCard)\n","import React from 'react'\nimport Button from 'antd/es/button'\nimport { PlusOutlined } from '@ant-design/icons'\n\nconst AddCard = props => (\n    <Button\n        onClick={props.action}\n        type=\"primary\"\n        shape=\"round\"\n        icon={<PlusOutlined />}\n        size=\"large\"\n    >\n        {props.title}\n    </Button>\n)\n\nexport default AddCard\n","export const friendsBreakPoints = {\n    default: 4,\n    1600: 3,\n    1100: 2,\n    600: 1,\n}\n\nexport const cardBreakPoints = {\n    default: 4,\n    1100: 3,\n    700: 2,\n    350: 1,\n}\n","import React from 'react'\nimport Masonry from 'react-masonry-css'\nimport {\n    cardBreakPoints,\n    friendsBreakPoints,\n} from '../utils/masonryBreakPoints'\n\nexport default props => (\n    <div style={{ marginTop: '40px', ...props.style }}>\n        <Masonry\n            breakpointCols={3}\n            className=\"my-masonry-grid\"\n            columnClassName=\"my-masonry-grid_column\"\n            breakpointCols={\n                props.friends ? friendsBreakPoints : cardBreakPoints\n            }\n        >\n            {props.children}\n        </Masonry>\n    </div>\n)\n","import React, { useState } from 'react'\nimport Modal from 'antd/es/modal'\nimport Button from 'antd/es/button'\nimport AddPerk from './AddPerk'\nimport PerkCard from './PerkCard'\nimport AddCard from '../../components/AddCard/AddCard'\nimport { cardBreakPoints } from '../../utils/masonryBreakPoints'\nimport Masonry from 'react-masonry-css'\nimport MasonryGrid from '../../components/MasonryGrid'\nimport MasonryCard from '../../components/MasonryCard'\n\nconst WishlistAndPerks = props => {\n    const [editedPerk, setEditedPerk] = useState('')\n    const [editPerkOpen, setEditPerkOpen] = useState()\n\n    const { account } = props\n\n    const editPerk = (\n        <Modal\n            title=\"Add item\"\n            visible={editPerkOpen}\n            maskClosable\n            closable\n            onCancel={() => setEditPerkOpen(false)}\n            width=\"90%\"\n            footer={\n                <Button key=\"back\" onClick={() => setEditPerkOpen(false)}>\n                    Close\n                </Button>\n            }\n            destroyOnClose={true}\n        >\n            <AddPerk\n                setEditPerkOpen={setEditPerkOpen}\n                perkId={editedPerk}\n                mode={props.mode}\n            />\n        </Modal>\n    )\n\n    return account._id ? (\n        <>\n            <AddCard\n                action={() => {\n                    setEditedPerk('')\n                    setEditPerkOpen(true)\n                }}\n                title=\"Add item\"\n                sub={props.mode === 'shop' && 'Set price'}\n            />\n            <MasonryGrid>\n                {account[props.listKey || props.mode] &&\n                    account[props.listKey || props.mode].map((perk, index) => (\n                        <PerkCard\n                            key={index}\n                            perk={perk}\n                            perkId={\n                                props.mode === 'wishlist' ||\n                                props.mode === 'goals'\n                                    ? perk.itemId\n                                    : perk.perkId\n                            }\n                            owner={account}\n                            account={account}\n                            setEditedPerk={setEditedPerk}\n                            setEditPerkOpen={setEditPerkOpen}\n                            mode={props.mode}\n                            style={{ cursor: 'pointer' }}\n                        />\n                    ))}\n            </MasonryGrid>\n\n            {editPerk}\n        </>\n    ) : null\n}\n\nexport default WishlistAndPerks\n","import React, { useEffect } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport WishlistAndPerks from '../Shop/WishlistAndPerks'\n\nconst Goals = props => {\n    useEffect(() => {\n        props.setPageTitle({ main: 'Goals', sub: '' })\n    }, [])\n\n    return props.account._id ? (\n        <WishlistAndPerks mode=\"goals\" account={props.account} />\n    ) : (\n        <span />\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Goals)\n)\n","import axios from 'axios'\nimport processRes from './processRes'\nexport default (props, data, setData, options, callback) => {\n    // if (typeof props.isAuthed === 'undefined') return\n    // options = {\n    //     forceAuth: true,\n    //     forceActivate: true,\n    //     pullData: true,\n    //     ...(options || {}),\n    // }\n\n    // if (!props.isAuthed) {\n    //     props.tryAuth(props, options.forceAuth)\n    // }\n\n    // if (options.pullData) {\n    axios\n        .get('/api' + props.history.location.pathname)\n        .then(res => {\n            processRes(res, props)\n            // if (options.forceActivate) {\n            //     if (props.isAuthed && res.data.status === 'no account') {\n            //         props.history.push('/activate-account')\n            //     }\n            // }\n\n            setData(res.data)\n            callback(res.data)\n        })\n        .catch(err => {})\n    // }\n}\n","import React, { useState, useEffect } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport Button from 'antd/es/button'\nimport Comment from 'antd/es/comment'\nimport Avatar from 'antd/es/avatar'\nimport Input from 'antd/es/input'\nimport Form from 'antd/es/form'\nimport Upload from 'antd/es/upload'\nimport PictureFilled from '@ant-design/icons/PictureFilled'\nimport LoadingOutlined from '@ant-design/icons/LoadingOutlined'\nimport CloseCircleFilled from '@ant-design/icons/CloseCircleFilled'\nimport SendOutlined from '@ant-design/icons/SendOutlined'\nimport { uploadFile } from '../../utils/uploadFile'\nimport * as wsActions from '../../websocketActions'\nimport getAvatar from '../../utils/getAvatar'\nimport { messageRules } from '../../constants/fieldRules'\nimport { PlusOutlined } from '@ant-design/icons'\nimport message from 'antd/es/message'\nimport Modal from 'antd/es/modal/Modal'\n\nconst AddMessage = props => {\n    const [previewImage, setPreviewImage] = useState('')\n    const [imageLoading, setImageLoading] = useState(false)\n    const [images, setImages] = useState(props.images || [])\n    const { post, account } = props\n\n    const [messageText, setMessageText] = useState(\n        props.content ||\n            (props.replyToUser ? '@' + props.replyToUser + ' ' : '')\n    )\n\n    useEffect(() => {\n        setMessageText(\n            props.content ||\n                (props.replyToUser ? '@' + props.replyToUser + ' ' : '')\n        )\n    }, [props.replyToUser, props.content])\n\n    const uploadImage = file => {\n        uploadFile(file, 800, undefined, url => {\n            setImages([...images, url])\n        })\n    }\n\n    return post && account._id ? (\n        <div\n            style={{\n                background: '#fff',\n\n                ...(props.replyTo\n                    ? {}\n                    : {\n                          width: '100%',\n                          bottom: '-200px',\n                          left: '0px',\n                          //   position: 'absolute',\n                      }),\n            }}\n        >\n            <Comment\n                avatar={<Avatar src={getAvatar(account._id, account.image)} />}\n                content={\n                    <>\n                        <Form.Item rules={messageRules} style={{ margin: 0 }}>\n                            <Input.TextArea\n                                autoSize={{\n                                    minRows: 1,\n                                    maxRows: 3,\n                                }}\n                                rows={1}\n                                onChange={e => setMessageText(e.target.value)}\n                                value={messageText}\n                                placeholder=\"Write a comment\"\n                            />\n                        </Form.Item>\n                        {images.length > 0 && (\n                            <Form.Item style={{ margin: 0 }}>\n                                <Upload\n                                    listType=\"picture-card\"\n                                    fileList={images.map((image, index) => ({\n                                        url: image,\n                                        uid: index,\n                                    }))}\n                                    onPreview={file => {\n                                        setPreviewImage(file.url)\n                                    }}\n                                    onChange={({ fileList }) =>\n                                        setImages(\n                                            fileList.map(image => image.url)\n                                        )\n                                    }\n                                    customRequest={({ file }) => {\n                                        uploadImage(file)\n                                    }}\n                                >\n                                    {images.length >= 8 ? null : (\n                                        <div>\n                                            <PlusOutlined />\n                                            <div className=\"ant-upload-text\">\n                                                Upload\n                                            </div>\n                                        </div>\n                                    )}\n                                </Upload>\n                            </Form.Item>\n                        )}\n                        <Form.Item style={{ margin: 0 }}>\n                            <Button\n                                htmlType=\"submit\"\n                                onClick={() => {\n                                    wsActions.sendMessage(\n                                        account._id,\n                                        post._id,\n                                        messageText,\n                                        images,\n                                        props.replyTo,\n                                        props.editingMessage\n                                    )\n                                    setMessageText('')\n                                    setImages([])\n                                    if (props.onSend) props.onSend()\n                                }}\n                                icon={<SendOutlined />}\n                                type=\"text\"\n                            >\n                                Send\n                            </Button>\n                            <Upload\n                                showUploadList={false}\n                                customRequest={({ file }) => {\n                                    if (images.length > 8) {\n                                        message.warning(\n                                            'You can not attach more than 8 images.'\n                                        )\n                                        return\n                                    }\n                                    setImageLoading(true)\n                                    uploadFile(file, 800, undefined, url => {\n                                        setImageLoading(false)\n                                        setImages([...images, url])\n                                    })\n                                }}\n                            >\n                                <Button\n                                    type=\"text\"\n                                    icon={\n                                        imageLoading ? (\n                                            <LoadingOutlined />\n                                        ) : (\n                                            <PictureFilled />\n                                        )\n                                    }\n                                >\n                                    Image\n                                </Button>\n                            </Upload>\n                            {props.cancel && (\n                                <Button\n                                    onClick={props.cancel}\n                                    icon={<CloseCircleFilled />}\n                                    type=\"text\"\n                                >\n                                    Cancel\n                                </Button>\n                            )}\n                        </Form.Item>\n                    </>\n                }\n            />\n            <Modal\n                visible={previewImage}\n                footer={null}\n                onCancel={() => setPreviewImage('')}\n            >\n                <img\n                    alt=\"example\"\n                    style={{ width: '100%' }}\n                    src={previewImage}\n                />\n            </Modal>\n        </div>\n    ) : null\n}\n\nexport default withRouter(AddMessage)\n","import React from 'react'\nimport Carousel from 'antd/es/carousel'\nimport classes from './imageCarousel.module.css'\n\nconst ImageCarousel = props =>\n    props.images && props.images.length > 0 ? (\n        <Carousel\n            style={{ width: props.size || 'auto' }}\n            dots={{ className: classes.Dots }}\n        >\n            {props.images.map(\n                (image, index) =>\n                    image && (\n                        <div key={index}>\n                            <div\n                                style={{\n                                    backgroundImage: 'url(\"' + image + '\")',\n                                    backgroundSize: props.type || 'contain',\n                                    backgroundPosition: 'center',\n                                    width: props.size || '100%',\n                                    height:\n                                        props.height || props.size || '300px',\n                                    backgroundRepeat: 'no-repeat',\n                                }}\n                            />\n                        </div>\n                    )\n            )}\n        </Carousel>\n    ) : null\n\nexport default ImageCarousel\n","import React from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\n\nimport Button from 'antd/es/button'\nimport Avatar from 'antd/es/avatar'\nimport getAvatar from '../../utils/getAvatar'\nimport Typography from 'antd/es/typography'\n\nconst UserButton = props => {\n    const { account, profile, id, friendSearchResult } = props\n    const friendData = props.friendDataExp || props.friendData\n    const getUserData = id =>\n        id === account._id\n            ? account\n            : id === profile._id\n            ? profile\n            : id === friendSearchResult._id\n            ? friendSearchResult\n            : friendData[id]\n    const userName = id => (getUserData(id) ? getUserData(id).name : id)\n    const userAvatar = id =>\n        getUserData(id) ? (\n            <span\n                key={id}\n                onClick={() => {\n                    if (!props.noClick) handleClick(id)\n                }}\n            >\n                <Avatar\n                    src={getAvatar(id, getUserData(id).image)}\n                    size={props.size || (props.noClick ? 20 : 40)}\n                    style={props.group ? {} : { margin: ' 0 5px' }}\n                />\n            </span>\n        ) : null\n\n    const handleClick = id => props.history.push('/profile/' + (id || props.id))\n    return props.group ? (\n        <span onClick={e => e.stopPropagation()}>\n            <Avatar.Group style={{ margin: ' 0 5px' }}>\n                {props.ids.map(id => userAvatar(id))}\n            </Avatar.Group>\n        </span>\n    ) : props.noClick ? (\n        <>\n            {!props.noAva && userAvatar(id)}\n            {!props.noName && userName(id)}\n        </>\n    ) : props.span ? (\n        <span\n            style={{ cursor: 'pointer', fontWeight: 'bold', ...props.style }}\n            onClick={e => {\n                e.stopPropagation()\n                handleClick()\n            }}\n        >\n            {!props.noAva && userAvatar(id)}\n            {!props.noName && userName(id)}\n        </span>\n    ) : (\n        <Button\n            type=\"link\"\n            style={{ padding: '0px 5px', height: 'auto', ...props.style }}\n            onClick={e => {\n                e.stopPropagation()\n                handleClick()\n            }}\n        >\n            {!props.noAva && userAvatar(id)}\n\n            {!props.noName && userName(id)}\n        </Button>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        account: state.account,\n        profile: state.profile,\n        friendData: state.friendData,\n        friendSearchResult: state.friendSearchResult,\n    }\n}\n\nexport default withRouter(connect(mapStateToProps)(UserButton))\n","import React, { useState } from 'react'\nimport { withRouter } from 'react-router-dom'\n\nimport Comment from 'antd/es/comment'\n\nimport Tooltip from 'antd/es/tooltip'\nimport Avatar from 'antd/es/avatar'\nimport TimeAgo from 'timeago-react'\n\nimport * as wsActions from '../../websocketActions'\nimport LikeFilled from '@ant-design/icons/LikeFilled'\nimport LikeOutlined from '@ant-design/icons/LikeOutlined'\nimport AddMessage from './AddMessage'\nimport getAvatar from '../../utils/getAvatar'\nimport Button from 'antd/es/button'\nimport ImageCarousel from '../UI/ImageCarousel/ImageCarousel'\nimport UserButton from '../UserButton/UserButton'\n\nconst Message = props => {\n    const {\n        account,\n        state,\n        setState,\n        message,\n        friendData,\n        progressData,\n        groupData,\n        post,\n        replies,\n        isStart,\n    } = props\n    const [replyVisible, setReplyVisible] = useState(false)\n    const [replyToUser, setReplyToUser] = useState('')\n    const [editingMessage, setEditingMessage] = useState('')\n    const [showReplies, setShowReplies] = useState(false)\n    const commentProps = {\n        actions: !props.isStart && [\n            <span>\n                <TimeAgo datetime={message.date} live />\n            </span>,\n            <span key=\"comment-basic-like\">\n                <Tooltip title=\"Like\">\n                    {message.likes.includes(account._id) ? (\n                        <LikeFilled\n                            onClick={() =>\n                                wsActions.changeLikesMessage(\n                                    'dislikeMessage',\n                                    message.messageId,\n                                    account._id,\n                                    post._id\n                                )\n                            }\n                        />\n                    ) : (\n                        <LikeOutlined\n                            onClick={() =>\n                                wsActions.changeLikesMessage(\n                                    'likeMessage',\n                                    message.messageId,\n                                    account._id,\n                                    post._id\n                                )\n                            }\n                        />\n                    )}\n                </Tooltip>\n                <span style={{ paddingLeft: '8px' }}>\n                    {message.likes.length}\n                </span>\n            </span>,\n\n            message.author !== account._id && (\n                <span\n                    key=\"comment-basic-reply-to\"\n                    onClick={() => {\n                        if (props.setReplyVisible) {\n                            props.setReplyVisible(true)\n                            props.setReplyToUser(props.message.author)\n                        } else {\n                            setReplyVisible(true)\n                            setReplyToUser('')\n                        }\n                        setShowReplies(true)\n                    }}\n                >\n                    Reply\n                </span>\n            ),\n            message.author === account._id && (\n                <span\n                    key=\"comment-basic-reply-to\"\n                    onClick={() => setEditingMessage(message.messageId)}\n                >\n                    Edit\n                </span>\n            ),\n        ],\n        avatar: <UserButton noName={true} id={message.author} span={true} />,\n        content: isStart ? (\n            <>\n                {message.messageType === 'wishlist' && (\n                    <>\n                        {' '}\n                        <span\n                            style={{\n                                fontWeight: 'bold',\n                                cursor: 'pointer',\n                                margin: '10px 0px 0px ',\n                            }}\n                            onClick={() =>\n                                props.history.push(\n                                    `/wishlist/${message.details.owner}/${\n                                        message.details.itemId\n                                    }`\n                                )\n                            }\n                        >\n                            {message.details.name}\n                        </span>\n                    </>\n                )}\n                {message.text && <p>{message.text}</p>}\n            </>\n        ) : (\n            <>\n                <div\n                    style={{\n                        background: '#eee',\n                        borderRadius: '5px',\n                        padding: '3px 10px',\n                        display:\n                            message.image && message.image.length > 0\n                                ? 'block'\n                                : 'inline-block',\n                    }}\n                >\n                    <UserButton\n                        id={message.author}\n                        span={true}\n                        noAva={true}\n                        style={{ fontWeight: 'bold' }}\n                    />\n\n                    {message.image && message.image.length > 0 && (\n                        <ImageCarousel\n                            images={message.image}\n                            height=\"60vmin\"\n                            type=\"contain\"\n                        />\n                    )}\n\n                    {message.text && <p>{message.text}</p>}\n                </div>\n                <div />\n            </>\n        ),\n        author: isStart && (\n            <span\n                style={{ color: '#333', fontWeight: 'bold', fontSize: '14px' }}\n            >\n                <UserButton id={message.author} span={true} noAva={true} />{' '}\n                <span style={{ fontWeight: 'normal' }}>in</span>{' '}\n                {post.parent &&\n                    progressData &&\n                    progressData[post.parent.parentId] && (\n                        <span\n                            style={{ cursor: 'pointer' }}\n                            onClick={() =>\n                                props.history.push(\n                                    '/inspirations/' + post.parent.parentId\n                                )\n                            }\n                        >\n                            {progressData[post.parent.parentId].goal.name}\n                        </span>\n                    )}\n                {post.startMessage &&\n                    ['wishlist', 'perk', 'goal'].includes(\n                        post.startMessage.messageType\n                    ) && (\n                        <span\n                            style={{ cursor: 'pointer' }}\n                            onClick={() =>\n                                props.history.push('/profile/' + message.author)\n                            }\n                        >\n                            {post.startMessage.messageType === 'wishlist'\n                                ? 'Wishlist'\n                                : post.startMessage.messageType === 'goals'\n                                ? 'Goals'\n                                : 'Shop'}\n                        </span>\n                    )}\n            </span>\n        ),\n        datetime: isStart && (\n            <span style={{ color: '#333' }}>\n                <TimeAgo datetime={message.date} live />\n            </span>\n        ),\n    }\n    return account && friendData ? (\n        account._id !== message.author || !editingMessage ? (\n            <Comment {...commentProps}>\n                {props.isTop && replies && replies.length > 0 ? (\n                    showReplies ? (\n                        replies.map((reply, index) => (\n                            <Message\n                                key={index}\n                                message={reply}\n                                post={post}\n                                account={account}\n                                friendData={friendData}\n                                setReplyVisible={setReplyVisible}\n                                setReplyToUser={setReplyToUser}\n                            />\n                        ))\n                    ) : (\n                        <Button\n                            type=\"text\"\n                            onClick={() => setShowReplies(true)}\n                        >\n                            Show {replies.length} replies\n                        </Button>\n                    )\n                ) : null}\n\n                {props.isTop && replyVisible ? (\n                    <AddMessage\n                        post={post}\n                        account={account}\n                        replyTo={message.messageId}\n                        replyToUser={replyToUser}\n                        cancel={() => setReplyVisible(false)}\n                    />\n                ) : null}\n            </Comment>\n        ) : (\n            <AddMessage\n                post={post}\n                account={account}\n                replyTo={message.messageId}\n                editingMessage={editingMessage}\n                content={message.text}\n                images={message.image}\n                onSend={() => setEditingMessage('')}\n                cancel={() => setEditingMessage('')}\n            />\n        )\n    ) : null\n}\n\nexport default withRouter(Message)\n","import React, { useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport * as wsActions from '../../websocketActions'\nimport Message from './Message'\nimport { LikeOutlined, LikeFilled, CommentOutlined } from '@ant-design/icons'\nimport AddMessage from './AddMessage'\nimport Divider from 'antd/es/divider'\nimport Button from 'antd/es/button'\n\nconst Post = props => {\n    const { post, account, friendData, progressData, groupData } = props\n    const [postOpen, setPostOpen] = useState(props.showReplies)\n    const getNumberOfMessages = messages => {\n        let result = 0\n        for (let item of messages) {\n            result = result + 1 + item.replies.length\n        }\n        return result\n    }\n    return post ? (\n        <>\n            {!props.noStartMessage && (\n                <>\n                    <Message\n                        message={post.startMessage}\n                        post={post}\n                        account={account}\n                        friendData={friendData}\n                        progressData={progressData}\n                        groupData={groupData}\n                        replies={[]}\n                        isStart={true}\n                    />\n                    {post.startMessage.image &&\n                        post.startMessage.image.length > 0 && (\n                            <img\n                                style={{\n                                    maxWidth: '100%',\n                                    margin: 'auto',\n                                    display: 'block',\n                                }}\n                                src={post.startMessage.image[0]}\n                            />\n                        )}\n                </>\n            )}\n            <Divider type=\"horizontal\" style={{ margin: '5px 0' }} />\n\n            <div\n                style={{\n                    textAlign: 'left',\n                    // marginBottom: '200px',\n                    position: 'relative',\n                }}\n            >\n                <div\n                    style={{ display: 'flex', justifyContent: 'space-around' }}\n                >\n                    <span key=\"comment-basic-like\">\n                        <Button type=\"text\">\n                            {post.startMessage.likes.includes(account._id) ? (\n                                <LikeFilled\n                                    style={{ fontSize: '20px' }}\n                                    onClick={() =>\n                                        wsActions.changeLikesMessage(\n                                            'dislikeMessage',\n                                            post.startMessage.messageId,\n                                            account._id,\n                                            post._id\n                                        )\n                                    }\n                                />\n                            ) : (\n                                <LikeOutlined\n                                    style={{ fontSize: '20px' }}\n                                    onClick={() =>\n                                        wsActions.changeLikesMessage(\n                                            'likeMessage',\n                                            post.startMessage.messageId,\n                                            account._id,\n                                            post._id\n                                        )\n                                    }\n                                />\n                            )}\n                            Likes\n                            <span style={{ paddingLeft: '8px' }}>\n                                {post.startMessage.likes.length}\n                            </span>\n                        </Button>\n                    </span>\n                    <span>\n                        <Button onClick={() => setPostOpen(true)} type=\"text\">\n                            <CommentOutlined style={{ fontSize: '20px' }} />\n                            Comment\n                            <span style={{ paddingLeft: '8px' }}>\n                                {getNumberOfMessages(post.messages)}\n                            </span>\n                        </Button>\n                    </span>\n                </div>\n                <Divider type=\"horizontal\" style={{ margin: '5px 0' }} />\n                {postOpen && (\n                    <>\n                        <AddMessage post={post} account={account} />\n                        {post.messages && post.messages.length\n                            ? post.messages.map((message, index) => (\n                                  <Message\n                                      key={index}\n                                      message={message}\n                                      post={post}\n                                      account={account}\n                                      friendData={friendData}\n                                      replies={message.replies}\n                                      isTop={true}\n                                  />\n                              ))\n                            : null}\n                    </>\n                )}\n            </div>\n        </>\n    ) : null\n}\n\nexport default withRouter(Post)\n","import React, { useEffect, useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport Card from 'antd/es/card'\nimport pullData from '../../utils/pullData'\nimport Post from '../../components/Post/Post'\nimport UserButton from '../../components/UserButton/UserButton'\nimport ImageCarousel from '../../components/UI/ImageCarousel/ImageCarousel'\n\nconst Goal = props => {\n    const [data, setData] = useState({})\n    const { account } = props\n    useEffect(() => {\n        const pathParts = props.history.location.pathname.split('/')\n        if (pathParts.length > 3) {\n            const accountId = pathParts[2]\n            if (props.isAuthed && account._id === accountId) {\n                const goal = account.goals.find(\n                    item => item.itemId === pathParts[3]\n                )\n                setData({ profile: account, goal })\n            } else {\n                pullData(props, data, setData, { forceAuth: false }, data => {\n                    const friendData = {}\n                    for (let friend of data.friendData)\n                        friendData[friend._id] = friend\n\n                    props.setData({\n                        post: { [data.post._id]: data.post },\n                        friendData,\n                    })\n                })\n            }\n        }\n    }, [props.isAuthed])\n    if (!data.goal) return null\n    const { goal, profile } = data\n    props.setData({ currentPosts: goal.post })\n    if (goal) {\n        props.setPageTitle({ main: goal.name, sub: profile._id })\n    }\n    return goal ? (\n        <Card\n            title={\n                <span>\n                    Goal from <UserButton id={profile._id} /> goals\n                </span>\n            }\n            bordered={false}\n        >\n            <ImageCarousel images={goal.images} />\n\n            <h1>{goal.name}</h1>\n            <p style={{ whiteSpace: 'pre-wrap' }}>{goal.description}</p>\n            <Post\n                noStartMessage={true}\n                post={props.post[goal.post]}\n                account={props.account}\n                friendData={props.friendData}\n                showReplies={true}\n            />\n        </Card>\n    ) : null\n}\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        account: state.account,\n        post: state.post,\n        friendData: state.friendData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: data => {\n            dispatch(actions.setData(data))\n        },\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Goal)\n)\n","import React from 'react'\n\nimport Select from 'antd/es/select'\nimport UserButton from '../UserButton/UserButton'\n\nexport default (account, friendData, value?, onSelect?) => (\n    <Select\n        mode=\"multiple\"\n        style={{ width: '100%' }}\n        placeholder=\"Please select\"\n        value={value}\n        onChange={onSelect}\n        getPopupContainer={trigger => trigger.parentNode}\n    >\n        {[\n            account,\n            ...account.friends\n                .filter(friend => friend.status === 'friend')\n                .map(friend => friendData[friend.friend]),\n        ].map(\n            item =>\n                item &&\n                item._id && (\n                    <Select.Option key={item._id}>\n                        <UserButton id={item._id} noClick={true} />\n                    </Select.Option>\n                )\n        )}\n    </Select>\n)\n","import React, { useState } from 'react'\nimport Modal from 'antd/es/modal'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as wsActions from '../../websocketActions'\nimport Button from 'antd/es/button'\nimport Input from 'antd/es/input'\nimport InputNumber from 'antd/es/input-number'\nimport Form from 'antd/es/form'\nimport Select from 'antd/es/select'\n\nimport Upload from 'antd/es/upload'\nimport Divider from 'antd/es/divider'\nimport PlusOutlined from '@ant-design/icons/PlusOutlined'\n\nimport { uploadFile } from '../../utils/uploadFile'\nimport {\n    descriptionRules,\n    nameRules,\n    priceRules,\n} from '../../constants/fieldRules'\nimport connectionsSelect from '../EditGoalAndProgressForm/connectionsSelect'\nimport Descriptions from 'antd/es/descriptions'\nimport UserButton from '../UserButton/UserButton'\nimport Dropdown from 'antd/es/dropdown'\nimport Menu from 'antd/es/menu'\nimport Card from 'antd/es/card'\nimport MoreIcon from '../UI/MoreIcon'\n\nconst Rewards = props => {\n    const [previewImage, setPreviewImage] = useState('')\n    const [previewReward, setPreviewReward] = useState()\n    const [editedReward, setEditedReward] = useState()\n    const [editedRewardIndex, setEditedRewardIndex] = useState()\n    const { account, friendData, readOnly, progress } = props\n\n    const RewardButton = props => (\n        <Button type=\"link\" onClick={() => setPreviewReward(props.item)}>\n            {props.item.mode === 'simple'\n                ? props.item.simple\n                : props.item.mode === 'money'\n                ? props.item.money + ' (money)'\n                : props.item.mode === 'item'\n                ? props.item.itemName\n                : ''}\n        </Button>\n    )\n\n    return props.rewards ? (\n        <div>\n            {props.onlyButton ? (\n                props.rewards.map((item, index) => (\n                    <RewardButton item={item} key={index} />\n                ))\n            ) : (\n                <Form.Item label={props.label} key={props.rewardKey}>\n                    {props.rewards.length > 0 && (\n                        <ol>\n                            {props.rewards.map((item, index) => {\n                                return (\n                                    <li key={index}>\n                                        <RewardButton item={item} />\n                                        <UserButton\n                                            id={item.owner}\n                                            noName={true}\n                                        />{' '}\n                                        in\n                                        {item.for && item.for.length > 0 ? (\n                                            <UserButton\n                                                id={item.for}\n                                                noName={true}\n                                            />\n                                        ) : (\n                                            <span\n                                                style={{\n                                                    fontWeight: 'bold',\n                                                    marginLeft: '5px',\n                                                }}\n                                            >\n                                                All\n                                            </span>\n                                        )}\n                                        {item.owner === account._id &&\n                                            !readOnly && (\n                                                <>\n                                                    <Dropdown\n                                                        overlay={\n                                                            <Menu>\n                                                                <Menu.Item\n                                                                    onClick={() => {\n                                                                        setEditedRewardIndex(\n                                                                            index\n                                                                        )\n                                                                        setEditedReward(\n                                                                            item\n                                                                        )\n                                                                    }}\n                                                                >\n                                                                    Edit\n                                                                </Menu.Item>\n\n                                                                <Menu.Item\n                                                                    onClick={() => {\n                                                                        if (\n                                                                            !window.confirm(\n                                                                                'Are you sure you want to delete this item?'\n                                                                            )\n                                                                        )\n                                                                            return\n                                                                        if (\n                                                                            props.setRewards\n                                                                        ) {\n                                                                            props.setRewards(\n                                                                                props.rewards.filter(\n                                                                                    (\n                                                                                        item,\n                                                                                        indexIn\n                                                                                    ) =>\n                                                                                        indexIn !==\n                                                                                        index\n                                                                                )\n                                                                            )\n                                                                        } else {\n                                                                            wsActions.deleteReward(\n                                                                                account._id,\n                                                                                progress._id,\n                                                                                item.rewardId\n                                                                            )\n                                                                        }\n                                                                    }}\n                                                                >\n                                                                    Delete\n                                                                </Menu.Item>\n                                                            </Menu>\n                                                        }\n                                                    >\n                                                        <Button type=\"link\">\n                                                            <MoreIcon />\n                                                        </Button>\n                                                    </Dropdown>\n                                                </>\n                                            )}\n                                    </li>\n                                )\n                            })}\n                        </ol>\n                    )}\n\n                    {!readOnly && (\n                        <Button\n                            type=\"link\"\n                            style={{ paddingLeft: 0 }}\n                            onClick={() => {\n                                setEditedRewardIndex('new')\n                                setEditedReward({ mode: 'simple' })\n                            }}\n                        >\n                            <PlusOutlined />\n                            Add rewards\n                        </Button>\n                    )}\n                </Form.Item>\n            )}\n            <Modal\n                visible={editedReward}\n                title={\n                    editedReward === 'new' ? 'Add new reward' : 'Edit reward'\n                }\n                closable={true}\n                destroyOnClose={true}\n                onCancel={() => setEditedReward()}\n                onOk={() => {\n                    let rewardToSave = {}\n                    if (editedReward.mode === 'money') {\n                        rewardToSave.money = editedReward.money\n                        rewardToSave.mode = editedReward.mode\n                        rewardToSave.for = editedReward.for\n                        rewardToSave.rewardId = editedReward.rewardId\n                    } else {\n                        rewardToSave = { ...editedReward, money: undefined }\n                    }\n                    rewardToSave.owner = account._id\n\n                    if (props.setRewards) {\n                        let newRewards = [...props.rewards]\n\n                        if (editedRewardIndex === 'new')\n                            newRewards = [...newRewards, rewardToSave]\n                        else\n                            newRewards = newRewards.map((item, index) => {\n                                if (index === editedRewardIndex)\n                                    return rewardToSave\n                                else return item\n                            })\n                        props.setRewards(newRewards)\n                        setEditedReward()\n                        setEditedRewardIndex()\n                    } else {\n                        wsActions.saveReward(\n                            account._id,\n                            progress._id,\n                            props.rewardKey,\n                            rewardToSave\n                        )\n                        setEditedReward()\n                        setEditedRewardIndex()\n                    }\n                }}\n                destroyOnClose={true}\n                okText=\"Save\"\n            >\n                {editedReward && (\n                    <>\n                        <Form.Item label=\"Reward type\">\n                            <Select\n                                placeholder=\"Type\"\n                                value={editedReward.mode}\n                                onSelect={value => {\n                                    setEditedReward({\n                                        ...editedReward,\n                                        mode: value,\n                                    })\n                                }}\n                                style={{ width: '100%' }}\n                                getPopupContainer={trigger =>\n                                    trigger.parentNode\n                                }\n                            >\n                                <Select.Option key=\"simple\" value=\"simple\">\n                                    Simple reward\n                                </Select.Option>\n                                <Select.Option key=\"item\" value=\"item\">\n                                    Item reward\n                                </Select.Option>\n                                <Select.Option key=\"money\" value=\"money\">\n                                    Money reward\n                                </Select.Option>\n                            </Select>\n                        </Form.Item>\n                        <Form.Item label=\"Reward for\">\n                            {connectionsSelect(\n                                account,\n                                friendData,\n                                editedReward.for,\n                                value => {\n                                    setEditedReward({\n                                        ...editedReward,\n                                        for: value,\n                                    })\n                                }\n                            )}\n                            <p>(leave blank for all)</p>\n                        </Form.Item>\n                        <Divider type=\"horizontal\" />\n                        {editedReward.mode === 'simple' ? (\n                            <Form.Item\n                                label=\"Description\"\n                                rules={[\n                                    ...descriptionRules,\n                                    {\n                                        required: true,\n                                        min: 1,\n                                        whitespace: true,\n                                        message:\n                                            'Desription is too short. Minimal length is 1.',\n                                    },\n                                ]}\n                            >\n                                <Input.TextArea\n                                    value={editedReward.simple}\n                                    onChange={({ target: { value } }) =>\n                                        setEditedReward({\n                                            ...editedReward,\n                                            simple: value,\n                                        })\n                                    }\n                                    placeholder=\"Explain how you will reward\"\n                                />\n                            </Form.Item>\n                        ) : editedReward.mode === 'money' ? (\n                            <Form.Item label=\"Amount\" rules={priceRules}>\n                                <InputNumber\n                                    value={editedReward.money}\n                                    onChange={value => {\n                                        setEditedReward({\n                                            ...editedReward,\n                                            money: value,\n                                        })\n                                    }}\n                                />\n                            </Form.Item>\n                        ) : (\n                            <>\n                                <Form.Item label=\"Images\">\n                                    <Upload\n                                        listType=\"picture-card\"\n                                        fileList={(\n                                            editedReward.itemImages || []\n                                        ).map((url, index) => ({\n                                            url,\n                                            uid: index,\n                                        }))}\n                                        onPreview={file => {\n                                            setPreviewImage(file.url)\n                                        }}\n                                        onChange={({ fileList }) => {\n                                            setEditedReward({\n                                                ...editedReward,\n                                                itemImages: fileList.map(\n                                                    image => image.url\n                                                ),\n                                            })\n                                        }}\n                                        customRequest={({ file }) => {\n                                            uploadFile(\n                                                file,\n                                                800,\n                                                undefined,\n                                                url => {\n                                                    setEditedReward({\n                                                        ...editedReward,\n                                                        itemImages: [\n                                                            ...(editedReward.itemImages ||\n                                                                []),\n                                                            url,\n                                                        ],\n                                                    })\n                                                }\n                                            )\n                                        }}\n                                    >\n                                        {(editedReward.itemImages || [])\n                                            .length >= 8 ? null : (\n                                            <div>\n                                                <PlusOutlined />\n                                                <div className=\"ant-upload-text\">\n                                                    Upload\n                                                </div>\n                                            </div>\n                                        )}\n                                    </Upload>\n                                </Form.Item>\n                                <Form.Item label=\"Name\" rules={nameRules}>\n                                    <Input\n                                        value={editedReward.itemName}\n                                        onChange={({ target: { value } }) =>\n                                            setEditedReward({\n                                                ...editedReward,\n                                                itemName: value,\n                                            })\n                                        }\n                                    />\n                                </Form.Item>\n                                <Form.Item\n                                    label=\"Description\"\n                                    rules={descriptionRules}\n                                >\n                                    <Input.TextArea\n                                        value={editedReward.itemDescription}\n                                        onChange={({ target: { value } }) =>\n                                            setEditedReward({\n                                                ...editedReward,\n                                                itemDescription: value,\n                                            })\n                                        }\n                                    />\n                                </Form.Item>\n                            </>\n                        )}\n                    </>\n                )}\n            </Modal>\n            <Modal\n                visible={previewImage}\n                footer={null}\n                onCancel={() => setPreviewImage('')}\n                destroyOnClose={true}\n            >\n                <img\n                    alt=\"example\"\n                    style={{ width: '100%' }}\n                    src={previewImage}\n                />\n            </Modal>\n            <Modal\n                visible={previewReward}\n                footer={null}\n                onCancel={() => setPreviewReward()}\n                title=\"Reward details\"\n                destroyOnClose={true}\n            >\n                {previewReward ? (\n                    <>\n                        {previewReward.itemImages &&\n                            previewReward.itemImages.map((image, index) => (\n                                <span\n                                    key={index}\n                                    onClick={() => setPreviewImage(image)}\n                                >\n                                    <Card\n                                        type=\"inner\"\n                                        style={{\n                                            width: 200,\n                                            display: 'inline-block',\n                                        }}\n                                        hoverable\n                                        cover={\n                                            <div\n                                                style={{\n                                                    backgroundImage:\n                                                        'url(' + image + ')',\n                                                    height: 200,\n                                                    width: 200,\n                                                    backgroundSize: 'cover',\n                                                }}\n                                            />\n                                        }\n                                    />\n                                </span>\n                            ))}\n\n                        <Descriptions\n                            title=\"Reward description\"\n                            bordered\n                            column={{\n                                xxl: 4,\n                                xl: 3,\n                                lg: 3,\n                                md: 3,\n                                sm: 2,\n                                xs: 1,\n                            }}\n                        >\n                            {previewReward.mode === 'item' && (\n                                <Descriptions.Item label=\"Name\">\n                                    {previewReward.itemName}\n                                </Descriptions.Item>\n                            )}\n                            {previewReward.mode === 'item' && (\n                                <Descriptions.Item label=\"Description\">\n                                    <p style={{ whiteSpace: 'pre-wrap' }}>\n                                        {previewReward.itemDescription}\n                                    </p>\n                                </Descriptions.Item>\n                            )}\n                            {previewReward.mode === 'simple' && (\n                                <Descriptions.Item label=\"Description\">\n                                    <p style={{ whiteSpace: 'pre-wrap' }}>\n                                        {previewReward.simple}\n                                    </p>\n                                </Descriptions.Item>\n                            )}\n                            {previewReward.mode === 'money' && (\n                                <Descriptions.Item label=\"Money\">\n                                    {previewReward.money}\n                                </Descriptions.Item>\n                            )}\n                        </Descriptions>\n                    </>\n                ) : null}\n            </Modal>\n        </div>\n    ) : null\n}\n\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        account: state.account,\n        friendData: state.friendData,\n        progress: state.progress,\n    }\n}\n\nexport default withRouter(connect(mapStateToProps)(Rewards))\n","import { webSocket } from '../containers/ConnectWebsocket/ConnectWebsocket'\n\nexport const changeStage = (value, accountId, progressId, stageId) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'changeStage',\n                value,\n                progressId,\n                accountId,\n                stageId,\n            })\n        )\n    }\n}\n\nexport const leaveProgress = data => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'leaveProgress',\n                progressId: data.progress._id,\n                accountId: data.account._id,\n            })\n        )\n    }\n}\n\nexport const createGroup = (accountId, progressId) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'createGroup',\n                progressId,\n                accountId,\n            })\n        )\n    }\n}\n\nexport const getFriendsData = (progress, accountFriends) => {\n    if (webSocket && webSocket.readyState === 1) {\n        if (progress) {\n            let accountIds = [\n                progress.owner,\n                progress.worker,\n                ...progress.goal.supporters,\n                ...progress.goal.experts,\n                ...accountFriends,\n            ]\n\n            accountIds = [...new Set(accountIds)]\n\n            webSocket.send(\n                JSON.stringify({\n                    messageCode: 'getFriendsData',\n                    accountIds,\n                })\n            )\n        }\n    }\n}\n\nexport const editGoalInProgress = (data, value) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'editGoalInProgress',\n                progressId: data.progress._id,\n                accountId: data.account._id,\n                value,\n            })\n        )\n    }\n}\n\nexport const startProgress = (accountId, value, inGroup) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'startProgress',\n                accountId,\n                value,\n                inGroup,\n            })\n        )\n    }\n}\n\nexport const deleteReward = (accountId, progressId, rewardId) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'deleteReward',\n                accountId,\n                progressId,\n                rewardId,\n            })\n        )\n    }\n}\n\nexport const saveReward = (accountId, progressId, rewardKey, reward) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'saveReward',\n                accountId,\n                progressId,\n                rewardKey,\n                reward,\n            })\n        )\n    }\n}\n","import React, { useState } from 'react'\nimport Modal from 'antd/es/modal'\n\nimport Button from 'antd/es/button'\nimport Input from 'antd/es/input'\nimport Form from 'antd/es/form'\nimport Upload from 'antd/es/upload'\nimport PlusOutlined from '@ant-design/icons/PlusOutlined'\n\nimport { uploadFile } from '../../utils/uploadFile'\nimport Rewards from '../Rewards/Rewards'\nimport { nameRules, descriptionRules } from '../../constants/fieldRules'\nimport connectionsSelect from './connectionsSelect'\nimport Select from 'antd/es/select'\n\nconst { Option } = Select\n\nconst EditGoalAndProgressForm = props => {\n    const { goal, account, friendData } = props\n\n    const [images, setImages] = useState(\n        (goal &&\n            goal.images.map((url, index) => ({\n                url,\n                uid: index,\n            }))) ||\n            []\n    )\n\n    const [previewImage, setPreviewImage] = useState('')\n\n    const [rewards, setRewards] = useState((goal && goal.rewards) || [])\n\n    const onFinish = value => {\n        props.onFinish({\n            ...value,\n            images: images.map(image => image.url),\n            rewards,\n        })\n    }\n\n    const layout = {\n        labelCol: { span: 8 },\n        wrapperCol: { span: 16 },\n    }\n\n    const [form] = Form.useForm()\n\n    const normFile = e => {\n        if (Array.isArray(e)) {\n            return e\n        }\n        return e && e.fileList.map(image => image.url)\n    }\n\n    const connections = connectionsSelect(account, friendData)\n\n    return !props.goalId || goal ? (\n        <>\n            <Form\n                form={form}\n                name=\"dynamic_form_nest_item\"\n                onFinish={onFinish}\n                autoComplete=\"off\"\n                initialValues={\n                    goal || {\n                        name: 'New achievement',\n                        repeat: 'no',\n                        days: ['0'],\n                    }\n                }\n                {...layout}\n                onValuesChange={(changedFields, allValues) =>\n                    allValues.days &&\n                    form.setFieldsValue({ days: allValues.days.sort() })\n                }\n            >\n                <Form.Item\n                    name=\"images\"\n                    label=\"Images\"\n                    valuePropName=\"images\"\n                    getValueFromEvent={normFile}\n                >\n                    <Upload\n                        listType=\"picture-card\"\n                        fileList={images.map((image, index) => ({\n                            ...image,\n                            uid: index,\n                        }))}\n                        onPreview={file => {\n                            setPreviewImage(file.url)\n                        }}\n                        onChange={({ fileList }) => setImages(fileList)}\n                        customRequest={({ file }) => {\n                            uploadFile(file, 800, undefined, url => {\n                                setImages(\n                                    [...images, { url }].map(\n                                        (image, index) => ({\n                                            ...image,\n                                            uid: index,\n                                        })\n                                    )\n                                )\n                            })\n                        }}\n                    >\n                        {images.length >= 8 ? null : (\n                            <div>\n                                <PlusOutlined />\n                                <div className=\"ant-upload-text\">Upload</div>\n                            </div>\n                        )}\n                    </Upload>\n                </Form.Item>\n                <Form.Item label=\"Name\" name=\"name\" rules={nameRules}>\n                    <Input />\n                </Form.Item>\n                <Form.Item\n                    label=\"Description\"\n                    name=\"description\"\n                    rules={descriptionRules}\n                >\n                    <Input.TextArea\n                        autoSize={{ minRows: 4, maxRows: 20 }}\n                        placeholder=\"Write a few words about why this goal is important and how to achieve it.\"\n                    />\n                </Form.Item>\n                <Form.Item label=\"Achievers\" name=\"users\">\n                    {connections}\n                </Form.Item>\n                <Form.Item label=\"Experts\" name=\"experts\">\n                    {connections}\n                </Form.Item>\n                <Form.Item label=\"Repeat\" name=\"repeat\">\n                    <Select>\n                        <Option value=\"no\">No repeat</Option>\n                        <Option value=\"day\">Every day</Option>\n                        <Option value=\"weekday\">Every day of week</Option>\n                        <Option value=\"week\">Every week</Option>\n                        <Option value=\"month\">Every month</Option>\n                        <Option value=\"year\">Every year</Option>\n                    </Select>\n                </Form.Item>\n                <Form.Item\n                    noStyle\n                    shouldUpdate={(prevValues, currentValues) =>\n                        prevValues.repeat !== currentValues.repeat\n                    }\n                >\n                    {({ getFieldValue }) => {\n                        return getFieldValue('repeat') === 'weekday' ? (\n                            <Form.Item label=\"Days of week\" name=\"days\">\n                                <Select mode=\"tags\">\n                                    <Option value=\"0\">Sunday</Option>\n                                    <Option value=\"1\">Monday</Option>\n                                    <Option value=\"2\">Tuesday</Option>\n                                    <Option value=\"3\">Wednesday</Option>\n                                    <Option value=\"4\">Thursday</Option>\n                                    <Option value=\"5\">Friday</Option>\n                                    <Option value=\"6\">Saturday</Option>\n                                </Select>\n                            </Form.Item>\n                        ) : null\n                    }}\n                </Form.Item>\n                <Rewards\n                    label=\"Rewards\"\n                    rewards={rewards}\n                    setRewards={setRewards}\n                />\n                <div style={{ textAlign: 'right', marginTop: '50px' }}>\n                    <Button type=\"text\" size=\"large\">\n                        Cancel\n                    </Button>\n                    <Button\n                        type=\"primary\"\n                        htmlType=\"submit\"\n                        size=\"large\"\n                        style={{\n                            borderRadius: '6px',\n                            padding: '0px 25px',\n                            marginLeft: '10px',\n                        }}\n                    >\n                        Save\n                    </Button>\n                </div>\n            </Form>\n            <Modal\n                visible={previewImage}\n                footer={null}\n                onCancel={() => setPreviewImage('')}\n                destroyOnClose={true}\n            >\n                <img\n                    alt=\"example\"\n                    style={{ width: '100%' }}\n                    src={previewImage}\n                />\n            </Modal>\n        </>\n    ) : null\n}\n\nexport default EditGoalAndProgressForm\n","import React from 'react'\nimport * as wsActions from '../../websocketActions'\n\nimport EditGoalAndProgressForm from '../../components/EditGoalAndProgressForm/EditGoalAndProgressForm'\n\nconst AddProgress = props =>\n    props.account._id ? (\n        <EditGoalAndProgressForm\n            onFinish={value => {\n                wsActions.startProgress(props.account._id, value, props.inGroup)\n                props.setStartProgressVisible(false)\n                document.body.removeAttribute('style')\n            }}\n            account={props.account}\n            friendData={props.friendData}\n            cancel={props.cancel}\n        />\n    ) : null\n\nexport default AddProgress\n","import React from 'react'\nimport { withRouter } from 'react-router-dom'\n\nimport Card from 'antd/es/card'\n\nconst { Meta } = Card\n\nconst GroupCard = props => {\n    const { group } = props\n\n    return (\n        <div\n            style={{\n                display: 'inline-block',\n                margin: '4px 8px',\n            }}\n            onClick={() => props.history.push('/groups/' + group._id)}\n        >\n            <Card\n                type=\"inner\"\n                style={{\n                    width: 200,\n                }}\n                hoverable\n                cover={\n                    <div\n                        onClick={() =>\n                            props.history.push('/groups/' + group._id)\n                        }\n                        style={{\n                            backgroundImage:\n                                'url(' +\n                                (group.images &&\n                                    group.images.length > 0 &&\n                                    group.images[0]) +\n                                ')',\n                            height: 200,\n                            width: 200,\n                            backgroundSize: 'cover',\n                        }}\n                    />\n                }\n            >\n                <Meta title={group.name} />\n            </Card>\n        </div>\n    )\n}\n\nexport default withRouter(GroupCard)\n","import React, { useState, useEffect } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport Tabs from 'antd/es/tabs'\nimport Button from 'antd/es/button'\nimport Empty from 'antd/es/empty'\nimport ProgressCard from './ProgressCard'\nimport AddCard from '../../components/AddCard/AddCard'\nimport Modal from 'antd/es/modal/Modal'\nimport AddProgress from './AddProgress'\nimport GroupCard from './GroupCard'\nimport Masonry from 'react-masonry-css'\nimport { cardBreakPoints } from '../../utils/masonryBreakPoints'\nimport MasonryGrid from '../../components/MasonryGrid'\nimport MasonryCard from '../../components/MasonryCard'\nimport UserButton from '../../components/UserButton/UserButton'\n\nconst { TabPane } = Tabs\n\nconst Progresses = props => {\n    const [startProgressVisible, setStartProgressVisible] = useState(false)\n\n    const { fromProfile, progressData, account, groupData, profile } = props\n\n    const { progresses, groups } = fromProfile ? profile : account\n    if (!fromProfile) props.setPageTitle({ main: 'Inspirations', sub: '' })\n    let loadedProgresses, loadedGroups\n    if (progresses) {\n        loadedProgresses = progresses\n            .filter(item => progressData[item])\n            .map(item => progressData[item])\n        loadedGroups = groups\n            .filter(item => groupData[item] && groupData[item].active)\n            .map(item => groupData[item])\n    }\n\n    const editGoal = fromProfile ? null : loadedProgresses && loadedGroups ? (\n        <Modal\n            title=\"Add progress\"\n            visible={startProgressVisible}\n            maskClosable\n            closable\n            onCancel={() => setStartProgressVisible(false)}\n            width=\"100%\"\n            style={{ maxWidth: '1000px' }}\n            footer={null}\n            destroyOnClose={true}\n        >\n            <AddProgress\n                setStartProgressVisible={setStartProgressVisible}\n                account={account}\n                friendData={props.friendData}\n                cancel={() => setStartProgressVisible(false)}\n            />\n        </Modal>\n    ) : null\n\n    const innerTabs =\n        loadedProgresses && loadedGroups ? (\n            <>\n                <TabPane tab=\"Progresses\" key=\"progresses\">\n                    {!fromProfile && (\n                        <>\n                            <AddCard\n                                title=\"Start a new progress\"\n                                sub=\"Rich your goals or help others!\"\n                                action={() => {\n                                    setStartProgressVisible(true)\n                                }}\n                            />\n                            {editGoal}\n                        </>\n                    )}\n                    <MasonryGrid>\n                        {loadedProgresses.map((item, index) => (\n                            <MasonryCard\n                                key={index}\n                                onClickLink={'/inspirations/' + item._id}\n                                images={item.goal.images}\n                                body={\n                                    <>\n                                        <UserButton\n                                            ids={item.goal.users}\n                                            group={true}\n                                        />\n                                        <span style={{ fontWeight: 'bold' }}>\n                                            {item.name}\n                                        </span>\n                                    </>\n                                }\n                            />\n                        ))}\n                    </MasonryGrid>\n                </TabPane>\n                <TabPane tab=\"Groups\" key=\"groups\">\n                    {loadedGroups.length > 0 ? (\n                        loadedGroups.map((group, index) => (\n                            <GroupCard key={index} group={group} />\n                        ))\n                    ) : (\n                        <Empty\n                            imageStyle={{\n                                height: 160,\n                            }}\n                            description={\n                                <span>\n                                    Here you will find your groups. Groups can\n                                    be created in existing progresses.\n                                </span>\n                            }\n                        />\n                    )}\n                </TabPane>\n            </>\n        ) : null\n\n    return loadedProgresses && loadedGroups ? (\n        // <Tabs\n        //     style={{\n        //         background: 'transparent',\n        //         boxShadow: 'none',\n        //         margin: '0',\n        //         marginTop: '-15px',\n        //     }}\n        // >\n        //     {innerTabs}\n        // </Tabs>\n        <div>\n            {!fromProfile && (\n                <>\n                    <AddCard\n                        title=\"Start a new progress\"\n                        sub=\"Rich your goals or help others!\"\n                        action={() => {\n                            setStartProgressVisible(true)\n                        }}\n                    />\n                    {editGoal}\n                </>\n            )}\n            <MasonryGrid style={{ marginTop: '40px' }}>\n                {loadedProgresses.map((item, index) => (\n                    <MasonryCard\n                        key={index}\n                        onClickLink={'/inspirations/' + item._id}\n                        images={item.goal.images}\n                        body={\n                            <>\n                                <UserButton\n                                    ids={item.goal.users}\n                                    group={true}\n                                />\n                                <span style={{ fontWeight: 'bold' }}>\n                                    {item.name}\n                                </span>\n                            </>\n                        }\n                    />\n                ))}\n            </MasonryGrid>\n        </div>\n    ) : null\n\n    // ) : (\n    //     <Empty\n    //         imageStyle={{\n    //             height: 160,\n    //         }}\n    //         description={\n    //             <span>\n    //                 This user has no progresses. You can create a goal and\n    //                 invite this user.\n    //             </span>\n    //         }\n    //     />\n    // )\n}\n\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n        profile: state.profile,\n        isAuthed: state.isAuthed,\n        progressData: state.progressData,\n        groupData: state.groupData,\n        friendData: state.friendData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: (data, pulledFrom) =>\n            dispatch(actions.setData(data, pulledFrom)),\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n        tryAuth: (props, forceAuth) =>\n            dispatch(actions.tryAuth(props, forceAuth)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Progresses)\n)\n","import React from 'react'\nimport Descriptions from 'antd/es/descriptions'\n\nimport * as wsActions from '../../websocketActions'\nimport Rewards from '../../components/Rewards/Rewards'\nimport UserButton from '../../components/UserButton/UserButton'\nimport Divider from 'antd/es/divider'\nimport Tabs from 'antd/es/tabs'\nimport Tag from 'antd/es/tag'\nimport Radio from 'antd/es/radio'\nimport Badge from 'antd/es/badge'\nimport moment from 'moment'\n\nmoment().format()\n\nconst ActivityTable = props => {\n    const { progress, account } = props\n    const { goal } = progress\n\n    const isOwner = account && account._id === progress.owner\n\n    let lastStages = progress.stages\n        .slice(Math.max(progress.stages.length - 7, 0))\n        .sort((a, b) => {\n            let aS, aF, bS, bF\n            if (a.old && !b.old) return 1\n            else if (b.old && !a.old) return -1\n            else {\n                if (a.day) {\n                    aS = moment()\n                        .year(a.year)\n                        .dayOfYear(a.day)\n                        .startOf('day')\n                    aF = moment()\n                        .year(a.year)\n                        .dayOfYear(a.day)\n                        .endOf('day')\n                    bS = moment()\n                        .year(b.year)\n                        .dayOfYear(b.day)\n                        .startOf('day')\n                    bF = moment()\n                        .year(b.year)\n                        .dayOfYear(b.day)\n                        .endOf('day')\n                } else if (a.week) {\n                    aS = moment()\n                        .year(a.year)\n                        .week(a.week)\n                        .startOf('week')\n                    aF = moment()\n                        .year(a.year)\n                        .week(a.week)\n                        .endOf('week')\n                    bS = moment()\n                        .year(b.year)\n                        .week(b.week)\n                        .startOf('week')\n                    bF = moment()\n                        .year(b.year)\n                        .week(b.week)\n                        .endOf('week')\n                } else if (a.month) {\n                    aS = moment()\n                        .year(a.year)\n                        .month(a.month)\n                        .startOf('month')\n                    aF = moment()\n                        .year(a.year)\n                        .month(a.month)\n                        .endOf('month')\n                    bS = moment()\n                        .year(b.year)\n                        .month(b.month)\n                        .startOf('month')\n                    bF = moment()\n                        .year(b.year)\n                        .month(b.month)\n                        .endOf('month')\n                } else if (a.year) {\n                    aS = moment()\n                        .year(a.year)\n                        .startOf('year')\n                    aF = moment()\n                        .year(a.year)\n                        .endOf('year')\n                    bS = moment()\n                        .year(b.year)\n                        .startOf('year')\n                    bF = moment()\n                        .year(b.year)\n                        .endOf('year')\n                }\n                if (aS) {\n                    const now = moment()\n\n                    if (\n                        Math.min(\n                            Math.abs(now.diff(aS)),\n                            Math.abs(now.diff(aF))\n                        ) <=\n                        Math.min(Math.abs(now.diff(bS)), Math.abs(now.diff(bF)))\n                    )\n                        return -1\n                    else return 1\n                }\n            }\n            return 0\n        })\n\n    const nowStageId = lastStages.length > 0 ? lastStages[0].stageId : 0\n\n    lastStages = progress.stages\n\n    return lastStages.length === 0 ? null : (\n        <div\n            style={{\n                border: '1px solid #eee',\n                padding: '10px 5px',\n            }}\n        >\n            <Tabs\n                type=\"card\"\n                defaultActiveKey={\n                    nowStageId\n                        ? lastStages\n                              .findIndex(item => item.stageId === nowStageId)\n                              .toString()\n                        : '2'\n                }\n                // className={classes.fff}\n            >\n                {lastStages.map((stage, index) => {\n                    const getStatus = id => {\n                        if (isOwner && stage.dismissed) return 'dismissed'\n                        if (stage.failBy.find(item => item.accountId === id))\n                            return 'fail'\n                        if (\n                            stage.approvedBy.find(item => item.accountId === id)\n                        )\n                            return 'complete'\n                        return 'process'\n                    }\n\n                    const getTag = id => {\n                        const status = getStatus(id)\n                        let text = 'In process',\n                            color = '#108ee9'\n                        switch (status) {\n                            case 'fail':\n                                text = 'Failed'\n                                color = '#f50'\n                                break\n                            case 'complete':\n                                text = 'Complete'\n                                color = '#87d068'\n                                break\n                            case 'dismissed':\n                                text = 'Dismissed'\n                                color = '#ffa500'\n                                break\n                            default:\n                                break\n                        }\n\n                        return <Tag color={color}>{text}</Tag>\n                    }\n\n                    const experts = goal.experts.map(expert => (\n                        <Descriptions.Item\n                            key={expert}\n                            label={\n                                <>\n                                    <UserButton\n                                        id={expert}\n                                        noAva={true}\n                                        span={true}\n                                    />{' '}\n                                    {' (expert)'}\n                                </>\n                            }\n                        >\n                            {getTag(expert)}\n                        </Descriptions.Item>\n                    ))\n\n                    const users = goal.users.map(user => (\n                        <Descriptions.Item\n                            key={user}\n                            label={\n                                <>\n                                    <UserButton\n                                        id={user}\n                                        noAva={true}\n                                        span={true}\n                                    />{' '}\n                                    {' (achiever)'}\n                                </>\n                            }\n                        >\n                            {getTag(user)}\n                        </Descriptions.Item>\n                    ))\n\n                    const owner = [\n                        <Descriptions.Item\n                            key={progress.owner}\n                            label={\n                                <>\n                                    <UserButton\n                                        id={progress.owner}\n                                        noAva={true}\n                                        span={true}\n                                    />{' '}\n                                    {' (owner)'}\n                                </>\n                            }\n                        >\n                            {getTag(progress.owner)}\n                        </Descriptions.Item>,\n                    ]\n                    let stageDate\n                    let tabTitle = ''\n                    if (stage.day) {\n                        stageDate = moment()\n                            .year(stage.year)\n                            .dayOfYear(stage.day)\n                        tabTitle = (\n                            <>\n                                <div>{stageDate.format('dddd')}</div>\n                                <div>{stageDate.format('D MMM YY')}</div>\n                            </>\n                        )\n                    } else if (stage.week) {\n                        stageDate = moment()\n                            .year(stage.year)\n                            .week(stage.week)\n                        tabTitle = (\n                            <>\n                                <div>{stageDate.format('wo')} week</div>\n                                <div>\n                                    {stageDate\n                                        .startOf('week')\n                                        .format('D MMM YY')}\n                                </div>\n                                <div>\n                                    {stageDate.endOf('week').format('D MMM YY')}\n                                </div>\n                            </>\n                        )\n                    } else if (stage.month) {\n                        stageDate = moment()\n                            .year(stage.year)\n                            .month(stage.month)\n                        tabTitle = (\n                            <>\n                                <div>{stageDate.format('MMMM')}</div>\n                                <div>{stageDate.format('YYYY')}</div>\n                            </>\n                        )\n                    } else if (stage.year) {\n                        stageDate = moment().year(stage.year)\n\n                        tabTitle = <div>{stageDate.format('YYYY')}</div>\n                    }\n\n                    const myStatus =\n                        account && account._id && getStatus(account._id)\n\n                    const stageStatus = getStatus(progress.owner)\n                    return (\n                        <Tabs.TabPane\n                            tab={\n                                <Badge\n                                    color={\n                                        stageStatus === 'complete'\n                                            ? 'green'\n                                            : stageStatus === 'dismissed'\n                                            ? 'orange'\n                                            : stageStatus === 'fail'\n                                            ? 'volcano'\n                                            : 'rgba(0,0,0,0)'\n                                    }\n                                >\n                                    <span\n                                        style={{\n                                            fontSize: '12px',\n                                            textTransform: 'uppercase',\n                                            textAlign: 'center',\n                                        }}\n                                    >\n                                        {tabTitle}\n                                    </span>\n                                </Badge>\n                            }\n                            key={index}\n                        >\n                            {account && account._id && (\n                                <>\n                                    Set status:\n                                    <Radio.Group\n                                        value={myStatus}\n                                        style={{ padding: '20px 0px ' }}\n                                        onChange={value =>\n                                            wsActions.changeStage(\n                                                value.target.value,\n                                                account._id,\n                                                progress._id,\n                                                stage.stageId\n                                            )\n                                        }\n                                    >\n                                        <Radio value=\"process\">\n                                            <Tag\n                                                color={\n                                                    myStatus !== 'process'\n                                                        ? 'processing'\n                                                        : '#108ee9'\n                                                }\n                                            >\n                                                In process\n                                            </Tag>\n                                        </Radio>\n                                        <Radio value=\"complete\">\n                                            <Tag\n                                                color={\n                                                    myStatus !== 'complete'\n                                                        ? 'green'\n                                                        : '#87d068'\n                                                }\n                                            >\n                                                Complete\n                                            </Tag>\n                                        </Radio>\n                                        <Radio value=\"fail\">\n                                            <Tag\n                                                color={\n                                                    myStatus !== 'fail'\n                                                        ? 'volcano'\n                                                        : '#f50'\n                                                }\n                                            >\n                                                Fail\n                                            </Tag>\n                                        </Radio>\n                                        {isOwner && (\n                                            <Radio value=\"dismissed\">\n                                                <Tag\n                                                    color={\n                                                        myStatus !== 'dismissed'\n                                                            ? 'orange'\n                                                            : '#ffa500'\n                                                    }\n                                                >\n                                                    Dismiss\n                                                </Tag>\n                                            </Radio>\n                                        )}\n                                    </Radio.Group>\n                                </>\n                            )}\n\n                            <Descriptions\n                                size=\"small\"\n                                bordered\n                                column={{\n                                    xxl: 4,\n                                    xl: 3,\n                                    lg: 3,\n                                    md: 3,\n                                    sm: 2,\n                                    xs: 1,\n                                }}\n                            >\n                                {owner}\n                                {users}\n                                {experts}\n                            </Descriptions>\n\n                            {stage.paid.length > 0 && (\n                                <>\n                                    <Divider style={{ fontSize: '15px' }}>\n                                        Paid rewards\n                                    </Divider>\n\n                                    <Rewards\n                                        rewardKey={1}\n                                        rewards={stage.paid}\n                                        readOnly={true}\n                                    />\n                                </>\n                            )}\n                        </Tabs.TabPane>\n                    )\n                })}\n            </Tabs>\n        </div>\n    )\n}\nexport default ActivityTable\n","import React from 'react'\n\nimport * as wsActions from '../../websocketActions'\nimport EditGoalAndProgressForm from '../../components/EditGoalAndProgressForm/EditGoalAndProgressForm'\n\nconst EditProgress = props => {\n    const { progress, account, state, setState, friendData } = props\n\n    const onFinish = value => {\n        wsActions.editGoalInProgress(props, value)\n        setState({ ...state, editProgressOpen: false })\n        document.body.removeAttribute('style')\n    }\n\n    return progress.goal ? (\n        <EditGoalAndProgressForm\n            goal={progress.goal}\n            onFinish={onFinish}\n            account={account}\n            friendData={friendData}\n        />\n    ) : null\n}\n\nexport default EditProgress\n","import React from 'react'\nimport Button from 'antd/es/button'\nimport * as wsActions from '../websocketActions'\n\nconst FollowButton = props => {\n    const { account, type, id } = props\n    if (account && account._id && account._id !== id) {\n        if (type === 'progress') {\n            return account.followProgresses.includes(id) ? (\n                <Button\n                    danger\n                    onClick={() => wsActions.unfollowProgress(account._id, id)}\n                >\n                    Unfollow\n                </Button>\n            ) : (\n                <Button\n                    type=\"primary\"\n                    onClick={() => wsActions.followProgress(account._id, id)}\n                >\n                    Follow\n                </Button>\n            )\n        } else {\n            return account.followAccounts.includes(id) ? (\n                <Button\n                    danger\n                    onClick={() => wsActions.unfollowAccount(account._id, id)}\n                >\n                    Unfollow\n                </Button>\n            ) : (\n                <Button\n                    type=\"primary\"\n                    onClick={() => wsActions.followAccount(account._id, id)}\n                >\n                    Follow\n                </Button>\n            )\n        }\n    }\n    return null\n}\n\nexport default FollowButton\n","import React, { useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport Button from 'antd/es/button'\nimport Divider from 'antd/es/divider'\nimport Modal from 'antd/es/modal'\n\nimport Descriptions from 'antd/es/descriptions'\n\nconst { Item } = Descriptions\n\nimport * as wsActions from '../../websocketActions'\nimport ActivityTable from './ActivityTable'\nimport EditProgress from './EditProgress'\nimport Popconfirm from 'antd/es/popconfirm'\nimport Typography from 'antd/es/typography'\nimport UserButton from '../../components/UserButton/UserButton'\nimport ImageCarousel from '../../components/UI/ImageCarousel/ImageCarousel'\nimport Select from 'antd/es/select'\nimport Tag from 'antd/es/tag'\nimport Rewards from '../../components/Rewards/Rewards'\nimport MasonryCard from '../../components/MasonryCard'\nimport FollowButton from '../../components/FollowButton'\n\nconst { Option } = Select\n\nconst Activity = props => {\n    const { account, progress, state, setState, friendData } = props\n    const { goal } = progress\n    const [followersVisible, setFollowersVisible] = useState(false)\n\n    const getDay = day => {\n        switch (day) {\n            case '0':\n                return 'Sunday'\n            case '1':\n                return 'Monday'\n            case '2':\n                return 'Tuesday'\n            case '3':\n                return 'Wednesday'\n            case '4':\n                return 'Thursday'\n            case '5':\n                return 'Friday'\n            case '6':\n                return 'Saturday'\n\n            default:\n                return ''\n        }\n    }\n    return goal ? (\n        <>\n            {goal.images.length > 0 && <ImageCarousel images={goal.images} />}\n\n            <h1>{goal.name}</h1>\n            <Button type=\"text\" onClick={() => setFollowersVisible(true)}>\n                {progress.followingAccounts.length} Followers\n            </Button>\n            <div>\n                {account &&\n                account._id &&\n                account.followProgresses.includes(progress._id) ? (\n                    <Button\n                        type=\"link\"\n                        onClick={() =>\n                            wsActions.unfollowProgress(\n                                account._id,\n                                progress._id\n                            )\n                        }\n                    >\n                        Following\n                    </Button>\n                ) : (\n                    <Button\n                        type=\"primary\"\n                        onClick={() =>\n                            wsActions.followProgress(account._id, progress._id)\n                        }\n                    >\n                        Follow\n                    </Button>\n                )}\n            </div>\n            {account._id === progress.owner && (\n                <Button\n                    style={{ margin: '0px 20px 50px 0px' }}\n                    type=\"primary\"\n                    onClick={() => {\n                        setState({ ...state, editProgressOpen: true })\n                    }}\n                >\n                    Edit progress\n                </Button>\n            )}\n            <Typography.Paragraph\n                ellipsis={{\n                    rows: 3,\n                    expandable: true,\n                    symbol: 'more',\n                }}\n                style={{ whiteSpace: 'pre-wrap' }}\n            >\n                {goal.description}\n            </Typography.Paragraph>\n\n            <Descriptions\n                size=\"small\"\n                bordered\n                column={{ xxl: 4, xl: 3, lg: 3, md: 3, sm: 2, xs: 1 }}\n            >\n                {/* <Item label=\"Worker\">\n                    {goal.users && <UserButton ids={goal.users} group={true} />}\n                </Item>\n                <Item label=\"Owner\">\n                    <UserButton id={progress.owner} noName={true} />\n                </Item>\n\n                <Item label=\"Experts\">\n                    {goal.experts && (\n                        <UserButton ids={goal.experts} group={true} />\n                    )}\n                </Item> */}\n                <Item label=\"Repeat\">{goal.repeat || ''}</Item>\n                {goal.repeat === 'weekday' && (\n                    <Item label=\"Days\">\n                        {goal.days.map((day, index) => (\n                            <Tag key={index}>{getDay(day)}</Tag>\n                        ))}\n                    </Item>\n                )}\n                <Item label=\"Rewards\">\n                    <Rewards rewards={goal.rewards} />\n                </Item>\n            </Descriptions>\n            <div style={{ margin: '50px 0px' }}>\n                <ActivityTable\n                    progress={progress}\n                    account={account}\n                    state={state}\n                    setState={setState}\n                />\n            </div>\n\n            {/* {account._id === progress.owner && (\n                <Popconfirm\n                    title=\"Create a group if you want to have more similar prgresses with the same people.\"\n                    onConfirm={() =>\n                        wsActions.createGroup(account._id, progress._id)\n                    }\n                >\n                    <Button\n                        style={{ margin: '0px 20px 50px 0px' }}\n                        type=\"primary\"\n                    >\n                        Create a group\n                    </Button>\n                </Popconfirm>\n            )} */}\n            {account.progresses &&\n                account.progresses.includes(progress._id.toString()) && (\n                    <Button\n                        danger={true}\n                        onClick={() => {\n                            wsActions.leaveProgress(props)\n                        }}\n                    >\n                        Leave the progress\n                    </Button>\n                )}\n\n            <Modal\n                visible={state.editProgressOpen}\n                footer={null}\n                onCancel={() => setState({ ...state, editProgressOpen: false })}\n                closable={true}\n                destroyOnClose={true}\n                width=\"100%\"\n                style={{ maxWidth: '1000px' }}\n            >\n                <EditProgress\n                    progress={progress}\n                    account={account}\n                    state={state}\n                    setState={setState}\n                    friendData={friendData}\n                />\n            </Modal>\n            <Modal\n                title=\"Followers\"\n                visible={followersVisible}\n                footer={null}\n                onCancel={() => setFollowersVisible(false)}\n            >\n                {progress.followingAccounts.map(item => (\n                    <MasonryCard\n                        actions={\n                            <FollowButton account={account} id={progress._id} />\n                        }\n                        body={<UserButton span={true} id={item} size={50} />}\n                    />\n                ))}\n            </Modal>\n        </>\n    ) : null\n}\n\nexport default withRouter(Activity)\n","import React, { useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport Button from 'antd/es/button'\nimport Comment from 'antd/es/comment'\nimport Avatar from 'antd/es/avatar'\nimport Input from 'antd/es/input'\nimport Form from 'antd/es/form'\nimport Upload from 'antd/es/upload'\nimport PictureOutlined from '@ant-design/icons/PictureOutlined'\nimport LoadingOutlined from '@ant-design/icons/LoadingOutlined'\nimport SendOutlined from '@ant-design/icons/SendOutlined'\nimport { uploadFile } from '../../utils/uploadFile'\nimport * as wsActions from '../../websocketActions'\nimport getAvatar from '../../utils/getAvatar'\nimport { messageRules } from '../../constants/fieldRules'\nimport {\n    PlusOutlined,\n    CloseCircleFilled,\n    PictureFilled,\n} from '@ant-design/icons'\nimport Modal from 'antd/es/modal/Modal'\n\nconst AddPost = props => {\n    const [previewImage, setPreviewImage] = useState('')\n    const [imageLoading, setImageLoading] = useState(false)\n    const [images, setImages] = useState([])\n\n    const { parent, account, parentType } = props\n\n    const [messageText, setMessageText] = useState(\n        props.content ||\n            (props.replyToUser ? '@' + props.replyToUser + ' ' : '')\n    )\n\n    const uploadImage = file => {\n        uploadFile(file, 800, undefined, url => {\n            setImages([...images, url])\n        })\n    }\n    return account._id ? (\n        <div\n            style={{\n                background: '#fff',\n                padding: '0px 10px',\n                bottom: '0px',\n                left: '0px',\n                zIndex: 1000,\n            }}\n        >\n            <h2>Post something new</h2>\n            <Comment\n                avatar={<Avatar src={getAvatar(account._id, account.image)} />}\n                content={\n                    <>\n                        <Form.Item rules={messageRules}>\n                            <Input.TextArea\n                                autoSize={{\n                                    minRows: 1,\n                                    maxRows: 3,\n                                }}\n                                rows={1}\n                                onChange={e => setMessageText(e.target.value)}\n                                value={messageText}\n                            />\n                        </Form.Item>\n                        {images.length > 0 && (\n                            <Form.Item style={{ margin: 0 }}>\n                                <Upload\n                                    listType=\"picture-card\"\n                                    fileList={images.map((image, index) => ({\n                                        url: image,\n                                        uid: index,\n                                    }))}\n                                    onPreview={file => {\n                                        setPreviewImage(file.url)\n                                    }}\n                                    onChange={({ fileList }) =>\n                                        setImages(\n                                            fileList.map(image => image.url)\n                                        )\n                                    }\n                                    customRequest={({ file }) => {\n                                        uploadImage(file)\n                                    }}\n                                >\n                                    {images.length >= 8 ? null : (\n                                        <div>\n                                            <PlusOutlined />\n                                            <div className=\"ant-upload-text\">\n                                                Upload\n                                            </div>\n                                        </div>\n                                    )}\n                                </Upload>\n                            </Form.Item>\n                        )}\n                        <Form.Item>\n                            <Button\n                                htmlType=\"submit\"\n                                onClick={() => {\n                                    wsActions.addPost(\n                                        account._id,\n                                        parent,\n                                        parentType,\n                                        messageText,\n                                        images\n                                    )\n                                    setMessageText('')\n                                    setImages([])\n                                    if (props.onSend) props.onSend()\n                                }}\n                                icon={<SendOutlined />}\n                                type=\"text\"\n                            >\n                                Send\n                            </Button>\n                            <Upload\n                                showUploadList={false}\n                                customRequest={({ file }) => {\n                                    if (images.length > 8) {\n                                        message.warning(\n                                            'You can not attach more than 8 images.'\n                                        )\n                                        return\n                                    }\n                                    setImageLoading(true)\n                                    uploadFile(file, 800, undefined, url => {\n                                        setImageLoading(false)\n                                        setImages([...images, url])\n                                    })\n                                }}\n                            >\n                                <Button\n                                    type=\"text\"\n                                    icon={\n                                        imageLoading ? (\n                                            <LoadingOutlined />\n                                        ) : (\n                                            <PictureFilled />\n                                        )\n                                    }\n                                >\n                                    Image\n                                </Button>\n                            </Upload>\n                            {messageText || images.length ? (\n                                <Button\n                                    onClick={() => {\n                                        setMessageText('')\n                                        setImages([])\n                                    }}\n                                    icon={<CloseCircleFilled />}\n                                    type=\"text\"\n                                >\n                                    Cancel\n                                </Button>\n                            ) : null}\n                        </Form.Item>\n                    </>\n                }\n            />\n            <Modal\n                visible={previewImage}\n                footer={null}\n                onCancel={() => setPreviewImage('')}\n            >\n                <img\n                    alt=\"example\"\n                    style={{ width: '100%' }}\n                    src={previewImage}\n                />\n            </Modal>\n        </div>\n    ) : null\n}\n\nexport default withRouter(AddPost)\n","import React, { useEffect, useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\n\nimport Modal from 'antd/es/modal'\nimport Activity from './Activity'\nimport Post from '../../components/Post/Post'\nimport AddPost from '../../components/Post/AddPost'\nimport pullData from '../../utils/pullData'\n\nconst Progress = props => {\n    const [state, setState] = useState({})\n\n    const [data, setData] = useState({})\n    const pathParts = props.history.location.pathname.split('/')\n    const progressId = pathParts.length > 2 ? pathParts[2] : ''\n    if (!progressId) return null\n    useEffect(() => {\n        if (props.isAuthed) {\n            props.setData({ currentProgress: progressId })\n        } else {\n            pullData(props, data, setData, { forceAuth: false }, data => {\n                const friendData = {}\n                for (let friend of data.friendData)\n                    friendData[friend._id] = friend\n                const post = {}\n                for (let item of data.post) post[item._id] = item\n\n                props.setData({\n                    friendData,\n                    posts: post,\n                    account: {},\n                    progress: data.progress,\n                })\n            })\n        }\n    }, [props.isAuthed, props.history.location.pathname])\n\n    const { progress, account, friendData, posts } = props.isAuthed\n        ? props\n        : { ...data, account: {} }\n\n    if (!progress || !progress._id) return null\n    props.setData({ currentPosts: progress.posts })\n\n    const { goal } = progress\n    if (goal) props.setPageTitle({ main: goal.name, sub: progress.worker })\n    return goal && friendData ? (\n        <div className=\"contentDiv\">\n            <Activity\n                state={state}\n                setState={setState}\n                progress={progress}\n                account={account}\n                friendData={friendData}\n            />\n\n            {account._id && (\n                <AddPost\n                    parent={progressId}\n                    account={account}\n                    parentType=\"progress\"\n                    // onSend={() => setEditingMessage('')}\n                />\n            )}\n            {progress.posts.map(postId => {\n                if (posts[postId]) {\n                    const post = posts[postId]\n                    return (\n                        <div key={postId}>\n                            <div\n                                style={{\n                                    height: '5px',\n                                    background: '#ddd',\n                                    width: 'calc(100% + 8px)',\n                                    position: 'absolute',\n                                    left: '-8px',\n                                }}\n                            />\n                            <div style={{ paddingTop: '10px' }}>\n                                <Post\n                                    friendData={friendData}\n                                    account={account}\n                                    post={post}\n                                />\n                            </div>\n                        </div>\n                    )\n                } else return null\n            })}\n\n            <Modal\n                visible={state.previewImage}\n                footer={null}\n                onCancel={() => setState({ ...state, previewImage: '' })}\n            >\n                <img\n                    alt=\"example\"\n                    style={{ width: '100%' }}\n                    src={state.previewImage}\n                />\n            </Modal>\n        </div>\n    ) : null\n}\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        account: state.account,\n        posts: state.post,\n        progress: state.progress,\n        friendData: state.friendData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: data => {\n            dispatch(actions.setData(data))\n        },\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Progress)\n)\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { withRouter } from 'react-router-dom'\nimport Card from 'antd/es/card'\nimport Button from 'antd/es/button'\nimport UserButton from '../../components/UserButton/UserButton'\nimport MasonryGrid from '../../components/MasonryGrid'\nimport MasonryCard from '../../components/MasonryCard'\n\nconst Wallet = props => {\n    const account = props.pulledProfile || props.account\n    return account.wallet ? (\n        <MasonryGrid friends={true}>\n            {account.wallet.map((money, index) => (\n                <div\n                    onClick={() => props.history.push('/profile/' + money.user)}\n                    key={index}\n                >\n                    <MasonryCard\n                        body={\n                            <>\n                                <span style={{ fontWeight: 'bold' }}>\n                                    ${money.amount}\n                                </span>\n                                <UserButton span={true} id={money.user} />\n                            </>\n                        }\n                    />\n                </div>\n            ))}\n        </MasonryGrid>\n    ) : null\n}\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n        isAuthed: state.isAuthed,\n    }\n}\n\nexport default withRouter(connect(mapStateToProps)(Wallet))\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { withRouter } from 'react-router-dom'\nimport * as actions from '../../store/actions'\nimport Button from 'antd/es/button'\nimport Tag from 'antd/es/tag'\nimport TimeAgo from 'timeago-react'\nimport Avatar from 'antd/es/avatar'\nimport getAvatar from '../../utils/getAvatar'\nimport Rewards from '../../components/Rewards/Rewards'\nimport Collapse from 'antd/es/collapse'\nimport Badge from 'antd/es/badge'\nimport UserButton from '../../components/UserButton/UserButton'\nimport Descriptions from 'antd/es/descriptions'\nimport date from 'date-and-time'\nimport Typography from 'antd/es/typography'\n\nconst Transactions = props => {\n    props.setPageTitle({ main: 'Shop', sub: 'Transactions' })\n\n    const { account, transactionData, friendData } = props\n    if (!account || !account._id) return null\n\n    const transactions = account.transactions\n        .filter(item => transactionData[item])\n        .map(item => transactionData[item])\n\n    const columns = [\n        {\n            title: 'Type',\n            dataIndex: 'types',\n            key: 'types',\n            render: types => (\n                <>\n                    {types.map(tag => {\n                        let color = tag.length > 5 ? 'geekblue' : 'green'\n                        if (tag === 'loser') {\n                            color = 'volcano'\n                        }\n                        return (\n                            <Tag color={color} key={tag}>\n                                {tag.toUpperCase()}\n                            </Tag>\n                        )\n                    })}\n                </>\n            ),\n        },\n        {\n            title: 'With',\n            dataIndex: 'user',\n            key: 'user',\n            render: user => {\n                const friend = friendData[user]\n                return friend ? (\n                    <Button\n                        type=\"link\"\n                        style={{ padding: 0 }}\n                        onClick={() => props.history.push('/profile/' + user)}\n                    >\n                        <Avatar\n                            src={getAvatar(user, friend.image)}\n                            style={{ marginRight: '5px' }}\n                        />\n                        {friend.name + ' (' + friend._id + ')'}\n                    </Button>\n                ) : (\n                    user\n                )\n            },\n        },\n        {\n            title: 'Item',\n            dataIndex: 'perk',\n            key: 'perk',\n            render: perk =>\n                perk.simple || (\n                    <Rewards\n                        rewardKey={1}\n                        label=\"Rewards\"\n                        rewards={[{ rewards: [perk], key: 1 }]}\n                        readOnly={true}\n                    />\n                ),\n        },\n        {\n            title: 'Amount',\n            dataIndex: 'amount',\n            key: 'amount',\n            render: amount => (amount > 0 ? amount : ''),\n        },\n        {\n            title: 'Date',\n            dataIndex: 'date',\n            key: 'date',\n            render: date => <TimeAgo datetime={date} live />,\n        },\n        {\n            title: 'Progress',\n            dataIndex: 'progress',\n            key: 'progress',\n            render: progress => (\n                <Button\n                    type=\"link\"\n                    onClick={() =>\n                        props.history.push('/inspirations/' + progress)\n                    }\n                >\n                    {progress}\n                </Button>\n            ),\n        },\n        {\n            title: 'Status',\n            key: 'status',\n            dataIndex: 'status',\n            render: (status, record) => {\n                if (status === 'Not confirmed') {\n                    return (\n                        <>\n                            <Button\n                                danger={true}\n                                type=\"link\"\n                                onClick={() =>\n                                    wsActions.cancelTransaction(\n                                        account._id,\n                                        record.transaction._id\n                                    )\n                                }\n                            >\n                                Cancel\n                            </Button>\n                            {record.transaction.from === account._id && (\n                                <Button\n                                    type=\"link\"\n                                    onClick={() =>\n                                        wsActions.confirmTransaction(\n                                            account._id,\n                                            record.transaction._id\n                                        )\n                                    }\n                                >\n                                    Confirm\n                                </Button>\n                            )}\n                        </>\n                    )\n                }\n                return status\n            },\n        },\n    ]\n\n    const tableData = []\n    let sorted = [...transactions]\n    sorted = sorted.sort((a, b) =>\n        new Date(a.date).getTime() < new Date(b.date).getTime() ? 1 : -1\n    )\n    for (let transaction of sorted) {\n        const types = []\n        if (transaction.from === account._id && transaction.to === account.id) {\n            types.push('internal')\n        }\n        if (transaction.to === account._id) {\n            if (transaction.progress) {\n                types.push('earn')\n                if (!transaction.amount) types.push('item')\n                else types.push('money')\n            } else {\n                if (transaction.item && transaction.amount) {\n                    types.push('buy')\n                    types.push('item')\n                } else {\n                    types.push('recieve gift')\n                    if (!transaction.amount) types.push('item')\n                    else types.push('money')\n                }\n            }\n        } else if (transaction.from === account._id) {\n            if (transaction.progress) {\n                types.push('pay')\n                if (!transaction.amount) types.push('item')\n                else types.push('money')\n            } else {\n                if (transaction.item && transaction.amount) {\n                    types.push('sell')\n                    types.push('item')\n                } else {\n                    types.push('send gift')\n                    if (!transaction.amount) types.push('item')\n                    else types.push('money')\n                }\n            }\n        }\n\n        const user =\n            transaction.to !== account._id ? transaction.to : transaction.from\n\n        tableData.push({\n            key: tableData.length,\n            types,\n            user,\n            perk: transaction.item,\n            amount: transaction.amount,\n            date: transaction.date,\n            progress: transaction.progress,\n            status: transaction.status,\n            transaction,\n        })\n    }\n    return (\n        <Collapse\n            expandIconPosition=\"right\"\n            style={{ marginBottom: '50px' }}\n            destroyInactivePanel={true}\n            accordion\n        >\n            {sorted.map((transaction, index) => {\n                const types = []\n                if (\n                    transaction.from === account._id &&\n                    transaction.to === account.id\n                ) {\n                    types.push('internal')\n                }\n                if (transaction.to === account._id) {\n                    if (transaction.progress) {\n                        types.push('earn')\n                        if (!transaction.amount) types.push('item')\n                        else types.push('money')\n                    } else {\n                        if (transaction.item && transaction.amount) {\n                            types.push('buy')\n                            types.push('item')\n                        } else {\n                            types.push('recieve gift')\n                            if (!transaction.amount) types.push('item')\n                            else types.push('money')\n                        }\n                    }\n                } else if (transaction.from === account._id) {\n                    if (transaction.progress) {\n                        types.push('pay')\n                        if (!transaction.amount) types.push('item')\n                        else types.push('money')\n                    } else {\n                        if (transaction.item && transaction.amount) {\n                            types.push('sell')\n                            types.push('item')\n                        } else {\n                            types.push('send gift')\n                            if (!transaction.amount) types.push('item')\n                            else types.push('money')\n                        }\n                    }\n                }\n\n                const user =\n                    transaction.to !== account._id\n                        ? transaction.to\n                        : transaction.from\n\n                tableData.push({\n                    key: tableData.length,\n                    types,\n                    user,\n                    perk: transaction.item,\n                    amount: transaction.amount,\n                    date: transaction.date,\n                    progress: transaction.progress,\n                    status: transaction.status,\n                    transaction,\n                })\n                const { item: reward } = transaction\n                return (\n                    <Collapse.Panel\n                        style={{ padding: 0 }}\n                        header={\n                            <>\n                                <div\n                                    style={{\n                                        display: 'flex',\n                                        alignItems: 'center',\n                                    }}\n                                >\n                                    <Badge\n                                        color={\n                                            transaction.status ===\n                                            'Not confirmed'\n                                                ? 'blue'\n                                                : transaction.status ===\n                                                  'Cancelled'\n                                                ? 'red'\n                                                : 'green'\n                                        }\n                                    />\n                                    <Typography.Paragraph\n                                        ellipsis={{ rows: 1 }}\n                                        style={{ display: 'inline', margin: 0 }}\n                                    >\n                                        {reward.mode === 'simple'\n                                            ? reward.simple\n                                            : reward.mode === 'money'\n                                            ? reward.money + ' (money)'\n                                            : reward.mode === 'item'\n                                            ? reward.itemName\n                                            : ''}\n                                    </Typography.Paragraph>\n                                    <UserButton\n                                        noName={true}\n                                        id={\n                                            transaction.to !== account._id\n                                                ? transaction.to\n                                                : transaction.from\n                                        }\n                                    />\n                                </div>\n                                <div>\n                                    <TimeAgo datetime={transaction.date} live />\n                                </div>\n                            </>\n                        }\n                        key={index}\n\n                        // extra={}\n                    >\n                        <Descriptions\n                            layout=\"vertical\"\n                            size=\"small\"\n                            bordered\n                            column={{\n                                xxl: 4,\n                                xl: 3,\n                                lg: 3,\n                                md: 3,\n                                sm: 2,\n                                xs: 1,\n                            }}\n                        >\n                            <Descriptions.Item label=\"Type\">\n                                {types.map(tag => {\n                                    let color =\n                                        tag.length > 5 ? 'geekblue' : 'green'\n                                    if (tag === 'loser') {\n                                        color = 'volcano'\n                                    }\n                                    return (\n                                        <Tag color={color} key={tag}>\n                                            {tag.toUpperCase()}\n                                        </Tag>\n                                    )\n                                })}\n                            </Descriptions.Item>\n                            <Descriptions.Item label=\"Transaction with\">\n                                <UserButton\n                                    id={\n                                        transaction.to !== account._id\n                                            ? transaction.to\n                                            : transaction.from\n                                    }\n                                />\n                            </Descriptions.Item>\n\n                            <Descriptions.Item label=\"Item\">\n                                {\n                                    <Rewards\n                                        onlyButton={true}\n                                        rewardKey={1}\n                                        label=\"Rewards\"\n                                        rewards={[\n                                            {\n                                                rewards: [transaction.item],\n                                                key: 1,\n                                            },\n                                        ]}\n                                        readOnly={true}\n                                    />\n                                }\n                            </Descriptions.Item>\n\n                            {transaction.amount && (\n                                <Descriptions.Item label=\"Amount\">\n                                    {transaction.amount}\n                                </Descriptions.Item>\n                            )}\n                            <Descriptions.Item label=\"Date\">\n                                {date.format(\n                                    new Date(transaction.date),\n                                    'YYYY/MM/DD HH:mm:ss'\n                                )}\n                            </Descriptions.Item>\n\n                            {transaction.progress && transaction.progressId && (\n                                <Descriptions.Item label=\"Progress\">\n                                    <Button\n                                        type=\"text\"\n                                        onClick={() =>\n                                            props.history.push(\n                                                '/inspirations/' +\n                                                    transaction.progressId\n                                            )\n                                        }\n                                    >\n                                        {transaction.progress}\n                                    </Button>\n                                </Descriptions.Item>\n                            )}\n                            <Descriptions.Item label=\"Status\">\n                                {status === 'Not confirmed' ? (\n                                    <>\n                                        <Button\n                                            danger={true}\n                                            type=\"link\"\n                                            onClick={() =>\n                                                wsActions.cancelTransaction(\n                                                    account._id,\n                                                    record.transaction._id\n                                                )\n                                            }\n                                        >\n                                            Cancel\n                                        </Button>\n                                        {record.transaction.from ===\n                                            account._id && (\n                                            <Button\n                                                type=\"link\"\n                                                onClick={() =>\n                                                    wsActions.confirmTransaction(\n                                                        account._id,\n                                                        record.transaction._id\n                                                    )\n                                                }\n                                            >\n                                                Confirm\n                                            </Button>\n                                        )}\n                                    </>\n                                ) : (\n                                    status || 'Confirmed'\n                                )}\n                            </Descriptions.Item>\n                        </Descriptions>\n                    </Collapse.Panel>\n                )\n            })}\n        </Collapse>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n        transactionData: state.transactionData,\n        friendData: state.friendData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Transactions)\n)\n","import React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport Tabs from 'antd/es/tabs'\nimport Wallet from './Wallet'\nimport Transactions from './Transactions'\nimport WishlistAndPerks from './WishlistAndPerks'\n\nconst Shop = props => {\n    useEffect(() => {\n        props.setPageTitle({ main: 'Shop', sub: 'My items' })\n    }, [])\n\n    return props.account._id ? (\n        <div>\n            <Tabs\n                style={{\n                    background: 'transparent',\n                    boxShadow: 'none',\n                    margin: '0',\n                    marginTop: '-15px',\n                }}\n            >\n                <Tabs.TabPane tab=\"My shop\" key={1}>\n                    <WishlistAndPerks\n                        mode=\"shop\"\n                        listKey=\"perks\"\n                        account={props.account}\n                    />\n                </Tabs.TabPane>\n                <Tabs.TabPane tab=\"Wallet\" key={3}>\n                    <Wallet />\n                </Tabs.TabPane>\n                <Tabs.TabPane tab=\"Transactions\" key={4}>\n                    <Transactions />\n                </Tabs.TabPane>\n            </Tabs>\n        </div>\n    ) : (\n        <span />\n    )\n}\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Shop)\n","import React, { useEffect, useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport isEqual from 'lodash.isequal'\n\nimport Post from '../../components/Post/Post'\n\nimport UserButton from '../../components/UserButton/UserButton'\nimport Divider from 'antd/es/divider'\n\nconst DashboardPosts = props => {\n    const {\n        account,\n        friendData,\n        statePosts,\n        progressData,\n        groupData,\n        currentPosts,\n    } = props\n\n    const [posts, setPosts] = useState([])\n    const [startTime] = useState(new Date().getTime())\n\n    const sortPosts = (a, b) => {\n        const aN = a.notifications.filter(item => item.user !== account._id)\n        const bN = b.notifications.filter(item => item.user !== account._id)\n        if (aN.length === 0 && bN.length > 0) return 1\n        else if (aN.length > 0 && bN.length === 0) return -1\n        else if (aN.length === 0 && bN.length === 0) return 0\n        else\n            return new Date(aN[0].date).getTime() <\n                new Date(bN[0].date).getTime()\n                ? 1\n                : -1\n    }\n\n    const sortNotifications = (a, b) =>\n        new Date(a.date).getTime() < new Date(b.date).getTime() ? 1 : -1\n\n    useEffect(() => {\n        if (currentPosts) {\n            const newPosts = currentPosts\n                .filter(item => statePosts[item])\n                .map(item => statePosts[item])\n\n            const newUnseenPosts = []\n            const newOldPosts = []\n            let oldPosts = [...posts]\n            for (let post of newPosts) {\n                let oldPostIndex = oldPosts.findIndex(item => {\n                    return item._id.toString() === post._id.toString()\n                })\n                if (oldPostIndex === -1) {\n                    if (\n                        post.notifications &&\n                        post.notifications.length > 0 &&\n                        new Date(post.notifications[0].date).getTime() >\n                            startTime\n                    ) {\n                        newUnseenPosts.push(post)\n                    } else {\n                        newOldPosts.push(post)\n                    }\n                } else {\n                    oldPosts[oldPostIndex] = post\n                }\n            }\n\n            for (let post of newOldPosts) {\n                const index = oldPosts.findIndex(item => {\n                    if (\n                        item &&\n                        item.notifications &&\n                        item.notifications.length > 0\n                    ) {\n                        return (\n                            new Date(item.notifications[0]).getTime() >\n                            new Date(post.notifications[0]).getTime()\n                        )\n                    } else return false\n                })\n                if (index === -1) {\n                    oldPosts.push(post)\n                } else {\n                    oldPosts.splice(index, 0, post)\n                }\n            }\n\n            let resultPosts = [...newUnseenPosts, ...oldPosts]\n            if (posts.length === 0) {\n                resultPosts = resultPosts.sort(sortPosts)\n            }\n            setPosts(resultPosts)\n        }\n    }, [currentPosts, statePosts])\n    if (!account._id) return null\n\n    let lastNotifications = []\n    for (let progress of account.followProgresses) {\n        if (progressData[progress])\n            lastNotifications = [\n                ...lastNotifications,\n                ...progressData[progress].notifications.filter(\n                    item =>\n                        item.code === 'add post' && item.user !== account._id\n                ),\n            ]\n    }\n\n    for (let group of account.groups) {\n        if (groupData[group])\n            lastNotifications = [\n                ...lastNotifications,\n                ...groupData[group].notifications.filter(\n                    item =>\n                        item.code === 'add post' && item.user !== account._id\n                ),\n            ]\n    }\n\n    lastNotifications = lastNotifications\n        .sort(sortNotifications)\n        .map(item => item.details.postId)\n        .slice(0, 10)\n\n    const neededPosts = [\n        ...new Set([\n            ...account.followPosts,\n            ...account.myPosts,\n            ...posts.map(post => post._id),\n            ...lastNotifications,\n        ]),\n    ]\n    if (!isEqual(currentPosts, neededPosts))\n        props.setData({ currentPosts: neededPosts })\n\n    props.setPageTitle({ main: 'Dashboard', sub: '' })\n\n    return posts.map(item => {\n        let text = null\n        const nots = item.notifications.filter(not => not.user !== account._id)\n        const not = nots.length > 0 ? nots[0] : null\n        if (not) {\n            switch (not.code) {\n                case 'edit wishlist item':\n                    text = 'edited item in wishlist.'\n\n                    break\n                case 'edit goal':\n                    text = 'edited goal.'\n\n                    break\n                case 'edit perk':\n                    text = 'edited item in shop.'\n\n                    break\n\n                case 'comment':\n                    text = 'added a comment.'\n\n                    break\n                case 'edit comment':\n                    text = 'edited a comment.'\n\n                    break\n                case 'like':\n                    text = 'added a like.'\n\n                    break\n                case 'dislike':\n                    text = 'removed a like.'\n\n                    break\n                default:\n                    text = null\n                    break\n            }\n        }\n        return (\n            <>\n                <div\n                    style={{\n                        height: '5px',\n                        background: '#ddd',\n                        width: 'calc(100% + 8px)',\n                        position: 'absolute',\n                        left: '-8px',\n                    }}\n                />\n                <div style={{ paddingTop: '10px' }}>\n                    {text && (\n                        <>\n                            <span>\n                                <UserButton\n                                    id={not.user}\n                                    noAva={true}\n                                    span={true}\n                                    style={{ fontWeight: 'bold' }}\n                                />{' '}\n                                {text}\n                            </span>\n                            <Divider\n                                type=\"horizontal\"\n                                style={{ margin: '5px 0' }}\n                            />\n                        </>\n                    )}\n                    <Post\n                        friendData={friendData}\n                        account={account}\n                        post={item}\n                        progressData={progressData}\n                        groupData={groupData}\n                    />\n                </div>\n            </>\n        )\n    })\n}\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        account: state.account,\n        statePosts: state.post,\n        progress: state.progress,\n        friendData: state.friendData,\n        progressData: state.progressData,\n        groupData: state.groupData,\n        currentPosts: state.currentPosts,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: data => {\n            dispatch(actions.setData(data))\n        },\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(DashboardPosts)\n)\n","import React from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\n\nimport UserButton from '../../components/UserButton/UserButton'\nimport Comment from 'antd/es/comment'\nimport Divider from 'antd/es/divider'\nimport moment from 'moment'\n\nmoment().format()\n\nconst DashboardEvents = props => {\n    const { lastNotifications } = props\n    const getRewardText = item => (\n        <span style={{ fontWeight: 'bold' }}>\n            {item.details.reward.money\n                ? '$' + item.details.reward.money\n                : item.details.reward.simple || item.details.reward.itemName}\n        </span>\n    )\n\n    const getStageName = stage => {\n        let stageDate\n        if (stage.day) {\n            stageDate = moment()\n                .year(stage.year)\n                .dayOfYear(stage.day)\n            return stageDate.format('dddd D MMM YYYY')\n        } else if (stage.week) {\n            stageDate = moment()\n                .year(stage.year)\n                .week(stage.week)\n            return (\n                stageDate.startOf('week').format('wo [week] D MMM YYYY - ') +\n                stageDate.endOf('week').format('D MMM YYYY')\n            )\n        } else if (stage.month) {\n            stageDate = moment()\n                .year(stage.year)\n                .month(stage.month)\n            return stageDate.format('MMMM YYYY')\n        } else if (stage.year) {\n            stageDate = moment().year(stage.year)\n            return stageDate.format('YYYY')\n        }\n    }\n    return lastNotifications.map(item => {\n        let text = null,\n            stageName\n\n        switch (item.code) {\n            case 'change name':\n                text = (\n                    <span>\n                        {' '}\n                        <UserButton span={true} noAva={true} id={item.user} />\n                        {' changed name.'}\n                    </span>\n                )\n                break\n            case 'delete account':\n                text = (\n                    <span>\n                        {item.user}\n                        deleted account.\n                    </span>\n                )\n                break\n            case 'friend request':\n                text = (\n                    <span>\n                        <UserButton span={true} noAva={true} id={item.user} />\n                        {' wants to become friends with you.'}\n                    </span>\n                )\n                break\n            case 'friend add':\n                text = (\n                    <span>\n                        <UserButton span={true} noAva={true} id={item.user} />\n                        {' and '}\n                        <UserButton\n                            span={true}\n                            noAva={true}\n                            id={item.details.friend}\n                        />\n                        {' became friends.'}\n                    </span>\n                )\n                break\n            case 'unfriend':\n                text = (\n                    <span>\n                        <UserButton span={true} noAva={true} id={item.user} />\n                        {' and '}\n                        <UserButton\n                            span={true}\n                            noAva={true}\n                            id={item.details.friend}\n                        />\n                        {' stopped being friends.'}\n                    </span>\n                )\n                break\n            case 'add wishlist item':\n            case 'edit wishlist item':\n                text = (\n                    <span>\n                        <UserButton span={true} noAva={true} id={item.user} />{' '}\n                        {item.code === 'add wishlist item'\n                            ? 'added to wishlist a new item'\n                            : 'edited in wishlist'}{' '}\n                        <span\n                            style={{ fontWeight: 'bold' }}\n                            onClick={() =>\n                                props.history.push(\n                                    `/wishlist/${item.user}/${\n                                        item.details.itemId\n                                    }`\n                                )\n                            }\n                        >\n                            {item.details.itemName}\n                        </span>{' '}\n                        .\n                    </span>\n                )\n                break\n            case 'delete wishlist item':\n                text = (\n                    <span>\n                        <UserButton span={true} noAva={true} id={item.user} />\n                        {' deleted '}\n                        {item.details.itemName} from wishlist.\n                    </span>\n                )\n                break\n            case 'add goal':\n            case 'edit goal':\n                text = (\n                    <span>\n                        <UserButton span={true} noAva={true} id={item.user} />{' '}\n                        {item.code === 'add goal'\n                            ? 'added a new goal'\n                            : 'edited goal'}{' '}\n                        <span\n                            style={{ fontWeight: 'bold' }}\n                            onClick={() =>\n                                props.history.push(\n                                    `/goals/${item.user}/${item.details.itemId}`\n                                )\n                            }\n                        >\n                            {item.details.itemName}\n                        </span>\n                        {' .'}\n                    </span>\n                )\n                break\n            case 'delete goal':\n                text = (\n                    <span>\n                        <UserButton span={true} noAva={true} id={item.user} />\n                        {' deleted '}\n                        {item.details.itemName} from goals.\n                    </span>\n                )\n                break\n            case 'add perk':\n            case 'edit perk':\n                text = (\n                    <span>\n                        <UserButton span={true} noAva={true} id={item.user} />{' '}\n                        {item.code === 'add perk'\n                            ? 'added to shop a new item'\n                            : 'edited in shop'}{' '}\n                        <span\n                            style={{ fontWeight: 'bold' }}\n                            onClick={() =>\n                                props.history.push(\n                                    `/shop/${item.user}/${item.details.itemId}`\n                                )\n                            }\n                        >\n                            {item.details.itemName}\n                        </span>\n                        {' .'}\n                    </span>\n                )\n                break\n            case 'delete perk':\n                text = (\n                    <span>\n                        <UserButton span={true} noAva={true} id={item.user} />\n                        {' deleted '}\n                        {item.details.itemName} from shop.\n                    </span>\n                )\n                break\n            case 'buy perk':\n                text = (\n                    <span>\n                        <UserButton span={true} noAva={true} id={item.user} />\n                        {' bought '}\n                        <span\n                            style={{ fontWeight: 'bold' }}\n                            onClick={() =>\n                                props.history.push(\n                                    `/shop/${item.user}/${item.details.itemId}`\n                                )\n                            }\n                        >\n                            {item.details.itemName} (${item.details.price})\n                        </span>\n                        {' from '}\n                        <UserButton\n                            span={true}\n                            noAva={true}\n                            id={item.details.owner}\n                        />\n                        {' .'}\n                    </span>\n                )\n                break\n            case 'cancel transaction':\n            case 'confirm transaction':\n                text = (\n                    <span>\n                        <UserButton span={true} noAva={true} id={item.user} />{' '}\n                        {item.code === 'cancel transaction'\n                            ? 'cancelled'\n                            : 'confirmed'}\n                        {' purchase of '}\n                        <span\n                            style={{ fontWeight: 'bold' }}\n                            onClick={() =>\n                                props.history.push(\n                                    `/shop/${item.user}/${item.details.itemId}`\n                                )\n                            }\n                        >\n                            {item.details.itemName} (${item.details.price})\n                        </span>\n                        {' by '}\n                        <UserButton\n                            span={true}\n                            noAva={true}\n                            id={item.details.buyer}\n                        />\n                        {' .'}\n                    </span>\n                )\n                break\n            case 'start progress':\n                text = (\n                    <span>\n                        <UserButton span={true} noAva={true} id={item.user} />\n                        {' started participating in progress '}\n                        <span\n                            style={{ fontWeight: 'bold' }}\n                            onClick={() =>\n                                props.history.push(\n                                    `/inspirations/${item.details.itemId}`\n                                )\n                            }\n                        >\n                            {item.details.itemName}\n                        </span>\n                        {' as '}\n                        {item.details.as}.\n                    </span>\n                )\n                break\n            case 'stage approve':\n            case 'stage progress':\n            case 'stage fail':\n            case 'stage dismiss':\n                stageName = getStageName(item.details)\n                text = (\n                    <span>\n                        <UserButton span={true} noAva={true} id={item.user} />\n                        {item.code === 'stage approve'\n                            ? ' approved  '\n                            : item.code === 'stage progress'\n                            ? ' put into process '\n                            : item.code === 'stage fail'\n                            ? ' marked as failed '\n                            : ' dismissed '}\n                        <span\n                            style={{ fontWeight: 'bold' }}\n                            onClick={() =>\n                                props.history.push(\n                                    `/inspirations/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </span>\n                        {stageName && (\n                            <>\n                                {' for '}\n                                <span style={{ fontWeight: 'bold' }}>\n                                    {stageName}\n                                </span>\n                            </>\n                        )}\n                        .\n                    </span>\n                )\n                break\n\n            case 'stage complete':\n                text = (\n                    <span>\n                        {'Progress '}\n                        <span\n                            style={{ fontWeight: 'bold' }}\n                            onClick={() =>\n                                props.history.push(\n                                    `/inspirations/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </span>\n                        {stageName && (\n                            <>\n                                {' for '}\n                                <span style={{ fontWeight: 'bold' }}>\n                                    {stageName}\n                                </span>\n                            </>\n                        )}\n\n                        {' was approved and finished.'}\n                    </span>\n                )\n                break\n            case 'milestone finish':\n                text = (\n                    <span>\n                        Milestone {item.details.itemName}\n                        {' in progress '}\n                        <span\n                            style={{ fontWeight: 'bold' }}\n                            onClick={() =>\n                                props.history.push(\n                                    `/inspirations/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </span>\n                        {' was approved and finished.'}\n                    </span>\n                )\n                break\n            case 'get reward':\n                text = (\n                    <span>\n                        <UserButton span={true} noAva={true} id={item.user} />\n                        {' recieved '}\n                        {getRewardText(item)}\n                        {' as a reward from '}\n                        <UserButton\n                            span={true}\n                            noAva={true}\n                            id={item.details.from}\n                        />\n                        {' in progress '}\n                        <span\n                            style={{ fontWeight: 'bold' }}\n                            onClick={() =>\n                                props.history.push(\n                                    `/inspirations/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </span>\n                        .\n                    </span>\n                )\n                break\n            case 'leave progress':\n                text = (\n                    <span>\n                        <UserButton span={true} noAva={true} id={item.user} />\n                        {' left progress '}\n                        <span\n                            style={{ fontWeight: 'bold' }}\n                            onClick={() =>\n                                props.history.push(\n                                    `/inspirations/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </span>\n                        .\n                    </span>\n                )\n                break\n            case 'edit progress':\n                text = (\n                    <span>\n                        <UserButton span={true} noAva={true} id={item.user} />\n                        {' edited progress '}\n                        <span\n                            style={{ fontWeight: 'bold' }}\n                            onClick={() =>\n                                props.history.push(\n                                    `/inspirations/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </span>\n                        {item.details.addedAccounts.length > 0 ? (\n                            <>\n                                {' and added '}\n                                {item.details.addedAccounts.map(ac => (\n                                    <UserButton\n                                        span={true}\n                                        noAva={true}\n                                        id={ac}\n                                    />\n                                ))}{' '}\n                            </>\n                        ) : (\n                            ''\n                        )}\n                        {item.details.droppedAccounts.length > 0 ? (\n                            <>\n                                {' and removed '}\n                                {item.details.droppedAccounts.map(ac => (\n                                    <UserButton\n                                        span={true}\n                                        noAva={true}\n                                        id={ac}\n                                    />\n                                ))}\n                                {' .'}\n                            </>\n                        ) : (\n                            '.'\n                        )}\n                    </span>\n                )\n                break\n            case 'remove from progress':\n                text = (\n                    <span>\n                        <UserButton span={true} noAva={true} id={item.user} />\n                        {' removed '}\n                        <UserButton\n                            span={true}\n                            noAva={true}\n                            id={item.details.account}\n                        />\n                        {' from progress '}\n                        <span\n                            style={{ fontWeight: 'bold' }}\n                            onClick={() =>\n                                props.history.push(\n                                    `/inspirations/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </span>\n                        .\n                    </span>\n                )\n                break\n            case 'add to progress':\n                text = (\n                    <span>\n                        <UserButton span={true} noAva={true} id={item.user} />\n                        {' added '}\n                        <UserButton\n                            span={true}\n                            noAva={true}\n                            id={item.details.account}\n                        />\n                        {' to progress '}\n                        <span\n                            style={{ fontWeight: 'bold' }}\n                            onClick={() =>\n                                props.history.push(\n                                    `/inspirations/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </span>\n                        .\n                    </span>\n                )\n                break\n            case 'add reward':\n                text = (\n                    <span>\n                        <UserButton span={true} noAva={true} id={item.user} />\n                        {' added '}\n                        {getRewardText(item)} as a reward for\n                        {!item.details.for || item.details.for.length === 0\n                            ? ' all '\n                            : item.details.for.map(account => (\n                                  <>\n                                      <UserButton\n                                          noAva={true}\n                                          span={true}\n                                          id={account}\n                                      />\n                                      ,\n                                  </>\n                              ))}\n                        {' in progress '}\n                        <span\n                            style={{ fontWeight: 'bold' }}\n                            onClick={() =>\n                                props.history.push(\n                                    `/inspirations/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </span>\n                        .\n                    </span>\n                )\n                break\n            case 'delete reward':\n                text = (\n                    <span>\n                        <UserButton span={true} noAva={true} id={item.user} />\n                        {' removed '}\n                        {getRewardText(item)}\n                        {' as a reward for '}\n                        {!item.details.for || item.details.for.length === 0\n                            ? ' all '\n                            : item.details.for.map(account => (\n                                  <>\n                                      <UserButton\n                                          span={true}\n                                          noAva={true}\n                                          id={account}\n                                      />\n                                      ,\n                                  </>\n                              ))}\n                        {' in progress '}\n                        <span\n                            style={{ fontWeight: 'bold' }}\n                            onClick={() =>\n                                props.history.push(\n                                    `/inspirations/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </span>\n                        .\n                    </span>\n                )\n                break\n            default:\n                text = 'New event'\n                break\n        }\n        return (\n            <>\n                <Divider style={{ margin: '5px 0px' }} />\n                <Comment\n                    avatar={\n                        <UserButton noName={true} id={item.user} span={true} />\n                    }\n                    content={text}\n                />\n            </>\n        )\n\n        // <Card>{text}</Card>\n    })\n}\nconst mapStateToProps = state => {\n    return {\n        lastNotifications: state.lastNotifications,\n    }\n}\n\nexport default withRouter(connect(mapStateToProps)(DashboardEvents))\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport * as wsActions from '../../websocketActions'\n\nimport Tabs from 'antd/es/tabs'\nimport DashboardPosts from './DashboardPosts'\nimport DashboardEvents from './DashboardEvents'\nimport Badge from 'antd/es/badge'\n\nconst Progress = props => {\n    const { account, lastNotifications } = props\n\n    if (!account._id) return null\n\n    props.setPageTitle({ main: 'Dashboard', sub: '' })\n\n    let numberOfUnseenNots = 0\n    for (let not of lastNotifications) {\n        if (parseInt(not.notId) > parseInt(account.lastSeenNot || 0))\n            numberOfUnseenNots++\n    }\n\n    return (\n        <div className=\"contentDiv\">\n            <Tabs\n                onChange={activeTab => {\n                    if (activeTab === 'events') {\n                        const last = parseInt(\n                            lastNotifications.reduce((res, not) => {\n                                return parseInt(not.notId) > parseInt(res)\n                                    ? not.notId\n                                    : res\n                            }, 0)\n                        )\n                        if (\n                            lastNotifications.length > 0 &&\n                            parseInt(account.lastSeenNot) !== last\n                        ) {\n                            wsActions.setLastSeenNot(account._id, last)\n                        }\n                    }\n                }}\n            >\n                <Tabs.TabPane tab=\"Posts\" key=\"posts\">\n                    <DashboardPosts />\n                </Tabs.TabPane>\n\n                <Tabs.TabPane\n                    tab={\n                        <Badge count={numberOfUnseenNots} offset={[10, 0]}>\n                            Events\n                        </Badge>\n                    }\n                    key=\"events\"\n                >\n                    <DashboardEvents />\n                </Tabs.TabPane>\n            </Tabs>\n        </div>\n    )\n}\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n        lastNotifications: state.lastNotifications,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Progress)\n","import { webSocket } from '../containers/ConnectWebsocket/ConnectWebsocket'\n\nexport const setLastSeenNot = (accountId, notId) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'setLastSeenNot',\n                accountId,\n                notId,\n            })\n        )\n    }\n}\n","import React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport axios from 'axios'\nimport InfiniteScroll from 'react-infinite-scroller'\nimport message from 'antd/es/message'\n\nimport Input from 'antd/es/input'\nimport MasonryGrid from '../../components/MasonryGrid'\nimport MasonryCard from '../../components/MasonryCard'\n\nconst Explore = props => {\n    useEffect(() => {\n        props.setPageTitle({ main: 'Explore', sub: '' })\n    }, [])\n    const [isSearching, setIsSearching] = useState(false)\n    const [foundProgresses, setFoundProgresses] = useState([])\n    const [progresses, setProgresses] = useState([])\n    const [noMore, setNoMore] = useState(false)\n    const [noMorePopular, setNoMorePopular] = useState(false)\n    const [searchValue, setSearchValue] = useState('')\n\n    const onSearch = (value, noNoMore) => {\n        if (!noMore || noNoMore) {\n            setNoMore(true)\n            axios\n                .post('/api/explore/search', {\n                    value: value || searchValue,\n                    skip: noNoMore ? 0 : foundProgresses.length,\n                })\n                .then(res => {\n                    if (res.data.success) {\n                        setNoMore(res.data.noMore)\n                        setFoundProgresses(res.data.progresses)\n                        if (res.data.progresses.length === 0)\n                            message.warning('There are no progresses found.')\n                        const newFriendData = {}\n                        for (let friend of res.data.friends) {\n                            newFriendData[friend._id] = friend\n                        }\n                    } else {\n                        if (res.data.errorCode) {\n                            message.error(\n                                'Something is wrong with the data. Please try one more time with new data.'\n                            )\n                        }\n                    }\n                })\n                .catch(err => {})\n        }\n    }\n\n    const onGetPopular = () => {\n        console.log('lets get more')\n        console.log(noMorePopular)\n        if (!noMorePopular) {\n            setNoMorePopular(true)\n            axios\n                .post('/api/explore/popular', {\n                    skip: progresses.length,\n                })\n                .then(res => {\n                    if (res.data.success) {\n                        setNoMorePopular(res.data.noMore)\n                        setProgresses([...progresses, ...res.data.progresses])\n                        const newFriendData = {}\n                        for (let friend of res.data.friends) {\n                            newFriendData[friend._id] = friend\n                        }\n                    } else {\n                        if (res.data.errorCode) {\n                            message.error(\n                                'Something is wrong with the data. Please try one more time with new data.'\n                            )\n                        }\n                    }\n                })\n                .catch(err => {})\n        }\n    }\n\n    return (\n        <div>\n            <Input.Search\n                placeholder=\"Find great progresses!\"\n                onSearch={value => {\n                    if (value) {\n                        setIsSearching(true)\n                        if (value !== searchValue) {\n                            setNoMore(false)\n                            setFoundProgresses([])\n                            setSearchValue(value)\n                            onSearch(value, true)\n                        }\n                    } else {\n                        setNoMore(false)\n                        setSearchValue(value)\n                        setIsSearching(false)\n                    }\n                }}\n                onChange={e => {\n                    if (!e.target.value) {\n                        setNoMore(false)\n                        setFoundProgresses([])\n                        setIsSearching(false)\n                        setSearchValue('')\n                    }\n                }}\n                enterButton\n                allowClear\n                style={{\n                    maxWidth: '500px',\n                    borderRadius: '10px',\n                }}\n            />\n            {isSearching ? (\n                foundProgresses.length > 0 ? (\n                    <InfiniteScroll\n                        pageStart={0}\n                        loadMore={onSearch(searchValue)}\n                        hasMore={!noMore}\n                        loader={\n                            <div className=\"loader\" key={0}>\n                                Loading ...\n                            </div>\n                        }\n                    >\n                        <MasonryGrid>\n                            {foundProgresses.map((item, index) => (\n                                <MasonryCard\n                                    key={index}\n                                    onClickLink={'/inspirations/' + item._id}\n                                    images={item.goal.images}\n                                    body={\n                                        <>\n                                            {/* <UserButton\n                                                noName={true}\n                                                id={item.owner}\n                                                friendDataExp={friendData}\n                                            /> */}\n                                            <span\n                                                style={{ fontWeight: 'bold' }}\n                                            >\n                                                {item.name}\n                                            </span>\n                                        </>\n                                    }\n                                />\n                            ))}\n                        </MasonryGrid>\n                    </InfiniteScroll>\n                ) : null\n            ) : (\n                <InfiniteScroll\n                    pageStart={0}\n                    loadMore={onGetPopular}\n                    hasMore={!noMorePopular}\n                    loader={\n                        <div className=\"loader\" key={0}>\n                            Loading ...\n                        </div>\n                    }\n                >\n                    <MasonryGrid>\n                        {progresses.map((item, index) => (\n                            <MasonryCard\n                                key={index}\n                                onClickLink={'/inspirations/' + item._id}\n                                images={item.goal.images}\n                                body={\n                                    <>\n                                        {/* <UserButton\n                                            noName={true}\n                                            id={item.owner}\n                                            friendDataExp={friendData}\n                                        /> */}\n                                        <span style={{ fontWeight: 'bold' }}>\n                                            {item.name}\n                                        </span>\n                                    </>\n                                }\n                            />\n                        ))}\n                    </MasonryGrid>\n                </InfiniteScroll>\n            )}\n        </div>\n    )\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n        setData: data => dispatch(actions.setData(data)),\n    }\n}\n\nexport default connect(\n    null,\n    mapDispatchToProps\n)(Explore)\n","import React from 'react'\n\nimport * as wsActions from '../websocketActions'\nimport Menu from 'antd/es/menu'\nimport Dropdown from 'antd/es/dropdown'\nimport { DownOutlined } from '@ant-design/icons'\nimport Button from 'antd/es/button'\nimport MoreIcon from './UI/MoreIcon'\n\nconst FriendActionButton = props => {\n    const { invitingFriends, invitedFriends, realFriends, _id, account } = props\n    const accountId = account ? account._id : ''\n    if (!accountId) return []\n\n    if (accountId === _id) return [props.additionalButton]\n\n    const menu = (\n        <Menu onClick={({ domEvent }) => domEvent.stopPropagation()}>\n            {props.additionalButtons &&\n                props.additionalButtons.map((button, index) => (\n                    <Menu.Item key={index + 100} onClick={button.onClick}>\n                        {button.title}\n                    </Menu.Item>\n                ))}\n            {invitingFriends.find(item => item.friend === _id) ? (\n                <Menu.Item\n                    key=\"2\"\n                    onClick={() => wsActions.unfriend(accountId, _id)}\n                    danger={true}\n                >\n                    Decline\n                </Menu.Item>\n            ) : invitedFriends.find(item => item.friend === _id) ? (\n                <Menu.Item\n                    key=\"3\"\n                    onClick={() => wsActions.unfriend(accountId, _id)}\n                    danger={true}\n                >\n                    Cancel invitation\n                </Menu.Item>\n            ) : realFriends.find(item => item.friend === _id) ? (\n                <Menu.Item\n                    key=\"4\"\n                    onClick={() => wsActions.unfriend(accountId, _id)}\n                    danger={true}\n                >\n                    Unfriend\n                </Menu.Item>\n            ) : null}\n            {props.noFollow ? null : account.followAccounts.includes(_id) ? (\n                <Menu.Item\n                    key=\"5\"\n                    onClick={() => wsActions.unfollowAccount(accountId, _id)}\n                    danger={true}\n                >\n                    Unfollow\n                </Menu.Item>\n            ) : (\n                <Menu.Item\n                    key=\"6\"\n                    onClick={() => wsActions.followAccount(accountId, _id)}\n                >\n                    Follow\n                </Menu.Item>\n            )}\n        </Menu>\n    )\n    return invitingFriends.find(item => item.friend === _id) ? (\n        <Dropdown.Button\n            type=\"primary\"\n            overlay={menu}\n            trigger={['click', 'hover']}\n            onClick={e => {\n                e.preventDefault()\n                e.stopPropagation()\n                wsActions.acceptFriend(accountId, _id)\n            }}\n        >\n            Accept friendship\n        </Dropdown.Button>\n    ) : ![...realFriends, ...invitingFriends, ...invitedFriends].find(\n          item => item.friend === _id\n      ) ? (\n        <Dropdown.Button\n            type=\"primary\"\n            overlay={menu}\n            trigger={['click', 'hover']}\n            onClick={e => {\n                e.preventDefault()\n                e.stopPropagation()\n                wsActions.addFriend(accountId, _id)\n            }}\n        >\n            Become friends\n        </Dropdown.Button>\n    ) : (\n        <Dropdown overlay={menu} trigger={['click']}>\n            <a\n                // className=\"ant-dropdown-link\"\n                onClick={e => {\n                    e.preventDefault()\n                    e.stopPropagation()\n                }}\n            >\n                <Button type={props.asText ? 'primary' : 'link'}>\n                    {props.asText ? (\n                        <>\n                            Actions <DownOutlined />\n                        </>\n                    ) : (\n                        <MoreIcon />\n                    )}\n                </Button>\n            </a>\n        </Dropdown>\n    )\n}\n\nexport default FriendActionButton\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport * as actions from '../store/actions'\nimport { withRouter } from 'react-router-dom'\n\nimport friendActionButton from './FriendActionButton'\nimport UserButton from './UserButton/UserButton'\nimport MasonryCard from './MasonryCard'\n\nconst FriendCard = props => {\n    const friendActions = friendActionButton({\n        account: props.account,\n        realFriends: props.realFriends,\n        invitedFriends: props.invitedFriends,\n        invitingFriends: props.invitingFriends,\n        _id: props.friend._id,\n        asIcons: true,\n\n        additionalButtons: [\n            {\n                title: 'See profile',\n                onClick: () =>\n                    props.history.push('/profile/' + props.friend._id),\n            },\n        ],\n    })\n\n    return (\n        <MasonryCard\n            actions={friendActions}\n            body={<UserButton span={true} id={props.friend._id} size={50} />}\n        />\n    )\n}\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n        isAuthed: state.isAuthed,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: (data, pulledFrom) =>\n            dispatch(actions.setData(data, pulledFrom)),\n        tryAuth: (props, forceAuth) =>\n            dispatch(actions.tryAuth(props, forceAuth)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(FriendCard)\n)\n","import React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport * as wsActions from '../../websocketActions'\nimport Card from 'antd/es/card'\nimport Button from 'antd/es/button'\nimport Modal from 'antd/es/modal'\n\nimport Input from 'antd/es/input'\nimport Form from 'antd/es/form'\n\nimport FriendCard from '../../components/FriendCard'\nimport { nicknameRules } from '../../constants/fieldRules'\n\nconst AddFriends = props => {\n    useEffect(() => {\n        props.setFriendSearchResult({})\n    }, [props.addFriendOpen])\n\n    const {\n        addFriendOpen,\n        setAddFriendOpen,\n        searchResult,\n        realFriends,\n        invitedFriends,\n        invitingFriends,\n    } = props\n    const layout = {\n        labelCol: { span: 8 },\n        wrapperCol: { span: 16 },\n    }\n    const tailLayout = {\n        wrapperCol: { offset: 8, span: 16 },\n    }\n\n    return (\n        <Modal\n            title=\"Add friend\"\n            visible={addFriendOpen}\n            maskClosable\n            closable\n            onCancel={() => setAddFriendOpen(false)}\n            footer={\n                <Button key=\"back\" onClick={() => setAddFriendOpen(false)}>\n                    Return\n                </Button>\n            }\n            destroyOnClose={true}\n        >\n            <p>To find a friend you need to enter your friend's nickname.</p>\n            <Form\n                name=\"dynamic_form_nest_item\"\n                onFinish={value => wsActions.searchFriends(value.search)}\n                autoComplete=\"off\"\n                {...layout}\n            >\n                <Form.Item label=\"Search\" name=\"search\" rules={nicknameRules}>\n                    <Input placeholder=\"Must be more than 2 characters long\" />\n                </Form.Item>\n\n                <Form.Item {...tailLayout}>\n                    <Button type=\"primary\" htmlType=\"submit\" size=\"large\">\n                        Search\n                    </Button>\n                </Form.Item>\n            </Form>\n            {searchResult._id && (\n                <Card title=\"Search result\">\n                    <FriendCard\n                        {...props}\n                        friend={searchResult}\n                        realFriends={realFriends}\n                        invitingFriends={invitingFriends}\n                        invitedFriends={invitedFriends}\n                    />\n                </Card>\n            )}\n        </Modal>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        searchResult: state.friendSearchResult,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setFriendSearchResult: data =>\n            dispatch(actions.setFriendSearchResult(data)),\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(AddFriends)\n","import React from 'react'\nimport { withRouter } from 'react-router-dom'\nimport Masonry from 'react-masonry-css'\nimport { friendsBreakPoints } from '../../utils/masonryBreakPoints'\n\nimport FriendCard from '../../components/FriendCard'\nimport MasonryGrid from '../../components/MasonryGrid'\n\nconst pendingFriends = props => {\n    const { realFriends, invitedFriends, invitingFriends } = props\n    return (\n        <>\n            {invitingFriends.length > 0 && (\n                <>\n                    <h2>People invited me to be friends</h2>\n                    <MasonryGrid friends={true}>\n                        {invitingFriends.map(friend => (\n                            <FriendCard\n                                key={friend._id}\n                                {...props}\n                                friend={friend}\n                                realFriends={realFriends}\n                                invitingFriends={invitingFriends}\n                                invitedFriends={invitedFriends}\n                            />\n                        ))}\n                    </MasonryGrid>\n                </>\n            )}\n\n            {invitedFriends.length > 0 && (\n                <>\n                    <h2>I invited these people</h2>\n                    <MasonryGrid friends={true}>\n                        {invitedFriends.map(friend => (\n                            <FriendCard\n                                key={friend._id}\n                                {...props}\n                                friend={friend}\n                                realFriends={realFriends}\n                                invitingFriends={invitingFriends}\n                                invitedFriends={invitedFriends}\n                            />\n                        ))}\n                    </MasonryGrid>\n                </>\n            )}\n        </>\n    )\n}\n\nexport default withRouter(pendingFriends)\n","import React, { useState, useEffect } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\n\nimport FriendCard from '../../components/FriendCard'\nimport AddCard from '../../components/AddCard/AddCard'\nimport AddFriends from './AddFriends'\nimport PendingFriends from './PendingFriends'\nimport Tabs from 'antd/es/tabs'\nimport Empty from 'antd/es/empty'\nimport Badge from 'antd/es/badge'\nimport Masonry from 'react-masonry-css'\nimport { friendsBreakPoints } from '../../utils/masonryBreakPoints'\nimport MasonryGrid from '../../components/MasonryGrid'\n\nconst Friends = props => {\n    const [addFriendOpen, setAddFriendOpen] = useState()\n\n    useEffect(() => {\n        props.setPageTitle({ main: 'Friends', sub: '' })\n    }, [])\n\n    const { account, friendData } = props\n    if (!account._id) return null\n    const realFriends = [],\n        invitedFriends = [],\n        invitingFriends = []\n\n    if (account.friends) {\n        for (let friend of account.friends) {\n            const fullFriend = { ...friendData[friend.friend], ...friend }\n            if (fullFriend) {\n                if (fullFriend.status === 'friend') realFriends.push(fullFriend)\n                else if (fullFriend.status === 'invited')\n                    invitedFriends.push(fullFriend)\n                else if (fullFriend.status === 'inviting')\n                    invitingFriends.push(fullFriend)\n            }\n        }\n    }\n\n    const confirmedFriends =\n        realFriends.length > 0 ? (\n            <MasonryGrid friends={true}>\n                {realFriends.map(friend => (\n                    <FriendCard\n                        key={friend._id}\n                        {...props}\n                        friend={friend}\n                        realFriends={realFriends}\n                        invitingFriends={invitingFriends}\n                        invitedFriends={invitedFriends}\n                    />\n                ))}\n            </MasonryGrid>\n        ) : (\n            <Empty\n                image=\"https://websiter.s3.us-east-2.amazonaws.com/image+4.jpg\"\n                imageStyle={{ height: '250px', marginTop: '50px' }}\n                description={false}\n            />\n        )\n    return (\n        <div>\n            <AddCard\n                title=\"Add friend\"\n                sub=\"Find by nickname\"\n                action={() => setAddFriendOpen(true)}\n            />\n            {invitedFriends.length > 0 || invitingFriends.length > 0 ? (\n                <Tabs>\n                    <Tabs.TabPane key=\"confirmed\" tab=\"Confrmed\">\n                        {confirmedFriends}\n                    </Tabs.TabPane>\n\n                    <Tabs.TabPane\n                        tab={\n                            <Badge\n                                count={invitingFriends.length}\n                                offset={[10, 0]}\n                            >\n                                Pending\n                            </Badge>\n                        }\n                        key=\"pending\"\n                    >\n                        <PendingFriends\n                            realFriends={realFriends}\n                            invitedFriends={invitedFriends}\n                            invitingFriends={invitingFriends}\n                        />\n                    </Tabs.TabPane>\n                </Tabs>\n            ) : (\n                confirmedFriends\n            )}\n            <AddFriends\n                addFriendOpen={addFriendOpen}\n                setAddFriendOpen={setAddFriendOpen}\n                realFriends={realFriends}\n                invitedFriends={invitedFriends}\n                invitingFriends={invitingFriends}\n                account={account}\n            />\n        </div>\n    )\n}\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n        friendData: state.friendData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Friends)\n)\n","import React, { useEffect, useState } from 'react'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport Form from 'antd/es/form'\nimport Input from 'antd/es/input'\n\nimport { withRouter } from 'react-router-dom'\nimport Card from 'antd/es/card'\nimport Upload from 'antd/es/upload'\nimport * as classes from './Settings.module.css'\n\nimport LoadingOutlined from '@ant-design/icons/LoadingOutlined'\nimport PlusOutlined from '@ant-design/icons/PlusOutlined'\n\nimport { uploadFile } from '../../utils/uploadFile'\nimport Avatar from 'antd/es/avatar'\nimport getAvatar from '../../utils/getAvatar'\nimport Modal from 'antd/es/modal'\nimport { accountNameRules } from '../../constants/fieldRules'\nimport * as wsActions from '../../websocketActions'\nimport message from 'antd/es/message'\nimport Dropdown from 'antd/es/dropdown'\nimport Menu from 'antd/es/menu'\n\nconst Settings = props => {\n    const [deleteVisible, setDeleteVisible] = useState()\n    const [deleteField, setDeleteField] = useState('')\n    const { account } = props\n\n    useEffect(() => {\n        props.setPageTitle({ main: 'Settings', sub: '' })\n    }, [])\n\n    const loading = false\n\n    const layout = {\n        labelCol: { span: 8 },\n        wrapperCol: { span: 16 },\n    }\n    const tailLayout = {\n        wrapperCol: { offset: 8, span: 0 },\n    }\n    return account && account.name ? (\n        <div className=\"contentDiv\">\n            <Card>\n                <Upload\n                    name=\"avatar\"\n                    listType=\"picture-card\"\n                    className={classes.Avatar}\n                    showUploadList={false}\n                    customRequest={({ file }) => {\n                        uploadFile(file, 800, 'avatar', () => {\n                            props.increaseAvatarV()\n                        })\n                    }}\n                >\n                    {account.image ? (\n                        <Avatar\n                            src={getAvatar(account._id, account.image)}\n                            size={150}\n                            style={{ margin: '25px' }}\n                        />\n                    ) : (\n                        <div>\n                            {loading ? <LoadingOutlined /> : <PlusOutlined />}\n                            <div className=\"ant-upload-text\">Upload</div>\n                        </div>\n                    )}\n                </Upload>\n                <Form\n                    name=\"dynamic_form_nest_item\"\n                    onFinish={value =>\n                        wsActions.editAccount(value, account._id)\n                    }\n                    autoComplete=\"off\"\n                    {...layout}\n                    initialValues={{\n                        name: account.name,\n                        nickname: account._id,\n                    }}\n                >\n                    <Form.Item\n                        label=\"Name\"\n                        name=\"name\"\n                        rules={accountNameRules}\n                    >\n                        <Input placeholder=\"Must be more than 1 character long\" />\n                    </Form.Item>\n                    <Form.Item label=\"Nickname\" name=\"nickname\">\n                        <Input disabled={true} />\n                    </Form.Item>\n                    <Form.Item\n                        {...tailLayout}\n                        style={{\n                            flex: 'none',\n                            maxWidth: ' 100%',\n                            overflow: 'hidden',\n                        }}\n                    >\n                        <Dropdown.Button\n                            type=\"primary\"\n                            htmlType=\"submit\"\n                            size=\"large\"\n                            overlay={\n                                <Menu>\n                                    <Menu.Item\n                                        danger={true}\n                                        onClick={() => setDeleteVisible(true)}\n                                    >\n                                        Delete account\n                                    </Menu.Item>\n                                </Menu>\n                            }\n                        >\n                            Save\n                        </Dropdown.Button>\n                    </Form.Item>\n                </Form>\n                <Modal\n                    title=\"Delete account\"\n                    visible={deleteVisible}\n                    onOk={() => {\n                        if (deleteField !== account._id) {\n                            message.warning('The nickmanme is not correct.')\n                        } else {\n                            wsActions.deleteAccount(account._id)\n                        }\n                    }}\n                    onCancel={() => {\n                        setDeleteVisible(false)\n                        setDeleteField('')\n                    }}\n                >\n                    <p>\n                        Please enter your nickname and press Ok to delete your\n                        account.\n                    </p>\n                    <Input onChange={e => setDeleteField(e.target.value)} />\n                </Modal>\n            </Card>\n        </div>\n    ) : null\n}\n\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n        increaseAvatarV: () => dispatch(actions.increaseAvatarV()),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Settings)\n)\n","import React from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\n\nimport Avatar from 'antd/es/avatar'\n\nconst ProgressButton = props => {\n    const { id } = props\n    const userName = id => props.progressData[id].goal.name\n    const userAvatar = id => (\n        <span\n            onClick={() => {\n                handleClick(id)\n            }}\n        >\n            <Avatar\n                src={\n                    props.progressData[id].goal.images.length > 0 &&\n                    props.progressData[id].goal.images[0]\n                }\n                size={props.size || (props.noClick ? 20 : 40)}\n                style={props.group ? {} : { margin: ' 0 5px' }}\n            />\n        </span>\n    )\n\n    const handleClick = id =>\n        props.history.push('/inspirations/' + (id || props.id))\n    return (\n        <span\n            style={{ cursor: 'pointer', fontWeight: 'bold', ...props.style }}\n            onClick={e => {\n                e.stopPropagation()\n                handleClick()\n            }}\n        >\n            {userAvatar(id)}\n            {userName(id)}\n        </span>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        progressData: state.progressData,\n    }\n}\n\nexport default withRouter(connect(mapStateToProps)(ProgressButton))\n","import React, { useEffect, useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport Avatar from 'antd/es/avatar'\nimport Card from 'antd/es/card'\n\nimport friendActionButton from '../../components/FriendActionButton'\nimport FriendCard from '../../components/FriendCard'\nimport Tabs from 'antd/es/tabs'\nimport Progresses from '../Progresses/Progresses'\nimport Wallet from '../Shop/Wallet'\nimport PerkCard from '../Shop/PerkCard'\nimport getAvatar from '../../utils/getAvatar'\nimport pullData from '../../utils/pullData'\nimport UserButton from '../../components/UserButton/UserButton'\nimport MasonryGrid from '../../components/MasonryGrid'\nimport Button from 'antd/es/button'\nimport Modal from 'antd/es/modal/Modal'\nimport MasonryCard from '../../components/MasonryCard'\nimport ProgressButton from '../../components/ProgressButton'\nimport FollowButton from '../../components/FollowButton'\nimport Tag from 'antd/es/tag'\nimport * as wsActions from '../../websocketActions'\n\nconst Profile = props => {\n    const [data, setData] = useState({})\n    const [followersVisible, setFollowersVisible] = useState(false)\n    const [followingVisible, setFollowingVisible] = useState(false)\n    const { profile, friendData, account } = props.isAuthed ? props : data\n\n    useEffect(() => {\n        const pathParts = props.history.location.pathname.split('/')\n        if (pathParts.length > 2) {\n            const profileId = pathParts[2]\n            if (props.isAuthed) {\n                props.setData({ currentProfile: profileId })\n            } else {\n                pullData(props, data, setData, { forceAuth: false }, data => {\n                    const friendData = {}\n                    for (let friend of data.friendData)\n                        friendData[friend._id] = friend\n                    const progressData = {}\n                    for (let progress of data.progressData)\n                        progressData[progress._id] = progress\n                    const groupData = {}\n                    for (let group of data.groupData)\n                        groupData[group._id] = group\n\n                    props.setData({\n                        // profile: data.profile,\n                        friendData,\n                        progressData,\n                        groupData,\n                        account: {},\n                    })\n                })\n            }\n        } else {\n            if (props.isAuthed) {\n                props.setData({ currentProfile: account._id })\n            }\n        }\n    }, [props.isAuthed, props.history.location.pathname, props.account._id])\n\n    if (!profile || !profile._id) return null\n    props.setPageTitle({ main: profile.name, sub: '' })\n\n    const realFriends = [],\n        invitedFriends = [],\n        invitingFriends = []\n    if (profile && profile.friends && account && account._id) {\n        for (let friend of account.friends) {\n            if (friend.status === 'friend') realFriends.push(friend)\n            else if (friend.status === 'invited') invitedFriends.push(friend)\n            else if (friend.status === 'inviting') invitingFriends.push(friend)\n        }\n    }\n    const friendActions = friendActionButton({\n        account,\n        realFriends: realFriends,\n        invitedFriends: invitedFriends,\n        invitingFriends: invitingFriends,\n        _id: profile._id,\n        additionalButton: null,\n        asText: true,\n    })\n    return (\n        <>\n            <div>\n                <Card>\n                    <div style={{ textAlign: 'center', marginBottom: '50px' }}>\n                        <Avatar\n                            src={getAvatar(profile._id, profile.image)}\n                            size={200}\n                        />\n                        <h1 style={{ margin: 0 }}>{profile.name}</h1>\n                        <h3>({profile._id})</h3>\n                        <Button\n                            type=\"text\"\n                            onClick={() => setFollowersVisible(true)}\n                        >\n                            {profile.followingAccounts.length} Followers\n                        </Button>\n                        <Button\n                            type=\"text\"\n                            onClick={() => setFollowingVisible(true)}\n                        >\n                            {profile.followProgresses.length +\n                                profile.followAccounts.length}{' '}\n                            Following\n                        </Button>\n                        <div>\n                            {account && account._id !== profile._id && (\n                                <span style={{ marginRight: '10px' }}>\n                                    {realFriends.find(\n                                        item => item.friend === profile._id\n                                    ) ? (\n                                        <Tag color=\"green\">Friends</Tag>\n                                    ) : null}\n                                    {account.followAccounts.includes(\n                                        profile._id\n                                    ) ? (\n                                        <Tag\n                                            style={{ marginRight: '10px' }}\n                                            color=\"purple\"\n                                        >\n                                            Following\n                                        </Tag>\n                                    ) : (\n                                        <Button\n                                            type=\"primary\"\n                                            onClick={() =>\n                                                wsActions.followAccount(\n                                                    account._id,\n                                                    profile._id\n                                                )\n                                            }\n                                        >\n                                            Follow\n                                        </Button>\n                                    )}\n                                </span>\n                            )}\n                            {friendActions}\n                        </div>\n                    </div>\n                    <Tabs>\n                        <Tabs.TabPane tab=\"Progresses\" key={0}>\n                            <Progresses fromProfile={true} />\n                        </Tabs.TabPane>\n\n                        <Tabs.TabPane tab=\"Friends\" key={1}>\n                            <MasonryGrid friends={true}>\n                                {profile.friends\n                                    .filter(\n                                        friend => friend.status === 'friend'\n                                    )\n                                    .map(friend => {\n                                        const oneFriendData = {\n                                            ...friendData[friend.friend],\n                                            ...friend.friend,\n                                        }\n\n                                        return (\n                                            <FriendCard\n                                                key={oneFriendData._id}\n                                                {...props}\n                                                account={account}\n                                                friend={oneFriendData}\n                                                realFriends={realFriends}\n                                                invitingFriends={\n                                                    invitingFriends\n                                                }\n                                                invitedFriends={invitedFriends}\n                                            />\n                                        )\n                                    })}\n                            </MasonryGrid>\n                        </Tabs.TabPane>\n\n                        <Tabs.TabPane tab=\"Shop\" key={4}>\n                            <MasonryGrid>\n                                {profile.perks &&\n                                    profile.perks.map((perk, index) => (\n                                        <PerkCard\n                                            key={index}\n                                            perk={perk}\n                                            perkId={perk.perkId}\n                                            owner={profile}\n                                            account={account || {}}\n                                            onlyBuy={true}\n                                            mode=\"shop\"\n                                        />\n                                    ))}\n                            </MasonryGrid>\n                        </Tabs.TabPane>\n                        <Tabs.TabPane tab=\"Wallet\" key={5}>\n                            <Wallet pulledProfile={profile} account={profile} />\n                        </Tabs.TabPane>\n                        <Tabs.TabPane tab=\"Wishlist\" key={6}>\n                            <MasonryGrid>\n                                {profile.wishlist.map((item, index) => (\n                                    <PerkCard\n                                        key={index}\n                                        perk={item}\n                                        perkId={item.itemId}\n                                        owner={profile}\n                                        account={account || {}}\n                                        setEditedPerk={() => {}}\n                                        setEditPerkOpen={() => {}}\n                                        onlyBuy={true}\n                                        mode=\"wishlist\"\n                                    />\n                                ))}\n                            </MasonryGrid>\n                        </Tabs.TabPane>\n                    </Tabs>\n                </Card>\n            </div>\n            <Modal\n                title=\"Followers\"\n                visible={followersVisible}\n                footer={null}\n                onCancel={() => setFollowersVisible(false)}\n            >\n                {profile.followingAccounts.map(item => (\n                    <MasonryCard\n                        actions={<FollowButton account={account} id={item} />}\n                        body={<UserButton span={true} id={item} size={50} />}\n                    />\n                ))}\n            </Modal>\n            <Modal\n                title=\"Following\"\n                visible={followingVisible}\n                footer={null}\n                onCancel={() => setFollowingVisible(false)}\n            >\n                <Tabs>\n                    <Tabs.TabPane tab=\"People\" key=\"1\">\n                        {profile.followAccounts.map(item => (\n                            <MasonryCard\n                                actions={\n                                    <FollowButton account={account} id={item} />\n                                }\n                                body={\n                                    <UserButton\n                                        span={true}\n                                        id={item}\n                                        size={50}\n                                    />\n                                }\n                            />\n                        ))}\n                    </Tabs.TabPane>\n                    <Tabs.TabPane tab=\"Inspirations\" key={2}>\n                        {profile.followProgresses.map(item => (\n                            <MasonryCard\n                                actions={\n                                    <FollowButton\n                                        type=\"progress\"\n                                        account={account}\n                                        id={item}\n                                    />\n                                }\n                                body={\n                                    <ProgressButton\n                                        span={true}\n                                        id={item}\n                                        size={50}\n                                    />\n                                }\n                            />\n                        ))}\n                    </Tabs.TabPane>\n                </Tabs>\n            </Modal>\n        </>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n        profile: state.profile,\n        isAuthed: state.isAuthed,\n        friendData: state.friendData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: data => dispatch(actions.setData(data)),\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n        tryAuth: (props, forceAuth) =>\n            dispatch(actions.tryAuth(props, forceAuth)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Profile)\n)\n","import React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\n\nimport Button from 'antd/es/button'\nimport message from 'antd/es/message'\n\nimport Input from 'antd/es/input'\nimport PageHeader from 'antd/es/page-header'\nimport Form from 'antd/es/form'\nimport { withRouter } from 'react-router-dom'\nimport axios from 'axios'\nimport { nicknameRules, accountNameRules } from '../../constants/fieldRules'\nimport * as actions from '../../store/actions'\n\nconst ActivateAccount = props => {\n    if (!props.isAuthed) props.history.push('/logout')\n    useEffect(() => {\n        if (!props.accountNotActive) props.history.push('/settings')\n    }, [props.accountNotActive])\n    const onFinish = value => {\n        axios\n            .post('/api/activate-account', {\n                ...value,\n            })\n            .then(res => {\n                if (res.data.success) {\n                    message.success('Your account has been activated!')\n                    props.setAccountActivated(false)\n                } else {\n                    if (res.data.nicknameNotUnique) {\n                        message.warning(\n                            'The nickname is taken. Choose another nickname please.'\n                        )\n                    }\n                    if (res.data.errorCode) {\n                        message.error(\n                            'Something is wrong with the data. Please try one more time with new data.'\n                        )\n                    }\n                }\n            })\n            .catch(err => {})\n    }\n\n    const layout = {\n        labelCol: { span: 8 },\n        wrapperCol: { span: 16 },\n    }\n    const tailLayout = {\n        wrapperCol: { offset: 8, span: 16 },\n    }\n\n    return (\n        <>\n            <PageHeader\n                className=\"site-page-header\"\n                title=\"Activate your account\"\n                backIcon={false}\n            />\n            <Form\n                name=\"dynamic_form_nest_item\"\n                onFinish={onFinish}\n                autoComplete=\"off\"\n                {...layout}\n            >\n                <Form.Item label=\"Name\" name=\"name\" rules={accountNameRules}>\n                    <Input placeholder=\"Must be more than 1 character long\" />\n                </Form.Item>\n                <Form.Item\n                    label=\"Nickname\"\n                    name=\"nickname\"\n                    rules={nicknameRules}\n                >\n                    <Input placeholder=\"Must be more than 1 character long\" />\n                </Form.Item>\n                <Form.Item {...tailLayout}>\n                    <Button type=\"primary\" htmlType=\"submit\" size=\"large\">\n                        Save\n                    </Button>\n                </Form.Item>\n            </Form>\n        </>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        user: state.user,\n        account: state.account,\n        accountNotActive: state.accountNotActive,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n        setAccountActivated: value =>\n            dispatch(actions.setAccountActivated(value)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(ActivateAccount)\n)\n","import React, { useEffect, useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport Card from 'antd/es/card'\nimport pullData from '../../utils/pullData'\nimport Descriptions from 'antd/es/descriptions'\nimport Post from '../../components/Post/Post'\nimport UserButton from '../../components/UserButton/UserButton'\nimport ImageCarousel from '../../components/UI/ImageCarousel/ImageCarousel'\n\nconst { Item } = Descriptions\n\nconst Perk = props => {\n    const [data, setData] = useState({})\n    const { account } = props\n    useEffect(() => {\n        const pathParts = props.history.location.pathname.split('/')\n        if (pathParts.length > 3) {\n            const accountId = pathParts[2]\n            if (props.isAuthed && account._id === accountId) {\n                const perk = account.perks.find(\n                    item => item.perkId === pathParts[3]\n                )\n                setData({ profile: account, perk })\n            } else {\n                pullData(props, data, setData, { forceAuth: false }, data => {\n                    const friendData = {}\n                    for (let friend of data.friendData)\n                        friendData[friend._id] = friend\n\n                    props.setData({\n                        post: { [data.post._id]: data.post },\n                        friendData,\n                    })\n                })\n            }\n        }\n    }, [props.isAuthed])\n    if (!data.perk) return null\n    const { perk, profile } = data\n    props.setData({ currentPosts: perk.post })\n    if (perk) {\n        props.setPageTitle({ main: perk.name, sub: profile._id })\n    }\n\n    const getAccounts = items => {\n        if (profile && props.friendData) {\n            return items.map(item => <UserButton id={item} />)\n        } else return items\n    }\n\n    return perk ? (\n        <div className=\"contentDiv\">\n            <Card\n                title={\n                    <span>\n                        Item from <UserButton id={profile._id} /> shop\n                    </span>\n                }\n                bordered={false}\n            >\n                <ImageCarousel images={perk.images} />\n\n                <h1>{perk.name}</h1>\n                <p style={{ whiteSpace: 'pre-wrap' }}>{perk.description}</p>\n\n                <Descriptions\n                    title=\"Goal description\"\n                    bordered\n                    column={{ xxl: 4, xl: 3, lg: 3, md: 3, sm: 2, xs: 1 }}\n                >\n                    <Item label=\"Available for\">{getAccounts(perk.users)}</Item>\n                    <Item label=\"Price\">{perk.price}</Item>\n                </Descriptions>\n                <Post\n                    noStartMessage={true}\n                    post={props.post[perk.post]}\n                    account={props.account}\n                    friendData={props.friendData}\n                    showReplies={true}\n                />\n            </Card>\n        </div>\n    ) : null\n}\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        account: state.account,\n        post: state.post,\n        friendData: state.friendData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: data => {\n            dispatch(actions.setData(data))\n        },\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Perk)\n)\n","import React, { useEffect, useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport Card from 'antd/es/card'\nimport pullData from '../../utils/pullData'\nimport Post from '../../components/Post/Post'\nimport ImageCarousel from '../../components/UI/ImageCarousel/ImageCarousel'\nimport UserButton from '../../components/UserButton/UserButton'\n\nconst WishlistItem = props => {\n    const [data, setData] = useState({})\n    const { account } = props\n    useEffect(() => {\n        const pathParts = props.history.location.pathname.split('/')\n        if (pathParts.length > 3) {\n            const accountId = pathParts[2]\n            if (props.isAuthed && account._id === accountId) {\n                const wishlistItem = account.wishlist.find(\n                    item => item.itemId === pathParts[3]\n                )\n                setData({ profile: account, wishlistItem })\n            } else {\n                pullData(props, data, setData, { forceAuth: false }, data => {\n                    const friendData = {}\n                    for (let friend of data.friendData)\n                        friendData[friend._id] = friend\n\n                    props.setData({\n                        post: { [data.post._id]: data.post },\n                        friendData,\n                    })\n                })\n            }\n        }\n    }, [props.isAuthed])\n    if (!data.wishlistItem) return null\n    const { wishlistItem, profile } = data\n    props.setData({ currentPosts: wishlistItem.post })\n    if (wishlistItem) {\n        props.setPageTitle({ main: wishlistItem.name, sub: profile._id })\n    }\n    return wishlistItem ? (\n        <div className=\"contentDiv\">\n            <Card\n                title={\n                    <span>\n                        <UserButton id={profile._id} /> wishlist\n                    </span>\n                }\n                bordered={false}\n            >\n                <ImageCarousel images={wishlistItem.images} />\n\n                <h1>{wishlistItem.name}</h1>\n                <p style={{ whiteSpace: 'pre-wrap' }}>\n                    {wishlistItem.description}\n                </p>\n                <Post\n                    noStartMessage={true}\n                    post={props.post[wishlistItem.post]}\n                    account={props.account}\n                    friendData={props.friendData}\n                    showReplies={true}\n                />\n            </Card>\n        </div>\n    ) : null\n}\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        account: state.account,\n        post: state.post,\n        friendData: state.friendData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: data => {\n            dispatch(actions.setData(data))\n        },\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(WishlistItem)\n)\n","import React, { useEffect } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport WishlistAndPerks from '../Shop/WishlistAndPerks'\n\nconst Wishlist = props => {\n    useEffect(() => {\n        props.setPageTitle({ main: 'Wishlist', sub: '' })\n    }, [])\n\n    return (\n        <div>\n            {props.account._id ? (\n                <WishlistAndPerks mode=\"wishlist\" account={props.account} />\n            ) : (\n                <span />\n            )}\n        </div>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Wishlist)\n)\n","import React from 'react'\nimport { withRouter } from 'react-router-dom'\n\nimport Card from 'antd/es/card'\nimport UserButton from '../../components/UserButton/UserButton'\nimport ImageCarousel from '../../components/UI/ImageCarousel/ImageCarousel'\n\nconst ProgressCard = props => {\n    const { progress } = props\n    const { goal } = progress\n    return (\n        <Card\n            type=\"inner\"\n            style={{ width: '100%', cursor: 'pointer' }}\n            bordered={false}\n            title={\n                <div\n                    onClick={() =>\n                        props.history.push('/inspirations/' + progress._id)\n                    }\n                    style={{\n                        display: 'flex',\n                        alignItems: 'center',\n                    }}\n                >\n                    {goal.images.length > 0 && (\n                        <div style={{ width: '50px', marginRight: '20px' }}>\n                            <ImageCarousel images={goal.images} size={50} />\n                        </div>\n                    )}\n                    {goal.name} -{' '}\n                    <UserButton id={progress.owner} noName={true} /> in\n                    <UserButton ids={progress.goal.users} group={true} />\n                </div>\n            }\n        />\n    )\n}\n\nexport default withRouter(ProgressCard)\n","import React, { useEffect, useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\n\nimport Modal from 'antd/es/modal'\nimport Button from 'antd/es/button'\nimport Card from 'antd/es/card'\nimport Post from '../../components/Post/Post'\nimport AddPost from '../../components/Post/AddPost'\nimport Tabs from 'antd/es/tabs'\nimport AddCard from '../../components/AddCard/AddCard'\nimport ProgressCard from '../Progresses/ProgressCard'\nimport AddProgress from '../Progresses/AddProgress'\n\nconst Group = props => {\n    const [state, setState] = useState({})\n    const [startProgressVisible, setStartProgressVisible] = useState(false)\n\n    const groupId = props.history.location.pathname.split('/')[2]\n    useEffect(() => {\n        props.setData({ currentGroup: groupId })\n    }, [props.isAuthed])\n\n    const { group, account, friendData, posts, progressData } = props\n\n    if (!group._id) return null\n    props.setData({ currentPosts: group.posts })\n\n    props.setPageTitle({ main: group.name, sub: group.worker })\n\n    const loadedProgresses = group.progresses\n        .filter(item => progressData[item])\n        .map(item => progressData[item])\n\n    const editGoal = (\n        <Modal\n            title=\"Add goal\"\n            visible={startProgressVisible}\n            maskClosable\n            closable\n            onCancel={() => setStartProgressVisible(false)}\n            width=\"100%\"\n            style={{ maxWidth: '1000px' }}\n            footer={\n                <Button\n                    key=\"back\"\n                    onClick={() => setStartProgressVisible(false)}\n                >\n                    Close\n                </Button>\n            }\n            destroyOnClose={true}\n        >\n            <AddProgress\n                setStartProgressVisible={setStartProgressVisible}\n                account={account}\n                friendData={props.friendData}\n                inGroup={group._id}\n            />\n        </Modal>\n    )\n    return friendData ? (\n        <>\n            <Tabs>\n                <Tabs.TabPane tab=\"Posts\" key=\"posts\">\n                    <AddPost\n                        parent={groupId}\n                        account={account}\n                        parentType=\"progress\"\n                        // onSend={() => setEditingMessage('')}\n                    />\n                    {group.posts.map(postId => {\n                        if (posts[postId]) {\n                            const post = posts[postId]\n                            return (\n                                <Card>\n                                    <Post\n                                        friendData={friendData}\n                                        account={account}\n                                        post={post}\n                                    />\n                                </Card>\n                            )\n                        } else return null\n                    })}\n                </Tabs.TabPane>\n                <Tabs.TabPane tab=\"Progresses\" key=\"progresses\">\n                    <AddCard\n                        title=\"Start a new progress\"\n                        sub=\"Rich your goals or help others!\"\n                        action={() => {\n                            setStartProgressVisible(true)\n                        }}\n                    />\n                    {loadedProgresses.map((progress, index) => (\n                        <ProgressCard key={index} progress={progress} />\n                    ))}\n                    {editGoal}\n                </Tabs.TabPane>\n            </Tabs>\n\n            <Modal\n                visible={state.previewImage}\n                footer={null}\n                onCancel={() => setState({ ...state, previewImage: '' })}\n            >\n                <img\n                    alt=\"example\"\n                    style={{ width: '100%' }}\n                    src={state.previewImage}\n                />\n            </Modal>\n        </>\n    ) : null\n}\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        account: state.account,\n        posts: state.post,\n        group: state.group,\n        friendData: state.friendData,\n        progressData: state.progressData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: data => {\n            dispatch(actions.setData(data))\n        },\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Group)\n)\n","import React from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport isEqual from 'lodash.isequal'\nconst NotificationsTracker = props => {\n    const { account, friendData, progressData, groupData } = props\n\n    const sortNotifiacations = (a, b) =>\n        new Date(a.date).getTime() < new Date(b.date).getTime() ? 1 : -1\n\n    if (!account._id) return null\n\n    let lastNotifications = []\n    for (let progress of account.followProgresses) {\n        if (progressData[progress])\n            lastNotifications = [\n                ...lastNotifications,\n                ...progressData[progress].notifications,\n            ]\n    }\n\n    for (let group of account.groups) {\n        if (groupData[group])\n            lastNotifications = [\n                ...lastNotifications,\n                ...groupData[group].notifications,\n            ]\n    }\n\n    for (let friend of account.friends) {\n        if (\n            friendData[friend.friend] &&\n            friend.status === 'friend' &&\n            friendData[friend.friend].notifications\n        )\n            lastNotifications = [\n                ...lastNotifications,\n                ...friendData[friend.friend].notifications,\n            ]\n    }\n    const filterSameNot = (res, not, index, arr) => {\n        if (!res.find(item => item.notId === not.notId)) {\n            res.push(not)\n        }\n        return res\n    }\n    lastNotifications = lastNotifications.reduce(filterSameNot, [])\n\n    lastNotifications = lastNotifications.sort(sortNotifiacations).slice(0, 100)\n\n    lastNotifications = [\n        ...lastNotifications,\n        ...account.myNotifications,\n    ].filter(item => item.code !== 'add post')\n\n    lastNotifications = lastNotifications.reduce(filterSameNot, [])\n    lastNotifications = lastNotifications.sort(sortNotifiacations)\n    if (!isEqual(lastNotifications, props.lastNotifications)) {\n        props.setData({ lastNotifications })\n    }\n\n    return <span />\n}\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        account: state.account,\n        statePosts: state.post,\n        progress: state.progress,\n        friendData: state.friendData,\n        progressData: state.progressData,\n        groupData: state.groupData,\n        lastNotifications: state.lastNotifications,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: data => {\n            dispatch(actions.setData(data))\n        },\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(NotificationsTracker)\n)\n","import React, { useEffect } from 'react'\nimport { Route, Switch, withRouter, Redirect } from 'react-router-dom'\n\nimport Auth from './containers/Auth/Auth'\nimport AuthTest from './containers/Auth/AuthTest'\nimport './components/UI/loadStyles'\nimport AccountLayout from './components/Layout/Layout'\nimport Goals from './containers/Goals/Goals'\nimport Goal from './containers/Goals/Goal'\nimport Progresses from './containers/Progresses/Progresses'\nimport Progress from './containers/Progress/Progress'\nimport Shop from './containers/Shop/Shop'\nimport Dashboard from './containers/Dashboard/Dashboard'\nimport Explore from './containers/Explore/Explore'\n\nimport Friends from './containers/Friends/Friends'\nimport Settings from './containers/Settings/Settings'\nimport Profile from './containers/Profile/Profile'\n\nimport ActivateAccount from './containers/ActivateAccount/ActivateAccount'\nimport Cookies from 'universal-cookie'\nimport Perk from './containers/Shop/Perk'\n\nimport WishlistItem from './containers/Wishlist/WishlistItem'\nimport Wishlist from './containers/Wishlist/Wishlist'\nimport { connect } from 'react-redux'\nimport * as actions from './store/actions'\nimport ConnectWebsocket from './containers/ConnectWebsocket/ConnectWebsocket'\nimport Group from './containers/Group/Group'\nimport NotificationsTracker from './containers/Dashboard/NotificationsTracker'\n\nconst cookies = new Cookies()\n\nconst App = props => {\n    const { isAuthed } = props\n    useEffect(() => {\n        props.tryAuth(props)\n    }, [])\n\n    const redirectTo = cookies.get('redirectto')\n\n    if (redirectTo) {\n        cookies.remove('redirectto', {\n            path: '/',\n        })\n    }\n\n    const Logout = () => {\n        props.logout()\n        return <Redirect to=\"/explore\" />\n    }\n\n    let routes = (\n        <Switch>\n            <Route path=\"/goals\" exact component={Goals} />\n            <Route path=\"/goals\" component={Goal} />\n\n            <Route path=\"/inspirations\" exact component={Progresses} />\n            <Route path=\"/inspirations\" component={Progress} />\n            <Route path=\"/groups\" component={Group} />\n\n            <Route path=\"/profile\" component={Profile} />\n\n            <Route path=\"/friends\" exact component={Friends} />\n\n            <Route path=\"/settings\" exact component={Settings} />\n            <Route path=\"/account\" exact component={Profile} />\n            <Route path=\"/dashboard\" exact component={Dashboard} />\n            <Route path=\"/\" exact component={Explore} />\n\n            <Route path=\"/shop\" exact component={Shop} />\n            <Route path=\"/shop\" component={Perk} />\n            <Route path=\"/wishlist\" exact component={Wishlist} />\n            <Route path=\"/wishlist\" component={WishlistItem} />\n            {/* {!isAuthed && <Route path=\"/login\" exact component={Auth} />} */}\n            <Route path=\"/logout\" exact component={Logout} />\n\n            <Route path=\"/activate-account\" exact component={ActivateAccount} />\n\n            {process.env.NODE_ENV === 'development' && !isAuthed && (\n                <Route path=\"/logintest\" exact component={AuthTest} />\n            )}\n            <Redirect to=\"/\" />\n        </Switch>\n    )\n\n    if (props.accountNotActive) {\n        routes = (\n            <Switch>\n                {!isAuthed && <Route path=\"/login\" exact component={Auth} />}\n                <Route path=\"/logout\" exact component={Logout} />\n\n                <Route\n                    path=\"/activate-account\"\n                    exact\n                    component={ActivateAccount}\n                />\n\n                {process.env.NODE_ENV === 'development' && !isAuthed && (\n                    <Route path=\"/logintest\" exact component={AuthTest} />\n                )}\n                {isAuthed ? (\n                    <Redirect to=\"/activate-account\" />\n                ) : (\n                    <Redirect to=\"/login\" />\n                )}\n            </Switch>\n        )\n    }\n\n    return redirectTo ? (\n        <Redirect to={redirectTo} />\n    ) : (\n        <>\n            <div style={{ height: '100%' }}>\n                <AccountLayout>{routes}</AccountLayout>\n                {isAuthed && <ConnectWebsocket />}\n                {isAuthed && <NotificationsTracker />}\n            </div>\n            {/* {this.props.loading && <Spinner cover />} */}\n        </>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        user: state.user,\n        account: state.account,\n        accountNotActive: state.accountNotActive,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        tryAuth: (props, forceAuth) =>\n            dispatch(actions.tryAuth(props, forceAuth)),\n        logout: () => dispatch(actions.logout()),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(App)\n)\n","import { createReducer } from '@reduxjs/toolkit'\n\nexport const initialState = {\n    isAuthed: false,\n    user: null,\n    currentAccount: '',\n    account: {},\n    friendData: {},\n    transactionData: {},\n    progressData: {},\n    currentProfile: '',\n    profile: {},\n    currentProgress: '',\n    currentGroup: '',\n    currentPosts: [],\n    progress: {},\n    post: {},\n    postData: {},\n    group: {},\n    groupData: {},\n    pageTitle: {},\n    lastUrl: '',\n    friendSearchResult: {},\n    accountNotActive: false,\n    lastNotifications: [],\n    isConnectingWS: false,\n}\n\nconst reducer = createReducer(initialState, {\n    SET_DATA: (state: Object, action: Object) => {\n        if (action.data) {\n            for (let key of [\n                'user',\n                'account',\n                'isAuthed',\n                'currentAccount',\n                'currentProfile',\n                'currentPosts',\n                'currentGroup',\n                'profile',\n                'group',\n                'currentProgress',\n                'progress',\n                'lastNotifications',\n            ]) {\n                if (typeof action.data[key] !== 'undefined') {\n                    state[key] = action.data[key]\n                }\n            }\n            for (let key of [\n                'friendData',\n                'progressData',\n                'post',\n                'postData',\n                'groupData',\n                'transactionData',\n            ]) {\n                if (typeof action.data[key] !== 'undefined') {\n                    for (let attr in action.data[key]) {\n                        if (action.data[key][attr]) {\n                            state[key][attr] = action.data[key][attr]\n                        }\n                    }\n                }\n            }\n        }\n        if (state.user) {\n            if (state.user.currentAccount) {\n                state.currentAccount = state.user.currentAccount\n                state.accountNotActive = false\n            } else if (state.user.myAccount) {\n                state.currentAccount = state.user.myAccount\n                state.accountNotActive = false\n            } else {\n                state.accountNotActive = true\n            }\n        }\n    },\n    REMOVE_DATA: (state: Object, action: Object) => {\n        if (action.data) {\n            for (let key of [\n                'user',\n                'account',\n                'profile',\n                'progress',\n                'group',\n            ]) {\n                for (let item of action.data[key]) {\n                    if (state[key]._id === item) {\n                        state[key] = {}\n                    }\n                }\n            }\n            for (let key of [\n                'post',\n                'friendData',\n                'progressData',\n                'postData',\n                'groupData',\n                'transactionData',\n            ]) {\n                for (let item of action.data[key]) {\n                    delete state[key][item]\n                }\n            }\n        }\n    },\n    SET_FRIEND_SEARCH_RESULT: (state: Object, action: Object) => {\n        state.friendSearchResult = action.data\n    },\n\n    SET_FRIENDS_DATA: (state: Object, action: Object) => {\n        if (action.data) {\n            state.account.friendsData = action.data\n        }\n        if (action.data.perk) state.perk = action.data.perk\n    },\n    SET_AVATAR_V: (state: Object, action: Object) => {\n        state.account.image = action.v\n    },\n    INCREASE_AVATAR_V: (state: Object) => {\n        state.account.image = state.account.image + 1\n    },\n    SET_IS_AUTHED: (state: Object, action: Object) => {\n        state.isAuthed = action.id\n    },\n    SET_PAGE_TITLE: (state: Object, action: Object) => {\n        state.pageTitle = action.title\n    },\n    SAVE_LAST_URL: (state: Object, action: Object) => {\n        if (action.url !== '/login' && action.url !== '/logout')\n            state.lastUrl = action.url\n    },\n    SET_ACCOUNT_ACTIVATED: (state: Object, action: Object) => {\n        state.accountNotActive = action.value\n    },\n    SET_CONNECTING_WS: (state: Object, action: Object) => {\n        state.isConnectingWS = action.data\n    },\n})\n\nexport default reducer\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter } from 'react-router-dom'\nimport axios from 'axios'\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly'\n\nimport './index.css'\nimport App from './App'\nimport reducer from './store/reducer/reducer'\n//import * as serviceWorker from './serviceWorker';\n\nif (process.env.NODE_ENV === 'development') {\n    axios.defaults.baseURL = 'http://my.websiter.test:5000'\n} else {\n    axios.defaults.baseURL = 'https://addspire.com'\n}\n// axios.defaults.withCredentials = true\n\nexport const store = createStore(\n    reducer,\n    composeWithDevTools(applyMiddleware(thunk))\n)\n\nconst app = (\n    <Provider store={store}>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </Provider>\n)\n\nconst root = document.getElementById('root')\n\nReactDOM.render(app, root)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}