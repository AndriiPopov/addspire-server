{"version":3,"sources":["containers/Auth/Auth.module.css","components/UI/ImageCarousel/imageCarousel.module.css","containers/Account/Account.module.css","components/Layout/Layout.module.css","containers/Auth/Auth.tsx","containers/Auth/AuthTest.tsx","utils/getAvatar.js","components/Layout/Layout.tsx","utils/processRes.js","store/actions/auth.tsx","containers/ConnectWebsocket/methods/getListOfNeededResources.js","containers/ConnectWebsocket/methods/compareVersionsAndRerequest.js","containers/ConnectWebsocket/methods/getResourcesToMonitor.js","containers/ConnectWebsocket/ConnectWebsocket.tsx","store/actions/saveResources.tsx","containers/ConnectWebsocket/methods/requestResource.tsx","store/actions/updateResource.tsx","utils/uploadFile.js","constants/fieldLength.js","constants/fieldRules.js","containers/Shop/AddPerkForm.tsx","websocketActions/posts.tsx","websocketActions/wishlistAndPerks.tsx","websocketActions/friends.tsx","containers/Shop/AddPerk.tsx","components/MasonryCard.tsx","components/UI/MoreIcon.js","containers/Shop/PerkCard.tsx","components/AddCard/AddCard.tsx","utils/masonryBreakPoints.js","components/MasonryGrid.tsx","containers/Shop/WishlistAndPerks.tsx","containers/Goals/Goals.tsx","utils/pullData.js","components/Post/AddMessage.tsx","components/UI/ImageCarousel/ImageCarousel.tsx","components/UserButton/UserButton.tsx","components/Post/Message.tsx","components/Post/Post.tsx","containers/Goals/Goal.tsx","components/EditGoalAndProgressForm/connectionsSelect.tsx","components/Rewards/Rewards.tsx","websocketActions/progresses.tsx","components/EditGoalAndProgressForm/EditGoalAndProgressForm.tsx","containers/Progresses/AddProgress.tsx","containers/Progresses/GroupCard.tsx","containers/Progresses/Progresses.tsx","containers/Progress/ActivityTable.tsx","containers/Progress/EditProgress.tsx","containers/Progress/Activity.tsx","components/Post/AddPost.tsx","containers/Progress/Progress.tsx","containers/Shop/Wallet.tsx","containers/Shop/Transactions.tsx","containers/Shop/Shop.tsx","containers/Dashboard/DashboardPosts.tsx","containers/Dashboard/DashboardEvents.tsx","containers/Dashboard/Dashboard.tsx","websocketActions/dashboard.tsx","containers/Explore/Explore.tsx","components/FriendActionButton.tsx","components/FriendCard.tsx","containers/Friends/AddFriends.tsx","containers/Friends/PendingFriends.tsx","containers/Friends/Friends.tsx","containers/Account/Account.tsx","websocketActions/account.tsx","containers/Profile/Profile.tsx","containers/ActivateAccount/ActivateAccount.tsx","containers/Shop/Perk.tsx","containers/Wishlist/WishlistItem.tsx","containers/Wishlist/Wishlist.tsx","containers/Progresses/ProgressCard.tsx","containers/Group/Group.tsx","containers/Dashboard/NotificationsTracker.tsx","App.tsx","store/reducer/reducer.tsx","index.tsx"],"names":["module","exports","Container","socialButtons","Background","Dots","Avatar","Layout","Header","Footer","HideHeader","FooterButton","TopHeader","BottomHeader","Main","Button","MenuButtonContiner","QuickButtonContiner","PageTitle","cookies","Cookies","withRouter","connect","state","lastUrl","props","_useState","useState","_useState2","Object","slicedToArray","setState","_useState3","_useState4","cookieConsent","setCookieConsent","useEffect","checkCookieConsent","remeberMeParam","get","basicURL","react_default","a","createElement","className","classes","dist","onClick","window","location","concat","es_checkbox","checked","onChange","modal","title","visible","onOk","set","path","maxAge","onCancel","open","destroyOnClose","maskClosable","getAvatar","nickname","version","Content","account","pageTitle","isAuthed","lastNotifications","menuVisible","setMenuVisible","lastScrollY","setLastScrollY","_useState5","_useState6","headerVisible","setHeaderVisible","handleScroll","currentScrollY","scrollY","removeEventListener","addEventListener","toggleMenu","selectedKey","history","pathname","split","undefined","buttonProps","type","size","checkHighligh","url","ghost","openLink","push","isActivating","numberOfUnseenNots","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","not","value","parseInt","notId","lastSeenNot","err","return","logedIn","_id","includes","children","Fragment","es_layout","join","es_button","assign","icon","MenuOutlined_default","main","LogoutOutlined_default","style","margin","cursor","avatar","border","src","image","tooltip","placement","mouseEnterDelay","badge","count","HomeFilled_default","RocketFilled_default","ShopFilled_default","friends","filter","item","status","length","TeamOutlined_default","drawer","closable","onClose","es_menu","theme","mode","selectedKeys","_ref","key","overflowedIndicator","Item","CoffeeOutlined_default","HeartFilled_default","UserOutlined_default","processRes","res","data","logout","success","errorCode","message","warning","error","successCode","tryAuth","forceLogin","dispatch","sessionStorage","setItem","token","rememberMe","remove","userId","jwt","decode","axios","defaults","headers","post","put","delete","common","Accept","setIsAuthed","saveLastUrl","pathParts","id","setData","setPageTitle","setFriendSearchResult","getListOfNeededResources","store","requestedResources","user","progress","group","progressData","friendData","postData","groupData","transactionData","neededResources","currentAccount","progresses","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","groups","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","followPosts","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","myPosts","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","transactions","transaction","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","friend","currentProfile","profile","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","currentGroup","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","users","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_iterator11","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_step12","_iterator12","posts","currentProgress","participants","owner","worker","toConsumableArray","experts","supporters","_iteratorNormalCompletion13","_didIteratorError13","_iteratorError13","_step13","_iterator13","_iteratorNormalCompletion14","_didIteratorError14","_iteratorError14","_step14","_iterator14","currentPosts","_iteratorNormalCompletion15","_didIteratorError15","_iteratorError15","_step15","_iterator15","postEl","_iteratorNormalCompletion16","_didIteratorError16","_iteratorError16","_step16","_iterator16","parent","parentType","parentId","reduce","obj","attr","Array","from","Set","notNeededExist","notNeededResources","check1","check2","removeData","compareVersionsAndRerequest","versions","webSocket","checkData","requestResource","check","__v","getResourcesToMonitor","resources","addData","require","create","propertyFilter","name","context","ConnectWebsocket","start","pingTimeout","WebSocket","heartbeat","_this","clearTimeout","setTimeout","close","send","JSON","stringify","messageCode","onopen","event","resourcesToMonitor","initializeRequestResources","onmessage","news","parse","messageText","setFriendsData","friendsData","saveResource","updateResource","code","update","text","onclose","checkInterval","readyState","clearInterval","setInterval","reRequestResourcesInterval","reRequestResources","_i","_arr","ids","nextProps","newRequestedResources","_loop","_arr2","_i2","this","Component","pulledFrom","actions","getState","myAccount","find","notRequestedIds","applyDelta","source","delta","watchFields","result","cloneDeep","del","applyWithDot","keys","shift","applyUpdateToPart","updatedFields","applyDeleteToPart","splice","removedFields","field","indexOf","parState","element","defineProperty","updateData","uploadFile","file","filename","callback","alert","reader","FileReader","onload","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","resizeImageToSpecificSize","width","height","urltoFile","then","getSignedRequest","stop","_x","apply","arguments","readAsArrayBuffer","mimeType","match","fetch","arrayBuffer","buf","File","cb","resizeImageFromSrcToSpecificSize","target","readAsDataURL","img","Image","widthCoef","heightCoef","oc","document","octx","getContext","drawImage","toDataURL","fileName","response","doUploadFile","catch","signedRequest","Content-Type","console","log","fieldLength","nicknameRules","required","whitespace","min","max","pattern","nameRules","accountNameRules","descriptionRules","messageRules","priceRules","AddPerkForm","previewImage","setPreviewImage","connections","perkId","perk","deletePerk","onFinish","images","setImages","uploadImage","connectionsSelect","es_select","placeholder","getPopupContainer","trigger","parentNode","map","Option","marginRight","_Form$useForm","Form","useForm","form","es_form","autoComplete","initialValues","labelCol","span","wrapperCol","label","valuePropName","getValueFromEvent","e","isArray","fileList","upload","listType","index","objectSpread","uid","onPreview","customRequest","_ref2","PlusOutlined_default","rules","input","TextArea","input_number","offset","htmlType","popconfirm","onConfirm","okText","cancelText","danger","footer","alt","changeLikesMessage","messageId","accountId","postId","buyPerk","buyer","seller","unfriend","friendId","setPerk","wishlist","itemId","goals","goalId","perks","Shop_AddPerkForm","wsActions","setEditPerkOpen","processedValue","onClickLink","borderRadius","padding","body","MoreIcon","viewBox","transform","d","setEditedPerk","MasonryCard","card","extra","stopPropagation","onlyBuy","dropdown","overlay","fontWeight","price","bordered","AddCard","action","shape","icons_PlusOutlined","friendsBreakPoints","default","1600","1100","600","cardBreakPoints","700","350","MasonryGrid","marginTop","react_masonry_css_es5_default","breakpointCols","columnClassName","WishlistAndPerks","editedPerk","editPerkOpen","editPerk","Shop_AddPerk","components_AddCard_AddCard","sub","listKey","Shop_PerkCard","Shop_WishlistAndPerks","pullData","options","imageLoading","setImageLoading","_useState7","content","replyToUser","_useState8","setMessageText","background","replyTo","bottom","left","comment","autoSize","minRows","maxRows","rows","messageValue","replyToMessage","editedMessage","editingMessage","onSend","SendOutlined_default","showUploadList","_ref3","LoadingOutlined_default","PictureFilled_default","cancel","CloseCircleFilled_default","Modal","ImageCarousel","carousel","dots","backgroundImage","backgroundSize","backgroundPosition","backgroundRepeat","friendSearchResult","friendDataExp","getUserData","userName","userAvatar","noClick","handleClick","Group","noAva","noName","Message","replies","isStart","replyVisible","setReplyVisible","setReplyToUser","setEditingMessage","showReplies","setShowReplies","commentProps","timeago_react","datetime","date","live","likes","LikeFilled_default","LikeOutlined_default","paddingLeft","author","Math","floor","random","messageType","details","display","components_UserButton_UserButton","UI_ImageCarousel_ImageCarousel","color","fontSize","goal","startMessage","Post_AddMessage","isTop","reply","postOpen","setPostOpen","noStartMessage","Post_Message","divider","textAlign","position","justifyContent","icons_LikeFilled","icons_LikeOutlined","messages","getNumberOfMessages","whiteSpace","description","components_Post_Post","EditGoalAndProgressForm_connectionsSelect","onSelect","previewReward","setPreviewReward","editedReward","setEditedReward","editedRewardIndex","setEditedRewardIndex","readOnly","rewardsGI","rewards","findIndex","rewardKey","setRewards","RewardButton","simple","money","itemName","onlyButton","for","marginLeft","progressId","rewardId","confirm","newRewards","indexIn","reward","rewardToSave","itemImages","_ref4","itemDescription","_ref5","hoverable","cover","descriptions","column","xxl","xl","lg","md","sm","xs","EditGoalAndProgressForm","milestones","setMilestones","withMilestones","setWithMilestones","_useState9","newTabIndex","_useState10","setNewTabIndex","_useState11","rewardsGroups","_useState12","addMilestone","milestone","newPanes","newKey","indexOfMile","mile","setFieldsValue","MilestoneControls","dropdown_dropdown","domEvent","finish","newMilestones","Divider","pane","preventDefault","milestonesValues","onValuesChange","changedValues","collapse","expandIconPosition","accordion","Panel","header","getFieldValue","components_Rewards_Rewards","AddProgress","components_EditGoalAndProgressForm_EditGoalAndProgressForm","setStartProgressVisible","inGroup","Meta","Card","TabPane","Tabs","forceAuth","loadedProgresses","loadedGroups","fromProfile","startProgressVisible","active","editGoal","maxWidth","Progresses_AddProgress","tab","Progresses_GroupCard","empty","imageStyle","ActivityTable","renderCheckbox","milestoneId","disabled","getCheckboxStatus","stage","approvedBy","marginBottom","destroyInactivePanel","stages","expert","typography","Paragraph","ellipsis","expandable","symbol","paid","EditProgress","editProgressOpen","Descriptions","orientation","Progress_ActivityTable","toString","Progress_EditProgress","zIndex","icons_PictureFilled","icons_CloseCircleFilled","tabs","Progress_Activity","Post_AddPost","paddingTop","pulledProfile","wallet","amount","tableData","sorted","sort","b","Date","getTime","types","to","alignItems","layout","tag","es_tag","toUpperCase","format","cancelTransaction","record","confirmTransaction","boxShadow","Shop_Wallet","Shop_Transactions","statePosts","setPosts","startTime","sortPosts","aN","notifications","bN","newPosts","newUnseenPosts","newOldPosts","oldPosts","oldPostIndex","_loop2","_newOldPosts","resultPosts","slice","neededPosts","isEqual","nots","getRewardText","as","progressName","addedAccounts","ac","droppedAccounts","activeTab","last","Dashboard_DashboardPosts","Dashboard_DashboardEvents","isSearching","setIsSearching","foundProgresses","setFoundProgresses","setProgresses","noMore","setNoMore","noMorePopular","setNoMorePopular","searchValue","setSearchValue","_useState13","_useState14","setFriendData","onSearch","noNoMore","skip","newFriendData","Search","enterButton","allowClear","react_infinite_scroller_default","pageStart","loadMore","hasMore","loader","FriendActionButton","invitingFriends","invitedFriends","realFriends","additionalButton","menu","additionalButtons","button","asText","DownOutlined","friendActions","friendActionButton","asIcons","searchResult","addFriendOpen","setAddFriendOpen","search","components_FriendCard","fullFriend","confirmedFriends","PendingFriends","Friends_AddFriends","increaseAvatarV","deleteVisible","setDeleteVisible","deleteField","setDeleteField","flex","overflow","profileId","containers_Progresses_Progresses","oneFriendData","setAccountActivated","page_header","backIcon","nicknameNotUnique","items","Perk_Item","wishlistItem","groupId","Progresses_ProgressCard","sortNotifiacations","filterSameNot","arr","myNotifications","accountNotActive","redirectTo","Logout","react_router","routes","exact","component","Goals","Goal","Progresses","Progress","Profile","Friends","Account","Dashboard","Explore","Shop","Perk","Wishlist","WishlistItem","Auth","ActivateAccount","process","containers_ConnectWebsocket_ConnectWebsocket","Dashboard_NotificationsTracker","reducer","createReducer","SET_DATA","REMOVE_DATA","_i3","_arr3","_i4","_arr4","SET_FRIEND_SEARCH_RESULT","SET_FRIENDS_DATA","SET_AVATAR_V","v","INCREASE_AVATAR_V","SET_IS_AUTHED","SET_PAGE_TITLE","SAVE_LAST_URL","SET_ACCOUNT_ACTIVATED","__webpack_require__","__webpack_exports__","src_store","baseURL","createStore","composeWithDevTools","applyMiddleware","thunk","app","es","react_router_dom","src_App","root","getElementById","ReactDOM","render"],"mappings":"6EACAA,EAAAC,QAAA,CAAkBC,UAAA,wBAAAC,cAAA,4BAAAC,WAAA,+CCAlBJ,EAAAC,QAAA,CAAkBI,KAAA,kDCAlBL,EAAAC,QAAA,CAAkBK,OAAA,yGCAlBN,EAAAC,QAAA,CAAkBM,OAAA,uBAAAC,OAAA,uBAAAC,OAAA,uBAAAC,WAAA,2BAAAC,aAAA,6BAAAC,UAAA,0BAAAC,aAAA,6BAAAC,KAAA,qBAAAC,OAAA,uBAAAC,mBAAA,mCAAAC,oBAAA,oCAAAC,UAAA,8TCaZC,EAAU,IAAIC,IA+FLC,cAAWC,YANF,SAAAC,GACpB,MAAO,CACHC,QAASD,EAAMC,UAIGF,CA7Fb,SAAAG,GAAS,IAAAC,EACQC,oBAAS,GADjBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACXH,EADWK,EAAA,GACJG,EADIH,EAAA,GAAAI,EAEwBL,oBAAS,GAFjCM,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAEXE,EAFWD,EAAA,GAEIE,EAFJF,EAAA,GAIlBG,oBAAU,WACNC,MAGJ,IAAIC,EAAiB,oBACjBf,IACAe,EAAiB,oBAIjBb,EAAMD,SACyBC,EAAMD,QAGzC,IAAMa,EAAqB,WACAlB,EAAQoB,IAAI,oBAE/BJ,GAAiB,IAWnBK,EAEI,4CAEV,OAAQN,EAiBJO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAQ3C,WACpBuC,EAAAC,EAAAC,cAAA,kCACAF,EAAAC,EAAAC,cAAA,kDACAF,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAQ1C,eACpBsC,EAAAC,EAAAC,cAACG,EAAA,oBAAD,CACIC,QAAS,kBACJC,OAAOC,SACJT,EAAQ,iBAAAU,OAAoBZ,MAGxCG,EAAAC,EAAAC,cAACG,EAAA,kBAAD,CACIC,QAAS,kBACJC,OAAOC,SACJT,EAAQ,eAAAU,OAAkBZ,MAGtCG,EAAAC,EAAAC,cAACG,EAAA,kBAAD,CACIC,QAAS,kBACJC,OAAOC,SACJT,EAAQ,eAAAU,OAAkBZ,OAI1CG,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAUC,QAAS7B,EAAO8B,SAAU,kBAAMtB,GAAUR,KAApD,gBAIJkB,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAQzC,cA7C5BqC,EAAAC,EAAAC,cAACW,EAAA,EAAD,CACIC,MAAM,kBACNC,SAAUtB,EACVuB,KAfiB,WACrBtC,EAAQuC,IAAI,kBAAmB,OAAQ,CACnCC,KAAM,IACNC,OAAQ,SAEZvB,KAWIwB,SAAU,WACNb,OAAOc,KAAK,uBAAwB,UAExCC,gBAAgB,EAChBC,cAAc,GAEdvB,EAAAC,EAAAC,cAAA,qDACAF,EAAAC,EAAAC,cAAA,yGCxDI,IAAIvB,ieCRL6C,EAAA,SAACC,EAAUC,GACtB,OAAKD,EAGG,+CACAA,EACA,cACCC,GAAW,GANE,ICwBlB3D,EAA4BD,IAA5BC,OAAQ4D,GAAoB7D,IAApB6D,QAAS3D,GAAWF,IAAXE,OA2SVY,eAAWC,YATF,SAAAC,GACpB,MAAO,CACH8C,QAAS9C,EAAM8C,QACfC,UAAW/C,EAAM+C,UACjBC,SAAUhD,EAAMgD,SAChBC,kBAAmBjD,EAAMiD,oBAIPlD,CAzSJ,SAAAG,GAAS,IACnB4C,EAAY5C,EAAZ4C,QADmB3C,EAEWC,qBAFXC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAEpB+C,EAFoB7C,EAAA,GAEP8C,EAFO9C,EAAA,GAAAI,EAGWL,mBAAS,GAHpBM,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAGpB2C,EAHoB1C,EAAA,GAGP2C,EAHO3C,EAAA,GAAA4C,EAIelD,oBAAS,GAJxBmD,EAAAjD,OAAAC,EAAA,EAAAD,CAAAgD,EAAA,GAIpBE,EAJoBD,EAAA,GAILE,EAJKF,EAAA,GAM3B1C,oBAAU,WACN,IAAM6C,EAAe,WACjB,IAAMC,EAAiBlC,OAAOmC,QAG1BH,IADAE,EAAiBP,IAKrBC,EAAeM,IAInB,OAFAlC,OAAOoC,oBAAoB,SAAUH,GACrCjC,OAAOqC,iBAAiB,SAAUJ,GAC3B,kBAAMjC,OAAOoC,oBAAoB,SAAUH,KACnD,CAACN,IACJ,IAAMW,EAAa,WACfZ,GAAgBD,IAEdc,EACF9D,EAAM+D,QAAQvC,SAASwC,SAASC,MAAM,KAAK,SAAMC,EAE/CC,EAAc,CAChBC,KAAM,OAENC,KAAM,QAENlD,UAAWC,UAETkD,EAAgB,SAAAC,GAAG,OACrBT,IAAgBS,EACV,CACIC,OAAO,EACPJ,KAAM,QAEV,CAAEA,KAAM,SACZK,EAAW,SAAAF,GAAG,OAAIvE,EAAM+D,QAAQW,KAAK,IAAMH,IAE3CI,EAAmD,sBAApC3E,EAAM+D,QAAQvC,SAASwC,SAExCY,EAAqB,EA7CEC,GAAA,EAAAC,GAAA,EAAAC,OAAAb,EAAA,IA+C3B,QAAAc,EAAAC,EAAgBjF,EAAM+C,kBAAtBmC,OAAAC,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,EAAyC,KAAhCS,EAAgCN,EAAAO,MACjCC,SAASF,EAAIG,OAASD,SAAS5C,EAAQ8C,aAAe,IACtDd,KAjDmB,MAAAe,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAd,EAAA,MAAAC,GAmD3B,IAAMc,EAAU7F,EAAM8C,UAAYF,EAAQkD,IAC1C,MAAQ,CAAC,SAAU,WAAWC,SAAS/F,EAAM+D,QAAQvC,SAASwC,UAiM1DhE,EAAMgG,SAhMNhF,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgF,SAAA,KACIjF,EAAAC,EAAAC,cAACgF,EAAA,EAAD,CAAQ/E,UAAWC,UACfJ,EAAAC,EAAAC,cAACnC,EAAD,CACIoC,UACImC,EACMlC,SACA,CAACA,SAAgBA,cAAoB+E,KAAK,MAGpDnF,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,aACZJ,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,sBACXyE,GACG7E,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgF,SAAA,MACMtB,GACE3D,EAAAC,EAAAC,cAACkF,EAAA,EAADhG,OAAAiG,OAAA,GACQlC,EADR,CAEImC,KAAMtF,EAAAC,EAAAC,cAACqF,EAAAtF,EAAD,MACNK,QAASuC,KAGjB7C,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,aACXuD,EACK,wBACA3E,EAAM6C,UAAU2D,QAKtCxF,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,uBACXyE,EACIlB,EAmBG3D,EAAAC,EAAAC,cAACkF,EAAA,EAADhG,OAAAiG,OAAA,GACQlC,EACAG,EAAc,WAFtB,CAGIgC,KAAMtF,EAAAC,EAAAC,cAACuF,EAAAxF,EAAD,MACNK,QAAS,kBACLtB,EAAM+D,QAAQW,KAAK,cAL3B,UAlBA1D,EAAAC,EAAAC,cAAA,QACII,QAAS,kBAAMmD,EAAS,YACxBiC,MAAO,CACHC,OAAQ,WACRC,OAAQ,YAGZ5F,EAAAC,EAAAC,cAAC2F,EAAA,EAAD,CACIH,MAAO,CACHI,OAAQ,mBAEZC,IAAKvE,EACDI,EAAQkD,IACRlD,EAAQoE,UAiBxBhG,EAAAC,EAAAC,cAAC+F,EAAA,EAAD,CACInF,MAAM,qBACNoF,UAAU,cACVC,gBAAiB,IAEjBnG,EAAAC,EAAAC,cAACkF,EAAA,EAADhG,OAAAiG,OAAA,GACQlC,EACAG,EAAc,WAFtB,CAGIgC,KAAMtF,EAAAC,EAAAC,cAACuF,EAAAxF,EAAD,MACNK,QAAS,kBACLtB,EAAM+D,QAAQW,KAAK,aAL3B,0BAepB1D,EAAAC,EAAAC,cAACyB,GAAD,CAASxB,UAAWC,QAAepB,EAAMgG,WACvCrB,GAAgBkB,GACd7E,EAAAC,EAAAC,cAAClC,GAAD,CAAQmC,UAAWC,UACfJ,EAAAC,EAAAC,cAACkF,EAAA,EAADhG,OAAAiG,OAAA,GACQlC,EACAG,EAAc,aAFtB,CAGIhD,QAAS,kBAAMmD,EAAS,gBAExBzD,EAAAC,EAAAC,cAACkG,EAAA,EAAD,CAAOC,MAAOzC,GACV5D,EAAAC,EAAAC,cAACoG,EAAArG,EAAD,MAAe,IACfD,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,gBAAhB,eAMRJ,EAAAC,EAAAC,cAACkF,EAAA,EAADhG,OAAAiG,OAAA,GACQlC,EACAG,EAAc,cAFtB,CAGIhD,QAAS,kBAAMmD,EAAS,iBAExBzD,EAAAC,EAAAC,cAACkG,EAAA,EAAD,CAAOC,MAAO,GACVrG,EAAAC,EAAAC,cAACqG,EAAAtG,EAAD,MACAD,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,gBAAhB,gBAMRJ,EAAAC,EAAAC,cAACkF,EAAA,EAADhG,OAAAiG,OAAA,GACQlC,EACAG,EAAc,QAFtB,CAGIhD,QAAS,kBAAMmD,EAAS,WAExBzD,EAAAC,EAAAC,cAACkG,EAAA,EAAD,CAAOC,MAAO,GACVrG,EAAAC,EAAAC,cAACsG,EAAAvG,EAAD,MACAD,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,gBAAhB,UAIRJ,EAAAC,EAAAC,cAACkF,EAAA,EAADhG,OAAAiG,OAAA,GACQlC,EACAG,EAAc,WAFtB,CAGIhD,QAAS,kBAAMmD,EAAS,cAExBzD,EAAAC,EAAAC,cAACkG,EAAA,EAAD,CACIC,MACIzE,EAAQ6E,QAAQC,OACZ,SAAAC,GAAI,MAAoB,aAAhBA,EAAKC,SACfC,QAGN7G,EAAAC,EAAAC,cAAC4G,EAAA7G,EAAD,MACAD,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,gBAAhB,eAOduD,GAAgBkB,GACd7E,EAAAC,EAAAC,cAAC6G,EAAA,EAAD,CACIjG,MAAM,OACNkG,UAAU,EACVC,QAASpE,EACT9B,QAASiB,EACTkE,UAAU,QAEVlG,EAAAC,EAAAC,cAACgH,EAAA,EAAD,CACIC,MAAM,QACNC,KAAK,WACLC,aAAc,CAACvE,GACfxC,QAAS,SAAAgH,GAAa,IAAVC,EAAUD,EAAVC,IACRvI,EAAM+D,QAAQW,KAAK,IAAM6D,GACzB1E,KAEJ2E,oBAAqBxH,EAAAC,EAAAC,cAACqF,EAAAtF,EAAD,OAErBD,EAAAC,EAAAC,cAACgH,EAAA,EAAKO,KAAN,CAAWF,IAAI,UAAUjC,KAAMtF,EAAAC,EAAAC,cAACwH,EAAAzH,EAAD,OAA/B,WAGAD,EAAAC,EAAAC,cAACgH,EAAA,EAAKO,KAAN,CAAWF,IAAI,YAAYjC,KAAMtF,EAAAC,EAAAC,cAACoG,EAAArG,EAAD,OAAjC,aAGAD,EAAAC,EAAAC,cAACgH,EAAA,EAAKO,KAAN,CAAWF,IAAI,aAAajC,KAAMtF,EAAAC,EAAAC,cAACqG,EAAAtG,EAAD,OAAlC,cAGAD,EAAAC,EAAAC,cAACgH,EAAA,EAAKO,KAAN,CAAWF,IAAI,OAAOjC,KAAMtF,EAAAC,EAAAC,cAACsG,EAAAvG,EAAD,OAA5B,QAGAD,EAAAC,EAAAC,cAACgH,EAAA,EAAKO,KAAN,CAAWF,IAAI,UAAUjC,KAAMtF,EAAAC,EAAAC,cAAC4G,EAAA7G,EAAD,OAA/B,WAMAD,EAAAC,EAAAC,cAACgH,EAAA,EAAKO,KAAN,CAAWF,IAAI,WAAWjC,KAAMtF,EAAAC,EAAAC,cAACyH,EAAA1H,EAAD,OAAhC,YAGAD,EAAAC,EAAAC,cAACgH,EAAA,EAAKO,KAAN,CAAWF,IAAI,UAAUjC,KAAMtF,EAAAC,EAAAC,cAAC0H,EAAA3H,EAAD,OAA/B,WAGAD,EAAAC,EAAAC,cAACgH,EAAA,EAAKO,KAAN,CAAWF,IAAI,SAASjC,KAAMtF,EAAAC,EAAAC,cAACuF,EAAAxF,EAAD,OAA9B,+CCrQb4H,GAAA,SAACC,EAAK9I,GAEjB,GADI8I,EAAIC,KAAKC,QAAQhJ,EAAM+D,QAAQW,KAAK,YACf,IAArBoE,EAAIC,KAAKE,QACT,GAAIH,EAAIC,KAAKG,UACT,OAAQJ,EAAIC,KAAKG,WACb,IAAK,aACDC,KAAQC,QAAQ,uCAChB,MACJ,IAAK,WACDD,KAAQE,MACJ,sDAEJ,MACJ,IAAK,iBACDF,KAAQC,QAAQ,iCAChB,MACJ,QACID,KAAQC,QACJ,mDAKZD,KAAQE,MAAM,yBAGlB,GAAIP,EAAIC,KAAKO,YACT,OAAQR,EAAIC,KAAKO,aACb,IAAK,eACDH,KAAQF,QAAQ,sCAChB,MACJ,IAAK,UACDE,KAAQF,QAAQ,YAChB,MACJ,IAAK,aACDE,KAAQF,QAAQ,iBAChB,MACJ,IAAK,kBACDE,KAAQF,QAAQ,yBAChB,MACJ,QACIE,KAAQF,QAAQ,YAK5BH,EAAIC,KAAKnB,QAA8B,eAApBkB,EAAIC,KAAKnB,QAC5B5H,EAAM+D,QAAQW,KAAK,sBC3CrBhF,GAAU,IAAIC,IAEP4J,GAAU,SAACvJ,EAAOwJ,GAAR,OAAuB,SAACC,GAC3CC,eAAeC,QAAQ,gBAAiB,KACxC,IAAMC,EAAQlK,GAAQoB,IAAI,cACpB+I,EAAanK,GAAQoB,IAAI,cAC3B+I,IACAnK,GAAQoK,OAAO,aAAc,CACzB5H,KAAM,MAES,UAAf2H,GACAnK,GAAQoK,OAAO,aAAc,CACzB5H,KAAM,OAIlB,IAAM6H,EAASC,KAAIC,OAAOL,GAK1B,GAJAM,IAAMC,SAASC,QAAQC,KAAK,gBAAkB,mBAC9CH,IAAMC,SAASC,QAAQE,IAAI,gBAAkB,mBAC7CJ,IAAMC,SAASC,QAAQG,OAAO,gBAAkB,mBAChDL,IAAMC,SAASC,QAAQI,OAAOC,OAAS,mBACnCb,GAASG,EACTG,IAAMC,SAASC,QAAQI,OAAO,gBAAkBZ,EAChDM,IAAMC,SAASC,QAAQC,KAAK,gBAAkBT,EAC9CM,IAAMC,SAASC,QAAQtJ,IAAI,gBAAkB8I,EAC7CM,IAAMC,SAASC,QAAQG,OAAO,gBAAkBX,EAChDM,IAAMC,SAASC,QAAQE,IAAI,gBAAkBV,EAC7CH,EAASiB,GAAYX,EAAOjE,UACzB,CACH2D,EAASiB,IAAY,IACrBjB,EAASkB,GAAY3K,EAAM+D,QAAQvC,SAASwC,WAC5C,IAAM4G,EAAY5K,EAAM+D,QAAQvC,SAASwC,SAASC,MAAM,KAE/B,IAArB2G,EAAU/C,QACT,CAAC,UAAW,QAAS,aAAa9B,SAAS6E,EAAU,KAEtD5K,EAAM+D,QAAQW,KAAK,WAEnB8E,GAAYxJ,EAAM+D,QAAQW,KAAK,cAIrCiG,GAAc,SAAApG,GAAG,MAAK,CACxBH,KAAM,gBACNG,QAGEmG,GAAc,SAAAG,GAAE,MAAK,CACvBzG,KAAM,gBACNyG,OAGS7B,GAAS,kBAAM,SAAAS,GACxB/J,GAAQoK,OAAO,aAAc,CACzB5H,KAAM,MAEVxC,GAAQoK,OAAO,aAAc,CACzB5H,KAAM,aAEHgI,IAAMC,SAASC,QAAQI,OAAO,uBAC9BN,IAAMC,SAASC,QAAQC,KAAK,uBAC5BH,IAAMC,SAASC,QAAQtJ,IAAI,uBAC3BoJ,IAAMC,SAASC,QAAQG,OAAO,uBAC9BL,IAAMC,SAASC,QAAQE,IAAI,gBAClCb,EAASiB,IAAY,MAGZI,GAAU,SAAA/B,GAAI,MAAK,CAC5B3E,KAAM,WACN2E,SAsBSgC,GAAe,SAAAjJ,GAAK,MAAK,CAClCsC,KAAM,iBACNtC,UAqDSkJ,GAAwB,SAAAjC,GAAI,MAAK,CAC1C3E,KAAM,2BACN2E,4EC1JWkC,GAAA,SAAAjL,GACX,IAYQkL,EAAUlL,EAAVkL,MACFC,EAbwB,CAC1BC,KAAM,GACNxI,QAAS,GACTyI,SAAU,GACVhB,KAAM,GACNiB,MAAO,GACPC,aAAc,GACdC,WAAY,GACZC,SAAU,GACVC,UAAW,GACXC,gBAAiB,IAIfC,EAdwB,CAC1BR,KAAM,GACNxI,QAAS,GACTyI,SAAU,GACVhB,KAAM,GACNiB,MAAO,GACPC,aAAc,GACdC,WAAY,GACZC,SAAU,GACVC,UAAW,GACXC,gBAAiB,IAKrB,GAAIT,EAAMpI,SACN,GAAKoI,EAAME,KAEJ,CAEH,GADAQ,EAAgBR,KAAK1G,KAAKwG,EAAME,KAAKtF,KACjCoF,EAAMW,eACN,GAAIX,EAAMtI,QAAQkD,MAAQoF,EAAMW,eAC5BV,EAAmBvI,QAAQ8B,KAAKwG,EAAMW,oBACnC,CACHD,EAAgBhJ,QAAQ8B,KAAKwG,EAAMtI,QAAQkD,KADxC,IAAAjB,GAAA,EAAAC,GAAA,EAAAC,OAAAb,EAAA,IAEH,QAAAc,EAAAC,EAAqBiG,EAAMtI,QAAQkJ,WAAnC5G,OAAAC,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,EAA+C,KAAtCwG,EAAsCrG,EAAAO,MACtC2F,EAAMK,aAAaF,IACpBF,EAAmBI,aAAa7G,KAAK2G,GAEzCO,EAAgBL,aAAa7G,KAAK2G,IANnC,MAAA1F,IAAAb,GAAA,EAAAC,EAAAY,GAAA,YAAAd,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAd,EAAA,MAAAC,GAAA,IAAAgH,GAAA,EAAAC,GAAA,EAAAC,OAAA/H,EAAA,IAQH,QAAAgI,EAAAC,EAAkBjB,EAAMtI,QAAQwJ,OAAhClH,OAAAC,cAAA4G,GAAAG,EAAAC,EAAA/G,QAAAC,MAAA0G,GAAA,EAAwC,KAA/BT,EAA+BY,EAAA3G,MAC/B2F,EAAMQ,UAAUJ,IACjBH,EAAmBO,UAAUhH,KAAK4G,GAEtCM,EAAgBF,UAAUhH,KAAK4G,IAZhC,MAAA3F,IAAAqG,GAAA,EAAAC,EAAAtG,GAAA,YAAAoG,GAAA,MAAAI,EAAAvG,QAAAuG,EAAAvG,SAAA,WAAAoG,EAAA,MAAAC,GAAA,IAAAI,GAAA,EAAAC,GAAA,EAAAC,OAAArI,EAAA,IAcH,QAAAsI,EAAAC,EAAiBvB,EAAMtI,QAAQ8J,YAA/BxH,OAAAC,cAAAkH,GAAAG,EAAAC,EAAArH,QAAAC,MAAAgH,GAAA,EAA4C,KAAnChC,EAAmCmC,EAAAjH,MACnC2F,EAAMO,SAASpB,IAChBc,EAAmBM,SAAS/G,KAAK2F,GAErCuB,EAAgBH,SAAS/G,KAAK2F,IAlB/B,MAAA1E,IAAA2G,GAAA,EAAAC,EAAA5G,GAAA,YAAA0G,GAAA,MAAAI,EAAA7G,QAAA6G,EAAA7G,SAAA,WAAA0G,EAAA,MAAAC,GAAA,IAAAI,GAAA,EAAAC,GAAA,EAAAC,OAAA3I,EAAA,IAoBH,QAAA4I,EAAAC,EAAiB7B,EAAMtI,QAAQoK,QAA/B9H,OAAAC,cAAAwH,GAAAG,EAAAC,EAAA3H,QAAAC,MAAAsH,GAAA,EAAwC,KAA/BtC,EAA+ByC,EAAAvH,MAC/B2F,EAAMO,SAASpB,IAChBc,EAAmBM,SAAS/G,KAAK2F,GAErCuB,EAAgBH,SAAS/G,KAAK2F,IAxB/B,MAAA1E,IAAAiH,GAAA,EAAAC,EAAAlH,GAAA,YAAAgH,GAAA,MAAAI,EAAAnH,QAAAmH,EAAAnH,SAAA,WAAAgH,EAAA,MAAAC,GAAA,IAAAI,GAAA,EAAAC,GAAA,EAAAC,OAAAjJ,EAAA,IA0BH,QAAAkJ,EAAAC,EAAwBnC,EAAMtI,QAAQ0K,aAAtCpI,OAAAC,cAAA8H,GAAAG,EAAAC,EAAAjI,QAAAC,MAAA4H,GAAA,EAAoD,KAA3CM,EAA2CH,EAAA7H,MAC3C2F,EAAMS,gBAAgB4B,IACvBpC,EAAmBQ,gBAAgBjH,KAAK6I,GAE5C3B,EAAgBD,gBAAgBjH,KAAK6I,IA9BtC,MAAA5H,IAAAuH,GAAA,EAAAC,EAAAxH,GAAA,YAAAsH,GAAA,MAAAI,EAAAzH,QAAAyH,EAAAzH,SAAA,WAAAsH,EAAA,MAAAC,GAAA,IAAAK,GAAA,EAAAC,GAAA,EAAAC,OAAAxJ,EAAA,IAgCH,QAAAyJ,EAAAC,EAAmB1C,EAAMtI,QAAQ6E,QAAjCvC,OAAAC,cAAAqI,GAAAG,EAAAC,EAAAxI,QAAAC,MAAAmI,GAAA,EAA0C,KAAjCK,EAAiCF,EAAApI,MACjC2F,EAAMM,WAAWqC,EAAOA,SACzB1C,EAAmBK,WAAW9G,KAAKmJ,EAAOA,QAE9CjC,EAAgBJ,WAAW9G,KAAKmJ,EAAOA,SApCxC,MAAAlI,IAAA8H,GAAA,EAAAC,EAAA/H,GAAA,YAAA6H,GAAA,MAAAI,EAAAhI,QAAAgI,EAAAhI,SAAA,WAAA6H,EAAA,MAAAC,IAwCX,GAAIxC,EAAM4C,eACN,GAAI5C,EAAM6C,QAAQjI,MAAQoF,EAAM4C,eAC5B3C,EAAmBvI,QAAQ8B,KAAKwG,EAAM4C,oBACnC,CACHlC,EAAgBhJ,QAAQ8B,KAAKwG,EAAM6C,QAAQjI,KADxC,IAAAkI,GAAA,EAAAC,GAAA,EAAAC,OAAAhK,EAAA,IAEH,QAAAiK,EAAAC,EAAqBlD,EAAM6C,QAAQjC,WAAnC5G,OAAAC,cAAA6I,GAAAG,EAAAC,EAAAhJ,QAAAC,MAAA2I,GAAA,EAA+C,KAAtC3C,EAAsC8C,EAAA5I,MACtC2F,EAAMK,aAAaF,IACpBF,EAAmBI,aAAa7G,KAAK2G,GAEzCO,EAAgBL,aAAa7G,KAAK2G,IANnC,MAAA1F,IAAAsI,GAAA,EAAAC,EAAAvI,GAAA,YAAAqI,GAAA,MAAAI,EAAAxI,QAAAwI,EAAAxI,SAAA,WAAAqI,EAAA,MAAAC,GAAA,IAAAG,GAAA,EAAAC,GAAA,EAAAC,OAAArK,EAAA,IAQH,QAAAsK,EAAAC,EAAkBvD,EAAM6C,QAAQ3B,OAAhClH,OAAAC,cAAAkJ,GAAAG,EAAAC,EAAArJ,QAAAC,MAAAgJ,GAAA,EAAwC,KAA/B/C,EAA+BkD,EAAAjJ,MAC/B2F,EAAMQ,UAAUJ,IACjBH,EAAmBO,UAAUhH,KAAK4G,GAEtCM,EAAgBF,UAAUhH,KAAK4G,IAZhC,MAAA3F,IAAA2I,GAAA,EAAAC,EAAA5I,GAAA,YAAA0I,GAAA,MAAAI,EAAA7I,QAAA6I,EAAA7I,SAAA,WAAA0I,EAAA,MAAAC,GAAA,IAAAG,GAAA,EAAAC,GAAA,EAAAC,QAAA1K,EAAA,IAcH,QAAA2K,GAAAC,GAAmB5D,EAAM6C,QAAQtG,QAAjCvC,OAAAC,cAAAuJ,GAAAG,GAAAC,GAAA1J,QAAAC,MAAAqJ,GAAA,EAA0C,KAAjCb,GAAiCgB,GAAAtJ,MACjC2F,EAAMM,WAAWqC,GAAOA,SACzB1C,EAAmBK,WAAW9G,KAAKmJ,GAAOA,QAE9CjC,EAAgBJ,WAAW9G,KAAKmJ,GAAOA,SAlBxC,MAAAlI,IAAAgJ,GAAA,EAAAC,GAAAjJ,GAAA,YAAA+I,GAAA,MAAAI,GAAAlJ,QAAAkJ,GAAAlJ,SAAA,WAAA+I,EAAA,MAAAC,KAsBX,GAAI1D,EAAM6D,aACN,GAAI7D,EAAMI,MAAMxF,MAAQoF,EAAM6D,aAC1B5D,EAAmBG,MAAM5G,KAAKwG,EAAM6D,kBACjC,CACHnD,EAAgBN,MAAM5G,KAAKwG,EAAMI,MAAMxF,KADpC,IAAAkJ,IAAA,EAAAC,IAAA,EAAAC,QAAAhL,EAAA,IAEH,QAAAiL,GAAAC,GAAiBlE,EAAMI,MAAM+D,MAA7BnK,OAAAC,cAAA6J,IAAAG,GAAAC,GAAAhK,QAAAC,MAAA2J,IAAA,EAAoC,KAA3B5D,GAA2B+D,GAAA5J,MAC3B2F,EAAMM,WAAWJ,KAClBD,EAAmBK,WAAW9G,KAAK0G,IAEvCQ,EAAgBJ,WAAW9G,KAAK0G,KANjC,MAAAzF,IAAAsJ,IAAA,EAAAC,GAAAvJ,GAAA,YAAAqJ,IAAA,MAAAI,GAAAxJ,QAAAwJ,GAAAxJ,SAAA,WAAAqJ,GAAA,MAAAC,IAAA,IAAAI,IAAA,EAAAC,IAAA,EAAAC,QAAAtL,EAAA,IAQH,QAAAuL,GAAAC,GAAqBxE,EAAMI,MAAMQ,WAAjC5G,OAAAC,cAAAmK,IAAAG,GAAAC,GAAAtK,QAAAC,MAAAiK,IAAA,EAA6C,KAApCjE,GAAoCoE,GAAAlK,MACpC2F,EAAMK,aAAaF,KACpBF,EAAmBI,aAAa7G,KAAK2G,IAEzCO,EAAgBL,aAAa7G,KAAK2G,KAZnC,MAAA1F,IAAA4J,IAAA,EAAAC,GAAA7J,GAAA,YAAA2J,IAAA,MAAAI,GAAA9J,QAAA8J,GAAA9J,SAAA,WAAA2J,GAAA,MAAAC,IAAA,IAAAG,IAAA,EAAAC,IAAA,EAAAC,QAAA3L,EAAA,IAcH,QAAA4L,GAAAC,GAAiB7E,EAAMI,MAAM0E,MAA7B9K,OAAAC,cAAAwK,IAAAG,GAAAC,GAAA3K,QAAAC,MAAAsK,IAAA,EAAoC,KAA3BtF,GAA2ByF,GAAAvK,MAC3B2F,EAAMO,SAASpB,KAChBc,EAAmBM,SAAS/G,KAAK2F,IAErCuB,EAAgBH,SAAS/G,KAAK2F,KAlB/B,MAAA1E,IAAAiK,IAAA,EAAAC,GAAAlK,GAAA,YAAAgK,IAAA,MAAAI,GAAAnK,QAAAmK,GAAAnK,SAAA,WAAAgK,GAAA,MAAAC,KAsBX,GAAI3E,EAAM+E,gBACN,GAAI/E,EAAMG,SAASvF,MAAQoF,EAAM+E,gBAC7B9E,EAAmBE,SAAS3G,KAAKwG,EAAM+E,qBACpC,CACHrE,EAAgBP,SAAS3G,KAAKwG,EAAMG,SAASvF,KAC7C,IAAIoK,GAAe,GACfhF,EAAMG,SAAS8E,OACfD,GAAaxL,KAAKwG,EAAMG,SAAS8E,OACjCjF,EAAMG,SAAS+E,QACfF,GAAaxL,KAAKwG,EAAMG,SAAS+E,QACrCF,GAAY,GAAAzO,OAAArB,OAAAiQ,GAAA,EAAAjQ,CACL8P,IADK9P,OAAAiQ,GAAA,EAAAjQ,CAEJ8K,EAAMG,SAASiF,SAAW,IAFtBlQ,OAAAiQ,GAAA,EAAAjQ,CAGJ8K,EAAMG,SAASkF,YAAc,KAVlC,IAAAC,IAAA,EAAAC,IAAA,EAAAC,QAAAxM,EAAA,IAYH,QAAAyM,GAAAC,GAAmBV,GAAnBhL,OAAAC,cAAAqL,IAAAG,GAAAC,GAAAxL,QAAAC,MAAAmL,IAAA,EAAiC,KAAxB3C,GAAwB8C,GAAApL,MACxB2F,EAAMM,WAAWqC,KAClB1C,EAAmBK,WAAW9G,KAAKmJ,IAEvCjC,EAAgBJ,WAAW9G,KAAKmJ,KAhBjC,MAAAlI,IAAA8K,IAAA,EAAAC,GAAA/K,GAAA,YAAA6K,IAAA,MAAAI,GAAAhL,QAAAgL,GAAAhL,SAAA,WAAA6K,GAAA,MAAAC,IAAA,IAAAG,IAAA,EAAAC,IAAA,EAAAC,QAAA7M,EAAA,IAkBH,QAAA8M,GAAAC,GAAiB/F,EAAMG,SAAS2E,MAAhC9K,OAAAC,cAAA0L,IAAAG,GAAAC,GAAA7L,QAAAC,MAAAwL,IAAA,EAAuC,KAA9BxG,GAA8B2G,GAAAzL,MAC9B2F,EAAMO,SAASpB,KAChBc,EAAmBM,SAAS/G,KAAK2F,IAErCuB,EAAgBH,SAAS/G,KAAK2F,KAtB/B,MAAA1E,IAAAmL,IAAA,EAAAC,GAAApL,GAAA,YAAAkL,IAAA,MAAAI,GAAArL,QAAAqL,GAAArL,SAAA,WAAAkL,GAAA,MAAAC,KA0BX,GAAI7F,EAAMgG,aAAc,KAAAC,IAAA,EAAAC,IAAA,EAAAC,QAAAnN,EAAA,IACpB,QAAAoN,GAAAC,GAAiBrG,EAAMgG,aAAvBhM,OAAAC,cAAAgM,IAAAG,GAAAC,GAAAnM,QAAAC,MAAA8L,IAAA,EAAqC,KAA5B9G,GAA4BiH,GAAA/L,MAC3BiM,GAAStG,EAAMb,KAAKA,IAC1B,GAAKmH,GAEE,CACH5F,EAAgBvB,KAAK3F,KAAK2F,IADvB,IAAAoH,IAAA,EAAAC,IAAA,EAAAC,QAAAzN,EAAA,IAEH,QAAA0N,GAAAC,GAAmBL,GAAOnC,MAA1BnK,OAAAC,cAAAsM,IAAAG,GAAAC,GAAAzM,QAAAC,MAAAoM,IAAA,EAAiC,KAAxB5D,GAAwB+D,GAAArM,MACxB2F,EAAMM,WAAWqC,KAClB1C,EAAmBK,WAAW9G,KAAKmJ,IAEvCjC,EAAgBJ,WAAW9G,KAAKmJ,KANjC,MAAAlI,IAAA+L,IAAA,EAAAC,GAAAhM,GAAA,YAAA8L,IAAA,MAAAI,GAAAjM,QAAAiM,GAAAjM,SAAA,WAAA8L,GAAA,MAAAC,IAQCtH,GAAKyH,SAC0B,aAA3BzH,GAAKyH,OAAOC,WACZnG,EAAgBL,aAAa7G,KACzB2F,GAAKyH,OAAOE,UAEgB,UAA3B3H,GAAKyH,OAAOC,YACjBnG,EAAgBF,UAAUhH,KACtB2F,GAAKyH,OAAOE,gBAhBxB7G,EAAmBd,KAAK3F,KAAK2F,KAJjB,MAAA1E,IAAAyL,IAAA,EAAAC,GAAA1L,GAAA,YAAAwL,IAAA,MAAAI,GAAA3L,QAAA2L,GAAA3L,SAAA,WAAAwL,GAAA,MAAAC,WA7HxBlG,EAAmBC,KAAK1G,KAAKwG,EAAMpI,UA0J3C,IAAMmP,GAAS,SAAAC,GACX,IAAK,IAAIC,KAAQD,EACTA,EAAIC,KACJD,EAAIC,GAAQC,MAAMC,KAAK,IAAIC,IAAIJ,EAAIC,OAK/CF,GAAOrG,GACP,IAEI2G,GAFEC,GApLwB,CAC1BpH,KAAM,GACNxI,QAAS,GACTyI,SAAU,GACVhB,KAAM,GACNiB,MAAO,GACPC,aAAc,GACdC,WAAY,GACZC,SAAU,GACVC,UAAW,GACXC,gBAAiB,IA2KrB6G,GAAmBzE,QAAU,GAE7B,IAAM0E,GAAS,SAAClK,EAAKH,GAEb8C,EAAM9C,GAAMtC,MACX8F,EAAgBrD,GAAKxC,SAASmF,EAAM9C,GAAMtC,OAE3C0M,GAAmBpK,GAAM1D,KAAKwG,EAAM9C,GAAMtC,KAC1CyM,IAAiB,IAGnBG,GAAS,SAAAnK,GACX,IAAK,IAAI4J,KAAQjH,EAAM3C,GACdqD,EAAgBrD,GAAKxC,SAASoM,KAC/BK,GAAmBjK,GAAK7D,KAAKyN,GAC7BI,IAAiB,IAqB7B,OAjBAE,GAAO,UAAW,WAClBA,GAAO,UAAW,WAClBA,GAAO,QAAS,SAChBA,GAAO,WAAY,YACnBC,GAAO,QACPA,GAAO,cACPA,GAAO,gBACPA,GAAO,mBACPA,GAAO,YACPA,GAAO,aAEHH,IACAvS,EAAM2S,WAAWH,IAGrBP,GAAO9G,GAEAA,GCxNIyH,GAAA,SAACC,EAAU/S,EAAOoL,EAAO4H,GACpC,IAAMN,EAAqB,CACvBpH,KAAM,GACNxI,QAAS,GACTyI,SAAU,GACVhB,KAAM,GACNiB,MAAO,GACPC,aAAc,GACdC,WAAY,GACZC,SAAU,GACVC,UAAW,GACXC,gBAAiB,IAGfoH,EAAY,SAAAxK,GACd,IAAK,IAAI4J,KAAQU,EAAStK,GACa,qBAAxBsK,EAAStK,GAAK4J,KACjBjH,EAAM3C,GAAK4J,GACPjH,EAAM3C,GAAK4J,KAAUU,EAAStK,GAAK4J,IACnCa,GAAgBzK,EAAK,CAAC4J,GAAOrS,GAE9B0S,EAAmBjK,GAAK7D,KAAKyN,KAK1Cc,EAAQ,SAAA1K,GACV,IAAK,IAAI4J,KAAQU,EAAStK,GACa,qBAAxBsK,EAAStK,GAAK4J,KACjBjH,EAAM3C,GAAKzC,MAAQqM,GACfjH,EAAM3C,GAAK2K,MAAQL,EAAStK,GAAK4J,IACjCa,GAAgBzK,EAAK,CAAC4J,GAAOrS,GAE5BoL,EAAM3C,GAAKzC,KAAK0M,EAAmBjK,GAAK7D,KAAKyN,IAC/CK,EAAmBjK,GAAK7D,KAAKyN,KAKhD,IAAK,IAAIA,KAAQU,EAASzH,KACa,qBAAxByH,EAASzH,KAAK+G,KACjBjH,EAAME,KAAKtF,MAAQqM,EACfjH,EAAME,KAAK8H,MAAQL,EAASzH,KAAK+G,IACjCa,GAAgB,OAAQ,CAACb,GAAOrS,GAEjC0S,EAAmBpH,KAAK1G,KAAKyN,IAI5C,IAAK,IAAIA,KAAQU,EAASjQ,QACgB,qBAA3BiQ,EAASjQ,QAAQuP,KACpBjH,EAAMtI,QAAQkD,MAAQqM,GAClBjH,EAAMtI,QAAQsQ,MAAQL,EAASjQ,QAAQuP,IACvCa,GAAgB,UAAW,CAACb,GAAOrS,GAGvCoL,EAAM6C,QAAQjI,MAAQqM,IAClBjH,EAAM6C,QAAQmF,MAAQL,EAASjQ,QAAQuP,IACvCa,GAAgB,UAAW,CAACb,GAAOrS,GAElCoL,EAAMtI,QAAQkD,KAAK0M,EAAmB5P,QAAQ8B,KAAKyN,KAG5DjH,EAAMtI,QAAQkD,MAAQqM,GAAQjH,EAAM6C,QAAQjI,MAAQqM,GACpDK,EAAmB5P,QAAQ8B,KAAKyN,GAaxC,GAVAc,EAAM,YACNA,EAAM,SAENF,EAAU,QACVA,EAAU,cACVA,EAAU,gBACVA,EAAU,YACVA,EAAU,aACVA,EAAU,mBAGNP,EAAmBpH,KAAKvD,OAAS,GACjC2K,EAAmB5P,QAAQiF,OAAS,GACpC2K,EAAmBnH,SAASxD,OAAS,GACrC2K,EAAmBnI,KAAKxC,OAAS,GACjC2K,EAAmBlH,MAAMzD,OAAS,GAClC2K,EAAmBhH,WAAW3D,OAAS,GACvC2K,EAAmBjH,aAAa1D,OAAS,GACzC2K,EAAmB/G,SAAS5D,OAAS,GACrC2K,EAAmB9G,UAAU7D,OAAS,GACtC2K,EAAmB7G,gBAAgB9D,OAAS,EAE5C,OAAO2K,GC3FAW,GAAA,SAAAnT,GAAS,IACZkL,EAAUlL,EAAVkL,MACFkI,EAAY,CACdhI,KAAM,GACNxI,QAAS,GACTyI,SAAU,GACVhB,KAAM,GACNiB,MAAO,GACPK,gBAAiB,GACjBH,WAAY,GACZD,aAAc,GACdG,UAAW,GACXD,SAAU,IAGVP,EAAME,MAAQF,EAAME,KAAKtF,MACzBsN,EAAUhI,KAAKF,EAAME,KAAKtF,KAAOoF,EAAME,KAAK8H,KAG5ChI,EAAMtI,QAAQkD,MACdsN,EAAUxQ,QAAQsI,EAAMtI,QAAQkD,KAAOoF,EAAMtI,QAAQsQ,KAErDhI,EAAM6C,QAAQjI,MACdsN,EAAUxQ,QAAQsI,EAAM6C,QAAQjI,KAAOoF,EAAM6C,QAAQmF,KAErDhI,EAAMG,SAASvF,MACfsN,EAAU/H,SAASH,EAAMG,SAASvF,KAAOoF,EAAMG,SAAS6H,KAExDhI,EAAMI,MAAMxF,MACZsN,EAAU9H,MAAMJ,EAAMI,MAAMxF,KAAOoF,EAAMI,MAAM4H,KAGnD,IAAMG,EAAU,SAAA9K,GACZ,IAAK,IAAIZ,KAAQuD,EAAM3C,GACa,qBAArB2C,EAAM3C,GAAKZ,IACduD,EAAM3C,GAAKZ,GAAM7B,MACjBsN,EAAU7K,GAAK2C,EAAM3C,GAAKZ,GAAM7B,KAAOoF,EAAM3C,GAAKZ,GAAMuL,MAaxE,OAPAG,EAAQ,QACRA,EAAQ,cACRA,EAAQ,YACRA,EAAQ,aACRA,EAAQ,gBACRA,EAAQ,mBAEDD,GClCAN,IAJSQ,EAAQ,KAA2CC,OAAO,CAC1EC,eAAgB,SAACC,EAAMC,GAAP,MAA4B,UAATD,MAGhB,GAEjBE,iNACF7T,MAAQ,CACJsL,KAAM,GACNxI,QAAS,GACTyI,SAAU,GACVhB,KAAM,GACNiB,MAAO,GACPE,WAAY,GACZD,aAAc,GACdE,SAAU,GACVC,UAAW,GACXC,gBAAiB,MAErBiI,MAAQ,WACJ,IAMIC,EACJf,GAAY,IAAIgB,UAHN,iCAKV,IAAMC,EAAY,SAAAlB,GACd,IAAIL,EACAK,IACAL,EAAqBI,GACjBC,EACAmB,EAAKlU,MACLkU,EAAKhU,MAAMkL,MACX4H,KAGRmB,aAAaJ,GAEbA,EAAcK,WAAW,WACrBpB,GAAUqB,SACX,MAEHrB,GAAUsB,KACNC,KAAKC,UAAU,CACXC,YAAa,YACb/B,yBAMZM,GAAU0B,OAAS,SAAAC,GACf,IAAMC,EAAqBvB,GAAsBa,EAAKhU,OACtD8S,GAAUsB,KACNC,KAAKC,UAAU,CACXC,YAAa,OACbnJ,KAAMlB,IAAMC,SAASC,QAAQI,OAAO,gBACpCkK,wBAIRV,EAAKW,2BAA2BX,EAAKhU,OACrC+T,KAGJjB,GAAU8B,UAAY,SAAAH,GAClB,IAAMI,EAAOR,KAAKS,MAAML,EAAM1L,MAE9B,OAAQ8L,EAAKN,aACT,IAAK,YACDR,EAAUc,EAAKhC,UACf,MACJ,IAAK,SACDmB,EAAKhU,MAAMgJ,SACXgL,EAAKhU,MAAM+D,QAAQW,KAAK,WACxB,MAEJ,IAAK,iBACDyE,KAAQF,QAAQ4L,EAAKE,aACrB,MACJ,IAAK,eACD5L,KAAQE,MAAMwL,EAAKE,aACnB,MACJ,IAAK,cACDf,EAAKhU,MAAMgV,eAAeH,EAAKI,aAC/B,MACJ,IAAK,uBACDjB,EAAKhU,MAAM+D,QAAQW,KAAK,eACxB,MACJ,IAAK,cACDsP,EAAKhU,MAAMkV,aAAaL,EAAKzB,UAAWyB,EAAKzQ,MAC7C,MACJ,IAAK,iBACD4P,EAAKhU,MAAMmV,eACPN,EAAKO,KACLP,EAAKhK,GACLgK,EAAKQ,OACLrB,EAAKlU,OAET,MACJ,IAAK,qBACDkU,EAAKhU,MAAMgL,sBAAsB6J,EAAK9L,MACtC,MAuBJ,IAAK,QACDI,KAAQE,MAAMwL,EAAKS,QAS/BxC,GAAUyC,QAAU,SAAAd,GAChBR,aAAaJ,OAWrB2B,cAAgB,OAEhBvC,MAAQ,WACCH,IAAsC,IAAzBA,GAAU2C,aACxBC,cAAc1B,EAAKwB,eACnBxB,EAAKwB,cAAgBG,YAAY3B,EAAKf,MAAO,KAC7Ce,EAAKJ,YAObgC,2BAA6B,OAC7BC,mBAAqB,WACjB,QAAAC,EAAA,EAAAC,EAAkB,CACd,OACA,UACA,WACA,OACA,QACA,WACA,YACA,eACA,aACA,mBAVJD,EAAAC,EAAAlO,OAAAiO,IAWG,CAXE,IAAIxK,EAAKyK,EAAAD,GAYN9B,EAAKlU,MAAMwL,GAAOzD,OAAS,GACvBiL,IAAsC,IAAzBA,GAAU2C,YACvB3C,GAAUsB,KACNC,KAAKC,UAAU,CACXC,YAAa,kBACbyB,IAAKhC,EAAKlU,MAAMwL,GAChBlH,KAAMkH,SAqB9BqJ,2BAA6B,SAAAsB,GAEzB,IADA,IAAMC,EAAwBjL,GAAyBgL,GADjBE,EAAA,WAEjC,IAAI7K,EAAK8K,EAAAC,GAYNH,EAAsB5K,GAAOzD,OAAS,GAClCiL,IAAsC,IAAzBA,GAAU2C,YACvB3C,GAAUsB,KACNC,KAAKC,UAAU,CACXC,YAAa,kBACbyB,IAAKE,EAAsB5K,GAAO5D,OAC9B,SAAAC,GAAI,OAAKqM,EAAKlU,MAAMwL,GAAOvF,SAAS4B,KAExCvD,KAAMkH,MApB1B+K,EAAA,EAAAD,EAAkB,CACd,OACA,UACA,WACA,OACA,QACA,WACA,YACA,eACA,aACA,mBAVJC,EAAAD,EAAAvO,OAAAwO,IAWGF,IAeHnC,EAAK1T,SAAS,kBAAM4V,IACpBR,cAAc1B,EAAK4B,4BACnB5B,EAAK4B,2BAA6BD,YAC9B3B,EAAK6B,mBACL,4FA5EJS,KAAKd,cAAgBG,YAAYW,KAAKrD,MAAO,mDAgC7CyC,cAAcY,KAAKd,eACf1C,IACAA,GAAUqB,0DAMQ8B,GACtBK,KAAK3B,2BAA2BsB,oCAwChC,OAAO,YA3OgBM,aAsQhB3W,eACXC,YAzBoB,SAAAC,GACpB,MAAO,CACHoL,MAAOpL,IAIY,SAAC2J,GACxB,MAAO,CACHqB,QAAS,SAAC/B,EAAMyN,GAAP,OACL/M,EAASgN,GAAgB1N,KAC7B4J,WAAY,SAAA5J,GAAI,OAAIU,EJ3LF,SAAAV,GAAI,MAAK,CAC/B3E,KAAM,cACN2E,QIyLiC0N,CAAmB1N,KAChDmM,aAAc,SAACnM,EAAM3E,GAAP,OACVqF,ECzQgB,SAACV,EAAM3E,GAAP,OAAgB,SAACqF,EAAUiN,GACnD,GAAI3N,EAAKlB,OAAS,EAAG,CACjB,IAAM/H,EAAQ4W,IACd,OAAQtS,GACJ,IAAK,OACD,IAAMgH,EAAOrC,EAAK,GACd8C,EAAiBT,EAAKS,eACrBA,IAAgBA,EAAiBT,EAAKuL,WAG3ClN,EAASqB,GAAQ,CAAEM,OAAMS,oBACzB,MACJ,IAAK,UACD,IAAMjJ,EAAUmG,EAAK6N,KACjB,SAAAjP,GAAI,OAAIA,EAAK7B,MAAQhG,EAAM+L,iBAE3BjJ,GACA6G,EAASqB,GAAQ,CAAElI,aAGvB,IAAMmL,EAAUhF,EAAK6N,KACjB,SAAAjP,GAAI,OAAIA,EAAK7B,MAAQhG,EAAMgO,iBAE3BC,GACAtE,EAASqB,GAAQ,CAAEiD,aAGvB,MACJ,IAAK,WACD,IAAM1C,EAAWtC,EAAK6N,KAClB,SAAAjP,GAAI,OAAIA,EAAK7B,MAAQhG,EAAMmQ,kBAE3B5E,GACA5B,EAASqB,GAAQ,CAAEO,cAEvB,MACJ,IAAK,QACD,IAAMC,EAAQvC,EAAK6N,KAAK,SAAAjP,GAAI,OAAIA,EAAK7B,MAAQhG,EAAMiP,eAC/CzD,GACA7B,EAASqB,GAAQ,CAAEQ,WAEvB,MACJ,IAAK,OACD,IAAIjB,EAAO,GADfxF,GAAA,EAAAC,GAAA,EAAAC,OAAAb,EAAA,IAEI,QAAAc,EAAAC,EAAiB8D,EAAjB7D,OAAAC,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,EAAuB,KAAd8C,EAAc3C,EAAAO,MACnB8E,EAAK1C,EAAK7B,KAAO6B,GAHzB,MAAAhC,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAd,EAAA,MAAAC,GAKI0E,EAASqB,GAAQ,CAAET,UACnB,MACJ,IAAK,aACD,IAAImB,EAAa,GADrBO,GAAA,EAAAC,GAAA,EAAAC,OAAA/H,EAAA,IAEI,QAAAgI,EAAAC,EAAiBpD,EAAjB7D,OAAAC,cAAA4G,GAAAG,EAAAC,EAAA/G,QAAAC,MAAA0G,GAAA,EAAuB,KAAdpE,EAAcuE,EAAA3G,MACnBiG,EAAW7D,EAAK7B,KAAO6B,GAH/B,MAAAhC,GAAAqG,GAAA,EAAAC,EAAAtG,EAAA,YAAAoG,GAAA,MAAAI,EAAAvG,QAAAuG,EAAAvG,SAAA,WAAAoG,EAAA,MAAAC,GAKIxC,EAASqB,GAAQ,CAAEU,gBACnB,MACJ,IAAK,eACD,IAAID,EAAe,GADvBc,GAAA,EAAAC,GAAA,EAAAC,OAAArI,EAAA,IAEI,QAAAsI,EAAAC,EAAiB1D,EAAjB7D,OAAAC,cAAAkH,GAAAG,EAAAC,EAAArH,QAAAC,MAAAgH,GAAA,EAAuB,KAAd1E,EAAc6E,EAAAjH,MACnBgG,EAAa5D,EAAK7B,KAAO6B,GAHjC,MAAAhC,GAAA2G,GAAA,EAAAC,EAAA5G,EAAA,YAAA0G,GAAA,MAAAI,EAAA7G,QAAA6G,EAAA7G,SAAA,WAAA0G,EAAA,MAAAC,GAKI9C,EAASqB,GAAQ,CAAES,kBACnB,MACJ,IAAK,kBACD,IAAII,EAAkB,GAD1BgB,GAAA,EAAAC,GAAA,EAAAC,OAAA3I,EAAA,IAEI,QAAA4I,EAAAC,EAAiBhE,EAAjB7D,OAAAC,cAAAwH,GAAAG,EAAAC,EAAA3H,QAAAC,MAAAsH,GAAA,EAAuB,KAAdhF,EAAcmF,EAAAvH,MACnBoG,EAAgBhE,EAAK7B,KAAO6B,GAHpC,MAAAhC,GAAAiH,GAAA,EAAAC,EAAAlH,EAAA,YAAAgH,GAAA,MAAAI,EAAAnH,QAAAmH,EAAAnH,SAAA,WAAAgH,EAAA,MAAAC,GAKIpD,EAASqB,GAAQ,CAAEa,qBACnB,MACJ,IAAK,WACD,IAAIF,EAAW,GADnBwB,GAAA,EAAAC,GAAA,EAAAC,OAAAjJ,EAAA,IAEI,QAAAkJ,EAAAC,EAAiBtE,EAAjB7D,OAAAC,cAAA8H,GAAAG,EAAAC,EAAAjI,QAAAC,MAAA4H,GAAA,EAAuB,KAAdtF,EAAcyF,EAAA7H,MACnBkG,EAAS9D,EAAK7B,KAAO6B,GAH7B,MAAAhC,GAAAuH,GAAA,EAAAC,EAAAxH,EAAA,YAAAsH,GAAA,MAAAI,EAAAzH,QAAAyH,EAAAzH,SAAA,WAAAsH,EAAA,MAAAC,GAKI1D,EAASqB,GAAQ,CAAEW,cACnB,MACJ,IAAK,YACD,IAAIC,EAAY,GADpB8B,GAAA,EAAAC,GAAA,EAAAC,OAAAxJ,EAAA,IAEI,QAAAyJ,EAAAC,EAAiB7E,EAAjB7D,OAAAC,cAAAqI,GAAAG,EAAAC,EAAAxI,QAAAC,MAAAmI,GAAA,EAAuB,KAAd7F,EAAcgG,EAAApI,MACnBmG,EAAU/D,EAAK7B,KAAO6B,GAH9B,MAAAhC,GAAA8H,GAAA,EAAAC,EAAA/H,EAAA,YAAA6H,GAAA,MAAAI,EAAAhI,QAAAgI,EAAAhI,SAAA,WAAA6H,EAAA,MAAAC,GAKIjE,EAASqB,GAAQ,CAAEY,kBDuLd+K,CAAqB1N,EAAM3E,KACxC4Q,eAAgB,SAAAjM,GAAI,OAAIU,EJzLF,SAAAV,GAAI,MAAK,CACnC3E,KAAM,mBACN2E,QIuLqC0N,CAAuB1N,KAExDoM,eAAgB,SAACC,EAAMvK,EAAIwK,EAAQvV,GAAnB,OACZ2J,EAASgN,GAAuBrB,EAAMvK,EAAIwK,EAAQvV,KACtDkL,sBAAuB,SAAAjC,GAAI,OACvBU,EAASgN,GAA8B1N,KAE3CC,OAAQ,kBAAMS,EAASgN,SAK3B5W,CAGE8T,KEzRSX,GAAA,SAAC5O,EAAM4R,EAAKlW,GACvB,IAAM+W,EAAkBb,EAAItO,OAAO,SAAAmD,GAAE,OAAK/K,EAAMsE,GAAM2B,SAAS8E,KAC3DiI,IAAsC,IAAzBA,GAAU2C,YACvB3C,GAAUsB,KACNC,KAAKC,UAAU,CACXC,YAAa,kBACbyB,IAAKa,EACLzS,gCCLV0S,GAAa,SAACC,EAAQC,EAAOC,GAM/B,IAAMC,EAASC,KAAUJ,IAEC,SAACjO,EAAKsO,EAAKH,GACjC,IAAMI,EAAe,SAAfA,EAAgBvO,EAAKwO,EAAMF,GACzBE,EAAKzP,OAAS,EAEdwP,EAAavO,EADDwO,EAAKC,SACMD,EAAMF,GAEV,iBAARtO,EACPA,EAAIpE,KAAK0S,GAETtO,EAAIwO,EAAK,IAAMF,GAI3B,IAAK,IAAIjF,KAAQiF,EAAK,CAClB,IAAME,EAAOnF,EAAKlO,MAAM,KACnBgT,IAAeA,EAAYlR,SAASuR,EAAK,KACjB,qBAAdF,EAAIjF,IACXkF,EAAavO,EAAKwO,EAAMF,EAAIjF,KAM5CqF,CAAkBN,EAAQF,EAAMS,cAAeR,GAE/C,IAAMS,EAAoB,SAApBA,EAAqBR,EAAQI,GAC3BA,EAAKzP,OAAS,EAEd6P,EAAkBR,EADNI,EAAKC,SACcD,GAET,kBAAXJ,SACAA,EAAOI,EAAK,IACM,iBAAXJ,GACdA,EAAOS,OAAOL,EAAK,GAAI,IAzCYzS,GAAA,EAAAC,GAAA,EAAAC,OAAAb,EAAA,IA8C/C,QAAAc,EAAAC,EAAkB+R,EAAMY,cAAxB1S,OAAAC,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,EAAuC,KAA9BgT,EAA8B7S,EAAAO,MACnC,GAAIsS,EAAMC,QAAQ,MAAQ,EAAG,CACzB,IAAMR,EAAOO,EAAM5T,MAAM,KACpBgT,IAAeA,EAAYlR,SAASuR,EAAK,KAC1CI,EAAkBR,EAAQI,eAEvBJ,EAAOW,IApDyB,MAAAlS,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAd,EAAA,MAAAC,GAuD/C,OAAOmS,GAGE/B,GAAiB,SAACC,EAAMvK,EAAIwK,EAAQ0C,GAAnB,OAAgC,SAC1DtO,EACAiN,GAEA,GAAIrB,GAAUxK,GAAMuK,EAAM,CACtB,IAAMtV,EAAQ4W,IACRzD,EAAQ,SAAA1K,GACV,GAAIzI,EAAMyI,GAAKzC,MAAQ+E,EACnB,GAAI/K,EAAMyI,GAAK2K,MAAQmC,EAAOoC,cAAcvE,IAAM,EAAG,CACjD,IAAM8E,EAAUlB,GAAWhX,EAAMyI,GAAM8M,GACvC5L,EAASgN,GAAArW,OAAA6X,GAAA,EAAA7X,CAAA,GAAmBmI,EAAMyP,UAE9BlY,EAAMyI,GAAKsC,IAAImI,GAAgBoC,EAAM,CAACvK,GAAKkN,IAIrDrF,EAAS,SAACnK,EAAK0O,GACjB,IAAIiB,EAAU9X,OAAA6X,GAAA,EAAA7X,CAAA,GACTmI,EAAM4O,KAAUrX,EAAMyI,KAErBsF,EAASqK,EAAW3P,GAAKsC,GAC3BgD,IACIA,EAAOqF,MAAQmC,EAAOoC,cAAcvE,IAAM,GAC1CgF,EAAW3P,GAAKsC,GAAMiM,GAClBjJ,EACAwH,EACA4B,GAEJxN,EAASgN,GAAgByB,KAEzBlF,GAAgBoC,EAAM,CAACvK,GAAKkN,KAIxC,OAAQ3C,GACJ,IAAK,OACDnC,EAAM,QACN,MACJ,IAAK,UACDA,EAAM,WACNA,EAAM,WACN,MACJ,IAAK,WACDA,EAAM,YACN,MACJ,IAAK,QACDA,EAAM,SACN,MACJ,IAAK,OACDxJ,EAASgN,GAAgB/D,EAAO0C,KAChC,MACJ,IAAK,aACD3L,EACIgN,GACI/D,EAAO0C,EAAM,CAAC,OAAQ,QAAS,gBAAiB,UAGxD,MACJ,IAAK,eACD3L,EACIgN,GACI/D,EAAO0C,EAAM,CACT,QACA,SACA,OACA,gBACA,UAIZ,MACJ,IAAK,WAKL,IAAK,YACD3L,EACIgN,GAAgB/D,EAAO0C,EAAM,CAAC,gBAAiB,UAEnD,MACJ,IAAK,kBACD3L,EAASgN,GAAgB/D,EAAO0C,iDC7InC+C,GAAa,SAACC,EAAM/T,EAAMgU,EAAUC,GAC7C,GAAY,MAARF,EACA,OAAOG,MAAM,qBAGjB,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,OAAP,eAAApQ,EAAAlI,OAAAuY,GAAA,EAAAvY,CAAAwY,GAAA3X,EAAA4X,KAAgB,SAAAC,EAAMrE,GAAN,OAAAmE,GAAA3X,EAAA8X,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAA5T,MAAA,OACZ8T,GAA0Bd,EAAM,CAAEe,MAAO9U,EAAM+U,OAAQ/U,GAAQ,SAAA0E,GAC3DsQ,GAAUtQ,EAAM,QAAQuQ,KAAK,SAASlB,GAClCmB,GAAiBnB,EAAMC,EAAUC,OAH7B,wBAAAU,EAAAQ,SAAAV,MAAhB,gBAAAW,GAAA,OAAAnR,EAAAoR,MAAApD,KAAAqD,YAAA,GAQAnB,EAAOoB,kBAAkBxB,IAGvBiB,GAAY,SAAC9U,EAAK8T,EAAUwB,GAE9B,OADAA,EAAWA,IAAatV,EAAIuV,MAAM,mBAAqB,IAAI,GACpDC,MAAMxV,GACR+U,KAAK,SAASxQ,GACX,OAAOA,EAAIkR,gBAEdV,KAAK,SAASW,GACX,OAAO,IAAIC,KAAK,CAACD,GAAM5B,EAAU,CAAEjU,KAAMyV,OAI/CX,GAA4B,SAACd,EAAM/T,EAAM8V,GAC3C,GAAI/B,EAAM,CACN,IAAII,EAAS,IAAIC,WACjBD,EAAOE,OAAS,SAASjE,GACrB2F,GAAiC3F,EAAM4F,OAAOnD,OAAQ7S,EAAM8V,IAEhE3B,EAAO8B,cAAclC,KAIvBgC,GAAmC,SAACrT,EAAK1C,EAAM8V,GACjD,IAAIpR,EACAwR,EAAM,IAAIC,MACdD,EAAI7B,OAAS,WACT,IAAM+B,EAAYF,EAAIpB,MAAQ9U,EAAK8U,MAC7BuB,EAAaH,EAAInB,OAAS/U,EAAK+U,OACjCuB,EAAKC,SAAS1Z,cAAc,UAC5B2Z,EAAOF,EAAGG,WAAW,MACzBH,EAAGxB,MAAQoB,EAAIpB,MACfwB,EAAGvB,OAASmB,EAAInB,OAChByB,EAAKE,UAAUR,EAAK,EAAG,IACnBE,EAAY,GAAKC,EAAa,KAC1BH,EAAIpB,MAAQoB,EAAInB,QAChBuB,EAAGvB,OAAUmB,EAAInB,OAASmB,EAAIpB,MAAS9U,EAAK8U,MAC5CwB,EAAGxB,MAAQ9U,EAAK8U,QAEhBwB,EAAGxB,MAASoB,EAAIpB,MAAQoB,EAAInB,OAAU/U,EAAK8U,MAC3CwB,EAAGvB,OAAS/U,EAAK8U,QAGzB0B,EAAKE,UAAUJ,EAAI,EAAG,EAAGA,EAAGxB,MAAOwB,EAAGvB,QACtCyB,EAAKE,UAAUR,EAAK,EAAG,EAAGI,EAAGxB,MAAOwB,EAAGvB,QACvCrQ,EAAO4R,EAAGK,YACVb,EAAGpR,IAEPwR,EAAIxT,IAAMA,GAGRwS,GAAmB,SAACnB,EAAM6C,EAAU3C,GACtC,OAAOpO,IACFG,KAAK,eAAgB,CAClB4Q,aAEH3B,KAAK,SAAA4B,GACFC,GAAa/C,EAAM8C,EAASnS,KAAMuP,KAErC8C,MAAM,SAAAzV,OAGTwV,GAAe,SAAC/C,EAAMrP,EAAMuP,GAC9B,OAAOpO,IACFI,IAAIvB,EAAKsS,cAAejD,EAAM,CAC3BhO,QAAS,CACLkR,eAAgB,yBAGvBhC,KAAK,SAAA4B,GACF5C,EAASvP,EAAKxE,KACd4E,KAAQF,QAAQ,+BAEnBmS,MAAM,SAAAzV,GACH4V,QAAQC,IAAI7V,gEC5FT8V,GACL,IADKA,GAEE,IAFFA,GAGF,ICDAC,GAAgB,CACzB,CACIC,UAAU,EACVxS,QAAS,8CACTyS,YAAY,EACZC,IAAK,GAET,CACI1S,QAAO,2CAAA1H,OAA6Cga,GAA7C,KACPG,YAAY,EACZE,IAAKL,IAET,CACIM,QAAS,mBACT5S,QAAS,gEAIJ6S,GAAY,CACrB,CACIL,UAAU,EACVE,IAAK,EACLD,YAAY,EACZzS,QAAS,2CAEb,CACI2S,IAAKL,GACLtS,QAAO,uCAAA1H,OAAyCga,GAAzC,OAIFQ,GAAmB,CAC5B,CACIN,UAAU,EACVE,IAAK,EACLD,YAAY,EACZzS,QAAS,2CAEb,CACI2S,IAAKL,GACLtS,QAAO,uCAAA1H,OAAyCga,GAAzC,OAIFS,GAAmB,CAC5B,CACIJ,IAAKL,GACLtS,QAAO,8CAAA1H,OACHga,GADG,OAMFU,GAAe,CACxB,CACIN,IAAK,EACLD,YAAY,EACZzS,QAAS,8CAEb,CACI2S,IAAKL,GACLtS,QAAO,0CAAA1H,OACHga,GADG,OAMFW,GAAa,CACtB,CACIT,UAAU,EACVxS,QAAS,iCC6FFkT,GAjJK,SAAArc,GAAS,IAAAC,EACeC,mBAAS,IADxBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAClBqc,EADkBnc,EAAA,GACJoc,EADIpc,EAAA,GAGrBqc,EAQAxc,EARAwc,YACAC,EAOAzc,EAPAyc,OACAC,EAMA1c,EANA0c,KACAC,EAKA3c,EALA2c,WACAC,EAIA5c,EAJA4c,SACAC,EAGA7c,EAHA6c,OACAC,EAEA9c,EAFA8c,UACAC,EACA/c,EADA+c,YAWEC,EACFhc,EAAAC,EAAAC,cAAC+b,GAAA,EAAD,CACI7U,KAAK,WACL1B,MAAO,CAAEyS,MAAO,QAChB+D,YAAY,gBACZC,kBAAmB,SAAAC,GAAO,OAAIA,EAAQC,aAErCb,EAAYc,IAAI,SAAA3V,GAAI,OACjB3G,EAAAC,EAAAC,cAAC+b,GAAA,EAAOM,OAAR,CAAehV,IAAKZ,EAAK7B,KACrB9E,EAAAC,EAAAC,cAAC2F,EAAA,EAAD,CACIE,IAAKvE,EAAUmF,EAAK7B,IAAK6B,EAAKX,OAC9B3C,KAAM,GACNqC,MAAO,CAAE8W,YAAa,UAEzB7V,EAAK8L,KANV,OAMoB9L,EAAK7B,IANzB,QA7Ba2X,EAwCVC,IAAKC,UAAbC,EAxCkBxd,OAAAC,EAAA,EAAAD,CAAAqd,EAAA,MAiDzB,OAAQzd,EAAMyc,QAAUC,EACpB1b,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgF,SAAA,KACIjF,EAAAC,EAAAC,cAAC2c,EAAA,EAADzd,OAAAiG,OAAA,CACIuX,KAAMA,EACNnK,KAAK,yBACLmJ,SAAUA,EACVkB,aAAa,MACbC,cAAerB,GAAQ,IA3CpB,CACXsB,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,MA4CZjd,EAAAC,EAAAC,cAAC2c,EAAA,EAAKpV,KAAN,CACIgL,KAAK,SACL0K,MAAM,SACNC,cAAc,SACdC,kBArBC,SAAAC,GACb,OAAIlM,MAAMmM,QAAQD,GACPA,EAEJA,GAAKA,EAAEE,SAASlB,IAAI,SAAAtW,GAAK,OAAIA,EAAMzC,QAmB9BvD,EAAAC,EAAAC,cAACud,GAAA,EAAD,CACIC,SAAS,eACTF,SAAU3B,EAAOS,IAAI,SAACtW,EAAO2X,GAAR,OAAAve,OAAAwe,GAAA,EAAAxe,CAAA,GACd4G,EADc,CAEjB6X,IAAKF,MAETG,UAAW,SAAA1G,GACPmE,EAAgBnE,EAAK7T,MAEzB3C,SAAU,SAAA0G,GAAA,IAAGkW,EAAHlW,EAAGkW,SAAH,OAAkB1B,EAAU0B,IACtCO,cAAe,SAAAC,GAAc,IAAX5G,EAAW4G,EAAX5G,KACd2E,EAAY3E,KAGfyE,EAAOhV,QAAU,EAAI,KAClB7G,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC+d,GAAAhe,EAAD,MACAD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAf,aAKhBH,EAAAC,EAAAC,cAAC2c,EAAA,EAAKpV,KAAN,CAAW0V,MAAM,OAAO1K,KAAK,OAAOyL,MAAOlD,IACvChb,EAAAC,EAAAC,cAACie,EAAA,EAAD,CAAOjC,YAAY,cAEvBlc,EAAAC,EAAAC,cAAC2c,EAAA,EAAKpV,KAAN,CACI0V,MAAM,cACN1K,KAAK,cACLyL,MAAOhD,IAEPlb,EAAAC,EAAAC,cAACie,EAAA,EAAMC,SAAP,CAAgBlC,YAAY,wCAGhB,SAAfld,EAAMoI,MACHpH,EAAAC,EAAAC,cAAC2c,EAAA,EAAKpV,KAAN,CAAW0V,MAAM,gBAAgB1K,KAAK,SACjCuJ,GAIO,SAAfhd,EAAMoI,MACHpH,EAAAC,EAAAC,cAAC2c,EAAA,EAAKpV,KAAN,CAAW0V,MAAM,QAAQ1K,KAAK,QAAQyL,MAAO9C,IACzCpb,EAAAC,EAAAC,cAACme,GAAA,EAAD,OAIRre,EAAAC,EAAAC,cAAC2c,EAAA,EAAKpV,KA7FC,CACfyV,WAAY,CAAEoB,OAAQ,EAAGrB,KAAM,KA6FnBjd,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CAAQhC,KAAK,UAAUmb,SAAS,SAASlb,KAAK,SAA9C,QAICoY,GACGzb,EAAAC,EAAAC,cAACse,GAAA,EAAD,CACI1d,MAAM,6CACN2d,UAAW9C,EACXva,SAAU,aACVsd,OAAO,UACPC,WAAW,UAEX3e,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CAAQhC,KAAK,OAAOwb,QAAM,EAACvb,KAAK,SAAhC,aAOhBrD,EAAAC,EAAAC,cAACW,EAAA,EAAD,CACIE,QAASua,EACTuD,OAAQ,KACRzd,SAAU,kBAAMma,EAAgB,MAEhCvb,EAAAC,EAAAC,cAAA,OACI4e,IAAI,UACJpZ,MAAO,CAAEyS,MAAO,QAChBpS,IAAKuV,MAIjB,MCzIKyD,GAAqB,SAC9BxL,EACAyL,EACAC,EACAC,GAEIpN,IAAsC,IAAzBA,GAAU2C,YACvB3C,GAAUsB,KACNC,KAAKC,UAAU,CACXC,cACAyL,YACAC,YACAC,aCAHC,GAAU,SAACC,EAAOC,EAAQ5D,GAC/BA,GAAU2D,GAASC,GAAUvN,IAAsC,IAAzBA,GAAU2C,YACpD3C,GAAUsB,KACNC,KAAKC,UAAU,CACXC,YAAa,UACbkI,SACA2D,QACAC,aCPHC,GAAW,SAACL,EAAWM,GAC5BzN,IAAsC,IAAzBA,GAAU2C,YACvB3C,GAAUsB,KACNC,KAAKC,UAAU,CACXC,YAAa,WACb0L,YACAM,eCqCD3gB,eAAWC,YANF,SAAAC,GACpB,MAAO,CACH8C,QAAS9C,EAAM8C,QACf4I,WAAY1L,EAAM0L,aAGA3L,CAzEV,SAAAG,GAAS,IAAAC,EACGC,qBADHC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACdyc,EADcvc,EAAA,GACRqgB,EADQrgB,EAAA,GAAAI,EAEOL,mBAAS,IAFhBM,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAEdsc,EAFcrc,EAAA,GAENsc,EAFMtc,EAAA,GAGboC,EAAkB5C,EAAlB4C,QAASwF,EAASpI,EAAToI,KACXqU,EAASzc,EAAMyc,QAAU,GAC/B9b,oBAAU,WACN,GAAI8b,EAAQ,CACR,IAAMC,EACO,aAATtU,EACMxF,EAAQ6d,SAAS7J,KAAK,SAAAjP,GAAI,OAAIA,EAAK+Y,SAAWjE,IACrC,UAATrU,EACAxF,EAAQ+d,MAAM/J,KAAK,SAAAjP,GAAI,OAAIA,EAAKiZ,SAAWnE,IAC3C7Z,EAAQie,MAAMjK,KAAK,SAAAjP,GAAI,OAAIA,EAAK8U,SAAWA,IACjDC,IACA8D,EAAQ9D,GACRI,EACIJ,EAAKG,OAAOS,IAAI,SAAC/Y,EAAKoa,GAAN,MAAiB,CAC7Bpa,MACAsa,IAAKF,SAKtB,IAEH,IAAMnC,EAAW,CACb5Z,GADanB,OAAArB,OAAAiQ,GAAA,EAAAjQ,CAEVwC,EAAQ6E,QACNC,OAAO,SAAAmG,GAAM,MAAsB,WAAlBA,EAAOjG,SACxB0V,IAAI,SAAAzP,GAAM,OAAI7N,EAAMwL,WAAWqC,EAAOA,YAc/C,OAAQ7N,EAAMyc,QAAUC,EACpB1b,EAAAC,EAAAC,cAAC4f,GAAD,CACItE,YAAaA,EACbC,OAAQA,EACRC,KAAMA,EACNC,WAAY,YFnCE,SAACsD,EAAWpV,EAAIzC,GAClC6X,GAAapV,GAAMiI,IAAsC,IAAzBA,GAAU2C,YAC1C3C,GAAUsB,KACNC,KAAKC,UAAU,CACXC,YACa,aAATnM,EACM,qBACS,UAATA,EACA,aACA,aACVyC,KACAoV,eEyBAc,CAAqBne,EAAQkD,IAAK2W,EAAQrU,GAC1CpI,EAAMghB,iBAAgB,IAE1BpE,SAAU,SAAArX,GACN,IAAM0b,EAAc7gB,OAAAwe,GAAA,EAAAxe,CAAA,GACbmF,EADa,CAEhBsX,OAAQA,EAAOS,IAAI,SAAAtW,GAAK,OAAIA,EAAMzC,SF5D9B,SAAC0b,EAAWpV,EAAItF,EAAO6C,GACvC6X,GAAanN,IAAsC,IAAzBA,GAAU2C,YACpC3C,GAAUsB,KACNC,KAAKC,UAAU,CACXC,YACa,aAATnM,EACM,mBACS,UAATA,EACA,WACA,WACVyC,KACAtF,QACA0a,eEkDAc,CAAmBne,EAAQkD,IAAK2W,EAAQwE,EAAgB7Y,GACxDpI,EAAMghB,iBAAgB,IAE1BnE,OAAQA,EACRC,UAAWA,EACXC,YA9BY,SAAA3E,GAChBD,GAAWC,EAAM,SAAKlU,EAAW,SAAAK,GAC7BuY,EACI,GAAArb,OAAArB,OAAAiQ,GAAA,EAAAjQ,CAAIyc,GAAJ,CAAY,CAAEtY,SAAO+Y,IAAI,SAACtW,EAAO2X,GAAR,OAAAve,OAAAwe,GAAA,EAAAxe,CAAA,GAClB4G,EADkB,CAErB6X,IAAKF,UA0BbvW,KAAMpI,EAAMoI,OAEhB,iBCrEOxI,eAAW,SAAAI,GAAK,OAC3BgB,EAAAC,EAAAC,cAAA,OACII,QAAS,kBAAMtB,EAAM+D,QAAQW,KAAK1E,EAAMkhB,cACxCxa,MAAO,CAAEE,OAAQ,YAEjB5F,EAAAC,EAAAC,cAAA,OACIwF,MAAO,CACHyS,MAAO,OACPgI,aAAc,QAElBpa,IAAK/G,EAAM6c,OAAOhV,OAAS,EAAI7H,EAAM6c,OAAO,GAAK,KAErD7b,EAAAC,EAAAC,cAAA,OAAKwF,MAAO,CAAE0a,QAAS,YAAcphB,EAAMqhB,kBCbpCC,GAAA,SAAAthB,GAAK,OAChBgB,EAAAC,EAAAC,cAAA,OACIqgB,QAAQ,YACRpI,MAAM,KACNC,OAAO,KACP1S,MAAO,CAAE8a,UAAW,kBAEpBxgB,EAAAC,EAAAC,cAAA,QAAMugB,EAAE,oDCuGD7hB,eApGE,SAAAI,GAAS,IAElB0c,EAOA1c,EAPA0c,KACAD,EAMAzc,EANAyc,OACAtM,EAKAnQ,EALAmQ,MACAvN,EAIA5C,EAJA4C,QACA8e,EAGA1hB,EAHA0hB,cACAV,EAEAhhB,EAFAghB,gBACA5Y,EACApI,EADAoI,KAGJ,OACIpH,EAAAC,EAAAC,cAACygB,GAAD,CACIT,YAAW,IAAAzf,OAAM2G,GAAQ,OAAd,KAAA3G,OAAwB0O,EAAMrK,IAA9B,KAAArE,OAAqCgb,GAChDI,OAAQH,EAAKG,OACbwE,KACIrgB,EAAAC,EAAAC,cAAC0gB,GAAA,EAAD,CACIC,MACI7gB,EAAAC,EAAAC,cAAA,QAAMI,QAAS,SAAAgd,GAAC,OAAIA,EAAEwD,oBACjB3R,EAAMrK,MAAQlD,EAAQkD,KACtB9F,EAAM+hB,SACQ,SAAf/hB,EAAMoI,KA2Ba,SAAfpI,EAAMoI,KACNpH,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CACIhC,KAAK,UACL9C,QAAS,kBACLyf,GACIne,EAAQkD,IACRqK,EAAMrK,IACN2W,KANZ,OAYAtM,EAAMrK,MAAQlD,EAAQkD,KAAQ9F,EAAM+hB,QAqBpC,KApBA/gB,EAAAC,EAAAC,cAAC8gB,GAAA,EAAD,CACI5E,QAAS,CAAC,QAAS,SACnB6E,QACIjhB,EAAAC,EAAAC,cAACgH,EAAA,EAAD,KACIlH,EAAAC,EAAAC,cAACgH,EAAA,EAAKO,KAAN,CACIF,IAAI,IACJjH,QAAS,WACLogB,EAAcjF,GACduE,GAAgB,KAJxB,UAYRhgB,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CAAQhC,KAAK,QACTpD,EAAAC,EAAAC,cAACogB,GAAD,QAzDRtgB,EAAAC,EAAAC,cAAC8gB,GAAA,EAAS1iB,OAAV,CACI8E,KAAK,UACLmE,IAAI,IACJjH,QAAS,kBACLyf,GACIne,EAAQkD,IACRqK,EAAMrK,IACN2W,IAGRwF,QACIjhB,EAAAC,EAAAC,cAACgH,EAAA,EAAD,KACIlH,EAAAC,EAAAC,cAACgH,EAAA,EAAKO,KAAN,CACIF,IAAI,IACJjH,QAAS,WACLogB,EAAcjF,GACduE,GAAgB,KAJxB,UAZZ,QA+DZlf,MACId,EAAAC,EAAAC,cAAA,QAAMwF,MAAO,CAAEwb,WAAY,SACtBxF,EAAKjJ,KACI,SAATrL,GAAA,MAAA3G,OAAyBib,EAAKyF,MAA9B,MAGTzb,MAAO,CAAEyS,MAAO,QAChB/U,KAAK,QACLge,UAAU,kBCzFfC,GAZC,SAAAriB,GAAK,OACjBgB,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CACI9E,QAAStB,EAAMsiB,OACfle,KAAK,UACLme,MAAM,QACNjc,KAAMtF,EAAAC,EAAAC,cAACshB,GAAA,EAAD,MACNne,KAAK,SAEJrE,EAAM8B,6BCZF2gB,GAAqB,CAC9BC,QAAS,EACTC,KAAM,EACNC,KAAM,EACNC,IAAK,GAGIC,GAAkB,CAC3BJ,QAAS,EACTE,KAAM,EACNG,IAAK,EACLC,IAAK,GCJMC,GAAA,SAAAjjB,GAAK,OAChBgB,EAAAC,EAAAC,cAAA,OAAKwF,MAAKtG,OAAAwe,GAAA,EAAAxe,CAAA,CAAI8iB,UAAW,QAAWljB,EAAM0G,QACtC1F,EAAAC,EAAAC,cAACiiB,GAAAliB,EAADb,OAAA6X,GAAA,EAAA7X,CAAA,CACIgjB,eAAgB,EAChBjiB,UAAU,kBACVkiB,gBAAgB,0BAHpB,iBAKQrjB,EAAMyH,QAAUgb,GAAqBK,IAGxC9iB,EAAMgG,YC4DJsd,GAlEU,SAAAtjB,GAAS,IAAAC,EACMC,mBAAS,IADfC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACvBsjB,EADuBpjB,EAAA,GACXuhB,EADWvhB,EAAA,GAAAI,EAEUL,qBAFVM,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAEvBijB,EAFuBhjB,EAAA,GAETwgB,EAFSxgB,EAAA,GAItBoC,EAAY5C,EAAZ4C,QAEF6gB,EACFziB,EAAAC,EAAAC,cAACW,EAAA,EAAD,CACIC,MAAM,WACNC,QAASyhB,EACTjhB,cAAY,EACZyF,UAAQ,EACR5F,SAAU,kBAAM4e,GAAgB,IAChC7H,MAAM,MACN0G,OACI7e,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CAAQmC,IAAI,OAAOjH,QAAS,kBAAM0f,GAAgB,KAAlD,SAIJ1e,gBAAgB,GAEhBtB,EAAAC,EAAAC,cAACwiB,GAAD,CACI1C,gBAAiBA,EACjBvE,OAAQ8G,EACRnb,KAAMpI,EAAMoI,QAKxB,OAAOxF,EAAQkD,IACX9E,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgF,SAAA,KACIjF,EAAAC,EAAAC,cAACyiB,GAAD,CACIrB,OAAQ,WACJZ,EAAc,IACdV,GAAgB,IAEpBlf,MAAM,WACN8hB,IAAoB,SAAf5jB,EAAMoI,MAAmB,cAElCpH,EAAAC,EAAAC,cAAC+hB,GAAD,KACKrgB,EAAQ5C,EAAM6jB,SAAW7jB,EAAMoI,OAC5BxF,EAAQ5C,EAAM6jB,SAAW7jB,EAAMoI,MAAMkV,IAAI,SAACZ,EAAMiC,GAAP,OACrC3d,EAAAC,EAAAC,cAAC4iB,GAAD,CACIvb,IAAKoW,EACLjC,KAAMA,EACND,OACmB,aAAfzc,EAAMoI,MACS,UAAfpI,EAAMoI,KACAsU,EAAKgE,OACLhE,EAAKD,OAEftM,MAAOvN,EACPA,QAASA,EACT8e,cAAeA,EACfV,gBAAiBA,EACjB5Y,KAAMpI,EAAMoI,KACZ1B,MAAO,CAAEE,OAAQ,gBAKhC6c,GAEL,MC5CO7jB,eACXC,YAboB,SAAAC,GACpB,MAAO,CACH8C,QAAS9C,EAAM8C,UAII,SAAC6G,GACxB,MAAO,CACHsB,aAAc,SAAAjJ,GAAK,OAAI2H,EAASgN,GAAqB3U,OAKzDjC,CAzBU,SAAAG,GAKV,OAJAW,oBAAU,WACNX,EAAM+K,aAAa,CAAEvE,KAAM,QAASod,IAAK,MAC1C,IAEI5jB,EAAM4C,QAAQkD,IACjB9E,EAAAC,EAAAC,cAAC6iB,GAAD,CAAkB3b,KAAK,QAAQxF,QAAS5C,EAAM4C,UAE9C5B,EAAAC,EAAAC,cAAA,gBCZO8iB,GAAA,SAAChkB,EAAO+I,EAAM+B,EAASmZ,EAAS3L,GAc3CpO,IACKpJ,IAAI,OAASd,EAAM+D,QAAQvC,SAASwC,UACpCsV,KAAK,SAAAxQ,GACFD,GAAWC,EAAK9I,GAOhB8K,EAAQhC,EAAIC,MACZuP,EAASxP,EAAIC,QAEhBqS,MAAM,SAAAzV,kKC2JA/F,eApKI,SAAAI,GAAS,IAAAC,EACgBC,mBAAS,IADzBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACjBqc,EADiBnc,EAAA,GACHoc,EADGpc,EAAA,GAAAI,EAEgBL,oBAAS,GAFzBM,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAEjB2jB,EAFiB1jB,EAAA,GAEH2jB,EAFG3jB,EAAA,GAAA4C,EAGIlD,mBAASF,EAAM6c,QAAU,IAH7BxZ,EAAAjD,OAAAC,EAAA,EAAAD,CAAAgD,EAAA,GAGjByZ,EAHiBxZ,EAAA,GAGTyZ,EAHSzZ,EAAA,GAIhBgH,EAAkBrK,EAAlBqK,KAAMzH,EAAY5C,EAAZ4C,QAJUwhB,EAMclkB,mBAClCF,EAAMqkB,UACDrkB,EAAMskB,YAAc,IAAMtkB,EAAMskB,YAAc,IAAM,KARrCC,EAAAnkB,OAAAC,EAAA,EAAAD,CAAAgkB,EAAA,GAMjBrP,EANiBwP,EAAA,GAMJC,EANID,EAAA,GAWxB5jB,oBAAU,WACN6jB,EACIxkB,EAAMqkB,UACDrkB,EAAMskB,YAAc,IAAMtkB,EAAMskB,YAAc,IAAM,MAE9D,CAACtkB,EAAMskB,YAAatkB,EAAMqkB,UAQ7B,OAAOha,GAAQzH,EAAQkD,IACnB9E,EAAAC,EAAAC,cAAA,OACIwF,MAAKtG,OAAAwe,GAAA,EAAAxe,CAAA,CACDqkB,WAAY,QAERzkB,EAAM0kB,QACJ,GACA,CACIvL,MAAO,OACPwL,OAAQ,SACRC,KAAM,SAKpB5jB,EAAAC,EAAAC,cAAC2jB,GAAA,EAAD,CACIhe,OAAQ7F,EAAAC,EAAAC,cAAC2F,EAAA,EAAD,CAAQE,IAAKvE,EAAUI,EAAQkD,IAAKlD,EAAQoE,SACpDqd,QACIrjB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgF,SAAA,KACIjF,EAAAC,EAAAC,cAAC2c,EAAA,EAAKpV,KAAN,CAAWyW,MAAO/C,GAAczV,MAAO,CAAEC,OAAQ,IAC7C3F,EAAAC,EAAAC,cAACie,EAAA,EAAMC,SAAP,CACI0F,SAAU,CACNC,QAAS,EACTC,QAAS,GAEbC,KAAM,EACNrjB,SAAU,SAAA0c,GAAC,OAAIkG,EAAelG,EAAEjE,OAAO9U,QACvCA,MAAOwP,EACPmI,YAAY,qBAGnBL,EAAOhV,OAAS,GACb7G,EAAAC,EAAAC,cAAC2c,EAAA,EAAKpV,KAAN,CAAW/B,MAAO,CAAEC,OAAQ,IACxB3F,EAAAC,EAAAC,cAACud,GAAA,EAAD,CACIC,SAAS,eACTF,SAAU3B,EAAOS,IAAI,SAACtW,EAAO2X,GAAR,MAAmB,CACpCpa,IAAKyC,EACL6X,IAAKF,KAETG,UAAW,SAAA1G,GACPmE,EAAgBnE,EAAK7T,MAEzB3C,SAAU,SAAA0G,GAAA,IAAGkW,EAAHlW,EAAGkW,SAAH,OACN1B,EACI0B,EAASlB,IAAI,SAAAtW,GAAK,OAAIA,EAAMzC,QAGpCwa,cAAe,SAAAC,IArD3B,SAAA5G,GAChBD,GAAWC,EAAM,SAAKlU,EAAW,SAAAK,GAC7BuY,EAAS,GAAArb,OAAArB,OAAAiQ,GAAA,EAAAjQ,CAAKyc,GAAL,CAAatY,OAoDMwY,CADyBiC,EAAX5G,QAIjByE,EAAOhV,QAAU,EAAI,KAClB7G,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACshB,GAAA,EAAD,MACAxhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAf,aAQpBH,EAAAC,EAAAC,cAAC2c,EAAA,EAAKpV,KAAN,CAAW/B,MAAO,CAAEC,OAAQ,IACxB3F,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CACImZ,SAAS,SACTje,QAAS,Wb3Gd,IACvB2e,EACAC,EACAgF,EACAle,EACAme,EACAC,EALAnF,Ea4GoCrd,EAAQkD,Ib3G5Coa,Ea4GoC7V,EAAKvE,Ib3GzCof,Ea4GoCnQ,Eb3GpC/N,Ea4GoC6V,Eb3GpCsI,Ea4GoCnlB,EAAM0kB,Qb3G1CU,Ea4GoCplB,EAAMqlB,eb1GtCvS,IAAsC,IAAzBA,GAAU2C,YACvB3C,GAAUsB,KACNC,KAAKC,UAAU,CACXC,YAAa,cACb2Q,eACAle,QACAkZ,SACAD,YACAkF,iBACAC,mBamGoBZ,EAAe,IACf1H,EAAU,IACN9c,EAAMslB,QAAQtlB,EAAMslB,UAE5Bhf,KAAMtF,EAAAC,EAAAC,cAACqkB,GAAAtkB,EAAD,MACNmD,KAAK,QAhBT,QAoBApD,EAAAC,EAAAC,cAACud,GAAA,EAAD,CACI+G,gBAAgB,EAChBzG,cAAe,SAAA0G,GAAc,IAAXrN,EAAWqN,EAAXrN,KACVyE,EAAOhV,OAAS,EAChBsB,KAAQC,QACJ,2CAIR+a,GAAgB,GAChBhM,GAAWC,EAAM,SAAKlU,EAAW,SAAAK,GAC7B4f,GAAgB,GAChBrH,EAAS,GAAArb,OAAArB,OAAAiQ,GAAA,EAAAjQ,CAAKyc,GAAL,CAAatY,UAI9BvD,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CACIhC,KAAK,OACLkC,KACI4d,EACIljB,EAAAC,EAAAC,cAACwkB,GAAAzkB,EAAD,MAEAD,EAAAC,EAAAC,cAACykB,GAAA1kB,EAAD,OANZ,UAaHjB,EAAM4lB,QACH5kB,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CACI9E,QAAStB,EAAM4lB,OACftf,KAAMtF,EAAAC,EAAAC,cAAC2kB,GAAA5kB,EAAD,MACNmD,KAAK,QAHT,cAYpBpD,EAAAC,EAAAC,cAAC4kB,GAAA,EAAD,CACI/jB,QAASua,EACTuD,OAAQ,KACRzd,SAAU,kBAAMma,EAAgB,MAEhCvb,EAAAC,EAAAC,cAAA,OACI4e,IAAI,UACJpZ,MAAO,CAAEyS,MAAO,QAChBpS,IAAKuV,MAIjB,sCCtJOyJ,GA3BO,SAAA/lB,GAAK,OACvBA,EAAM6c,QAAU7c,EAAM6c,OAAOhV,OAAS,EAClC7G,EAAAC,EAAAC,cAAC8kB,GAAA,EAAD,CACItf,MAAO,CAAEyS,MAAOnZ,EAAMqE,MAAQ,QAC9B4hB,KAAM,CAAE9kB,UAAWC,KAAQxC,OAE1BoB,EAAM6c,OAAOS,IACV,SAACtW,EAAO2X,GAAR,OACI3X,GACIhG,EAAAC,EAAAC,cAAA,OAAKqH,IAAKoW,GACN3d,EAAAC,EAAAC,cAAA,OACIwF,MAAO,CACHwf,gBAAiB,QAAUlf,EAAQ,KACnCmf,eAAgBnmB,EAAMoE,MAAQ,UAC9BgiB,mBAAoB,SACpBjN,MAAOnZ,EAAMqE,MAAQ,OACrB+U,OACIpZ,EAAMoZ,QAAUpZ,EAAMqE,MAAQ,QAClCgiB,iBAAkB,mBAO9C,MCyDOzmB,eAAWC,YAVF,SAAAC,GACpB,MAAO,CACHgD,SAAUhD,EAAMgD,SAChBF,QAAS9C,EAAM8C,QACfmL,QAASjO,EAAMiO,QACfvC,WAAY1L,EAAM0L,WAClB8a,mBAAoBxmB,EAAMwmB,qBAIRzmB,CA7EP,SAAAG,GAAS,IAChB4C,EAA6C5C,EAA7C4C,QAASmL,EAAoC/N,EAApC+N,QAASlD,EAA2B7K,EAA3B6K,GAAIyb,EAAuBtmB,EAAvBsmB,mBACxB9a,EAAaxL,EAAMumB,eAAiBvmB,EAAMwL,WAC1Cgb,EAAc,SAAA3b,GAAE,OAClBA,IAAOjI,EAAQkD,IACTlD,EACAiI,IAAOkD,EAAQjI,IACfiI,EACAlD,IAAOyb,EAAmBxgB,IAC1BwgB,EACA9a,EAAWX,IACf4b,EAAW,SAAA5b,GAAE,OAAK2b,EAAY3b,GAAM2b,EAAY3b,GAAI4I,KAAO5I,GAC3D6b,EAAa,SAAA7b,GAAE,OACjB2b,EAAY3b,GACR7J,EAAAC,EAAAC,cAAA,QACIqH,IAAKsC,EACLvJ,QAAS,WACAtB,EAAM2mB,SAASC,EAAY/b,KAGpC7J,EAAAC,EAAAC,cAAC2F,EAAA,EAAD,CACIE,IAAKvE,EAAUqI,EAAI2b,EAAY3b,GAAI7D,OACnC3C,KAAMrE,EAAMqE,OAASrE,EAAM2mB,QAAU,GAAK,IAC1CjgB,MAAO1G,EAAMsL,MAAQ,GAAK,CAAE3E,OAAQ,aAG5C,MAEFigB,EAAc,SAAA/b,GAAE,OAAI7K,EAAM+D,QAAQW,KAAK,aAAemG,GAAM7K,EAAM6K,MACxE,OAAO7K,EAAMsL,MACTtK,EAAAC,EAAAC,cAAA,QAAMI,QAAS,SAAAgd,GAAC,OAAIA,EAAEwD,oBAClB9gB,EAAAC,EAAAC,cAAC2F,EAAA,EAAOggB,MAAR,CAAcngB,MAAO,CAAEC,OAAQ,WAC1B3G,EAAMgW,IAAIsH,IAAI,SAAAzS,GAAE,OAAI6b,EAAW7b,OAGxC7K,EAAM2mB,QACN3lB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgF,SAAA,MACMjG,EAAM8mB,OAASJ,EAAW7b,IAC1B7K,EAAM+mB,QAAUN,EAAS5b,IAE/B7K,EAAMie,KACNjd,EAAAC,EAAAC,cAAA,QACIwF,MAAKtG,OAAAwe,GAAA,EAAAxe,CAAA,CAAIwG,OAAQ,UAAWsb,WAAY,QAAWliB,EAAM0G,OACzDpF,QAAS,SAAAgd,GACLA,EAAEwD,kBACF8E,OAGF5mB,EAAM8mB,OAASJ,EAAW7b,IAC1B7K,EAAM+mB,QAAUN,EAAS5b,IAG/B7J,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CACIhC,KAAK,OACLsC,MAAKtG,OAAAwe,GAAA,EAAAxe,CAAA,CAAIghB,QAAS,UAAWhI,OAAQ,QAAWpZ,EAAM0G,OACtDpF,QAAS,SAAAgd,GACLA,EAAEwD,kBACF8E,OAGF5mB,EAAM8mB,OAASJ,EAAW7b,IAE1B7K,EAAM+mB,QAAUN,EAAS5b,OCgMxBjL,eAnPC,SAAVonB,EAAUhnB,GAAS,IAEjB4C,EAUA5C,EAVA4C,QAGAuG,GAOAnJ,EATAF,MASAE,EARAM,SAQAN,EAPAmJ,SACAqC,EAMAxL,EANAwL,WACAD,EAKAvL,EALAuL,aAEAlB,GAGArK,EAJA0L,UAIA1L,EAHAqK,MACA4c,EAEAjnB,EAFAinB,QACAC,EACAlnB,EADAknB,QAXiBjnB,EAamBC,oBAAS,GAb5BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAadknB,EAbchnB,EAAA,GAaAinB,EAbAjnB,EAAA,GAAAI,EAciBL,mBAAS,IAd1BM,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAcd+jB,EAdc9jB,EAAA,GAcD6mB,EAdC7mB,EAAA,GAAA4C,EAeuBlD,mBAAS,IAfhCmD,EAAAjD,OAAAC,EAAA,EAAAD,CAAAgD,EAAA,GAediiB,EAfchiB,EAAA,GAeEikB,EAfFjkB,EAAA,GAAA+gB,EAgBiBlkB,oBAAS,GAhB1BqkB,EAAAnkB,OAAAC,EAAA,EAAAD,CAAAgkB,EAAA,GAgBdmD,EAhBchD,EAAA,GAgBDiD,EAhBCjD,EAAA,GAiBfkD,EAAe,CACjBhR,SAAUzW,EAAMknB,SAAW,CACvBlmB,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAACwmB,GAAA,EAAD,CAASC,SAAUxe,EAAQye,KAAMC,MAAI,KAEzC7mB,EAAAC,EAAAC,cAAA,QAAMqH,IAAI,sBACNvH,EAAAC,EAAAC,cAAC+F,EAAA,EAAD,CAASnF,MAAM,QACVqH,EAAQ2e,MAAM/hB,SAASnD,EAAQkD,KAC5B9E,EAAAC,EAAAC,cAAC6mB,GAAA9mB,EAAD,CACIK,QAAS,kBACLyf,GACI,iBACA5X,EAAQ6W,UACRpd,EAAQkD,IACRuE,EAAKvE,QAKjB9E,EAAAC,EAAAC,cAAC8mB,GAAA/mB,EAAD,CACIK,QAAS,kBACLyf,GACI,cACA5X,EAAQ6W,UACRpd,EAAQkD,IACRuE,EAAKvE,SAMzB9E,EAAAC,EAAAC,cAAA,QAAMwF,MAAO,CAAEuhB,YAAa,QACvB9e,EAAQ2e,MAAMjgB,SAIvBsB,EAAQ+e,SAAWtlB,EAAQkD,KACvB9E,EAAAC,EAAAC,cAAA,QACIqH,IAAI,yBACJjH,QAAS,WACDtB,EAAMonB,iBACNpnB,EAAMonB,iBAAgB,GACtBpnB,EAAMqnB,eAAernB,EAAMmJ,QAAQ+e,UAEnCd,GAAgB,GAChBC,EAAe,KAEnBG,GAAe,KAVvB,SAgBJre,EAAQ+e,SAAWtlB,EAAQkD,KACvB9E,EAAAC,EAAAC,cAAA,QACIqH,IAAI,yBACJjH,QAAS,kBAAMgmB,EAAkBne,EAAQ6W,aAF7C,SAQRnZ,OACI7F,EAAAC,EAAAC,cAAC2F,EAAA,EAAD,CACIE,IAAKvE,EACD2G,EAAQ+e,OACR1c,EAAWrC,EAAQ+e,QACb1c,EAAWrC,EAAQ+e,QAAQlhB,MAC3BmhB,KAAKC,MAAsB,IAAhBD,KAAKE,aAIlChE,QAAS6C,EACLlmB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgF,SAAA,KAC6B,aAAxBkD,EAAQmf,aACLtnB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgF,SAAA,KACK,IACDjF,EAAAC,EAAAC,cAAA,QACIwF,MAAO,CACHwb,WAAY,OACZtb,OAAQ,UACRD,OAAQ,iBAEZrF,QAAS,kBACLtB,EAAM+D,QAAQW,KAAd,aAAAjD,OACiB0H,EAAQof,QAAQpY,MADjC,KAAA1O,OAEQ0H,EAAQof,QAAQ7H,WAK3BvX,EAAQof,QAAQ9U,OAI5BtK,EAAQmM,MAAQtU,EAAAC,EAAAC,cAAA,SAAIiI,EAAQmM,OAGjCtU,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgF,SAAA,KACIjF,EAAAC,EAAAC,cAAA,OACIwF,MAAO,CACH+d,WAAY,OACZtD,aAAc,MACdC,QAAS,WACToH,QACIrf,EAAQnC,OAASmC,EAAQnC,MAAMa,OAAS,EAClC,QACA,iBAGd7G,EAAAC,EAAAC,cAACunB,GAAD,CACI5d,GAAI1B,EAAQ+e,OACZjK,MAAM,EACN6I,OAAO,EACPpgB,MAAO,CAAEwb,WAAY,UAGxB/Y,EAAQnC,OAASmC,EAAQnC,MAAMa,OAAS,GACrC7G,EAAAC,EAAAC,cAACwnB,GAAD,CACI7L,OAAQ1T,EAAQnC,MAChBoS,OAAO,SACPhV,KAAK,YAIZ+E,EAAQmM,MAAQtU,EAAAC,EAAAC,cAAA,SAAIiI,EAAQmM,OAEjCtU,EAAAC,EAAAC,cAAA,aAGRgnB,OAAQhB,GACJlmB,EAAAC,EAAAC,cAAA,QACIwF,MAAO,CAAEiiB,MAAO,OAAQzG,WAAY,OAAQ0G,SAAU,SAEtD5nB,EAAAC,EAAAC,cAACunB,GAAD,CAAY5d,GAAI1B,EAAQ+e,OAAQjK,MAAM,EAAM6I,OAAO,IAAS,IAHhE,SAIW,IACNzc,EAAKyH,QACFvG,GACAA,EAAalB,EAAKyH,OAAOE,WACrBhR,EAAAC,EAAAC,cAAA,QACIwF,MAAO,CAAEE,OAAQ,WACjBtF,QAAS,kBACLtB,EAAM+D,QAAQW,KACV,eAAiB2F,EAAKyH,OAAOE,YAIpCzG,EAAalB,EAAKyH,OAAOE,UAAU6W,KAAKpV,MAGpDpJ,EAAKye,cACF,CAAC,WAAY,OAAQ,QAAQ/iB,SACzBsE,EAAKye,aAAaR,cAElBtnB,EAAAC,EAAAC,cAAA,QACIwF,MAAO,CAAEE,OAAQ,WACjBtF,QAAS,kBACLtB,EAAM+D,QAAQW,KAAK,YAAcyE,EAAQ+e,UAGV,aAAlC7d,EAAKye,aAAaR,YACb,WACkC,UAAlCje,EAAKye,aAAaR,YAClB,QACA,SAK1BX,SAAUT,GACNlmB,EAAAC,EAAAC,cAAA,QAAMwF,MAAO,CAAEiiB,MAAO,SAClB3nB,EAAAC,EAAAC,cAACwmB,GAAA,EAAD,CAASC,SAAUxe,EAAQye,KAAMC,MAAI,MAIjD,OAAOjlB,GAAW4I,EACd5I,EAAQkD,MAAQqD,EAAQ+e,QAAW7C,EAoC/BrkB,EAAAC,EAAAC,cAAC6nB,GAAD,CACI1e,KAAMA,EACNzH,QAASA,EACT8hB,QAASvb,EAAQ6W,UACjBqF,eAAgBA,EAChBhB,QAASlb,EAAQmM,KACjBuH,OAAQ1T,EAAQnC,MAChBse,OAAQ,kBAAMgC,EAAkB,KAChC1B,OAAQ,kBAAM0B,EAAkB,OA3CpCtmB,EAAAC,EAAAC,cAAC2jB,GAAA,EAAY4C,EACRznB,EAAMgpB,OAAS/B,GAAWA,EAAQpf,OAAS,EACxC0f,EACIN,EAAQ3J,IAAI,SAAC2L,EAAOtK,GAAR,OACR3d,EAAAC,EAAAC,cAAC8lB,EAAD,CACIze,IAAKoW,EACLxV,QAAS8f,EACT5e,KAAMA,EACNzH,QAASA,EACT4I,WAAYA,EACZ4b,gBAAiBA,EACjBC,eAAgBA,MAIxBrmB,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CACIhC,KAAK,OACL9C,QAAS,kBAAMkmB,GAAe,KAFlC,QAIUP,EAAQpf,OAJlB,YAOJ,KAEH7H,EAAMgpB,OAAS7B,EACZnmB,EAAAC,EAAAC,cAAC6nB,GAAD,CACI1e,KAAMA,EACNzH,QAASA,EACT8hB,QAASvb,EAAQ6W,UACjBsE,YAAaA,EACbsB,OAAQ,kBAAMwB,GAAgB,MAElC,MAcZ,oCCxIOxnB,eAlHF,SAAAI,GAAS,IACVqK,EAAuDrK,EAAvDqK,KAAMzH,EAAiD5C,EAAjD4C,QAAS4I,EAAwCxL,EAAxCwL,WAAYD,EAA4BvL,EAA5BuL,aAAcG,EAAc1L,EAAd0L,UAD/BzL,EAEcC,mBAASF,EAAMunB,aAF7BpnB,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAEXipB,EAFW/oB,EAAA,GAEDgpB,EAFChpB,EAAA,GAUlB,OAAOkK,EACHrJ,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgF,SAAA,MACMjG,EAAMopB,gBACJpoB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgF,SAAA,KACIjF,EAAAC,EAAAC,cAACmoB,GAAD,CACIlgB,QAASkB,EAAKye,aACdze,KAAMA,EACNzH,QAASA,EACT4I,WAAYA,EACZD,aAAcA,EACdG,UAAWA,EACXub,QAAS,GACTC,SAAS,IAEZ7c,EAAKye,aAAa9hB,OACfqD,EAAKye,aAAa9hB,MAAMa,OAAS,GAC7B7G,EAAAC,EAAAC,cAACwnB,GAAD,CACI7L,OAAQxS,EAAKye,aAAa9hB,MAC1BoS,OAAO,SACPhV,KAAK,aAKzBpD,EAAAC,EAAAC,cAACooB,GAAA,EAAD,CAASllB,KAAK,aAAasC,MAAO,CAAEC,OAAQ,WAE5C3F,EAAAC,EAAAC,cAAA,OACIwF,MAAO,CACH6iB,UAAW,OAEXC,SAAU,aAGdxoB,EAAAC,EAAAC,cAAA,OACIwF,MAAO,CAAE8hB,QAAS,OAAQiB,eAAgB,iBAE1CzoB,EAAAC,EAAAC,cAAA,QAAMqH,IAAI,sBACNvH,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CAAQhC,KAAK,QACRiG,EAAKye,aAAahB,MAAM/hB,SAASnD,EAAQkD,KACtC9E,EAAAC,EAAAC,cAACwoB,GAAA,EAAD,CACIpoB,QAAS,kBACLyf,GACI,iBACA1W,EAAKye,aAAa9I,UAClBpd,EAAQkD,IACRuE,EAAKvE,QAKjB9E,EAAAC,EAAAC,cAACyoB,GAAA,EAAD,CACIroB,QAAS,kBACLyf,GACI,cACA1W,EAAKye,aAAa9I,UAClBpd,EAAQkD,IACRuE,EAAKvE,QAMrB9E,EAAAC,EAAAC,cAAA,QAAMwF,MAAO,CAAEuhB,YAAa,QACvB5d,EAAKye,aAAahB,MAAMjgB,UAIrC7G,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CAAQ9E,QAAS,kBAAM6nB,GAAY,IAAO/kB,KAAK,QAA/C,UAEIpD,EAAAC,EAAAC,cAAA,QAAMwF,MAAO,CAAEuhB,YAAa,QA7ExB,SAAA2B,GACxB,IAAI1S,EAAS,EADuBrS,GAAA,EAAAC,GAAA,EAAAC,OAAAb,EAAA,IAEpC,QAAAc,EAAAC,EAAiB2kB,EAAjB1kB,OAAAC,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,EACIqS,EAASA,EAAS,EADKlS,EAAAO,MACI0hB,QAAQpf,OAHH,MAAAlC,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAd,EAAA,MAAAC,GAKpC,OAAOmS,EAyEkB2S,CAAoBxf,EAAKuf,cAK1C5oB,EAAAC,EAAAC,cAACooB,GAAA,EAAD,CAASllB,KAAK,aAAasC,MAAO,CAAEC,OAAQ,WAC3CuiB,EACGloB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgF,SAAA,KACIjF,EAAAC,EAAAC,cAAC6nB,GAAD,CAAY1e,KAAMA,EAAMzH,QAASA,IAChCyH,EAAKuf,UAAYvf,EAAKuf,SAAS/hB,OAC1BwC,EAAKuf,SAAStM,IAAI,SAACnU,EAASwV,GAAV,OACd3d,EAAAC,EAAAC,cAACmoB,GAAD,CACI9gB,IAAKoW,EACLxV,QAASA,EACTkB,KAAMA,EACNzH,QAASA,EACT4I,WAAYA,EACZyb,QAAS9d,EAAQ8d,QACjB+B,OAAO,MAGf,MAGVhoB,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CAAQ9E,QAAS,kBAAM6nB,GAAY,IAAO/kB,KAAK,QAA/C,8BAMZ,OCtCOxE,eACXC,YAnBoB,SAAAC,GACpB,MAAO,CACHgD,SAAUhD,EAAMgD,SAChBF,QAAS9C,EAAM8C,QACfyH,KAAMvK,EAAMuK,KACZmB,WAAY1L,EAAM0L,aAIC,SAAC/B,GACxB,MAAO,CACHqB,QAAS,SAAA/B,GACLU,EAASgN,GAAgB1N,KAE7BgC,aAAc,SAAAjJ,GAAK,OAAI2H,EAASgN,GAAqB3U,OAKzDjC,CA1ES,SAAAG,GAAS,IAAAC,EACMC,mBAAS,IADfC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACX8I,EADW5I,EAAA,GACL2K,EADK3K,EAAA,GAEVyC,EAAY5C,EAAZ4C,QAwBR,GAvBAjC,oBAAU,WACN,IAAMiK,EAAY5K,EAAM+D,QAAQvC,SAASwC,SAASC,MAAM,KACxD,GAAI2G,EAAU/C,OAAS,EAAG,CACtB,IAAMoY,EAAYrV,EAAU,GAC5B,GAAI5K,EAAM8C,UAAYF,EAAQkD,MAAQma,EAAW,CAC7C,IAAM4I,EAAOjmB,EAAQ+d,MAAM/J,KACvB,SAAAjP,GAAI,OAAIA,EAAK+Y,SAAW9V,EAAU,KAEtCE,EAAQ,CAAEiD,QAASnL,EAASimB,cAE5B7E,GAAShkB,EAAO+I,EAAM+B,EAAS,EAAsB,SAAA/B,GACjD,IAAMyC,EAAa,GADsC3G,GAAA,EAAAC,GAAA,EAAAC,OAAAb,EAAA,IAEzD,QAAAc,EAAAC,EAAmB8D,EAAKyC,WAAxBtG,OAAAC,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,OAASgJ,EAAT7I,EAAAO,MACIiG,EAAWqC,EAAO/H,KAAO+H,GAH4B,MAAAlI,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAd,EAAA,MAAAC,GAKzD/E,EAAM8K,QAAQ,CACVT,KAAKjK,OAAA6X,GAAA,EAAA7X,CAAA,GAAI2I,EAAKsB,KAAKvE,IAAMiD,EAAKsB,MAC9BmB,mBAKjB,CAACxL,EAAM8C,YACLiG,EAAK8f,KAAM,OAAO,KA1BL,IA2BVA,EAAkB9f,EAAlB8f,KAAM9a,EAAYhF,EAAZgF,QAKd,OAJA/N,EAAM8K,QAAQ,CAAEoG,aAAc2X,EAAKxe,OAC/Bwe,GACA7oB,EAAM+K,aAAa,CAAEvE,KAAMqiB,EAAKpV,KAAMmQ,IAAK7V,EAAQjI,MAEhD+iB,EACH7nB,EAAAC,EAAAC,cAAC0gB,GAAA,EAAD,CACI9f,MACId,EAAAC,EAAAC,cAAA,yBACcF,EAAAC,EAAAC,cAACunB,GAAD,CAAY5d,GAAIkD,EAAQjI,MADtC,UAIJsc,UAAU,GAEVphB,EAAAC,EAAAC,cAACwnB,GAAD,CAAe7L,OAAQgM,EAAKhM,SAE5B7b,EAAAC,EAAAC,cAAA,UAAK2nB,EAAKpV,MACVzS,EAAAC,EAAAC,cAAA,KAAGwF,MAAO,CAAEojB,WAAY,aAAejB,EAAKkB,aAC5C/oB,EAAAC,EAAAC,cAAC8oB,GAAD,CACIZ,gBAAgB,EAChB/e,KAAMrK,EAAMqK,KAAKwe,EAAKxe,MACtBzH,QAAS5C,EAAM4C,QACf4I,WAAYxL,EAAMwL,WAClB+b,aAAa,KAGrB,mCC1DO0C,GAAA,SAACrnB,EAAS4I,EAAYjG,EAAQ2kB,GAA9B,OACXlpB,EAAAC,EAAAC,cAAC+b,GAAA,EAAD,CACI7U,KAAK,WACL1B,MAAO,CAAEyS,MAAO,QAChB+D,YAAY,gBACZ3X,MAAOA,EACP3D,SAAUsoB,EACV/M,kBAAmB,SAAAC,GAAO,OAAIA,EAAQC,aAErC,CACGza,GADHnB,OAAArB,OAAAiQ,GAAA,EAAAjQ,CAEMwC,EAAQ6E,QACNC,OAAO,SAAAmG,GAAM,MAAsB,WAAlBA,EAAOjG,SACxB0V,IAAI,SAAAzP,GAAM,OAAIrC,EAAWqC,EAAOA,YACvCyP,IAAI,SAAA3V,GAAI,OACN3G,EAAAC,EAAAC,cAAC+b,GAAA,EAAOM,OAAR,CAAehV,IAAKZ,EAAK7B,KACrB9E,EAAAC,EAAAC,cAACunB,GAAD,CAAY5d,GAAIlD,EAAK7B,IAAK6gB,SAAS,kBCkepC/mB,eAAWC,YATF,SAAAC,GACpB,MAAO,CACHgD,SAAUhD,EAAMgD,SAChBF,QAAS9C,EAAM8C,QACf4I,WAAY1L,EAAM0L,WAClBH,SAAUvL,EAAMuL,WAIExL,CA1dV,SAAAG,GAAS,IAAAC,EACmBC,mBAAS,IAD5BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACdqc,EADcnc,EAAA,GACAoc,EADApc,EAAA,GAAAI,EAEqBL,qBAFrBM,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAEd4pB,EAFc3pB,EAAA,GAEC4pB,EAFD5pB,EAAA,GAAA4C,EAGmBlD,qBAHnBmD,EAAAjD,OAAAC,EAAA,EAAAD,CAAAgD,EAAA,GAGdinB,EAHchnB,EAAA,GAGAinB,EAHAjnB,EAAA,GAAA+gB,EAI6BlkB,qBAJ7BqkB,EAAAnkB,OAAAC,EAAA,EAAAD,CAAAgkB,EAAA,GAIdmG,EAJchG,EAAA,GAIKiG,EAJLjG,EAAA,GAKb3hB,EAA4C5C,EAA5C4C,QAAS4I,EAAmCxL,EAAnCwL,WAAYif,EAAuBzqB,EAAvByqB,SAAUpf,EAAarL,EAAbqL,SACjCqf,EAAY1qB,EAAM2qB,QAAQC,UAC5B,SAAAjjB,GAAI,OAAIA,EAAKY,MAAQvI,EAAM6qB,aAGZ,IAAfH,GAAoB1qB,EAAM8qB,YAC1B9qB,EAAM8qB,WAAN,GAAArpB,OAAArB,OAAAiQ,GAAA,EAAAjQ,CACOJ,EAAM2qB,SADb,CAEI,CACIpiB,IAAKvI,EAAM6qB,UACXF,QAAS,OAGrB,IAAMI,EAAe,SAAA/qB,GAAK,OACtBgB,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CAAQhC,KAAK,OAAO9C,QAAS,kBAAM8oB,EAAiBpqB,EAAM2H,QACjC,WAApB3H,EAAM2H,KAAKS,KACNpI,EAAM2H,KAAKqjB,OACS,UAApBhrB,EAAM2H,KAAKS,KACXpI,EAAM2H,KAAKsjB,MAAQ,WACC,SAApBjrB,EAAM2H,KAAKS,KACXpI,EAAM2H,KAAKujB,SACX,KAId,OAAOR,GAAa,EAChB1pB,EAAAC,EAAAC,cAAA,WACKlB,EAAMmrB,WACHnrB,EAAM2qB,QAAQD,GAAWC,QAAQrN,IAAI,SAAC3V,EAAMgX,GAAP,OACjC3d,EAAAC,EAAAC,cAAC6pB,EAAD,CAAcpjB,KAAMA,MAGxB3G,EAAAC,EAAAC,cAAC2c,EAAA,EAAKpV,KAAN,CAAW0V,MAAOne,EAAMme,MAAO5V,IAAKvI,EAAM6qB,WACtC7pB,EAAAC,EAAAC,cAAA,UACKlB,EAAM2qB,QAAQD,GAAWC,QAAQrN,IAAI,SAAC3V,EAAMgX,GACzC,OACI3d,EAAAC,EAAAC,cAAA,MAAIqH,IAAKoW,GACL3d,EAAAC,EAAAC,cAAC6pB,EAAD,CAAcpjB,KAAMA,IACpB3G,EAAAC,EAAAC,cAACunB,GAAD,CACI5d,GAAIlD,EAAKwI,MACT4W,QAAQ,IACT,IALP,KAOKpf,EAAKyjB,KAAOzjB,EAAKyjB,IAAIvjB,OAAS,EAC3B7G,EAAAC,EAAAC,cAACunB,GAAD,CACI5d,GAAIlD,EAAKyjB,IACTrE,QAAQ,IAGZ/lB,EAAAC,EAAAC,cAAA,QACIwF,MAAO,CACHwb,WAAY,OACZmJ,WAAY,QAHpB,OASH1jB,EAAKwI,QAAUvN,EAAQkD,MAAQ2kB,GAC5BzpB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgF,SAAA,KACIjF,EAAAC,EAAAC,cAAC8gB,GAAA,EAAD,CACIC,QACIjhB,EAAAC,EAAAC,cAACgH,EAAA,EAAD,KACIlH,EAAAC,EAAAC,cAACgH,EAAA,EAAKO,KAAN,CACInH,QAAS,WACLkpB,EACI7L,GAEJ2L,EACI3iB,KANZ,QAaA3G,EAAAC,EAAAC,cAACgH,EAAA,EAAKO,KAAN,CACInH,QAAS,WCtBzC,IAAC2e,EAAWqL,EAAYT,EAAWU,EDuBC,GACKhqB,OAAOiqB,QACJ,8CAIR,GACIxrB,EAAM8qB,WACR,CACE,IAAMW,EAAUrrB,OAAAiQ,GAAA,EAAAjQ,CACTJ,EAAM2qB,SAEbc,EACIf,GADJtqB,OAAAwe,GAAA,EAAAxe,CAAA,GAGOqrB,EACCf,GAJR,CAMIC,QAASc,EACLf,GACFC,QAAQjjB,OACN,SACIC,EACA+jB,GAFJ,OAIIA,IACA/M,MAGZ3e,EAAM8qB,WACFW,QCrD3CxL,EDyD2Crd,EAAQkD,ICzDxCwlB,ED0DgCjgB,EAASvF,IC1D7B+kB,ED2DoB7qB,EAAM6qB,UC3DfU,ED4DS5jB,EAAK4jB,SC3DrEzY,IAAsC,IAAzBA,GAAU2C,YACvB3C,GAAUsB,KACNC,KAAKC,UAAU,CACXC,YAAa,eACb0L,YACAqL,aACAT,YACAU,gBDawC,YAiDRvqB,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CAAQhC,KAAK,QACTpD,EAAAC,EAAAC,cAACogB,GAAD,cAU9BmJ,GACEzpB,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CACIhC,KAAK,OACL9C,QAAS,WACLkpB,EAAqB,OACrBF,EAAgB,CAAEliB,KAAM,aAG5BpH,EAAAC,EAAAC,cAAC+d,GAAAhe,EAAD,MAPJ,gBAaZD,EAAAC,EAAAC,cAACW,EAAA,EAAD,CACIE,QAASsoB,EACTvoB,MACqB,QAAjBuoB,EAAyB,iBAAmB,cAEhDriB,UAAU,EACV5F,SAAU,kBAAMkoB,KAChBtoB,KAAM,WACF,ICzFOie,EAAWqL,EAAYT,EAAWc,EDyFrCC,EAAe,GAWnB,GAV0B,UAAtBvB,EAAajiB,MACbwjB,EAAaX,MAAQZ,EAAaY,MAClCW,EAAaxjB,KAAOiiB,EAAajiB,KACjCwjB,EAAaR,IAAMf,EAAae,IAChCQ,EAAaL,SAAWlB,EAAakB,UAErCK,EAAYxrB,OAAAwe,GAAA,EAAAxe,CAAA,GAAQiqB,EAAR,CAAsBY,WAAO/mB,IAE7C0nB,EAAazb,MAAQvN,EAAQkD,IAEzB9F,EAAM8qB,WAAY,CAClB,IAAMW,EAAUrrB,OAAAiQ,GAAA,EAAAjQ,CAAOJ,EAAM2qB,SAGzBc,EAAWf,GADW,QAAtBH,EACAnqB,OAAAwe,GAAA,EAAAxe,CAAA,GACOqrB,EAAWf,GADlB,CAEIC,QAAO,GAAAlpB,OAAArB,OAAAiQ,GAAA,EAAAjQ,CACAqrB,EAAWf,GAAWC,SADtB,CAEHiB,MAIRxrB,OAAAwe,GAAA,EAAAxe,CAAA,GACOqrB,EAAWf,GADlB,CAEIC,QAASc,EAAWf,GAAWC,QAAQrN,IACnC,SAAC3V,EAAMgX,GACH,OAAIA,IAAU4L,EACHqB,EACCjkB,MAI5B3H,EAAM8qB,WAAWW,GACjBnB,IACAE,SC5HGvK,ED+HCrd,EAAQkD,IC/HEwlB,EDgIVjgB,EAASvF,IChIa+kB,EDiItB7qB,EAAM6qB,UCjI2Bc,EDkIjCC,ECjIpB9Y,IAAsC,IAAzBA,GAAU2C,YACvB3C,GAAUsB,KACNC,KAAKC,UAAU,CACXC,YAAa,aACb0L,YACAqL,aACAT,YACAc,YD4HQrB,IACAE,KAGRloB,gBAAgB,EAChBod,OAAO,QAEN2K,GACGrpB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgF,SAAA,KACIjF,EAAAC,EAAAC,cAAC2c,EAAA,EAAKpV,KAAN,CAAW0V,MAAM,eACbnd,EAAAC,EAAAC,cAAC+b,GAAA,EAAD,CACIC,YAAY,OACZ3X,MAAO8kB,EAAajiB,KACpB8hB,SAAU,SAAA3kB,GACN+kB,EAAgBlqB,OAAAwe,GAAA,EAAAxe,CAAA,GACTiqB,EADQ,CAEXjiB,KAAM7C,MAGdmB,MAAO,CAAEyS,MAAO,QAChBgE,kBAAmB,SAAAC,GAAO,OACtBA,EAAQC,aAGZrc,EAAAC,EAAAC,cAAC+b,GAAA,EAAOM,OAAR,CAAehV,IAAI,SAAShD,MAAM,UAAlC,iBAGAvE,EAAAC,EAAAC,cAAC+b,GAAA,EAAOM,OAAR,CAAehV,IAAI,OAAOhD,MAAM,QAAhC,eAGAvE,EAAAC,EAAAC,cAAC+b,GAAA,EAAOM,OAAR,CAAehV,IAAI,QAAQhD,MAAM,SAAjC,kBAKRvE,EAAAC,EAAAC,cAAC2c,EAAA,EAAKpV,KAAN,CAAW0V,MAAM,cACZnB,GACGpa,EACA4I,EACA6e,EAAae,IACb,SAAA7lB,GACI+kB,EAAgBlqB,OAAAwe,GAAA,EAAAxe,CAAA,GACTiqB,EADQ,CAEXe,IAAK7lB,OAIjBvE,EAAAC,EAAAC,cAAA,mCAEJF,EAAAC,EAAAC,cAACooB,GAAA,EAAD,CAASllB,KAAK,eACS,WAAtBimB,EAAajiB,KACVpH,EAAAC,EAAAC,cAAC2c,EAAA,EAAKpV,KAAN,CACI0V,MAAM,cACNe,MAAK,GAAAzd,OAAArB,OAAAiQ,GAAA,EAAAjQ,CACE8b,IADF,CAED,CACIP,UAAU,EACVE,IAAK,EACLD,YAAY,EACZzS,QACI,oDAIZnI,EAAAC,EAAAC,cAACie,EAAA,EAAMC,SAAP,CACI7Z,MAAO8kB,EAAaW,OACpBppB,SAAU,SAAA0G,GAAA,IAAa/C,EAAb+C,EAAG+R,OAAU9U,MAAb,OACN+kB,EAAgBlqB,OAAAwe,GAAA,EAAAxe,CAAA,GACTiqB,EADQ,CAEXW,OAAQzlB,MAGhB2X,YAAY,iCAGE,UAAtBmN,EAAajiB,KACbpH,EAAAC,EAAAC,cAAC2c,EAAA,EAAKpV,KAAN,CAAW0V,MAAM,SAASe,MAAO9C,IAC7Bpb,EAAAC,EAAAC,cAACme,GAAA,EAAD,CACI9Z,MAAO8kB,EAAaY,MACpBrpB,SAAU,SAAA2D,GACN+kB,EAAgBlqB,OAAAwe,GAAA,EAAAxe,CAAA,GACTiqB,EADQ,CAEXY,MAAO1lB,SAMvBvE,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgF,SAAA,KACIjF,EAAAC,EAAAC,cAAC2c,EAAA,EAAKpV,KAAN,CAAW0V,MAAM,UACbnd,EAAAC,EAAAC,cAACud,GAAA,EAAD,CACIC,SAAS,eACTF,UACI6L,EAAawB,YAAc,IAC7BvO,IAAI,SAAC/Y,EAAKoa,GAAN,MAAiB,CACnBpa,MACAsa,IAAKF,KAETG,UAAW,SAAA1G,GACPmE,EAAgBnE,EAAK7T,MAEzB3C,SAAU,SAAAod,GAAkB,IAAfR,EAAeQ,EAAfR,SACT8L,EAAgBlqB,OAAAwe,GAAA,EAAAxe,CAAA,GACTiqB,EADQ,CAEXwB,WAAYrN,EAASlB,IACjB,SAAAtW,GAAK,OAAIA,EAAMzC,UAI3Bwa,cAAe,SAAA0G,GAAc,IAAXrN,EAAWqN,EAAXrN,KACdD,GACIC,EACA,SACAlU,EACA,SAAAK,GACI+lB,EAAgBlqB,OAAAwe,GAAA,EAAAxe,CAAA,GACTiqB,EADQ,CAEXwB,WAAU,GAAApqB,OAAArB,OAAAiQ,GAAA,EAAAjQ,CACFiqB,EAAawB,YACb,IAFE,CAGNtnB,YAOlB8lB,EAAawB,YAAc,IACxBhkB,QAAU,EAAI,KACf7G,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC+d,GAAAhe,EAAD,MACAD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAf,aAOhBH,EAAAC,EAAAC,cAAC2c,EAAA,EAAKpV,KAAN,CAAW0V,MAAM,OAAOe,MAAOlD,IAC3Bhb,EAAAC,EAAAC,cAACie,EAAA,EAAD,CACI5Z,MAAO8kB,EAAaa,SACpBtpB,SAAU,SAAAkqB,GAAA,IAAavmB,EAAbumB,EAAGzR,OAAU9U,MAAb,OACN+kB,EAAgBlqB,OAAAwe,GAAA,EAAAxe,CAAA,GACTiqB,EADQ,CAEXa,SAAU3lB,SAK1BvE,EAAAC,EAAAC,cAAC2c,EAAA,EAAKpV,KAAN,CACI0V,MAAM,cACNe,MAAOhD,IAEPlb,EAAAC,EAAAC,cAACie,EAAA,EAAMC,SAAP,CACI7Z,MAAO8kB,EAAa0B,gBACpBnqB,SAAU,SAAAoqB,GAAA,IAAazmB,EAAbymB,EAAG3R,OAAU9U,MAAb,OACN+kB,EAAgBlqB,OAAAwe,GAAA,EAAAxe,CAAA,GACTiqB,EADQ,CAEX0B,gBAAiBxmB,YAUrDvE,EAAAC,EAAAC,cAACW,EAAA,EAAD,CACIE,QAASua,EACTuD,OAAQ,KACRzd,SAAU,kBAAMma,EAAgB,MAEhCvb,EAAAC,EAAAC,cAAA,OACI4e,IAAI,UACJpZ,MAAO,CAAEyS,MAAO,QAChBpS,IAAKuV,KAGbtb,EAAAC,EAAAC,cAACW,EAAA,EAAD,CACIE,QAASooB,EACTtK,OAAQ,KACRzd,SAAU,kBAAMgoB,KAChBtoB,MAAM,kBAELqoB,EACGnpB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgF,SAAA,KACKkkB,EAAc0B,YACX1B,EAAc0B,WAAWvO,IAAI,SAACtW,EAAO2X,GAAR,OACzB3d,EAAAC,EAAAC,cAAA,QACIqH,IAAKoW,EACLrd,QAAS,kBAAMib,EAAgBvV,KAE/BhG,EAAAC,EAAAC,cAAC0gB,GAAA,EAAD,CACIxd,KAAK,QACLsC,MAAO,CACHyS,MAAO,IACPqP,QAAS,gBAEbyD,WAAS,EACTC,MACIlrB,EAAAC,EAAAC,cAAA,OACIwF,MAAO,CACHwf,gBACI,OAASlf,EAAQ,IACrBoS,OAAQ,IACRD,MAAO,IACPgN,eAAgB,gBAQ5CnlB,EAAAC,EAAAC,cAACirB,GAAA,EAAD,CACIrqB,MAAM,qBACNsgB,UAAQ,EACRgK,OAAQ,CACJC,IAAK,EACLC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,IAGgB,SAAvBvC,EAAc/hB,MACXpH,EAAAC,EAAAC,cAACirB,GAAA,EAAa1jB,KAAd,CAAmB0V,MAAM,QACpBgM,EAAce,UAGC,SAAvBf,EAAc/hB,MACXpH,EAAAC,EAAAC,cAACirB,GAAA,EAAa1jB,KAAd,CAAmB0V,MAAM,eACrBnd,EAAAC,EAAAC,cAAA,KAAGwF,MAAO,CAAEojB,WAAY,aACnBK,EAAc4B,kBAIH,WAAvB5B,EAAc/hB,MACXpH,EAAAC,EAAAC,cAACirB,GAAA,EAAa1jB,KAAd,CAAmB0V,MAAM,eACrBnd,EAAAC,EAAAC,cAAA,KAAGwF,MAAO,CAAEojB,WAAY,aACnBK,EAAca,SAIH,UAAvBb,EAAc/hB,MACXpH,EAAAC,EAAAC,cAACirB,GAAA,EAAa1jB,KAAd,CAAmB0V,MAAM,SACpBgM,EAAcc,SAK/B,OAGZ,kBErGO0B,GAlXiB,SAAA3sB,GAAS,IAC7B6oB,EAA8B7oB,EAA9B6oB,KAAMjmB,EAAwB5C,EAAxB4C,QAAS4I,EAAexL,EAAfwL,WADcvL,EAGDC,mBAC/B2oB,GAAQA,EAAK+D,YAAe,CACzB,CAAEnZ,KAAM,QAASlL,IAAK,SACtB,CAAEkL,KAAM,SAAUlL,IAAK,YANMpI,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAG9B2sB,EAH8BzsB,EAAA,GAGlB0sB,EAHkB1sB,EAAA,GAAAI,EAUTL,mBACvB2oB,GACGA,EAAKhM,OAAOS,IAAI,SAAC/Y,EAAKoa,GAAN,MAAiB,CAC7Bpa,MACAsa,IAAKF,MAET,IAhB6Bne,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAU9Bsc,EAV8Brc,EAAA,GAUtBsc,EAVsBtc,EAAA,GAAA4C,EAkBOlD,mBACxC2oB,GAAQA,EAAKiE,gBAnBoBzpB,EAAAjD,OAAAC,EAAA,EAAAD,CAAAgD,EAAA,GAkBd2pB,GAlBc1pB,EAAA,GAAAA,EAAA,IAAA+gB,EAqBGlkB,mBAAS,IArBZqkB,EAAAnkB,OAAAC,EAAA,EAAAD,CAAAgkB,EAAA,GAqB9B9H,EArB8BiI,EAAA,GAqBhBhI,EArBgBgI,EAAA,GAAAyI,EAsBC9sB,mBACjC2oB,GAAQA,EAAKoE,aAAgB,GAvBGC,EAAA9sB,OAAAC,EAAA,EAAAD,CAAA4sB,EAAA,GAsB9BC,EAtB8BC,EAAA,GAsBjBC,EAtBiBD,EAAA,GAAAE,EA0BPltB,mBAAU2oB,GAAQA,EAAKwE,eAAkB,IA1BlCC,EAAAltB,OAAAC,EAAA,EAAAD,CAAAgtB,EAAA,GA0B9BzC,EA1B8B2C,EAAA,GA0BrBxC,EA1BqBwC,EAAA,GAgD/BC,EAAe,SAAAC,GACjB,IAAMC,EAAQrtB,OAAAiQ,GAAA,EAAAjQ,CAAOwsB,GACfc,EAAM,OAAAjsB,OAAUwrB,GACtB,GAAyB,qBAAdO,EAA2B,CAClC,IAAMG,EAAcf,EAAWhC,UAC3B,SAAAgD,GAAI,OAAIA,EAAKrlB,MAAQilB,IAEzB,GAAIG,EAAc,EAAG,OACrBF,EAAS9V,OAAOgW,EAAc,EAAG,EAAG,CAChCplB,IAAKmlB,EACLja,KAAM,uBAGNga,EAAS7W,KAAK,SAAAjP,GAAI,MAAiB,WAAbA,EAAKY,MAC3BklB,EAAS9V,OAAO8V,EAAS5lB,OAAS,EAAG,EAAG,CACpCU,IAAKmlB,EACLja,KAAM,kBAGVga,EAAS/oB,KAAK,CACV6D,IAAKmlB,EACLja,KAAM,kBAGlBoZ,EAAcY,GACdN,EAAeF,EAAc,GAC7BrP,EAAKiQ,eAALztB,OAAA6X,GAAA,EAAA7X,CAAA,GACKstB,EAAS,CAAEnlB,IAAKmlB,EAAQja,KAAM,oBA3EFgK,EAuFtBC,IAAKC,UAAbC,EAvF8Bxd,OAAAC,EAAA,EAAAD,CAAAqd,EAAA,MAgG/BjB,EAAcQ,GAAkBpa,EAAS4I,GAEzCsiB,EAAoB,SAAA9tB,GAwCtB,OACIgB,EAAAC,EAAAC,cAAC6sB,GAAA,EAAD,CACI9L,QACIjhB,EAAAC,EAAAC,cAACgH,EAAA,EAAD,CACI5G,QAAS,SAAAgH,GAAA,OAAAA,EAAG0lB,SAAwBlM,qBAElC9hB,EAAMiuB,QACJjtB,EAAAC,EAAAC,cAACgH,EAAA,EAAKO,KAAN,CAAWF,IAAI,IAAIjH,QAlBb,WACtBisB,EAAavtB,EAAMwtB,aAiBH,0BAIFxtB,EAAMiuB,SAAWjuB,EAAM4T,OACrB5S,EAAAC,EAAAC,cAACgH,EAAA,EAAKO,KAAN,CAAWF,IAAI,IAAIjH,QAnDf,WACpB,IAAMqsB,EAAcf,EAAWhC,UAC3B,SAAAgD,GAAI,OAAIA,EAAKrlB,MAAQvI,EAAMwtB,YAE/B,KAAIG,GAAe,GAAnB,CACA,IAAMO,EAAa9tB,OAAAiQ,GAAA,EAAAjQ,CAAOwsB,GAC1BsB,EAAcvW,OACVgW,EAAc,EACd,EACAO,EAAcvW,OAAOgW,EAAa,GAAG,IAEzCd,EAAcqB,MAwCE,YAIFluB,EAAMiuB,SAAWjuB,EAAM4T,OACrB5S,EAAAC,EAAAC,cAACgH,EAAA,EAAKO,KAAN,CAAWF,IAAI,IAAIjH,QA1Cb,WACtB,IAAMqsB,EAAcf,EAAWhC,UAC3B,SAAAgD,GAAI,OAAIA,EAAKrlB,MAAQvI,EAAMwtB,YAE/B,KAAIG,EAAc,GAAKA,GAAef,EAAW/kB,OAAS,GAA1D,CACA,IAAMqmB,EAAa9tB,OAAAiQ,GAAA,EAAAjQ,CAAOwsB,GAC1BsB,EAAcvW,OACVgW,EAAc,EACd,EACAO,EAAcvW,OAAOgW,EAAa,GAAG,IAEzCd,EAAcqB,MA+BE,aAIJltB,EAAAC,EAAAC,cAACgH,EAAA,EAAKimB,QAAN,MACAntB,EAAAC,EAAAC,cAACgH,EAAA,EAAKO,KAAN,CACIF,IAAI,IACJqX,QAAQ,EACRte,QAhCI,WACpB,IAAMmsB,EAAWb,EAAWllB,OACxB,SAAA0mB,GAAI,OAAIA,EAAK7lB,MAAQvI,EAAMwtB,YAE/BX,EAAcY,KAyBF,WASRrQ,QAAS,CAAC,QAAS,UAEnBpc,EAAAC,EAAAC,cAAA,KACIC,UAAU,oBACVG,QAAS,SAAAgd,GACLA,EAAE+P,iBACF/P,EAAEwD,oBAGN9gB,EAAAC,EAAAC,cAACogB,GAAD,SAKhB,OAAQthB,EAAM4gB,QAAUiI,EACpB7nB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgF,SAAA,KACIjF,EAAAC,EAAAC,cAAC2c,EAAA,EAADzd,OAAAiG,OAAA,CACIuX,KAAMA,EACNnK,KAAK,yBACLmJ,SAhKK,SAAArX,GACb,IAAM+oB,EAAmB,GADHzpB,GAAA,EAAAC,GAAA,EAAAC,OAAAb,EAAA,IAEtB,QAAAc,EAAAC,EAAsB2nB,EAAtB1nB,OAAAC,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,EAAkC,KAAzB2oB,EAAyBxoB,EAAAO,MAC9B+oB,EAAiB5pB,KAAjBtE,OAAAwe,GAAA,EAAAxe,CAAA,GACOmF,EAAMioB,EAAUjlB,KADvB,CAEIA,IAAKilB,EAAUjlB,IACfkL,KAAM+Z,EAAU/Z,SANF,MAAA9N,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAd,EAAA,MAAAC,GAUtB/E,EAAM4c,SAANxc,OAAAwe,GAAA,EAAAxe,CAAA,GACOmF,EADP,CAEIsX,OAAQA,EAAOS,IAAI,SAAAtW,GAAK,OAAIA,EAAMzC,MAClCqoB,aACA0B,mBACArB,cACAI,cAAe1C,MAiJX7M,aAAa,MACbC,cACI8K,GAAQ,CACJpV,KAAM,kBACNG,MAAO,CACHH,KAAM,QACNlL,IAAK,QACLwhB,YAAa,sCAEjBkE,OAAQ,CACJxa,KAAM,SACNlL,IAAK,SACLwhB,YAAa,yCA1HtB,CACX/L,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,KAwGhB,CAqBIsQ,eAAgB,SAAAC,GAAiB,IAAArY,EAAA,SACpBhE,GACL,IAAMwM,EAAQiO,EAAWhC,UACrB,SAAAjjB,GAAI,OAAIA,EAAKY,MAAQ4J,IAGzB,GAAIwM,GAAS,GACL6P,EAAcrc,GAAMsB,KAAM,CAC1B,IAAMya,EAAa9tB,OAAAiQ,GAAA,EAAAjQ,CAAOwsB,GAC1BsB,EAAcvP,GAAdve,OAAAwe,GAAA,EAAAxe,CAAA,GACO8tB,EAAcvP,GADrB,CAEIlL,KAAM+a,EAAcrc,GAAMsB,OAE9BoZ,EAAcqB,GAGT,mBAAT/b,GACA4a,EAAkByB,EAAcrc,KAhBxC,IAAK,IAAIA,KAAQqc,EAAerY,EAAvBhE,MAqBbnR,EAAAC,EAAAC,cAAC2c,EAAA,EAAKpV,KAAN,CACIgL,KAAK,SACL0K,MAAM,SACNC,cAAc,SACdC,kBA/IC,SAAAC,GACb,OAAIlM,MAAMmM,QAAQD,GACPA,EAEJA,GAAKA,EAAEE,SAASlB,IAAI,SAAAtW,GAAK,OAAIA,EAAMzC,QA6I9BvD,EAAAC,EAAAC,cAACud,GAAA,EAAD,CACIC,SAAS,eACTF,SAAU3B,EAAOS,IAAI,SAACtW,EAAO2X,GAAR,OAAAve,OAAAwe,GAAA,EAAAxe,CAAA,GACd4G,EADc,CAEjB6X,IAAKF,MAETG,UAAW,SAAA1G,GACPmE,EAAgBnE,EAAK7T,MAEzB3C,SAAU,SAAAod,GAAA,IAAGR,EAAHQ,EAAGR,SAAH,OAAkB1B,EAAU0B,IACtCO,cAAe,SAAA0G,GAAc,IAAXrN,EAAWqN,EAAXrN,KACdD,GAAWC,EAAM,SAAKlU,EAAW,SAAAK,GAC7BuY,EACI,GAAArb,OAAArB,OAAAiQ,GAAA,EAAAjQ,CAAIyc,GAAJ,CAAY,CAAEtY,SAAO+Y,IACjB,SAACtW,EAAO2X,GAAR,OAAAve,OAAAwe,GAAA,EAAAxe,CAAA,GACO4G,EADP,CAEI6X,IAAKF,WAOxB9B,EAAOhV,QAAU,EAAI,KAClB7G,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC+d,GAAAhe,EAAD,MACAD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAf,aAKhBH,EAAAC,EAAAC,cAAC2c,EAAA,EAAKpV,KAAN,CAAW0V,MAAM,OAAO1K,KAAK,OAAOyL,MAAOlD,IACvChb,EAAAC,EAAAC,cAACie,EAAA,EAAD,OAEJne,EAAAC,EAAAC,cAAC2c,EAAA,EAAKpV,KAAN,CACI0V,MAAM,cACN1K,KAAK,cACLyL,MAAOhD,IAEPlb,EAAAC,EAAAC,cAACie,EAAA,EAAMC,SAAP,CACI0F,SAAU,CAAEC,QAAS,EAAGC,QAAS,IACjC9H,YAAY,+EAIpBlc,EAAAC,EAAAC,cAAC2c,EAAA,EAAKpV,KAAN,CAAW0V,MAAM,YAAY1K,KAAK,SAC7B+I,GAGLxb,EAAAC,EAAAC,cAAC2c,EAAA,EAAKpV,KAAN,CAAW0V,MAAM,UAAU1K,KAAK,WAC3B+I,GAELxb,EAAAC,EAAAC,cAAC2c,EAAA,EAAKpV,KAAN,CAAW0V,MAAM,aAAa1K,KAAK,cAC9B+I,GAGLxb,EAAAC,EAAAC,cAACooB,GAAA,EAAD,mBACAtoB,EAAAC,EAAAC,cAACutB,GAAA,EAAD,CAAUC,mBAAmB,QAAQC,WAAS,GACzC,GAAAltB,OAAArB,OAAAiQ,GAAA,EAAAjQ,CACOwsB,EAAWhW,KAAK,SAAAjP,GAAI,MAAiB,UAAbA,EAAKY,MAC3B,CAACqkB,EAAWhW,KAAK,SAAAjP,GAAI,MAAiB,UAAbA,EAAKY,OAC9B,IAHTnI,OAAAiQ,GAAA,EAAAjQ,CAIMwsB,EAAWllB,OACV,SAAAC,GAAI,MACa,UAAbA,EAAKY,KAAgC,WAAbZ,EAAKY,OANxCnI,OAAAiQ,GAAA,EAAAjQ,CAQOwsB,EAAWhW,KAAK,SAAAjP,GAAI,MAAiB,WAAbA,EAAKY,MAC3B,CAACqkB,EAAWhW,KAAK,SAAAjP,GAAI,MAAiB,WAAbA,EAAKY,OAC9B,KACR+U,IAAI,SAAAkQ,GACF,OACIxsB,EAAAC,EAAAC,cAACutB,GAAA,EAASG,MAAV,CACIC,OACIjR,EAAKkR,cAAc,CACftB,EAAUjlB,IACV,UACEilB,EAAU/Z,KAEpBlL,IAAKilB,EAAUjlB,IACfsZ,MACI7gB,EAAAC,EAAAC,cAAC4sB,EAAD,CACIN,UAAWA,EAAUjlB,IACrBqL,MAAyB,UAAlB4Z,EAAUjlB,IACjB0lB,OAA0B,WAAlBT,EAAUjlB,OAI1BvH,EAAAC,EAAAC,cAAC2c,EAAA,EAAKpV,KAAN,CACI0V,MAAM,OACN1K,KAAM,CAAC+Z,EAAUjlB,IAAK,QACtB2W,MAAOlD,IAEPhb,EAAAC,EAAAC,cAACie,EAAA,EAAD,OAEJne,EAAAC,EAAAC,cAAC2c,EAAA,EAAKpV,KAAN,CACI0V,MAAM,cACN1K,KAAM,CAAC+Z,EAAUjlB,IAAK,eACtB2W,MAAOhD,IAEPlb,EAAAC,EAAAC,cAACie,EAAA,EAAMC,SAAP,CAAgBlC,YAAY,oFAEhClc,EAAAC,EAAAC,cAAC6tB,GAAD,CACIlE,UAAW2C,EAAUjlB,IACrB4V,MAAM,UACNwM,QAASA,EACTG,WAAYA,QAMhC9pB,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CAAQhC,KAAK,OAAO9C,QAAS,kBAAMisB,MAC/BvsB,EAAAC,EAAAC,cAAC+d,GAAAhe,EAAD,MADJ,wBAIAD,EAAAC,EAAAC,cAAC2c,EAAA,EAAKpV,KA1QC,CACfyV,WAAY,CAAEoB,OAAQ,EAAGrB,KAAM,KA0QnBjd,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CAAQhC,KAAK,UAAUmb,SAAS,SAASlb,KAAK,SAA9C,UAKRrD,EAAAC,EAAAC,cAACW,EAAA,EAAD,CACIE,QAASua,EACTuD,OAAQ,KACRzd,SAAU,kBAAMma,EAAgB,MAEhCvb,EAAAC,EAAAC,cAAA,OACI4e,IAAI,UACJpZ,MAAO,CAAEyS,MAAO,QAChBpS,IAAKuV,MAIjB,MClXO0S,GAZK,SAAAhvB,GAAK,OACrBA,EAAM4C,QAAQkD,IACV9E,EAAAC,EAAAC,cAAC+tB,GAAD,CACIrS,SAAU,SAAArX,GACNvF,EAAMkvB,yBAAwB,GFmEjB,SAACjP,EAAW1a,EAAO4pB,GACxCrc,IAAsC,IAAzBA,GAAU2C,YACvB3C,GAAUsB,KACNC,KAAKC,UAAU,CACXC,YAAa,gBACb0L,YACA1a,QACA4pB,aEzEApO,CAAwB/gB,EAAM4C,QAAQkD,IAAKP,EAAOvF,EAAMmvB,UAE5DvsB,QAAS5C,EAAM4C,QACf4I,WAAYxL,EAAMwL,aAEtB,MCVA4jB,GAASC,KAATD,KA4COxvB,eA1CG,SAAAI,GAAS,IACfsL,EAAUtL,EAAVsL,MAER,OACItK,EAAAC,EAAAC,cAAA,OACIwF,MAAO,CACH8hB,QAAS,eACT7hB,OAAQ,WAEZrF,QAAS,kBAAMtB,EAAM+D,QAAQW,KAAK,WAAa4G,EAAMxF,OAErD9E,EAAAC,EAAAC,cAAC0gB,GAAA,EAAD,CACIxd,KAAK,QACLsC,MAAO,CACHyS,MAAO,KAEX8S,WAAS,EACTC,MACIlrB,EAAAC,EAAAC,cAAA,OACII,QAAS,kBACLtB,EAAM+D,QAAQW,KAAK,WAAa4G,EAAMxF,MAE1CY,MAAO,CACHwf,gBACI,QACC5a,EAAMuR,QACHvR,EAAMuR,OAAOhV,OAAS,GACtByD,EAAMuR,OAAO,IACjB,IACJzD,OAAQ,IACRD,MAAO,IACPgN,eAAgB,YAK5BnlB,EAAAC,EAAAC,cAACkuB,GAAD,CAAMttB,MAAOwJ,EAAMmI,WCzB3B6b,GAAYC,KAAZD,QA2LO1vB,eACXC,YAtBoB,SAAAC,GACpB,MAAO,CACH8C,QAAS9C,EAAM8C,QACfmL,QAASjO,EAAMiO,QACfjL,SAAUhD,EAAMgD,SAChByI,aAAczL,EAAMyL,aACpBG,UAAW5L,EAAM4L,UACjBF,WAAY1L,EAAM0L,aAIC,SAAC/B,GACxB,MAAO,CACHqB,QAAS,SAAC/B,EAAMyN,GAAP,OACL/M,EAASgN,GAAgB1N,KAC7BgC,aAAc,SAAAjJ,GAAK,OAAI2H,EAASgN,GAAqB3U,KACrDyH,QAAS,SAACvJ,EAAOwvB,GAAR,OACL/lB,EAASgN,GAAgBzW,EAAOwvB,OAKxC3vB,CA1Le,SAAAG,GAAS,IAMpByvB,EAAkBC,EALdC,EAA2D3vB,EAA3D2vB,YAAapkB,EAA8CvL,EAA9CuL,aAAc3I,EAAgC5C,EAAhC4C,QAAS8I,EAAuB1L,EAAvB0L,UAAWqC,EAAY/N,EAAZ+N,QAD/BzF,EAGOqnB,EAAc5hB,EAAUnL,EAA/CkJ,EAHgBxD,EAGhBwD,WAAYM,EAHI9D,EAGJ8D,OAHInM,EAIgCC,oBAAS,GAJzCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAIjB2vB,EAJiBzvB,EAAA,GAIK+uB,EAJL/uB,EAAA,GAKnBwvB,GAAa3vB,EAAM+K,aAAa,CAAEvE,KAAM,aAAcod,IAAK,KAE5D9X,IACA2jB,EAAmB3jB,EACdpE,OAAO,SAAAC,GAAI,OAAI4D,EAAa5D,KAC5B2V,IAAI,SAAA3V,GAAI,OAAI4D,EAAa5D,KAC9B+nB,EAAetjB,EACV1E,OAAO,SAAAC,GAAI,OAAI+D,EAAU/D,IAAS+D,EAAU/D,GAAMkoB,SAClDvS,IAAI,SAAA3V,GAAI,OAAI+D,EAAU/D,MAG/B,IAAMmoB,EAAWH,EAAc,KAAOF,GAAoBC,EACtD1uB,EAAAC,EAAAC,cAAC4kB,GAAA,EAAD,CACIhkB,MAAM,eACNC,QAAS6tB,EACTrtB,cAAY,EACZyF,UAAQ,EACR5F,SAAU,kBAAM8sB,GAAwB,IACxC/V,MAAM,OACNzS,MAAO,CAAEqpB,SAAU,UACnBlQ,OACI7e,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CACImC,IAAI,OACJjH,QAAS,kBAAM4tB,GAAwB,KAF3C,SAOJ5sB,gBAAgB,GAEhBtB,EAAAC,EAAAC,cAAC8uB,GAAD,CACId,wBAAyBA,EACzBtsB,QAASA,EACT4I,WAAYxL,EAAMwL,cAG1B,KAGAikB,GAAoBC,GAChB1uB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgF,SAAA,KACIjF,EAAAC,EAAAC,cAACouB,GAAD,CAASW,IAAI,aAAa1nB,IAAI,eACxBonB,GACE3uB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgF,SAAA,KACIjF,EAAAC,EAAAC,cAACyiB,GAAD,CACI7hB,MAAM,uBACN8hB,IAAI,kCACJtB,OAAQ,WACJ4M,GAAwB,MAG/BY,GAGT9uB,EAAAC,EAAAC,cAAC+hB,GAAD,KACKwM,EAAiBnS,IAAI,SAAC3V,EAAMgX,GAAP,OAClB3d,EAAAC,EAAAC,cAACygB,GAAD,CACIpZ,IAAKoW,EACLuC,YAAa,eAAiBvZ,EAAK7B,IACnC+W,OAAQlV,EAAKkhB,KAAKhM,OAClBwE,KACIrgB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgF,SAAA,KACIjF,EAAAC,EAAAC,cAACunB,GAAD,CACIzS,IAAKrO,EAAKkhB,KAAKxZ,MACf/D,OAAO,IAEXtK,EAAAC,EAAAC,cAAA,QAAMwF,MAAO,CAAEwb,WAAY,SACtBva,EAAK8L,aAQlCzS,EAAAC,EAAAC,cAACouB,GAAD,CAASW,IAAI,SAAS1nB,IAAI,UACrBmnB,EAAa7nB,OAAS,EACnB6nB,EAAapS,IAAI,SAAChS,EAAOqT,GAAR,OACb3d,EAAAC,EAAAC,cAACgvB,GAAD,CAAW3nB,IAAKoW,EAAOrT,MAAOA,MAGlCtK,EAAAC,EAAAC,cAACivB,GAAA,EAAD,CACIC,WAAY,CACRhX,OAAQ,KAEZ2Q,YACI/oB,EAAAC,EAAAC,cAAA,iGAW5B,OAAOuuB,GAAoBC,EAWvB1uB,EAAAC,EAAAC,cAAA,YACMyuB,GACE3uB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgF,SAAA,KACIjF,EAAAC,EAAAC,cAACyiB,GAAD,CACI7hB,MAAM,uBACN8hB,IAAI,kCACJtB,OAAQ,WACJ4M,GAAwB,MAG/BY,GAGT9uB,EAAAC,EAAAC,cAAC+hB,GAAD,CAAavc,MAAO,CAAEwc,UAAW,SAC5BuM,EAAiBnS,IAAI,SAAC3V,EAAMgX,GAAP,OAClB3d,EAAAC,EAAAC,cAACygB,GAAD,CACIpZ,IAAKoW,EACLuC,YAAa,eAAiBvZ,EAAK7B,IACnC+W,OAAQlV,EAAKkhB,KAAKhM,OAClBwE,KACIrgB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgF,SAAA,KACIjF,EAAAC,EAAAC,cAACunB,GAAD,CACIzS,IAAKrO,EAAKkhB,KAAKxZ,MACf/D,OAAO,IAEXtK,EAAAC,EAAAC,cAAA,QAAMwF,MAAO,CAAEwb,WAAY,SACtBva,EAAK8L,aAQlC,kBCyBO4c,GApLO,SAAArwB,GAAS,IACnBqL,EAAsBrL,EAAtBqL,SAAUzI,EAAY5C,EAAZ4C,QACVimB,EAASxd,EAATwd,KACAwE,EAAkBxE,EAAlBwE,cAEFiD,EAAiB,SAAAhoB,GAAA,IAAG3G,EAAH2G,EAAG3G,QAAS4uB,EAAZjoB,EAAYioB,YAAaC,EAAzBloB,EAAyBkoB,SAAzB,OACnBxvB,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CACIC,QAASA,EACTC,SAAU,SAAA0c,GAAC,OLlBI,SAACvV,EAAMxD,EAAOgrB,GACjCzd,IAAsC,IAAzBA,GAAU2C,YACvB3C,GAAUsB,KACNC,KAAKC,UAAU,CACXC,YAAa,cACbgc,cACAhrB,QACA+lB,WAAYviB,EAAKsC,SAASvF,IAC1Bma,UAAWlX,EAAKnG,QAAQkD,OKWxBib,CAAsB/gB,EAAOse,EAAEjE,OAAO1Y,QAAS4uB,IAEnDC,SAAUA,KAIZC,EAAoB,SAAC5lB,EAAI6lB,EAAOlD,GAClC,MAAO,CACH7rB,QAAS+uB,EAAMC,WAAW/Z,KAAK,SAAAjP,GAAI,OAAIA,EAAKsY,YAAcpV,IAC1D0lB,YAAa/C,EAAUjlB,IACvBioB,SAAU3lB,IAAOjI,EAAQkD,MAIjC,OACI9E,EAAAC,EAAAC,cAACutB,GAAA,EAAD,CACIC,mBAAmB,QACnBhoB,MAAO,CAAEkqB,aAAc,QACvBC,sBAAsB,EACtBlC,WAAS,GAER9F,EAAKyF,iBAAiBhR,IAAI,SAAAkQ,GACvB,IAAMkD,EAAQrlB,EAASylB,OAAOla,KAC1B,SAAA8Z,GAAK,OAAIA,EAAMH,cAAgB/C,EAAUjlB,OACxC,CAAEooB,WAAY,IAEbrgB,EAAUuY,EAAKvY,QAAQgN,IAAI,SAAAyT,GAAM,OACnC/vB,EAAAC,EAAAC,cAACirB,GAAA,EAAa1jB,KAAd,CACIF,IAAKwoB,EACL5S,MACInd,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgF,SAAA,KACIjF,EAAAC,EAAAC,cAACunB,GAAD,CACI5d,GAAIkmB,EACJjK,OAAO,EACP7I,MAAM,IACP,IACF,cAIRqS,EACGG,EAAkBM,EAAQL,EAAOlD,OAKvCne,EAAQwZ,EAAKxZ,MAAMiO,IAAI,SAAAlS,GAAI,OAC7BpK,EAAAC,EAAAC,cAACirB,GAAA,EAAa1jB,KAAd,CACIF,IAAK6C,EACL+S,MACInd,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgF,SAAA,KACIjF,EAAAC,EAAAC,cAACunB,GAAD,CACI5d,GAAIO,EACJ0b,OAAO,EACP7I,MAAM,IACP,IACF,gBAIRqS,EACGG,EAAkBrlB,EAAMslB,EAAOlD,OAKrCrd,EAAQ,CACVnP,EAAAC,EAAAC,cAACirB,GAAA,EAAa1jB,KAAd,CACIF,IAAK8C,EAAS8E,MACdgO,MACInd,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgF,SAAA,KACIjF,EAAAC,EAAAC,cAACunB,GAAD,CACI5d,GAAIQ,EAAS8E,MACb2W,OAAO,EACP7I,MAAM,IACP,IACF,aAIRqS,EACGG,EAAkBplB,EAAS8E,MAAOugB,EAAOlD,MAIrD,OACIxsB,EAAAC,EAAAC,cAACutB,GAAA,EAASG,MAAV,CACIC,OACI7tB,EAAAC,EAAAC,cAACkG,EAAA,EAAD,CACIuhB,MAAO+H,EAAM9oB,OAAS,QAAU,OAChC0N,KAAMkY,EAAU/Z,OAGxBlL,IAAKilB,EAAUjlB,KAIfvH,EAAAC,EAAAC,cAACooB,GAAA,EAAD,CAAS5iB,MAAO,CAAEwc,UAAW,MAAO0F,SAAU,SAA9C,UAIA5nB,EAAAC,EAAAC,cAACirB,GAAA,EAAD,CACI/J,UAAQ,EACRgK,OAAQ,CACJC,IAAK,EACLC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,IAGR1rB,EAAAC,EAAAC,cAACirB,GAAA,EAAa1jB,KAAd,CAAmB0V,MAAM,kBACpBuS,EAAM9oB,OACH5G,EAAAC,EAAAC,cAACkG,EAAA,EAAD,CACIQ,OAAO,UACP0N,KAAK,gBAGTtU,EAAAC,EAAAC,cAACkG,EAAA,EAAD,CACIQ,OAAO,aACP0N,KAAK,gBAIhBjG,EACAc,EACAG,GAEJkd,EAAUzD,aACP/oB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgF,SAAA,KACIjF,EAAAC,EAAAC,cAACooB,GAAA,EAAD,CAAS5iB,MAAO,CAAEkiB,SAAU,SAA5B,eAGA5nB,EAAAC,EAAAC,cAAC8vB,GAAA,EAAWC,UAAZ,CACIC,SAAU,CACNjM,KAAM,EACNkM,YAAY,EACZC,OAAQ,QAEZ1qB,MAAO,CAAEojB,WAAY,aAEpB0D,EAAUzD,cAKtB2G,EAAM9oB,QACH5G,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgF,SAAA,KACIjF,EAAAC,EAAAC,cAACooB,GAAA,EAAD,CAAS5iB,MAAO,CAAEkiB,SAAU,SAA5B,gBAIA5nB,EAAAC,EAAAC,cAAC6tB,GAAD,CACIlE,UAAW,EACXF,QAAS,CAAC,CAAEA,QAAS+F,EAAMW,KAAM9oB,IAAK,IACtCkiB,UAAU,KAItBzpB,EAAAC,EAAAC,cAACooB,GAAA,EAAD,CAAS5iB,MAAO,CAAEkiB,SAAU,SAA5B,WACA5nB,EAAAC,EAAAC,cAAC6tB,GAAD,CACIlE,UAAW2C,EAAUjlB,IACrBoiB,QAAS0C,SC3JtBiE,GAxBM,SAAAtxB,GAAS,IAClBqL,EAAmDrL,EAAnDqL,SAAUzI,EAAyC5C,EAAzC4C,QAAS9C,EAAgCE,EAAhCF,MAAOQ,EAAyBN,EAAzBM,SAAUkL,EAAexL,EAAfwL,WAEtC8iB,EAAmB,GAHCzpB,GAAA,EAAAC,GAAA,EAAAC,OAAAb,EAAA,IAI1B,QAAAc,EAAAC,EAAsBoG,EAASwd,KAAKyF,iBAApCppB,OAAAC,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,EAAsD,KAA7C2oB,EAA6CxoB,EAAAO,MAClD+oB,EAAiBd,EAAUjlB,KAAOilB,GALZ,MAAA7nB,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAd,EAAA,MAAAC,GAO1B,IAAM8jB,EAAIzoB,OAAAwe,GAAA,EAAAxe,CAAA,GAAQiL,EAASwd,KAASyF,GAOpC,OAAOzF,EACH7nB,EAAAC,EAAAC,cAAC+tB,GAAD,CACIpG,KAAMA,EACNjM,SARS,SAAArX,INiDa,SAACwD,EAAMxD,GACjCuN,IAAsC,IAAzBA,GAAU2C,YACvB3C,GAAUsB,KACNC,KAAKC,UAAU,CACXC,YAAa,qBACb+W,WAAYviB,EAAKsC,SAASvF,IAC1Bma,UAAWlX,EAAKnG,QAAQkD,IACxBP,WMvDRwb,CAA6B/gB,EAAOuF,GACpCjF,EAASF,OAAAwe,GAAA,EAAAxe,CAAA,GAAKN,EAAN,CAAayxB,kBAAkB,MAOnC3uB,QAASA,EACT4I,WAAYA,IAEhB,MClBA/C,GAAS+oB,KAAT/oB,KAuHO7I,eA7GE,SAAAI,GAAS,IACd4C,EAAmD5C,EAAnD4C,QAASyI,EAA0CrL,EAA1CqL,SAAUvL,EAAgCE,EAAhCF,MAAOQ,EAAyBN,EAAzBM,SAAUkL,EAAexL,EAAfwL,WACpCqd,EAASxd,EAATwd,KACR,OAAOA,EACH7nB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgF,SAAA,KACK4iB,EAAKhM,OAAOhV,OAAS,GAAK7G,EAAAC,EAAAC,cAACwnB,GAAD,CAAe7L,OAAQgM,EAAKhM,SAEvD7b,EAAAC,EAAAC,cAAA,UAAK2nB,EAAKpV,MACVzS,EAAAC,EAAAC,cAAC8vB,GAAA,EAAWC,UAAZ,CACIC,SAAU,CACNjM,KAAM,EACNkM,YAAY,EACZC,OAAQ,QAEZ1qB,MAAO,CAAEojB,WAAY,aAEpBjB,EAAKkB,aAGV/oB,EAAAC,EAAAC,cAACirB,GAAA,EAAD,CACI/J,UAAQ,EACRgK,OAAQ,CAAEC,IAAK,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,IAElD1rB,EAAAC,EAAAC,cAACuH,GAAD,CAAM0V,MAAM,UAAU9S,EAASzD,QAC/B5G,EAAAC,EAAAC,cAACuH,GAAD,CAAM0V,MAAM,UACP0K,EAAKxZ,OAASrO,EAAAC,EAAAC,cAACunB,GAAD,CAAYzS,IAAK6S,EAAKxZ,MAAO/D,OAAO,KAEvDtK,EAAAC,EAAAC,cAACuH,GAAD,CAAM0V,MAAM,SACRnd,EAAAC,EAAAC,cAACunB,GAAD,CAAY5d,GAAIQ,EAAS8E,MAAO4W,QAAQ,KAE5C/lB,EAAAC,EAAAC,cAACuH,GAAD,CAAM0V,MAAM,cACP0K,EAAKtY,YACFvP,EAAAC,EAAAC,cAACunB,GAAD,CAAYzS,IAAK6S,EAAKtY,WAAYjF,OAAO,KAGjDtK,EAAAC,EAAAC,cAACuH,GAAD,CAAM0V,MAAM,WACP0K,EAAKvY,SACFtP,EAAAC,EAAAC,cAACunB,GAAD,CAAYzS,IAAK6S,EAAKvY,QAAShF,OAAO,MAIlDtK,EAAAC,EAAAC,cAACooB,GAAA,EAAD,CAASmI,YAAY,SAASrtB,KAAK,cAAnC,cAGApD,EAAAC,EAAAC,cAACwwB,GAAD,CACIrmB,SAAUA,EACVzI,QAASA,EACT9C,MAAOA,EACPQ,SAAUA,IAEbsC,EAAQkD,MAAQuF,EAAS8E,OACtBnP,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CACIM,MAAO,CAAEC,OAAQ,qBACjBvC,KAAK,UACL9C,QAAS,WACLhB,EAASF,OAAAwe,GAAA,EAAAxe,CAAA,GAAKN,EAAN,CAAayxB,kBAAkB,OAJ/C,iBAUH3uB,EAAQkD,MAAQuF,EAAS8E,OACtBnP,EAAAC,EAAAC,cAACse,GAAA,EAAD,CACI1d,MAAM,kFACN2d,UAAW,kBPtDHQ,EOuDkBrd,EAAQkD,IPvDfwlB,EOuDoBjgB,EAASvF,SPtD5DgN,IAAsC,IAAzBA,GAAU2C,YACvB3C,GAAUsB,KACNC,KAAKC,UAAU,CACXC,YAAa,cACb+W,aACArL,gBANW,IAACA,EAAWqL,IO0DnBtqB,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CACIM,MAAO,CAAEC,OAAQ,qBACjBvC,KAAK,WAFT,mBAQPxB,EAAQkJ,YACLlJ,EAAQkJ,WAAW/F,SAASsF,EAASvF,IAAI6rB,aACrC3wB,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CACIwZ,QAAQ,EACRte,QAAS,WPlFJ,IAAAyH,IOmFuB/I,EPlF5C8S,IAAsC,IAAzBA,GAAU2C,YACvB3C,GAAUsB,KACNC,KAAKC,UAAU,CACXC,YAAa,gBACb+W,WAAYviB,EAAKsC,SAASvF,IAC1Bma,UAAWlX,EAAKnG,QAAQkD,SO0EpB,sBAUR9E,EAAAC,EAAAC,cAACW,EAAA,EAAD,CACIE,QAASjC,EAAMyxB,iBACf1R,OAAQ,KACRzd,SAAU,kBAAM9B,EAASF,OAAAwe,GAAA,EAAAxe,CAAA,GAAKN,EAAN,CAAayxB,kBAAkB,MACvDvpB,UAAU,EACV1F,gBAAgB,EAChB6W,MAAM,OACNzS,MAAO,CAAEqpB,SAAU,WAEnB/uB,EAAAC,EAAAC,cAAC0wB,GAAD,CACIvmB,SAAUA,EACVzI,QAASA,EACT9C,MAAOA,EACPQ,SAAUA,EACVkL,WAAYA,MAIxB,2BCoDO5L,eA1JC,SAAAI,GAAS,IAAAC,EACmBC,mBAAS,IAD5BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACdqc,EADcnc,EAAA,GACAoc,EADApc,EAAA,GAAAI,EAEmBL,oBAAS,GAF5BM,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAEd2jB,EAFc1jB,EAAA,GAEA2jB,EAFA3jB,EAAA,GAAA4C,EAGOlD,mBAAS,IAHhBmD,EAAAjD,OAAAC,EAAA,EAAAD,CAAAgD,EAAA,GAGdyZ,EAHcxZ,EAAA,GAGNyZ,EAHMzZ,EAAA,GAKbyO,EAAgC9R,EAAhC8R,OAAQlP,EAAwB5C,EAAxB4C,QAASmP,EAAe/R,EAAf+R,WALJqS,EAOiBlkB,mBAClCF,EAAMqkB,UACDrkB,EAAMskB,YAAc,IAAMtkB,EAAMskB,YAAc,IAAM,KATxCC,EAAAnkB,OAAAC,EAAA,EAAAD,CAAAgkB,EAAA,GAOdrP,EAPcwP,EAAA,GAODC,EAPCD,EAAA,GAiBrB,OAAO3hB,EAAQkD,IACX9E,EAAAC,EAAAC,cAAA,OACIwF,MAAO,CACH+d,WAAY,OACZrD,QAAS,WACTuD,OAAQ,MACRC,KAAM,MACNiN,OAAQ,MAGZ7wB,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAC2jB,GAAA,EAAD,CACIhe,OAAQ7F,EAAAC,EAAAC,cAAC2F,EAAA,EAAD,CAAQE,IAAKvE,EAAUI,EAAQkD,IAAKlD,EAAQoE,SACpDqd,QACIrjB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgF,SAAA,KACIjF,EAAAC,EAAAC,cAAC2c,EAAA,EAAKpV,KAAN,CAAWyW,MAAO/C,IACdnb,EAAAC,EAAAC,cAACie,EAAA,EAAMC,SAAP,CACI0F,SAAU,CACNC,QAAS,EACTC,QAAS,GAEbC,KAAM,EACNrjB,SAAU,SAAA0c,GAAC,OAAIkG,EAAelG,EAAEjE,OAAO9U,QACvCA,MAAOwP,KAGd8H,EAAOhV,OAAS,GACb7G,EAAAC,EAAAC,cAAC2c,EAAA,EAAKpV,KAAN,CAAW/B,MAAO,CAAEC,OAAQ,IACxB3F,EAAAC,EAAAC,cAACud,GAAA,EAAD,CACIC,SAAS,eACTF,SAAU3B,EAAOS,IAAI,SAACtW,EAAO2X,GAAR,MAAmB,CACpCpa,IAAKyC,EACL6X,IAAKF,KAETG,UAAW,SAAA1G,GACPmE,EAAgBnE,EAAK7T,MAEzB3C,SAAU,SAAA0G,GAAA,IAAGkW,EAAHlW,EAAGkW,SAAH,OACN1B,EACI0B,EAASlB,IAAI,SAAAtW,GAAK,OAAIA,EAAMzC,QAGpCwa,cAAe,SAAAC,IA/C3B,SAAA5G,GAChBD,GAAWC,EAAM,SAAKlU,EAAW,SAAAK,GAC7BuY,EAAS,GAAArb,OAAArB,OAAAiQ,GAAA,EAAAjQ,CAAKyc,GAAL,CAAatY,OA8CMwY,CADyBiC,EAAX5G,QAIjByE,EAAOhV,QAAU,EAAI,KAClB7G,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACshB,GAAA,EAAD,MACAxhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAf,aAQpBH,EAAAC,EAAAC,cAAC2c,EAAA,EAAKpV,KAAN,KACIzH,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CACImZ,SAAS,SACTje,QAAS,Y7BxDlB,SACnB2e,EACAjO,EACAD,EACAmT,EACArI,GAEI/J,IAAsC,IAAzBA,GAAU2C,YACvB3C,GAAUsB,KACNC,KAAKC,UAAU,CACXC,YAAa,UACb0L,YACAjO,WACAD,aACAmT,eACArI,Y6B0CoBkE,CACIne,EAAQkD,IACRgM,EACAC,EACAgD,EACA8H,GAEJ2H,EAAe,IACf1H,EAAU,IACN9c,EAAMslB,QAAQtlB,EAAMslB,UAE5Bhf,KAAMtF,EAAAC,EAAAC,cAACqkB,GAAAtkB,EAAD,MACNmD,KAAK,QAfT,QAmBApD,EAAAC,EAAAC,cAACud,GAAA,EAAD,CACI+G,gBAAgB,EAChBzG,cAAe,SAAA0G,GAAc,IAAXrN,EAAWqN,EAAXrN,KACVyE,EAAOhV,OAAS,EAChBsB,QAAQC,QACJ,2CAIR+a,GAAgB,GAChBhM,GAAWC,EAAM,SAAKlU,EAAW,SAAAK,GAC7B4f,GAAgB,GAChBrH,EAAS,GAAArb,OAAArB,OAAAiQ,GAAA,EAAAjQ,CAAKyc,GAAL,CAAatY,UAI9BvD,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CACIhC,KAAK,OACLkC,KACI4d,EACIljB,EAAAC,EAAAC,cAACwkB,GAAAzkB,EAAD,MAEAD,EAAAC,EAAAC,cAAC4wB,GAAA,EAAD,OANZ,UAaH/c,GAAe8H,EAAOhV,OACnB7G,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CACI9E,QAAS,WACLkjB,EAAe,IACf1H,EAAU,KAEdxW,KAAMtF,EAAAC,EAAAC,cAAC6wB,GAAA,EAAD,MACN3tB,KAAK,QANT,UAUA,SAKpBpD,EAAAC,EAAAC,cAAC4kB,GAAA,EAAD,CACI/jB,QAASua,EACTuD,OAAQ,KACRzd,SAAU,kBAAMma,EAAgB,MAEhCvb,EAAAC,EAAAC,cAAA,OACI4e,IAAI,UACJpZ,MAAO,CAAEyS,MAAO,QAChBpS,IAAKuV,MAIjB,OC1CO1c,eACXC,YApBoB,SAAAC,GACpB,MAAO,CACHgD,SAAUhD,EAAMgD,SAChBF,QAAS9C,EAAM8C,QACfoN,MAAOlQ,EAAMuK,KACbgB,SAAUvL,EAAMuL,SAChBG,WAAY1L,EAAM0L,aAIC,SAAC/B,GACxB,MAAO,CACHqB,QAAS,SAAA/B,GACLU,EAASgN,GAAgB1N,KAE7BgC,aAAc,SAAAjJ,GAAK,OAAI2H,EAASgN,GAAqB3U,OAKzDjC,CAvHa,SAAAG,GAAS,IAAAC,EACIC,mBAAS,IADbC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACfH,EADeK,EAAA,GACRG,EADQH,EAAA,GAAAI,EAGEL,mBAAS,IAHXM,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAGfwI,EAHevI,EAAA,GAGTsK,EAHStK,EAAA,GAIhBoK,EAAY5K,EAAM+D,QAAQvC,SAASwC,SAASC,MAAM,KAClDqnB,EAAa1gB,EAAU/C,OAAS,EAAI+C,EAAU,GAAK,GACzD,IAAK0gB,EAAY,OAAO,KACxB3qB,oBAAU,WACFX,EAAM8C,SACN9C,EAAM8K,QAAQ,CAAEmF,gBAAiBqb,IAEjCtH,GAAShkB,EAAO+I,EAAM+B,EAAS,EAAsB,SAAA/B,GACjD,IAAMyC,EAAa,GADsC3G,GAAA,EAAAC,GAAA,EAAAC,OAAAb,EAAA,IAEzD,QAAAc,EAAAC,EAAmB8D,EAAKyC,WAAxBtG,OAAAC,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,OAASgJ,EAAT7I,EAAAO,MACIiG,EAAWqC,EAAO/H,KAAO+H,GAH4B,MAAAlI,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAd,EAAA,MAAAC,GAIzD,IAAMsF,EAAO,GAJ4C0B,GAAA,EAAAC,GAAA,EAAAC,OAAA/H,EAAA,IAKzD,QAAAgI,EAAAC,EAAiBpD,EAAKsB,KAAtBnF,OAAAC,cAAA4G,GAAAG,EAAAC,EAAA/G,QAAAC,MAAA0G,GAAA,OAASpE,EAATuE,EAAA3G,MAA4B8E,EAAK1C,EAAK7B,KAAO6B,GALY,MAAAhC,GAAAqG,GAAA,EAAAC,EAAAtG,EAAA,YAAAoG,GAAA,MAAAI,EAAAvG,QAAAuG,EAAAvG,SAAA,WAAAoG,EAAA,MAAAC,GAOzDjM,EAAM8K,QAAQ,CACVU,aACAwE,MAAO3F,EACPzH,QAAS,GACTyI,SAAUtC,EAAKsC,cAI5B,CAACrL,EAAM8C,SAAU9C,EAAM+D,QAAQvC,SAASwC,WA1BrB,IAAAsE,EA4B2BtI,EAAM8C,SACjD9C,EAD2CI,OAAAwe,GAAA,EAAAxe,CAAA,GAEtC2I,EAFsC,CAEhCnG,QAAS,KAFlByI,EA5Bc/C,EA4Bd+C,SAAUzI,EA5BI0F,EA4BJ1F,QAAS4I,EA5BLlD,EA4BKkD,WAAYwE,EA5BjB1H,EA4BiB0H,MAIvC,IAAK3E,IAAaA,EAASvF,IAAK,OAAO,KACvC9F,EAAM8K,QAAQ,CAAEoG,aAAc7F,EAAS2E,QAjCjB,IAmCd6Y,EAASxd,EAATwd,KAER,OADIA,GAAM7oB,EAAM+K,aAAa,CAAEvE,KAAMqiB,EAAKpV,KAAMmQ,IAAKvY,EAAS+E,SACvDyY,GAAQrd,EACXxK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAC8wB,GAAA,EAAD,KACIhxB,EAAAC,EAAAC,cAAC8wB,GAAA,EAAK1C,QAAN,CAAcW,IAAI,UAAU1nB,IAAI,WAC5BvH,EAAAC,EAAAC,cAAC+wB,GAAD,CACInyB,MAAOA,EACPQ,SAAUA,EACV+K,SAAUA,EACVzI,QAASA,EACT4I,WAAYA,KAGpBxK,EAAAC,EAAAC,cAAC8wB,GAAA,EAAK1C,QAAN,CAAcW,IAAI,QAAQ1nB,IAAI,SACzB3F,EAAQkD,KACL9E,EAAAC,EAAAC,cAACgxB,GAAD,CACIpgB,OAAQwZ,EACR1oB,QAASA,EACTmP,WAAW,aAIlB1G,EAAS2E,MAAMsN,IAAI,SAAA4C,GAChB,GAAIlQ,EAAMkQ,GAAS,CACf,IAAM7V,EAAO2F,EAAMkQ,GACnB,OACIlf,EAAAC,EAAAC,cAAA,OAAKqH,IAAK2X,GACNlf,EAAAC,EAAAC,cAAA,OACIwF,MAAO,CACH0S,OAAQ,MACRqL,WAAY,OACZtL,MAAO,mBACPqQ,SAAU,WACV5E,KAAM,UAGd5jB,EAAAC,EAAAC,cAAA,OAAKwF,MAAO,CAAEyrB,WAAY,SACtBnxB,EAAAC,EAAAC,cAAC8oB,GAAD,CACIxe,WAAYA,EACZ5I,QAASA,EACTyH,KAAMA,MAKnB,OAAO,SAI1BrJ,EAAAC,EAAAC,cAACW,EAAA,EAAD,CACIE,QAASjC,EAAMwc,aACfuD,OAAQ,KACRzd,SAAU,kBAAM9B,EAASF,OAAAwe,GAAA,EAAAxe,CAAA,GAAKN,EAAN,CAAawc,aAAc,QAEnDtb,EAAAC,EAAAC,cAAA,OACI4e,IAAI,UACJpZ,MAAO,CAAEyS,MAAO,QAChBpS,IAAKjH,EAAMwc,iBAIvB,QC/DO1c,eAAWC,YAPF,SAAAC,GACpB,MAAO,CACH8C,QAAS9C,EAAM8C,QACfE,SAAUhD,EAAMgD,WAIEjD,CAvCX,SAAAG,GACX,IAAM4C,EAAU5C,EAAMoyB,eAAiBpyB,EAAM4C,QAC7C,OAAOA,EAAQyvB,OACXrxB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC+hB,GAAD,KACKrgB,EAAQyvB,OAAO/U,IAAI,SAAC2N,EAAOtM,GAAR,OAChB3d,EAAAC,EAAAC,cAAA,OACII,QAAS,kBACLtB,EAAM+D,QAAQW,KAAK,YAAcumB,EAAM7f,OAE3C7C,IAAKoW,GAEL3d,EAAAC,EAAAC,cAAC0gB,GAAA,EAAD,CACIxd,KAAK,QACLsC,MAAO,CAAEyS,MAAO,QAChBiJ,UAAU,EACVP,MAAO7gB,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CAAQhC,KAAK,WAAb,cACPtC,MACId,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAMwF,MAAO,CAAEwb,WAAY,SAA3B,IACM+I,EAAMqH,QAEZtxB,EAAAC,EAAAC,cAACunB,GAAD,CAAY5d,GAAIogB,EAAM7f,eAQlD,uCCyaOxL,eACXC,YAfoB,SAAAC,GACpB,MAAO,CACH8C,QAAS9C,EAAM8C,QACf+I,gBAAiB7L,EAAM6L,gBACvBH,WAAY1L,EAAM0L,aAIC,SAAC/B,GACxB,MAAO,CACHsB,aAAc,SAAAjJ,GAAK,OAAI2H,EAASgN,GAAqB3U,OAKzDjC,CA/biB,SAAAG,GACjBA,EAAM+K,aAAa,CAAEvE,KAAM,OAAQod,IAAK,iBADd,IAGlBhhB,EAAyC5C,EAAzC4C,QAAS+I,EAAgC3L,EAAhC2L,gBAAgC3L,EAAfwL,WAClC,IAAK5I,IAAYA,EAAQkD,IAAK,OAAO,KAErC,IAAMwH,EAAe1K,EAAQ0K,aACxB5F,OAAO,SAAAC,GAAI,OAAIgE,EAAgBhE,KAC/B2V,IAAI,SAAA3V,GAAI,OAAIgE,EAAgBhE,KAgI3B4qB,EAAY,GACdC,EAAMpyB,OAAAiQ,GAAA,EAAAjQ,CAAOkN,GACjBklB,EAASA,EAAOC,KAAK,SAACxxB,EAAGyxB,GAAJ,OACjB,IAAIC,KAAK1xB,EAAE2mB,MAAMgL,UAAY,IAAID,KAAKD,EAAE9K,MAAMgL,UAAY,GAAK,IA3IzC,IAAA/tB,GAAA,EAAAC,GAAA,EAAAC,OAAAb,EAAA,IA6I1B,QAAAc,EAAAC,EAAwButB,EAAxBttB,OAAAC,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,EAAgC,KAAvB0I,EAAuBvI,EAAAO,MACtBstB,EAAQ,GACVtlB,EAAY8E,OAASzP,EAAQkD,KAAOyH,EAAYulB,KAAOlwB,EAAQiI,IAC/DgoB,EAAMnuB,KAAK,YAEX6I,EAAYulB,KAAOlwB,EAAQkD,IACvByH,EAAYlC,UACZwnB,EAAMnuB,KAAK,QACN6I,EAAY+kB,OACZO,EAAMnuB,KAAK,SADSmuB,EAAMnuB,KAAK,SAGhC6I,EAAY5F,MAAQ4F,EAAY+kB,QAChCO,EAAMnuB,KAAK,OACXmuB,EAAMnuB,KAAK,UAEXmuB,EAAMnuB,KAAK,gBACN6I,EAAY+kB,OACZO,EAAMnuB,KAAK,SADSmuB,EAAMnuB,KAAK,SAIrC6I,EAAY8E,OAASzP,EAAQkD,MAChCyH,EAAYlC,UACZwnB,EAAMnuB,KAAK,OACN6I,EAAY+kB,OACZO,EAAMnuB,KAAK,SADSmuB,EAAMnuB,KAAK,SAGhC6I,EAAY5F,MAAQ4F,EAAY+kB,QAChCO,EAAMnuB,KAAK,QACXmuB,EAAMnuB,KAAK,UAEXmuB,EAAMnuB,KAAK,aACN6I,EAAY+kB,OACZO,EAAMnuB,KAAK,SADSmuB,EAAMnuB,KAAK,UAMhD,IAAM0G,EACFmC,EAAYulB,KAAOlwB,EAAQkD,IAAMyH,EAAYulB,GAAKvlB,EAAY8E,KAElEkgB,EAAU7tB,KAAK,CACX6D,IAAKgqB,EAAU1qB,OACfgrB,QACAznB,OACAsR,KAAMnP,EAAY5F,KAClB2qB,OAAQ/kB,EAAY+kB,OACpB1K,KAAMra,EAAYqa,KAClBvc,SAAUkC,EAAYlC,SACtBzD,OAAQ2F,EAAY3F,OACpB2F,iBA9LkB,MAAA5H,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAd,EAAA,MAAAC,GAiM1B,OACI/D,EAAAC,EAAAC,cAACutB,GAAA,EAAD,CACIC,mBAAmB,QACnBhoB,MAAO,CAAEkqB,aAAc,QACvBC,sBAAsB,EACtBlC,WAAS,GAER6D,EAAOlV,IAAI,SAAC/P,EAAaoR,GACtB,IAAMkU,EAAQ,GAEVtlB,EAAY8E,OAASzP,EAAQkD,KAC7ByH,EAAYulB,KAAOlwB,EAAQiI,IAE3BgoB,EAAMnuB,KAAK,YAEX6I,EAAYulB,KAAOlwB,EAAQkD,IACvByH,EAAYlC,UACZwnB,EAAMnuB,KAAK,QACN6I,EAAY+kB,OACZO,EAAMnuB,KAAK,SADSmuB,EAAMnuB,KAAK,SAGhC6I,EAAY5F,MAAQ4F,EAAY+kB,QAChCO,EAAMnuB,KAAK,OACXmuB,EAAMnuB,KAAK,UAEXmuB,EAAMnuB,KAAK,gBACN6I,EAAY+kB,OACZO,EAAMnuB,KAAK,SADSmuB,EAAMnuB,KAAK,SAIrC6I,EAAY8E,OAASzP,EAAQkD,MAChCyH,EAAYlC,UACZwnB,EAAMnuB,KAAK,OACN6I,EAAY+kB,OACZO,EAAMnuB,KAAK,SADSmuB,EAAMnuB,KAAK,SAGhC6I,EAAY5F,MAAQ4F,EAAY+kB,QAChCO,EAAMnuB,KAAK,QACXmuB,EAAMnuB,KAAK,UAEXmuB,EAAMnuB,KAAK,aACN6I,EAAY+kB,OACZO,EAAMnuB,KAAK,SADSmuB,EAAMnuB,KAAK,UAMhD,IAAM0G,EACFmC,EAAYulB,KAAOlwB,EAAQkD,IACrByH,EAAYulB,GACZvlB,EAAY8E,KAEtBkgB,EAAU7tB,KAAK,CACX6D,IAAKgqB,EAAU1qB,OACfgrB,QACAznB,OACAsR,KAAMnP,EAAY5F,KAClB2qB,OAAQ/kB,EAAY+kB,OACpB1K,KAAMra,EAAYqa,KAClBvc,SAAUkC,EAAYlC,SACtBzD,OAAQ2F,EAAY3F,OACpB2F,gBAtD4B,IAwDlBoe,EAAWpe,EAAjB5F,KACR,OACI3G,EAAAC,EAAAC,cAACutB,GAAA,EAASG,MAAV,CACIloB,MAAO,CAAE0a,QAAS,GAClByN,OACI7tB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgF,SAAA,KACIjF,EAAAC,EAAAC,cAAA,OACIwF,MAAO,CACH8hB,QAAS,OACTuK,WAAY,WAGhB/xB,EAAAC,EAAAC,cAACkG,EAAA,EAAD,CACIuhB,MAEI,kBADApb,EAAY3F,OAEN,OAEA,cADA2F,EAAY3F,OAEZ,MACA,UAGd5G,EAAAC,EAAAC,cAAC8vB,GAAA,EAAWC,UAAZ,CACIC,SAAU,CAAEjM,KAAM,GAClBve,MAAO,CAAE8hB,QAAS,SAAU7hB,OAAQ,IAEnB,WAAhBglB,EAAOvjB,KACFujB,EAAOX,OACS,UAAhBW,EAAOvjB,KACPujB,EAAOV,MAAQ,WACC,SAAhBU,EAAOvjB,KACPujB,EAAOT,SACP,IAEVlqB,EAAAC,EAAAC,cAACunB,GAAD,CACI1B,QAAQ,EACRlc,GACI0C,EAAYulB,KAAOlwB,EAAQkD,IACrByH,EAAYulB,GACZvlB,EAAY8E,QAI9BrR,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACwmB,GAAA,EAAD,CAASC,SAAUpa,EAAYqa,KAAMC,MAAI,MAIrDtf,IAAKoW,GAIL3d,EAAAC,EAAAC,cAACirB,GAAA,EAAD,CACI6G,OAAO,WACP3uB,KAAK,QACL+d,UAAQ,EACRgK,OAAQ,CACJC,IAAK,EACLC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,IAGR1rB,EAAAC,EAAAC,cAACirB,GAAA,EAAa1jB,KAAd,CAAmB0V,MAAM,QACpB0U,EAAMvV,IAAI,SAAA2V,GACP,IAAItK,EACAsK,EAAIprB,OAAS,EAAI,WAAa,QAIlC,MAHY,UAARorB,IACAtK,EAAQ,WAGR3nB,EAAAC,EAAAC,cAACgyB,GAAA,EAAD,CAAKvK,MAAOA,EAAOpgB,IAAK0qB,GACnBA,EAAIE,kBAKrBnyB,EAAAC,EAAAC,cAACirB,GAAA,EAAa1jB,KAAd,CAAmB0V,MAAM,oBACrBnd,EAAAC,EAAAC,cAACunB,GAAD,CACI5d,GACI0C,EAAYulB,KAAOlwB,EAAQkD,IACrByH,EAAYulB,GACZvlB,EAAY8E,QAK9BrR,EAAAC,EAAAC,cAACirB,GAAA,EAAa1jB,KAAd,CAAmB0V,MAAM,QAEjBnd,EAAAC,EAAAC,cAAC6tB,GAAD,CACI5D,YAAY,EACZN,UAAW,EACX1M,MAAM,UACNwM,QAAS,CACL,CACIA,QAAS,CAACpd,EAAY5F,MACtBY,IAAK,IAGbkiB,UAAU,KAKrBld,EAAY+kB,QACTtxB,EAAAC,EAAAC,cAACirB,GAAA,EAAa1jB,KAAd,CAAmB0V,MAAM,UACpB5Q,EAAY+kB,QAGrBtxB,EAAAC,EAAAC,cAACirB,GAAA,EAAa1jB,KAAd,CAAmB0V,MAAM,QACpByJ,KAAKwL,OACF,IAAIT,KAAKplB,EAAYqa,MACrB,wBAIPra,EAAYlC,UAAYkC,EAAY+d,YACjCtqB,EAAAC,EAAAC,cAACirB,GAAA,EAAa1jB,KAAd,CAAmB0V,MAAM,YACrBnd,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CACIhC,KAAK,OACL9C,QAAS,kBACLtB,EAAM+D,QAAQW,KACV,eACI6I,EAAY+d,cAIvB/d,EAAYlC,WAIzBrK,EAAAC,EAAAC,cAACirB,GAAA,EAAa1jB,KAAd,CAAmB0V,MAAM,UACT,kBAAXvW,OACG5G,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgF,SAAA,KACIjF,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CACIwZ,QAAQ,EACRxb,KAAK,OACL9C,QAAS,kBACLyf,UAAUsS,kBACNzwB,EAAQkD,IACRwtB,OAAO/lB,YAAYzH,OAN/B,UAYCwtB,OAAO/lB,YAAY8E,OAChBzP,EAAQkD,KACR9E,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CACIhC,KAAK,OACL9C,QAAS,kBACLyf,UAAUwS,mBACN3wB,EAAQkD,IACRwtB,OAAO/lB,YAAYzH,OAL/B,YAcR8B,QAAU,qBChY/B/H,eAZS,SAAAC,GACpB,MAAO,CACH8C,QAAS9C,EAAM8C,UAII,SAAC6G,GACxB,MAAO,CACHsB,aAAc,SAAAjJ,GAAK,OAAI2H,EAASgN,GAAqB3U,OAI9CjC,CA9CF,SAAAG,GAKT,OAJAW,oBAAU,WACNX,EAAM+K,aAAa,CAAEvE,KAAM,OAAQod,IAAK,cACzC,IAEI5jB,EAAM4C,QAAQkD,IACjB9E,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC8wB,GAAA,EAAD,CACItrB,MAAO,CACH+d,WAAY,cACZ+O,UAAW,OACX7sB,OAAQ,IACRuc,UAAW,UAGfliB,EAAAC,EAAAC,cAAC8wB,GAAA,EAAK1C,QAAN,CAAcW,IAAI,UAAU1nB,IAAK,GAC7BvH,EAAAC,EAAAC,cAAC6iB,GAAD,CACI3b,KAAK,OACLyb,QAAQ,QACRjhB,QAAS5C,EAAM4C,WAGvB5B,EAAAC,EAAAC,cAAC8wB,GAAA,EAAK1C,QAAN,CAAcW,IAAI,SAAS1nB,IAAK,GAC5BvH,EAAAC,EAAAC,cAACuyB,GAAD,OAEJzyB,EAAAC,EAAAC,cAAC8wB,GAAA,EAAK1C,QAAN,CAAcW,IAAI,eAAe1nB,IAAK,GAClCvH,EAAAC,EAAAC,cAACwyB,GAAD,SAKZ1yB,EAAAC,EAAAC,cAAA,oCC2MOtB,eACXC,YAvBoB,SAAAC,GACpB,MAAO,CACHgD,SAAUhD,EAAMgD,SAChBF,QAAS9C,EAAM8C,QACf+wB,WAAY7zB,EAAMuK,KAClBgB,SAAUvL,EAAMuL,SAChBG,WAAY1L,EAAM0L,WAClBD,aAAczL,EAAMyL,aACpBG,UAAW5L,EAAM4L,UACjBwF,aAAcpR,EAAMoR,eAID,SAACzH,GACxB,MAAO,CACHqB,QAAS,SAAA/B,GACLU,EAASgN,GAAgB1N,KAE7BgC,aAAc,SAAAjJ,GAAK,OAAI2H,EAASgN,GAAqB3U,OAKzDjC,CAxOmB,SAAAG,GAAS,IAExB4C,EAMA5C,EANA4C,QACA4I,EAKAxL,EALAwL,WACAmoB,EAIA3zB,EAJA2zB,WACApoB,EAGAvL,EAHAuL,aACAG,EAEA1L,EAFA0L,UACAwF,EACAlR,EADAkR,aAPwBjR,EAUFC,mBAAS,IAVPC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAUrB+P,EAVqB7P,EAAA,GAUdyzB,EAVczzB,EAAA,GAAAI,EAWRL,oBAAS,IAAIyyB,MAAOC,WAAjCiB,EAXqBzzB,OAAAC,EAAA,EAAAD,CAAAG,EAAA,MAatBuzB,EAAY,SAAC7yB,EAAGyxB,GAClB,IAAMqB,EAAK9yB,EAAE+yB,cAActsB,OAAO,SAAAC,GAAI,OAAIA,EAAKyD,OAASxI,EAAQkD,MAC1DmuB,EAAKvB,EAAEsB,cAActsB,OAAO,SAAAC,GAAI,OAAIA,EAAKyD,OAASxI,EAAQkD,MAChE,OAAkB,IAAdiuB,EAAGlsB,QAAgBosB,EAAGpsB,OAAS,EAAU,EACpCksB,EAAGlsB,OAAS,GAAmB,IAAdosB,EAAGpsB,QAAsB,EAC5B,IAAdksB,EAAGlsB,QAA8B,IAAdosB,EAAGpsB,OAAqB,EAEzC,IAAI8qB,KAAKoB,EAAG,GAAGnM,MAAMgL,UACxB,IAAID,KAAKsB,EAAG,GAAGrM,MAAMgL,UACnB,GACC,GA8Df,GAxDAjyB,oBAAU,WACN,GAAIuQ,EAAc,CACd,IAAMgjB,EAAWhjB,EACZxJ,OAAO,SAAAC,GAAI,OAAIgsB,EAAWhsB,KAC1B2V,IAAI,SAAA3V,GAAI,OAAIgsB,EAAWhsB,KAEtBwsB,EAAiB,GACjBC,EAAc,GAChBC,EAAQj0B,OAAAiQ,GAAA,EAAAjQ,CAAO4P,GAPLnL,GAAA,EAAAC,GAAA,EAAAC,OAAAb,EAAA,IAQd,IARc,IAQdc,EARcmR,EAAA,eAQL9L,EARKrF,EAAAO,MASN+uB,EAAeD,EAASzJ,UAAU,SAAAjjB,GAClC,OAAOA,EAAK7B,IAAI6rB,aAAetnB,EAAKvE,IAAI6rB,cAEtB,IAAlB2C,EAEIjqB,EAAK2pB,eACL3pB,EAAK2pB,cAAcnsB,OAAS,GAC5B,IAAI8qB,KAAKtoB,EAAK2pB,cAAc,GAAGpM,MAAMgL,UACjCiB,EAEJM,EAAezvB,KAAK2F,GAEpB+pB,EAAY1vB,KAAK2F,GAGrBgqB,EAASC,GAAgBjqB,GAhBjCpF,EAAiBivB,EAAjBhvB,OAAAC,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,EAA2BsR,IARb,MAAAxQ,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAd,EAAA,MAAAC,GA4Bd,IA5Bc,IAAAwvB,EAAA,WA4BT,IAAIlqB,EAAImqB,EAAA1e,GACH6I,EAAQ0V,EAASzJ,UAAU,SAAAjjB,GAC7B,SACIA,GACAA,EAAKqsB,eACLrsB,EAAKqsB,cAAcnsB,OAAS,IAGxB,IAAI8qB,KAAKhrB,EAAKqsB,cAAc,IAAIpB,UAChC,IAAID,KAAKtoB,EAAK2pB,cAAc,IAAIpB,aAI7B,IAAXjU,EACA0V,EAAS3vB,KAAK2F,GAEdgqB,EAAS1c,OAAOgH,EAAO,EAAGtU,IAhBlCyL,EAAA,EAAA0e,EAAiBJ,EAAjBte,EAAA0e,EAAA3sB,OAAAiO,IAA8Bye,IAoB9B,IAAIE,EAAW,GAAAhzB,OAAO0yB,EAAP/zB,OAAAiQ,GAAA,EAAAjQ,CAA0Bi0B,IACpB,IAAjBrkB,EAAMnI,SACN4sB,EAAcA,EAAYhC,KAAKqB,IAEnCF,EAASa,KAEd,CAACvjB,EAAcyiB,KACb/wB,EAAQkD,IAAK,OAAO,KAEzB,IAAI/C,EAAoB,GAvFIgJ,GAAA,EAAAC,GAAA,EAAAC,OAAA/H,EAAA,IAwF5B,QAAAgI,EAAAC,EAAqBvJ,EAAQkJ,WAA7B5G,OAAAC,cAAA4G,GAAAG,EAAAC,EAAA/G,QAAAC,MAAA0G,GAAA,EAAyC,KAAhCV,EAAgCa,EAAA3G,MACjCgG,EAAaF,KACbtI,EAAiB,GAAAtB,OAAArB,OAAAiQ,GAAA,EAAAjQ,CACV2C,GADU3C,OAAAiQ,GAAA,EAAAjQ,CAEVmL,EAAaF,GAAU2oB,cAActsB,OACpC,SAAAC,GAAI,MACc,aAAdA,EAAKyN,MAAuBzN,EAAKyD,OAASxI,EAAQkD,UA9F1C,MAAAH,GAAAqG,GAAA,EAAAC,EAAAtG,EAAA,YAAAoG,GAAA,MAAAI,EAAAvG,QAAAuG,EAAAvG,SAAA,WAAAoG,EAAA,MAAAC,GAAA,IAAAI,GAAA,EAAAC,GAAA,EAAAC,OAAArI,EAAA,IAmG5B,QAAAsI,EAAAC,EAAkB7J,EAAQwJ,OAA1BlH,OAAAC,cAAAkH,GAAAG,EAAAC,EAAArH,QAAAC,MAAAgH,GAAA,EAAkC,KAAzBf,EAAyBkB,EAAAjH,MAC1BmG,EAAUJ,KACVvI,EAAiB,GAAAtB,OAAArB,OAAAiQ,GAAA,EAAAjQ,CACV2C,GADU3C,OAAAiQ,GAAA,EAAAjQ,CAEVsL,EAAUJ,GAAO0oB,cAActsB,OAC9B,SAAAC,GAAI,MACc,aAAdA,EAAKyN,MAAuBzN,EAAKyD,OAASxI,EAAQkD,UAzG1C,MAAAH,GAAA2G,GAAA,EAAAC,EAAA5G,EAAA,YAAA0G,GAAA,MAAAI,EAAA7G,QAAA6G,EAAA7G,SAAA,WAAA0G,EAAA,MAAAC,GA8G5BxJ,EAAoBA,EACf0vB,KArFqB,SAACxxB,EAAGyxB,GAAJ,OACtB,IAAIC,KAAK1xB,EAAE2mB,MAAMgL,UAAY,IAAID,KAAKD,EAAE9K,MAAMgL,UAAY,GAAK,IAqF9DtV,IAAI,SAAA3V,GAAI,OAAIA,EAAK4gB,QAAQrI,SACzBwU,MAAM,EAAG,IAEd,IAAMC,EAAWv0B,OAAAiQ,GAAA,EAAAjQ,CACV,IAAIkS,IAAJ,GAAA7Q,OAAArB,OAAAiQ,GAAA,EAAAjQ,CACIwC,EAAQ8J,aADZtM,OAAAiQ,GAAA,EAAAjQ,CAEIwC,EAAQoK,SAFZ5M,OAAAiQ,GAAA,EAAAjQ,CAGI4P,EAAMsN,IAAI,SAAAjT,GAAI,OAAIA,EAAKvE,OAH3B1F,OAAAiQ,GAAA,EAAAjQ,CAII2C,MAQX,OALK6xB,KAAQ1jB,EAAcyjB,IACvB30B,EAAM8K,QAAQ,CAAEoG,aAAcyjB,IAElC30B,EAAM+K,aAAa,CAAEvE,KAAM,YAAaod,IAAK,KAEtC5T,EAAMsN,IAAI,SAAA3V,GACb,IAAI2N,EAAO,KACLuf,EAAOltB,EAAKqsB,cAActsB,OAAO,SAAApC,GAAG,OAAIA,EAAI8F,OAASxI,EAAQkD,MAC7DR,EAAMuvB,EAAKhtB,OAAS,EAAIgtB,EAAK,GAAK,KACxC,GAAIvvB,EACA,OAAQA,EAAI8P,MACR,IAAK,qBACDE,EAAO,2BAEP,MACJ,IAAK,YACDA,EAAO,eAEP,MACJ,IAAK,YACDA,EAAO,uBAEP,MAEJ,IAAK,UACDA,EAAO,mBAEP,MACJ,IAAK,eACDA,EAAO,oBAEP,MACJ,IAAK,OACDA,EAAO,gBAEP,MACJ,IAAK,UACDA,EAAO,kBAEP,MACJ,QACIA,EAAO,KAInB,OACItU,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgF,SAAA,KACIjF,EAAAC,EAAAC,cAAA,OACIwF,MAAO,CACH0S,OAAQ,MACRqL,WAAY,OACZtL,MAAO,mBACPqQ,SAAU,WACV5E,KAAM,UAGd5jB,EAAAC,EAAAC,cAAA,OAAKwF,MAAO,CAAEyrB,WAAY,SACrB7c,GACGtU,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgF,SAAA,KACIjF,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAACunB,GAAD,CACI5d,GAAIvF,EAAI8F,KACR0b,OAAO,EACP7I,MAAM,EACNvX,MAAO,CAAEwb,WAAY,UACtB,IACF5M,GAELtU,EAAAC,EAAAC,cAACooB,GAAA,EAAD,CACIllB,KAAK,aACLsC,MAAO,CAAEC,OAAQ,YAI7B3F,EAAAC,EAAAC,cAAC8oB,GAAD,CACIxe,WAAYA,EACZ5I,QAASA,EACTyH,KAAM1C,EACN4D,aAAcA,EACdG,UAAWA,WCgQpB9L,eAAWC,YANF,SAAAC,GACpB,MAAO,CACHiD,kBAAmBjD,EAAMiD,oBAIPlD,CA7cF,SAAAG,GAAS,IACrB+C,EAAsB/C,EAAtB+C,kBACF+xB,EAAgB,SAAAntB,GAAI,OACtBA,EAAK4gB,QAAQoD,OAAOV,MACd,IAAMtjB,EAAK4gB,QAAQoD,OAAOV,MAC1BtjB,EAAK4gB,QAAQoD,OAAOX,QAAUrjB,EAAK4gB,QAAQoD,OAAOT,UAC5D,OAAOnoB,EAAkBua,IAAI,SAAA3V,GACzB,IAAI2N,EAAO,KAEX,OAAQ3N,EAAKyN,MACT,IAAK,cACDE,EACItU,EAAAC,EAAAC,cAAA,YACK,IACDF,EAAAC,EAAAC,cAACunB,GAAD,CAAY5d,GAAIlD,EAAKyD,OAFzB,kBAKJ,MACJ,IAAK,iBACDkK,EACItU,EAAAC,EAAAC,cAAA,YACKyG,EAAKyD,KADV,oBAKJ,MACJ,IAAK,iBACDkK,EACItU,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAACunB,GAAD,CAAY5d,GAAIlD,EAAKyD,OADzB,sCAKJ,MACJ,IAAK,aACDkK,EACItU,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAACunB,GAAD,CAAY5d,GAAIlD,EAAKyD,OADzB,OACsC,IAClCpK,EAAAC,EAAAC,cAACunB,GAAD,CAAY5d,GAAIlD,EAAK4gB,QAAQ1a,SAFjC,oBAKJ,MACJ,IAAK,WACDyH,EACItU,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAACunB,GAAD,CAAY5d,GAAIlD,EAAKyD,OADzB,OACsC,IAClCpK,EAAAC,EAAAC,cAACunB,GAAD,CAAY5d,GAAIlD,EAAK4gB,QAAQ1a,SAFjC,2BAMJ,MACJ,IAAK,oBACL,IAAK,qBACDyH,EACItU,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAACunB,GAAD,CAAY5d,GAAIlD,EAAKyD,OAAS,IACf,sBAAdzD,EAAKyN,KACA,+BACA,qBAAsB,IAC5BpU,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CACIhC,KAAK,OACL9C,QAAS,kBACLtB,EAAM+D,QAAQW,KAAd,aAAAjD,OACiBkG,EAAKyD,KADtB,KAAA3J,OAEQkG,EAAK4gB,QAAQ7H,WAKxB/Y,EAAK4gB,QAAQ2C,UACR,IAhBd,KAoBJ,MACJ,IAAK,uBACD5V,EACItU,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAACunB,GAAD,CAAY5d,GAAIlD,EAAKyD,OADzB,WAC0C,IACrCzD,EAAK4gB,QAAQ2C,SAFlB,mBAKJ,MACJ,IAAK,WACL,IAAK,YACD5V,EACItU,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAACunB,GAAD,CAAY5d,GAAIlD,EAAKyD,OAAS,IACf,aAAdzD,EAAKyN,KACA,mBACA,cAAe,IACrBpU,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CACIhC,KAAK,OACL9C,QAAS,kBACLtB,EAAM+D,QAAQW,KAAd,UAAAjD,OACckG,EAAKyD,KADnB,KAAA3J,OAC2BkG,EAAK4gB,QAAQ7H,WAI3C/Y,EAAK4gB,QAAQ2C,UACR,IAdd,KAkBJ,MACJ,IAAK,cACD5V,EACItU,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAACunB,GAAD,CAAY5d,GAAIlD,EAAKyD,OADzB,WAC0C,IACrCzD,EAAK4gB,QAAQ2C,SAFlB,gBAKJ,MACJ,IAAK,WACL,IAAK,YACD5V,EACItU,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAACunB,GAAD,CAAY5d,GAAIlD,EAAKyD,OAAS,IACf,aAAdzD,EAAKyN,KACA,2BACA,iBAAkB,IACxBpU,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CACIhC,KAAK,OACL9C,QAAS,kBACLtB,EAAM+D,QAAQW,KAAd,SAAAjD,OACakG,EAAKyD,KADlB,KAAA3J,OAC0BkG,EAAK4gB,QAAQ7H,WAI1C/Y,EAAK4gB,QAAQ2C,UACR,IAdd,KAkBJ,MACJ,IAAK,cACD5V,EACItU,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAACunB,GAAD,CAAY5d,GAAIlD,EAAKyD,OADzB,WAC0C,IACrCzD,EAAK4gB,QAAQ2C,SAFlB,eAKJ,MACJ,IAAK,WACD5V,EACItU,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAACunB,GAAD,CAAY5d,GAAIlD,EAAKyD,OADzB,UAEIpK,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CACIhC,KAAK,OACL9C,QAAS,kBACLtB,EAAM+D,QAAQW,KAAd,SAAAjD,OACakG,EAAKyD,KADlB,KAAA3J,OAC0BkG,EAAK4gB,QAAQ7H,WAI1C/Y,EAAK4gB,QAAQ2C,SARlB,MAQ+BvjB,EAAK4gB,QAAQpG,MAR5C,KASU,IAXd,QAYSnhB,EAAAC,EAAAC,cAACunB,GAAD,CAAY5d,GAAIlD,EAAK4gB,QAAQpY,QAZtC,MAeJ,MACJ,IAAK,qBACL,IAAK,sBACDmF,EACItU,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAACunB,GAAD,CAAY5d,GAAIlD,EAAKyD,OAAS,IACf,uBAAdzD,EAAKyN,KACA,YACA,YAJV,cAMIpU,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CACIhC,KAAK,OACL9C,QAAS,kBACLtB,EAAM+D,QAAQW,KAAd,SAAAjD,OACakG,EAAKyD,KADlB,KAAA3J,OAC0BkG,EAAK4gB,QAAQ7H,WAI1C/Y,EAAK4gB,QAAQ2C,SARlB,MAQ+BvjB,EAAK4gB,QAAQpG,MAR5C,KASU,IAfd,MAgBOnhB,EAAAC,EAAAC,cAACunB,GAAD,CAAY5d,GAAIlD,EAAK4gB,QAAQnI,QAhBpC,MAmBJ,MACJ,IAAK,iBACD9K,EACItU,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAACunB,GAAD,CAAY5d,GAAIlD,EAAKyD,OADzB,qCAGIpK,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CACIhC,KAAK,OACL9C,QAAS,kBACLtB,EAAM+D,QAAQW,KAAd,eAAAjD,OACmBkG,EAAK4gB,QAAQ7H,WAInC/Y,EAAK4gB,QAAQ2C,UACR,IAZd,MAaQvjB,EAAK4gB,QAAQwM,GAbrB,KAgBJ,MACJ,IAAK,oBACDzf,EACItU,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAACunB,GAAD,CAAY5d,GAAIlD,EAAKyD,OADzB,sBACqD,IAChDzD,EAAK4gB,QAAQ2C,SAFlB,MAGIlqB,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CACIhC,KAAK,OACL9C,QAAS,kBACLtB,EAAM+D,QAAQW,KAAd,eAAAjD,OACmBkG,EAAK4gB,QAAQ+C,eAInC3jB,EAAK4gB,QAAQyM,cAXtB,KAgBJ,MACJ,IAAK,uBACD1f,EACItU,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAACunB,GAAD,CAAY5d,GAAIlD,EAAKyD,OADzB,yBACwD,IACnDzD,EAAK4gB,QAAQ2C,SAFlB,MAGIlqB,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CACIhC,KAAK,OACL9C,QAAS,kBACLtB,EAAM+D,QAAQW,KAAd,eAAAjD,OACmBkG,EAAK4gB,QAAQ+C,eAInC3jB,EAAK4gB,QAAQyM,cAXtB,KAgBJ,MACJ,IAAK,kBACD1f,EACItU,EAAAC,EAAAC,cAAA,uBACa,IACTF,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CACIhC,KAAK,OACL9C,QAAS,kBACLtB,EAAM+D,QAAQW,KAAd,eAAAjD,OACmBkG,EAAK4gB,QAAQ+C,eAInC3jB,EAAK4gB,QAAQyM,cAVtB,8BAeJ,MACJ,IAAK,mBACD1f,EACItU,EAAAC,EAAAC,cAAA,yBACeyG,EAAK4gB,QAAQ2C,SAD5B,eACkD,IAC9ClqB,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CACIhC,KAAK,OACL9C,QAAS,kBACLtB,EAAM+D,QAAQW,KAAd,eAAAjD,OACmBkG,EAAK4gB,QAAQ+C,eAInC3jB,EAAK4gB,QAAQyM,cAVtB,8BAeJ,MACJ,IAAK,aACD1f,EACItU,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAACunB,GAAD,CAAY5d,GAAIlD,EAAKyD,OADzB,YAC2C,IACtC0pB,EAAcntB,GAFnB,oBAE2C,IACvC3G,EAAAC,EAAAC,cAACunB,GAAD,CAAY5d,GAAIlD,EAAK4gB,QAAQlW,OAHjC,eAIIrR,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CACIhC,KAAK,OACL9C,QAAS,kBACLtB,EAAM+D,QAAQW,KAAd,eAAAjD,OACmBkG,EAAK4gB,QAAQ+C,eAInC3jB,EAAK4gB,QAAQyM,cAZtB,KAiBJ,MACJ,IAAK,iBACD1f,EACItU,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAACunB,GAAD,CAAY5d,GAAIlD,EAAKyD,OADzB,iBACgD,IAC5CpK,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CACIhC,KAAK,OACL9C,QAAS,kBACLtB,EAAM+D,QAAQW,KAAd,eAAAjD,OACmBkG,EAAK4gB,QAAQ+C,eAInC3jB,EAAK4gB,QAAQyM,cAVtB,KAeJ,MACJ,IAAK,gBACD1f,EACItU,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAACunB,GAAD,CAAY5d,GAAIlD,EAAKyD,OADzB,mBACkD,IAC9CpK,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CACIhC,KAAK,OACL9C,QAAS,kBACLtB,EAAM+D,QAAQW,KAAd,eAAAjD,OACmBkG,EAAK4gB,QAAQ+C,eAInC3jB,EAAK4gB,QAAQyM,cAEjBrtB,EAAK4gB,QAAQ0M,cAAcptB,OAAS,EACjC7G,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgF,SAAA,KACK,IADL,YAEc,IACT0B,EAAK4gB,QAAQ0M,cAAc3X,IAAI,SAAA4X,GAAE,OAC9Bl0B,EAAAC,EAAAC,cAACunB,GAAD,CAAY5d,GAAIqqB,MAChB,KAGR,GAEHvtB,EAAK4gB,QAAQ4M,gBAAgBttB,OAAS,EACnC7G,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgF,SAAA,KACK,IADL,cAEgB,IACX0B,EAAK4gB,QAAQ4M,gBAAgB7X,IAAI,SAAA4X,GAAE,OAChCl0B,EAAAC,EAAAC,cAACunB,GAAD,CAAY5d,GAAIqqB,MAChB,KAGR,GAhCR,KAqCJ,MACJ,IAAK,uBACD5f,EACItU,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAACunB,GAAD,CAAY5d,GAAIlD,EAAKyD,OADzB,WAC0C,IACtCpK,EAAAC,EAAAC,cAACunB,GAAD,CAAY5d,GAAIlD,EAAK4gB,QAAQ3lB,UAFjC,iBAGI5B,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CACIhC,KAAK,OACL9C,QAAS,kBACLtB,EAAM+D,QAAQW,KAAd,eAAAjD,OACmBkG,EAAK4gB,QAAQ+C,eAInC3jB,EAAK4gB,QAAQyM,cAXtB,KAgBJ,MACJ,IAAK,kBACD1f,EACItU,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAACunB,GAAD,CAAY5d,GAAIlD,EAAKyD,OADzB,SACwC,IACpCpK,EAAAC,EAAAC,cAACunB,GAAD,CAAY5d,GAAIlD,EAAK4gB,QAAQ3lB,UAFjC,eAGI5B,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CACIhC,KAAK,OACL9C,QAAS,kBACLtB,EAAM+D,QAAQW,KAAd,eAAAjD,OACmBkG,EAAK4gB,QAAQ+C,eAInC3jB,EAAK4gB,QAAQyM,cAXtB,KAgBJ,MACJ,IAAK,aACD1f,EACItU,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAACunB,GAAD,CAAY5d,GAAIlD,EAAKyD,OADzB,SACwC,IACnC0pB,EAAcntB,GAFnB,mBAGMA,EAAK4gB,QAAQ6C,KAAmC,IAA5BzjB,EAAK4gB,QAAQ6C,IAAIvjB,OAEjCF,EAAK4gB,QAAQ6C,IAAI9N,IAAI,SAAA1a,GAAO,OACxB5B,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgF,SAAA,KACIjF,EAAAC,EAAAC,cAACunB,GAAD,CAAY5d,GAAIjI,IADpB,OAFJ,OAJV,cAWI5B,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CACIhC,KAAK,OACL9C,QAAS,kBACLtB,EAAM+D,QAAQW,KAAd,eAAAjD,OACmBkG,EAAK4gB,QAAQ+C,eAInC3jB,EAAK4gB,QAAQyM,cAnBtB,KAwBJ,MACJ,IAAK,gBACD1f,EACItU,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAACunB,GAAD,CAAY5d,GAAIlD,EAAKyD,OADzB,WAC0C,IACrC0pB,EAAcntB,GAFnB,mBAE0C,IACpCA,EAAK4gB,QAAQ6C,KAAmC,IAA5BzjB,EAAK4gB,QAAQ6C,IAAIvjB,OAEjCF,EAAK4gB,QAAQ6C,IAAI9N,IAAI,SAAA1a,GAAO,OACxB5B,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgF,SAAA,KACIjF,EAAAC,EAAAC,cAACunB,GAAD,CAAY5d,GAAIjI,IADpB,OAFJ,OAJV,cAWI5B,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CACIhC,KAAK,OACL9C,QAAS,kBACLtB,EAAM+D,QAAQW,KAAd,eAAAjD,OACmBkG,EAAK4gB,QAAQ+C,eAInC3jB,EAAK4gB,QAAQyM,cAnBtB,KAwBJ,MACJ,QACIzZ,QAAQC,IAAI7T,GACZ2N,EAAO,YAGf,OAAOtU,EAAAC,EAAAC,cAAC0gB,GAAA,EAAD,KAAOtM,QCjYPzV,eAbS,SAAAC,GACpB,MAAO,CACH8C,QAAS9C,EAAM8C,QACfG,kBAAmBjD,EAAMiD,oBAIN,SAAC0G,GACxB,MAAO,CACHsB,aAAc,SAAAjJ,GAAK,OAAI2H,EAASgN,GAAqB3U,OAI9CjC,CAjEE,SAAAG,GAAS,IACd4C,EAA+B5C,EAA/B4C,QAASG,EAAsB/C,EAAtB+C,kBAEjB,IAAKH,EAAQkD,IAAK,OAAO,KAEzB9F,EAAM+K,aAAa,CAAEvE,KAAM,YAAaod,IAAK,KAE7C,IAAIhf,EAAqB,EAPHC,GAAA,EAAAC,GAAA,EAAAC,OAAAb,EAAA,IAQtB,QAAAc,EAAAC,EAAgBlC,EAAhBmC,OAAAC,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,EAAmC,KAA1BS,EAA0BN,EAAAO,MAC3BC,SAASF,EAAIG,OAASD,SAAS5C,EAAQ8C,aAAe,IACtDd,KAVc,MAAAe,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAd,EAAA,MAAAC,GAatB,OACI/D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAC8wB,GAAA,EAAD,CACIpwB,SAAU,SAAAwzB,GACN,GAAkB,WAAdA,EAAwB,CACxB,IAAMC,EAAO7vB,SACTzC,EAAkBkP,OAAO,SAACnJ,EAAKxD,GAC3B,OAAOE,SAASF,EAAIG,OAASD,SAASsD,GAChCxD,EAAIG,MACJqD,GACP,IAGH/F,EAAkB8E,OAAS,GAC3BrC,SAAS5C,EAAQ8C,eAAiB2vB,ICnC/BpV,EDqCsBrd,EAAQkD,ICrCnBL,EDqCwB4vB,ECpC1DviB,IAAsC,IAAzBA,GAAU2C,YACvB3C,GAAUsB,KACNC,KAAKC,UAAU,CACXC,YAAa,iBACb0L,YACAxa,YANc,IAACwa,EAAWxa,ID0C1BzE,EAAAC,EAAAC,cAAC8wB,GAAA,EAAK1C,QAAN,CAAcW,IAAI,QAAQ1nB,IAAI,SAC1BvH,EAAAC,EAAAC,cAACo0B,GAAD,OAGJt0B,EAAAC,EAAAC,cAAC8wB,GAAA,EAAK1C,QAAN,CACIW,IACIjvB,EAAAC,EAAAC,cAACkG,EAAA,EAAD,CAAOC,MAAOzC,EAAoB0a,OAAQ,CAAC,GAAI,IAA/C,UAIJ/W,IAAI,UAEJvH,EAAAC,EAAAC,cAACq0B,GAAD,gCE6IL11B,eACX,KARuB,SAAC4J,GACxB,MAAO,CACHsB,aAAc,SAAAjJ,GAAK,OAAI2H,EAASgN,GAAqB3U,KACrDgJ,QAAS,SAAA/B,GAAI,OAAIU,EAASgN,GAAgB1N,OAInClJ,CAzLC,SAAAG,GAAS,IAAAC,EACiBC,oBAAS,GAD1BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACdu1B,EADcr1B,EAAA,GACDs1B,EADCt1B,EAAA,GAAAI,EAEyBL,mBAAS,IAFlCM,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAEdm1B,EAFcl1B,EAAA,GAEGm1B,EAFHn1B,EAAA,GAAA4C,EAGelD,mBAAS,IAHxBmD,EAAAjD,OAAAC,EAAA,EAAAD,CAAAgD,EAAA,GAGd0I,EAHczI,EAAA,GAGFuyB,EAHEvyB,EAAA,GAAA+gB,EAIOlkB,oBAAS,GAJhBqkB,EAAAnkB,OAAAC,EAAA,EAAAD,CAAAgkB,EAAA,GAIdyR,EAJctR,EAAA,GAINuR,EAJMvR,EAAA,GAAAyI,EAKqB9sB,oBAAS,GAL9BgtB,EAAA9sB,OAAAC,EAAA,EAAAD,CAAA4sB,EAAA,GAKd+I,EALc7I,EAAA,GAKC8I,EALD9I,EAAA,GAAAE,EAMiBltB,mBAAS,IAN1BotB,EAAAltB,OAAAC,EAAA,EAAAD,CAAAgtB,EAAA,GAMd6I,EANc3I,EAAA,GAMD4I,EANC5I,EAAA,GAAA6I,EAOej2B,mBAAS,IAPxBk2B,EAAAh2B,OAAAC,EAAA,EAAAD,CAAA+1B,EAAA,GAOd3qB,EAPc4qB,EAAA,GAOFC,EAPED,EAAA,GASfE,EAAW,SAAC/wB,EAAOgxB,GAChBV,IAAUU,IACXT,GAAU,GACV5rB,IACKG,KAAK,sBAAuB,CACzB9E,MAAOA,GAAS0wB,EAChBO,KAAMD,EAAW,EAAIb,EAAgB7tB,SAExCyR,KAAK,SAAAxQ,GACF,GAAIA,EAAIC,KAAKE,QAAS,CAClB6sB,EAAUhtB,EAAIC,KAAK8sB,QACnBF,EAAmB7sB,EAAIC,KAAK+C,YACO,IAA/BhD,EAAIC,KAAK+C,WAAWjE,QACpBsB,KAAQC,QAAQ,kCACpB,IAAMqtB,EAAgB,GALJ5xB,GAAA,EAAAC,GAAA,EAAAC,OAAAb,EAAA,IAMlB,QAAAc,EAAAC,EAAmB6D,EAAIC,KAAKtB,QAA5BvC,OAAAC,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,EAAqC,KAA5BgJ,EAA4B7I,EAAAO,MACjCkxB,EAAc5oB,EAAO/H,KAAO+H,GAPd,MAAAlI,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAd,EAAA,MAAAC,GASlBsxB,EAAcI,QAEV3tB,EAAIC,KAAKG,WACTC,KAAQE,MACJ,+EAKf+R,MAAM,SAAAzV,QAqCnB,OAHA3F,EAAM+K,aAAa,CAAEvE,KAAM,UAAWod,IAAK,KAC3CrI,QAAQC,IAAI,eACZD,QAAQC,IAAIua,GAER/0B,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACie,EAAA,EAAMuX,OAAP,CACIxZ,YAAY,yBACZoZ,SAAU,SAAA/wB,GACFA,GACAkwB,GAAe,GACXlwB,IAAU0wB,IACVH,GAAU,GACVH,EAAmB,IACnBO,EAAe3wB,GACf+wB,EAAS/wB,GAAO,MAGpBuwB,GAAU,GACVI,EAAe3wB,GACfkwB,GAAe,KAGvB7zB,SAAU,SAAA0c,GACDA,EAAEjE,OAAO9U,QACVuwB,GAAU,GACVH,EAAmB,IACnBF,GAAe,GACfS,EAAe,MAGvBS,aAAW,EACXC,YAAU,IAEbpB,EACGE,EAAgB7tB,OAAS,EACrB7G,EAAAC,EAAAC,cAAC21B,GAAA51B,EAAD,CACI61B,UAAW,EACXC,SAAUT,EAASL,GACnBe,SAAUnB,EACVoB,OACIj2B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASoH,IAAK,GAA7B,gBAKJvH,EAAAC,EAAAC,cAAC+hB,GAAD,KACKyS,EAAgBpY,IAAI,SAAC3V,EAAMgX,GAAP,OACjB3d,EAAAC,EAAAC,cAACygB,GAAD,CACIpZ,IAAKoW,EACLuC,YAAa,eAAiBvZ,EAAK7B,IACnC+W,OAAQlV,EAAKkhB,KAAKhM,OAClBwE,KACIrgB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgF,SAAA,KACIjF,EAAAC,EAAAC,cAACunB,GAAD,CACI1B,QAAQ,EACRlc,GAAIlD,EAAKwI,MACToW,cAAe/a,IAEnBxK,EAAAC,EAAAC,cAAA,QACIwF,MAAO,CAAEwb,WAAY,SAEpBva,EAAK8L,aAQlC,KAEJzS,EAAAC,EAAAC,cAAC21B,GAAA51B,EAAD,CACI61B,UAAW,EACXC,SAvGK,WACjBxb,QAAQC,IAAI,iBACZD,QAAQC,IAAIua,GACPA,IACDC,GAAiB,GACjB9rB,IACKG,KAAK,uBAAwB,CAC1BmsB,KAAM1qB,EAAWjE,SAEpByR,KAAK,SAAAxQ,GACF,GAAIA,EAAIC,KAAKE,QAAS,CAClB+sB,EAAiBltB,EAAIC,KAAK8sB,QAC1BD,EAAa,GAAAn0B,OAAArB,OAAAiQ,GAAA,EAAAjQ,CAAK0L,GAAL1L,OAAAiQ,GAAA,EAAAjQ,CAAoB0I,EAAIC,KAAK+C,cAC1C,IAAM2qB,EAAgB,GAHJ1qB,GAAA,EAAAC,GAAA,EAAAC,OAAA/H,EAAA,IAIlB,QAAAgI,EAAAC,EAAmBrD,EAAIC,KAAKtB,QAA5BvC,OAAAC,cAAA4G,GAAAG,EAAAC,EAAA/G,QAAAC,MAAA0G,GAAA,EAAqC,KAA5B8B,EAA4B3B,EAAA3G,MACjCkxB,EAAc5oB,EAAO/H,KAAO+H,GALd,MAAAlI,GAAAqG,GAAA,EAAAC,EAAAtG,EAAA,YAAAoG,GAAA,MAAAI,EAAAvG,QAAAuG,EAAAvG,SAAA,WAAAoG,EAAA,MAAAC,GAOlBoqB,EAAcI,QAEV3tB,EAAIC,KAAKG,WACTC,KAAQE,MACJ,+EAKf+R,MAAM,SAAAzV,QA8EHqxB,SAAUjB,EACVkB,OACIj2B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASoH,IAAK,GAA7B,gBAKJvH,EAAAC,EAAAC,cAAC+hB,GAAD,KACKnX,EAAWwR,IAAI,SAAC3V,EAAMgX,GAAP,OACZ3d,EAAAC,EAAAC,cAACygB,GAAD,CACIpZ,IAAKoW,EACLuC,YAAa,eAAiBvZ,EAAK7B,IACnC+W,OAAQlV,EAAKkhB,KAAKhM,OAClBwE,KACIrgB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgF,SAAA,KACIjF,EAAAC,EAAAC,cAACunB,GAAD,CACI1B,QAAQ,EACRlc,GAAIlD,EAAKwI,MACToW,cAAe/a,IAEnBxK,EAAAC,EAAAC,cAAA,QAAMwF,MAAO,CAAEwb,WAAY,SACtBva,EAAK8L,0BCtEnCyjB,GAlGY,SAAAl3B,GAAS,IAE5Bm3B,EAKAn3B,EALAm3B,gBACAC,EAIAp3B,EAJAo3B,eACAC,EAGAr3B,EAHAq3B,YACAvxB,EAEA9F,EAFA8F,IACAma,EACAjgB,EADAigB,UAEJ,IAAKA,EAAW,MAAO,GAEvB,GAAIA,IAAcna,EAAK,MAAO,CAAC9F,EAAMs3B,kBAErC,IAAMC,EACFv2B,EAAAC,EAAAC,cAACgH,EAAA,EAAD,CAAM5G,QAAS,SAAAgH,GAAA,OAAAA,EAAG0lB,SAAwBlM,oBACrC9hB,EAAMw3B,mBACHx3B,EAAMw3B,kBAAkBla,IAAI,SAACma,EAAQ9Y,GAAT,OACxB3d,EAAAC,EAAAC,cAACgH,EAAA,EAAKO,KAAN,CAAWF,IAAKoW,EAAQ,IAAKrd,QAASm2B,EAAOn2B,SACxCm2B,EAAO31B,SAGnBq1B,EAAgBvgB,KAAK,SAAAjP,GAAI,OAAIA,EAAKkG,SAAW/H,IAC1C9E,EAAAC,EAAAC,cAACgH,EAAA,EAAKO,KAAN,CACIF,IAAI,IACJjH,QAAS,kBAAMyf,GAAmBd,EAAWna,IAC7C8Z,QAAQ,GAHZ,WAOAwX,EAAexgB,KAAK,SAAAjP,GAAI,OAAIA,EAAKkG,SAAW/H,IAC5C9E,EAAAC,EAAAC,cAACgH,EAAA,EAAKO,KAAN,CACIF,IAAI,IACJjH,QAAS,kBAAMyf,GAAmBd,EAAWna,IAC7C8Z,QAAQ,GAHZ,qBAOAyX,EAAYzgB,KAAK,SAAAjP,GAAI,OAAIA,EAAKkG,SAAW/H,IACzC9E,EAAAC,EAAAC,cAACgH,EAAA,EAAKO,KAAN,CACIF,IAAI,IACJjH,QAAS,kBAAMyf,GAAmBd,EAAWna,IAC7C8Z,QAAQ,GAHZ,YAOA,MAGZ,OAAOuX,EAAgBvgB,KAAK,SAAAjP,GAAI,OAAIA,EAAKkG,SAAW/H,IAChD9E,EAAAC,EAAAC,cAAC8gB,GAAA,EAAS1iB,OAAV,CACI8E,KAAK,UACL6d,QAASsV,EACTna,QAAS,CAAC,QAAS,SACnB9b,QAAS,SAAAgd,GACLA,EAAE+P,iBACF/P,EAAEwD,kBrCtCU,SAAC7B,EAAWM,GAChCzN,IAAsC,IAAzBA,GAAU2C,YACvB3C,GAAUsB,KACNC,KAAKC,UAAU,CACXC,YAAa,eACb0L,YACAM,cqCiCAQ,CAAuBd,EAAWna,KAP1C,UAYC,GAAArE,OAAArB,OAAAiQ,GAAA,EAAAjQ,CAAIi3B,GAAJj3B,OAAAiQ,GAAA,EAAAjQ,CAAoB+2B,GAApB/2B,OAAAiQ,GAAA,EAAAjQ,CAAwCg3B,IAAgBxgB,KACvD,SAAAjP,GAAI,OAAIA,EAAKkG,SAAW/H,IAe1B9E,EAAAC,EAAAC,cAAC8gB,GAAA,EAAD,CAAUC,QAASsV,EAAMna,QAAS,CAAC,UAC/Bpc,EAAAC,EAAAC,cAAA,KAEII,QAAS,SAAAgd,GACLA,EAAE+P,iBACF/P,EAAEwD,oBAGN9gB,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CAAQhC,KAAMpE,EAAM03B,OAAS,UAAY,QACpC13B,EAAM03B,OACH12B,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgF,SAAA,gBACYjF,EAAAC,EAAAC,cAACy2B,GAAA,EAAD,OAGZ32B,EAAAC,EAAAC,cAACogB,GAAD,SA3BhBtgB,EAAAC,EAAAC,cAAC8gB,GAAA,EAAS1iB,OAAV,CACI8E,KAAK,UACL6d,QAASsV,EACTna,QAAS,CAAC,QAAS,SACnB9b,QAAS,SAAAgd,GACLA,EAAE+P,iBACF/P,EAAEwD,kBrCjEO,SAAC7B,EAAWM,GAC7BzN,IAAsC,IAAzBA,GAAU2C,YACvB3C,GAAUsB,KACNC,KAAKC,UAAU,CACXC,YAAa,YACb0L,YACAM,cqC4DAQ,CAAoBd,EAAWna,KAPvC,QCnBOlG,eACXC,YAjBoB,SAAAC,GACpB,MAAO,CACH8C,QAAS9C,EAAM8C,QACfE,SAAUhD,EAAMgD,WAIG,SAAC2G,GACxB,MAAO,CACHqB,QAAS,SAAC/B,EAAMyN,GAAP,OACL/M,EAASgN,GAAgB1N,KAC7BQ,QAAS,SAACvJ,EAAOwvB,GAAR,OACL/lB,EAASgN,GAAgBzW,EAAOwvB,OAKxC3vB,CA7Ce,SAAAG,GACf,IAAM43B,EAAgBC,GAAmB,CACrC5X,UAAWjgB,EAAM4C,QAAU5C,EAAM4C,QAAQkD,IAAM,GAC/CuxB,YAAar3B,EAAMq3B,YACnBD,eAAgBp3B,EAAMo3B,eACtBD,gBAAiBn3B,EAAMm3B,gBACvBrxB,IAAK9F,EAAM6N,OAAO/H,IAClBgyB,SAAS,EAETN,kBAAmB,CACf,CACI11B,MAAO,cACPR,QAAS,kBACLtB,EAAM+D,QAAQW,KAAK,YAAc1E,EAAM6N,OAAO/H,UAK9D,OACI9E,EAAAC,EAAAC,cAAC0gB,GAAA,EAAD,CACIlb,MAAO,CAAEyS,MAAO,QAChB/U,KAAK,QACLge,UAAU,EACVP,MAAO+V,EACP91B,MAAOd,EAAAC,EAAAC,cAACunB,GAAD,CAAY5d,GAAI7K,EAAM6N,OAAO/H,IAAKzB,KAAM,UC6D5CxE,eAbS,SAAAC,GACpB,MAAO,CACHi4B,aAAcj4B,EAAMwmB,qBAID,SAAC7c,GACxB,MAAO,CACHuB,sBAAuB,SAAAjC,GAAI,OACvBU,EAASgN,GAA8B1N,OAIpClJ,CAhFI,SAAAG,GACfW,oBAAU,WACNX,EAAMgL,sBAAsB,KAC7B,CAAChL,EAAMg4B,gBAHc,IAMpBA,EAMAh4B,EANAg4B,cACAC,EAKAj4B,EALAi4B,iBACAF,EAIA/3B,EAJA+3B,aACAV,EAGAr3B,EAHAq3B,YACAD,EAEAp3B,EAFAo3B,eACAD,EACAn3B,EADAm3B,gBAUJ,OACIn2B,EAAAC,EAAAC,cAACW,EAAA,EAAD,CACIC,MAAM,aACNC,QAASi2B,EACTz1B,cAAY,EACZyF,UAAQ,EACR5F,SAAU,kBAAM61B,GAAiB,IACjCpY,OACI7e,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CAAQmC,IAAI,OAAOjH,QAAS,kBAAM22B,GAAiB,KAAnD,UAIJ31B,gBAAgB,GAEhBtB,EAAAC,EAAAC,cAAA,uEACAF,EAAAC,EAAAC,cAAC2c,EAAA,EAADzd,OAAAiG,OAAA,CACIoN,KAAK,yBACLmJ,SAAU,SAAArX,GAAK,OvClDF2yB,EuCkD8B3yB,EAAM2yB,YvCjDzDplB,IAAsC,IAAzBA,GAAU2C,YACvB3C,GAAUsB,KACNC,KAAKC,UAAU,CACXC,YAAa,gBACb2jB,aALa,IAAAA,GuCmDbpa,aAAa,OA1BV,CACXE,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,MA2BZjd,EAAAC,EAAAC,cAAC2c,EAAA,EAAKpV,KAAN,CAAW0V,MAAM,SAAS1K,KAAK,SAASyL,MAAOxD,IAC3C1a,EAAAC,EAAAC,cAACie,EAAA,EAAD,CAAOjC,YAAY,yCAGvBlc,EAAAC,EAAAC,cAAC2c,EAAA,EAAKpV,KA7BC,CACfyV,WAAY,CAAEoB,OAAQ,EAAGrB,KAAM,KA6BnBjd,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CAAQhC,KAAK,UAAUmb,SAAS,SAASlb,KAAK,SAA9C,YAKP0zB,EAAajyB,KACV9E,EAAAC,EAAAC,cAAC0gB,GAAA,EAAD,CAAM9f,MAAM,iBACRd,EAAAC,EAAAC,cAACi3B,GAAD/3B,OAAAiG,OAAA,GACQrG,EADR,CAEI6N,OAAQkqB,EACRV,YAAaA,EACbF,gBAAiBA,EACjBC,eAAgBA,SCtBzBx3B,eA3CQ,SAAAI,GAAS,IACpBq3B,EAAiDr3B,EAAjDq3B,YAAaD,EAAoCp3B,EAApCo3B,eAAgBD,EAAoBn3B,EAApBm3B,gBACrC,OACIn2B,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgF,SAAA,KACKkxB,EAAgBtvB,OAAS,GACtB7G,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgF,SAAA,KACIjF,EAAAC,EAAAC,cAAA,6CACAF,EAAAC,EAAAC,cAAC+hB,GAAD,CAAaxb,SAAS,GACjB0vB,EAAgB7Z,IAAI,SAAAzP,GAAM,OACvB7M,EAAAC,EAAAC,cAACi3B,GAAD/3B,OAAAiG,OAAA,CACIkC,IAAKsF,EAAO/H,KACR9F,EAFR,CAGI6N,OAAQA,EACRwpB,YAAaA,EACbF,gBAAiBA,EACjBC,eAAgBA,SAOnCA,EAAevvB,OAAS,GACrB7G,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgF,SAAA,KACIjF,EAAAC,EAAAC,cAAA,oCACAF,EAAAC,EAAAC,cAAC+hB,GAAD,CAAaxb,SAAS,GACjB2vB,EAAe9Z,IAAI,SAAAzP,GAAM,OACtB7M,EAAAC,EAAAC,cAACi3B,GAAD/3B,OAAAiG,OAAA,CACIkC,IAAKsF,EAAO/H,KACR9F,EAFR,CAGI6N,OAAQA,EACRwpB,YAAaA,EACbF,gBAAiBA,EACjBC,eAAgBA,YCgFjCx3B,eACXC,YAdoB,SAAAC,GACpB,MAAO,CACH8C,QAAS9C,EAAM8C,QACf4I,WAAY1L,EAAM0L,aAIC,SAAC/B,GACxB,MAAO,CACHsB,aAAc,SAAAjJ,GAAK,OAAI2H,EAASgN,GAAqB3U,OAKzDjC,CA1GY,SAAAG,GAAS,IAAAC,EACqBC,qBADrBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACd+3B,EADc73B,EAAA,GACC83B,EADD93B,EAAA,GAGrBQ,oBAAU,WACNX,EAAM+K,aAAa,CAAEvE,KAAM,UAAWod,IAAK,MAC5C,IALkB,IAObhhB,EAAwB5C,EAAxB4C,QAAS4I,EAAexL,EAAfwL,WACjB,IAAK5I,EAAQkD,IAAK,OAAO,KACzB,IAAMuxB,EAAc,GAChBD,EAAiB,GACjBD,EAAkB,GAEtB,GAAIv0B,EAAQ6E,QAAS,KAAA5C,GAAA,EAAAC,GAAA,EAAAC,OAAAb,EAAA,IACjB,QAAAc,EAAAC,EAAmBrC,EAAQ6E,QAA3BvC,OAAAC,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,EAAoC,KAA3BgJ,EAA2B7I,EAAAO,MAC1B6yB,EAAUh4B,OAAAwe,GAAA,EAAAxe,CAAA,GAAQoL,EAAWqC,EAAOA,QAAYA,GAClDuqB,IAC0B,WAAtBA,EAAWxwB,OAAqByvB,EAAY3yB,KAAK0zB,GACtB,YAAtBA,EAAWxwB,OAChBwvB,EAAe1yB,KAAK0zB,GACO,aAAtBA,EAAWxwB,QAChBuvB,EAAgBzyB,KAAK0zB,KARhB,MAAAzyB,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAd,EAAA,MAAAC,IAarB,IAAMszB,EACFhB,EAAYxvB,OAAS,EACjB7G,EAAAC,EAAAC,cAAC+hB,GAAD,CAAaxb,SAAS,GACjB4vB,EAAY/Z,IAAI,SAAAzP,GAAM,OACnB7M,EAAAC,EAAAC,cAACi3B,GAAD/3B,OAAAiG,OAAA,CACIkC,IAAKsF,EAAO/H,KACR9F,EAFR,CAGI6N,OAAQA,EACRwpB,YAAaA,EACbF,gBAAiBA,EACjBC,eAAgBA,QAK5Bp2B,EAAAC,EAAAC,cAACivB,GAAA,EAAD,CACInpB,MAAM,0DACNopB,WAAY,CAAEhX,OAAQ,QAAS8J,UAAW,QAC1C6G,aAAa,IAGzB,OACI/oB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACyiB,GAAD,CACI7hB,MAAM,aACN8hB,IAAI,mBACJtB,OAAQ,kBAAM2V,GAAiB,MAElCb,EAAevvB,OAAS,GAAKsvB,EAAgBtvB,OAAS,EACnD7G,EAAAC,EAAAC,cAAC8wB,GAAA,EAAD,KACIhxB,EAAAC,EAAAC,cAAC8wB,GAAA,EAAK1C,QAAN,CAAc/mB,IAAI,YAAY0nB,IAAI,YAC7BoI,GAGLr3B,EAAAC,EAAAC,cAAC8wB,GAAA,EAAK1C,QAAN,CACIW,IACIjvB,EAAAC,EAAAC,cAACkG,EAAA,EAAD,CACIC,MAAO8vB,EAAgBtvB,OACvByX,OAAQ,CAAC,GAAI,IAFjB,WAOJ/W,IAAI,WAEJvH,EAAAC,EAAAC,cAACo3B,GAAD,CACIjB,YAAaA,EACbD,eAAgBA,EAChBD,gBAAiBA,MAK7BkB,EAEJr3B,EAAAC,EAAAC,cAACq3B,GAAD,CACIP,cAAeA,EACfC,iBAAkBA,EAClBZ,YAAaA,EACbD,eAAgBA,EAChBD,gBAAiBA,EACjBv0B,QAASA,kBCwDVhD,eACXC,YAdoB,SAAAC,GACpB,MAAO,CACH8C,QAAS9C,EAAM8C,UAII,SAAC6G,GACxB,MAAO,CACHsB,aAAc,SAAAjJ,GAAK,OAAI2H,EAASgN,GAAqB3U,KACrD02B,gBAAiB,kBAAM/uB,ExD9DO,CAClCrF,KAAM,yBwDkENvE,CAtIY,SAAAG,GAAS,IAAAC,EACqBC,qBADrBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACdw4B,EADct4B,EAAA,GACCu4B,EADDv4B,EAAA,GAAAI,EAEiBL,mBAAS,IAF1BM,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAEdo4B,EAFcn4B,EAAA,GAEDo4B,EAFCp4B,EAAA,GAGboC,EAAY5C,EAAZ4C,QAERjC,oBAAU,WACNX,EAAM+K,aAAa,CAAEvE,KAAM,UAAWod,IAAK,MAC5C,IAWH,OAAOhhB,GAAWA,EAAQ6Q,KACtBzS,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAC0gB,GAAA,EAAD,KACI5gB,EAAAC,EAAAC,cAACud,GAAA,EAAD,CACIhL,KAAK,SACLiL,SAAS,eACTvd,UAAWC,UACXokB,gBAAgB,EAChBzG,cAAe,SAAAzW,GAAc,IAAX8P,EAAW9P,EAAX8P,KACdD,GAAWC,EAAM,IAAK,SAAU,WAC5BpY,EAAMw4B,sBAIb51B,EAAQoE,MACLhG,EAAAC,EAAAC,cAAC2F,EAAA,EAAD,CACIE,IAAKvE,EAAUI,EAAQkD,IAAKlD,EAAQoE,OACpC3C,KAAM,IACNqC,MAAO,CAAEC,OAAQ,UAGrB3F,EAAAC,EAAAC,cAAA,WACqCF,EAAAC,EAAAC,cAAC+d,GAAAhe,EAAD,MACjCD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAf,YAIZH,EAAAC,EAAAC,cAAC2c,EAAA,EAADzd,OAAAiG,OAAA,CACIoN,KAAK,yBACLmJ,SAAU,SAAArX,GAAK,OC5DR,SAACA,EAAOsF,GAC3BiI,IAAsC,IAAzBA,GAAU2C,YACvB3C,GAAUsB,KACNC,KAAKC,UAAU,CACXC,YAAa,cACbd,KAAMlO,EAAMkO,KACZwM,UAAWpV,KDuDHkW,CAAsBxb,EAAO3C,EAAQkD,MAEzCgY,aAAa,OAvCd,CACXE,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,KAgCZ,CAOIF,cAAe,CACXtK,KAAM7Q,EAAQ6Q,KACdhR,SAAUG,EAAQkD,OAGtB9E,EAAAC,EAAAC,cAAC2c,EAAA,EAAKpV,KAAN,CACI0V,MAAM,OACN1K,KAAK,OACLyL,MAAOjD,IAEPjb,EAAAC,EAAAC,cAACie,EAAA,EAAD,CAAOjC,YAAY,wCAEvBlc,EAAAC,EAAAC,cAAC2c,EAAA,EAAKpV,KAAN,CAAW0V,MAAM,WAAW1K,KAAK,YAC7BzS,EAAAC,EAAAC,cAACie,EAAA,EAAD,CAAOqR,UAAU,KAErBxvB,EAAAC,EAAAC,cAAC2c,EAAA,EAAKpV,KAANrI,OAAAiG,OAAA,GApDG,CACf6X,WAAY,CAAEoB,OAAQ,EAAGrB,KAAM,IAmDnB,CAEIvX,MAAO,CACHmyB,KAAM,OACN9I,SAAU,QACV+I,SAAU,YAGd93B,EAAAC,EAAAC,cAAC8gB,GAAA,EAAS1iB,OAAV,CACI8E,KAAK,UACLmb,SAAS,SACTlb,KAAK,QACL4d,QACIjhB,EAAAC,EAAAC,cAACgH,EAAA,EAAD,KACIlH,EAAAC,EAAAC,cAACgH,EAAA,EAAKO,KAAN,CACImX,QAAQ,EACRte,QAAS,kBAAMo3B,GAAiB,KAFpC,oBANZ,UAmBR13B,EAAAC,EAAAC,cAACW,EAAA,EAAD,CACIC,MAAM,iBACNC,QAAS02B,EACTz2B,KAAM,WCzHG,IAAA6I,ED0HD8tB,IAAgB/1B,EAAQkD,IACxBqD,KAAQC,QAAQ,kCC3HfyB,ED6HuBjI,EAAQkD,IC5HpDgN,IAAsC,IAAzBA,GAAU2C,YACvB3C,GAAUsB,KACNC,KAAKC,UAAU,CACXC,YAAa,gBACb0L,UAAWpV,OD2HPzI,SAAU,WACNs2B,GAAiB,GACjBE,EAAe,MAGnB53B,EAAAC,EAAAC,cAAA,4EAIAF,EAAAC,EAAAC,cAACie,EAAA,EAAD,CAAOvd,SAAU,SAAA0c,GAAC,OAAIsa,EAAeta,EAAEjE,OAAO9U,aAI1D,QE+CO3F,eACXC,YAnBoB,SAAAC,GACpB,MAAO,CACH8C,QAAS9C,EAAM8C,QACfmL,QAASjO,EAAMiO,QACfjL,SAAUhD,EAAMgD,SAChB0I,WAAY1L,EAAM0L,aAIC,SAAC/B,GACxB,MAAO,CACHqB,QAAS,SAAA/B,GAAI,OAAIU,EAASgN,GAAgB1N,KAC1CgC,aAAc,SAAAjJ,GAAK,OAAI2H,EAASgN,GAAqB3U,KACrDyH,QAAS,SAACvJ,EAAOwvB,GAAR,OACL/lB,EAASgN,GAAgBzW,EAAOwvB,OAKxC3vB,CA7KY,SAAAG,GAAS,IAAAC,EACGC,mBAAS,IADZC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACd8I,EADc5I,EAAA,GACR2K,EADQ3K,EAAA,GAAAmI,EAEoBtI,EAAM8C,SAAW9C,EAAQ+I,EAA1DgF,EAFazF,EAEbyF,QAASvC,EAFIlD,EAEJkD,WAAY5I,EAFR0F,EAEQ1F,QAgC7B,GA9BAjC,oBAAU,WACN,IAAMiK,EAAY5K,EAAM+D,QAAQvC,SAASwC,SAASC,MAAM,KACxD,GAAI2G,EAAU/C,OAAS,EAAG,CACtB,IAAMkxB,EAAYnuB,EAAU,GACxB5K,EAAM8C,SACN9C,EAAM8K,QAAQ,CAAEgD,eAAgBirB,IAEhC/U,GAAShkB,EAAO+I,EAAM+B,EAAS,EAAsB,SAAA/B,GACjD,IAAMyC,EAAa,GADsC3G,GAAA,EAAAC,GAAA,EAAAC,OAAAb,EAAA,IAEzD,QAAAc,EAAAC,EAAmB8D,EAAKyC,WAAxBtG,OAAAC,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,OAASgJ,EAAT7I,EAAAO,MACIiG,EAAWqC,EAAO/H,KAAO+H,GAH4B,MAAAlI,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAd,EAAA,MAAAC,GAIzD,IAAMwG,EAAe,GAJoCQ,GAAA,EAAAC,GAAA,EAAAC,OAAA/H,EAAA,IAKzD,QAAAgI,EAAAC,EAAqBpD,EAAKwC,aAA1BrG,OAAAC,cAAA4G,GAAAG,EAAAC,EAAA/G,QAAAC,MAAA0G,GAAA,OAASV,EAATa,EAAA3G,MACIgG,EAAaF,EAASvF,KAAOuF,GANwB,MAAA1F,GAAAqG,GAAA,EAAAC,EAAAtG,EAAA,YAAAoG,GAAA,MAAAI,EAAAvG,QAAAuG,EAAAvG,SAAA,WAAAoG,EAAA,MAAAC,GAOzD,IAAMP,EAAY,GAPuCW,GAAA,EAAAC,GAAA,EAAAC,OAAArI,EAAA,IAQzD,QAAAsI,EAAAC,EAAkB1D,EAAK2C,UAAvBxG,OAAAC,cAAAkH,GAAAG,EAAAC,EAAArH,QAAAC,MAAAgH,GAAA,OAASf,EAATkB,EAAAjH,MACImG,EAAUJ,EAAMxF,KAAOwF,GAT8B,MAAA3F,GAAA2G,GAAA,EAAAC,EAAA5G,EAAA,YAAA0G,GAAA,MAAAI,EAAA7G,QAAA6G,EAAA7G,SAAA,WAAA0G,EAAA,MAAAC,GAWzDvM,EAAM8K,QAAQ,CAEVU,aACAD,eACAG,YACA9I,QAAS,SAK1B,CAAC5C,EAAM8C,SAAU9C,EAAM+D,QAAQvC,SAASwC,YAEtC+J,IAAYA,EAAQjI,IAAK,OAAO,KACrC9F,EAAM+K,aAAa,CAAEvE,KAAMuH,EAAQ0F,KAAMmQ,IAAK,KAE9C,IAAMyT,EAAc,GAChBD,EAAiB,GACjBD,EAAkB,GACtB,GAAIppB,GAAWA,EAAQtG,SAAW7E,GAAWA,EAAQkD,IAAK,KAAA6G,GAAA,EAAAC,GAAA,EAAAC,OAAA3I,EAAA,IACtD,QAAA4I,EAAAC,EAAmBnK,EAAQ6E,QAA3BvC,OAAAC,cAAAwH,GAAAG,EAAAC,EAAA3H,QAAAC,MAAAsH,GAAA,EAAoC,KAA3BkB,EAA2Bf,EAAAvH,MACV,WAAlBsI,EAAOjG,OAAqByvB,EAAY3yB,KAAKmJ,GACtB,YAAlBA,EAAOjG,OAAsBwvB,EAAe1yB,KAAKmJ,GAC/B,aAAlBA,EAAOjG,QAAuBuvB,EAAgBzyB,KAAKmJ,IAJV,MAAAlI,GAAAiH,GAAA,EAAAC,EAAAlH,EAAA,YAAAgH,GAAA,MAAAI,EAAAnH,QAAAmH,EAAAnH,SAAA,WAAAgH,EAAA,MAAAC,IAO1D,IAAM+qB,EAAgBC,GAAmB,CACrC5X,UAAWrd,EAAUA,EAAQkD,IAAM,GACnCuxB,YAAaA,EACbD,eAAgBA,EAChBD,gBAAiBA,EACjBrxB,IAAKiI,EAAQjI,IACbwxB,iBAAkB,KAClBI,QAAQ,IAEZ,OACI12B,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC0gB,GAAA,EAAD,KACI5gB,EAAAC,EAAAC,cAAA,OAAKwF,MAAO,CAAE6iB,UAAW,SAAUqH,aAAc,SAC7C5vB,EAAAC,EAAAC,cAAC2F,EAAA,EAAD,CACIE,IAAKvE,EAAUuL,EAAQjI,IAAKiI,EAAQ/G,OACpC3C,KAAM,MAEVrD,EAAAC,EAAAC,cAAA,UAAK6M,EAAQ0F,MACbzS,EAAAC,EAAAC,cAAA,cAAM6M,EAAQjI,IAAd,KACC8xB,GAEL52B,EAAAC,EAAAC,cAAC8wB,GAAA,EAAD,KACIhxB,EAAAC,EAAAC,cAAC8wB,GAAA,EAAK1C,QAAN,CAAcW,IAAI,aAAa1nB,IAAK,GAChCvH,EAAAC,EAAAC,cAAC83B,GAAD,CAAYrJ,aAAa,KAG7B3uB,EAAAC,EAAAC,cAAC8wB,GAAA,EAAK1C,QAAN,CAAcW,IAAI,UAAU1nB,IAAK,GAC7BvH,EAAAC,EAAAC,cAAC+hB,GAAD,CAAaxb,SAAS,GACjBsG,EAAQtG,QACJC,OAAO,SAAAmG,GAAM,MAAsB,WAAlBA,EAAOjG,SACxB0V,IAAI,SAAAzP,GACD,IAAMorB,EAAa74B,OAAAwe,GAAA,EAAAxe,CAAA,GACZoL,EAAWqC,EAAOA,QAClBA,EAAOA,QAGd,OACI7M,EAAAC,EAAAC,cAACi3B,GAAD/3B,OAAAiG,OAAA,CACIkC,IAAK0wB,EAAcnzB,KACf9F,EAFR,CAGI4C,QAASA,EACTiL,OAAQorB,EACR5B,YAAaA,EACbF,gBAAiBA,EACjBC,eAAgBA,SAqBxCp2B,EAAAC,EAAAC,cAAC8wB,GAAA,EAAK1C,QAAN,CAAcW,IAAI,OAAO1nB,IAAK,GAC1BvH,EAAAC,EAAAC,cAAC+hB,GAAD,KACKlV,EAAQ8S,OACL9S,EAAQ8S,MAAMvD,IAAI,SAACZ,EAAMiC,GAAP,OACd3d,EAAAC,EAAAC,cAAC4iB,GAAD,CACIvb,IAAKoW,EACLjC,KAAMA,EACND,OAAQC,EAAKD,OACbtM,MAAOpC,EACPnL,QAASA,GAAW,GACpBmf,SAAS,EACT3Z,KAAK,aAKzBpH,EAAAC,EAAAC,cAAC8wB,GAAA,EAAK1C,QAAN,CAAcW,IAAI,SAAS1nB,IAAK,GAC5BvH,EAAAC,EAAAC,cAACuyB,GAAD,CAAQrB,cAAerkB,EAASnL,QAASmL,KAE7C/M,EAAAC,EAAAC,cAAC8wB,GAAA,EAAK1C,QAAN,CAAcW,IAAI,WAAW1nB,IAAK,GAC9BvH,EAAAC,EAAAC,cAAC+hB,GAAD,KACKlV,EAAQ0S,SAASnD,IAAI,SAAC3V,EAAMgX,GAAP,OAClB3d,EAAAC,EAAAC,cAAC4iB,GAAD,CACIvb,IAAKoW,EACLjC,KAAM/U,EACN8U,OAAQ9U,EAAK+Y,OACbvQ,MAAOpC,EACPnL,QAASA,GAAW,GACpB8e,cAAe,aACfV,gBAAiB,aACjBe,SAAS,EACT3Z,KAAK,iCC9D1BxI,eACXC,YAjBoB,SAAAC,GACpB,MAAO,CACHgD,SAAUhD,EAAMgD,SAChBsI,KAAMtL,EAAMsL,KACZxI,QAAS9C,EAAM8C,UAII,SAAC6G,GACxB,MAAO,CACHsB,aAAc,SAAAjJ,GAAK,OAAI2H,EAASgN,GAAqB3U,KACrDo3B,oBAAqB,SAAA3zB,GAAK,OACtBkE,E3D8DuB,SAAAlE,GAAK,MAAK,CACzCnB,KAAM,wBACNmB,S2DhEiBkR,CAA4BlR,OAK7C1F,CAtFoB,SAAAG,GACfA,EAAM8C,UAAU9C,EAAM+D,QAAQW,KAAK,WAmCxC,OACI1D,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgF,SAAA,KACIjF,EAAAC,EAAAC,cAACi4B,GAAA,EAAD,CACIh4B,UAAU,mBACVW,MAAM,wBACNs3B,UAAU,IAEdp4B,EAAAC,EAAAC,cAAC2c,EAAA,EAADzd,OAAAiG,OAAA,CACIoN,KAAK,yBACLmJ,SA3CK,SAAArX,GACb2E,IACKG,KAAK,wBADVjK,OAAAwe,GAAA,EAAAxe,CAAA,GAEWmF,IAEN+T,KAAK,SAAAxQ,GACEA,EAAIC,KAAKE,SACTE,KAAQF,QAAQ,oCAChBjJ,EAAMk5B,qBAAoB,GAC1Bl5B,EAAM+D,QAAQW,KAAK,cAEfoE,EAAIC,KAAKswB,mBACTlwB,KAAQC,QACJ,0DAGJN,EAAIC,KAAKG,WACTC,KAAQE,MACJ,gFAKf+R,MAAM,SAAAzV,OAqBHmY,aAAa,OAlBV,CACXE,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,MAmBZjd,EAAAC,EAAAC,cAAC2c,EAAA,EAAKpV,KAAN,CAAW0V,MAAM,OAAO1K,KAAK,OAAOyL,MAAOjD,IACvCjb,EAAAC,EAAAC,cAACie,EAAA,EAAD,CAAOjC,YAAY,wCAEvBlc,EAAAC,EAAAC,cAAC2c,EAAA,EAAKpV,KAAN,CACI0V,MAAM,WACN1K,KAAK,WACLyL,MAAOxD,IAEP1a,EAAAC,EAAAC,cAACie,EAAA,EAAD,CAAOjC,YAAY,wCAEvBlc,EAAAC,EAAAC,cAAC2c,EAAA,EAAKpV,KA3BC,CACfyV,WAAY,CAAEoB,OAAQ,EAAGrB,KAAM,KA2BnBjd,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CAAQhC,KAAK,UAAUmb,SAAS,SAASlb,KAAK,SAA9C,cC/DZoE,GAAS+oB,KAAT/oB,KA6FO7I,eACXC,YAnBoB,SAAAC,GACpB,MAAO,CACHgD,SAAUhD,EAAMgD,SAChBF,QAAS9C,EAAM8C,QACfyH,KAAMvK,EAAMuK,KACZmB,WAAY1L,EAAM0L,aAIC,SAAC/B,GACxB,MAAO,CACHqB,QAAS,SAAA/B,GACLU,EAASgN,GAAgB1N,KAE7BgC,aAAc,SAAAjJ,GAAK,OAAI2H,EAASgN,GAAqB3U,OAKzDjC,CA5FS,SAAAG,GAAS,IAAAC,EACMC,mBAAS,IADfC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACX8I,EADW5I,EAAA,GACL2K,EADK3K,EAAA,GAEVyC,EAAY5C,EAAZ4C,QAwBR,GAvBAjC,oBAAU,WACN,IAAMiK,EAAY5K,EAAM+D,QAAQvC,SAASwC,SAASC,MAAM,KACxD,GAAI2G,EAAU/C,OAAS,EAAG,CACtB,IAAMoY,EAAYrV,EAAU,GAC5B,GAAI5K,EAAM8C,UAAYF,EAAQkD,MAAQma,EAAW,CAC7C,IAAMvD,EAAO9Z,EAAQie,MAAMjK,KACvB,SAAAjP,GAAI,OAAIA,EAAK8U,SAAW7R,EAAU,KAEtCE,EAAQ,CAAEiD,QAASnL,EAAS8Z,cAE5BsH,GAAShkB,EAAO+I,EAAM+B,EAAS,EAAsB,SAAA/B,GACjD,IAAMyC,EAAa,GADsC3G,GAAA,EAAAC,GAAA,EAAAC,OAAAb,EAAA,IAEzD,QAAAc,EAAAC,EAAmB8D,EAAKyC,WAAxBtG,OAAAC,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,OAASgJ,EAAT7I,EAAAO,MACIiG,EAAWqC,EAAO/H,KAAO+H,GAH4B,MAAAlI,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAd,EAAA,MAAAC,GAKzD/E,EAAM8K,QAAQ,CACVT,KAAKjK,OAAA6X,GAAA,EAAA7X,CAAA,GAAI2I,EAAKsB,KAAKvE,IAAMiD,EAAKsB,MAC9BmB,mBAKjB,CAACxL,EAAM8C,YACLiG,EAAK2T,KAAM,OAAO,KA1BL,IA2BVA,EAAkB3T,EAAlB2T,KAAM3O,EAAYhF,EAAZgF,QACd/N,EAAM8K,QAAQ,CAAEoG,aAAcwL,EAAKrS,OAC/BqS,GACA1c,EAAM+K,aAAa,CAAEvE,KAAMkW,EAAKjJ,KAAMmQ,IAAK7V,EAAQjI,MAGvD,IAAoBwzB,EAMpB,OAAO5c,EACH1b,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAC0gB,GAAA,EAAD,CACI9f,MACId,EAAAC,EAAAC,cAAA,yBACcF,EAAAC,EAAAC,cAACunB,GAAD,CAAY5d,GAAIkD,EAAQjI,MADtC,SAIJsc,UAAU,GAEVphB,EAAAC,EAAAC,cAACwnB,GAAD,CAAe7L,OAAQH,EAAKG,SAE5B7b,EAAAC,EAAAC,cAAA,UAAKwb,EAAKjJ,MACVzS,EAAAC,EAAAC,cAAA,KAAGwF,MAAO,CAAEojB,WAAY,aAAepN,EAAKqN,aAE5C/oB,EAAAC,EAAAC,cAACirB,GAAA,EAAD,CACIrqB,MAAM,mBACNsgB,UAAQ,EACRgK,OAAQ,CAAEC,IAAK,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,IAElD1rB,EAAAC,EAAAC,cAACq4B,GAAD,CAAMpb,MAAM,kBA1BRmb,EA0BqC5c,EAAKrN,MAzBtDtB,GAAW/N,EAAMwL,WACV8tB,EAAMhc,IAAI,SAAA3V,GAAI,OAAI3G,EAAAC,EAAAC,cAACunB,GAAD,CAAY5d,GAAIlD,MAC/B2xB,IAwBFt4B,EAAAC,EAAAC,cAACq4B,GAAD,CAAMpb,MAAM,SAASzB,EAAKyF,QAE9BnhB,EAAAC,EAAAC,cAAC8oB,GAAD,CACIZ,gBAAgB,EAChB/e,KAAMrK,EAAMqK,KAAKqS,EAAKrS,MACtBzH,QAAS5C,EAAM4C,QACf4I,WAAYxL,EAAMwL,WAClB+b,aAAa,MAIzB,QCGO3nB,eACXC,YAnBoB,SAAAC,GACpB,MAAO,CACHgD,SAAUhD,EAAMgD,SAChBF,QAAS9C,EAAM8C,QACfyH,KAAMvK,EAAMuK,KACZmB,WAAY1L,EAAM0L,aAIC,SAAC/B,GACxB,MAAO,CACHqB,QAAS,SAAA/B,GACLU,EAASgN,GAAgB1N,KAE7BgC,aAAc,SAAAjJ,GAAK,OAAI2H,EAASgN,GAAqB3U,OAKzDjC,CA9EiB,SAAAG,GAAS,IAAAC,EACFC,mBAAS,IADPC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACnB8I,EADmB5I,EAAA,GACb2K,EADa3K,EAAA,GAElByC,EAAY5C,EAAZ4C,QAwBR,GAvBAjC,oBAAU,WACN,IAAMiK,EAAY5K,EAAM+D,QAAQvC,SAASwC,SAASC,MAAM,KACxD,GAAI2G,EAAU/C,OAAS,EAAG,CACtB,IAAMoY,EAAYrV,EAAU,GAC5B,GAAI5K,EAAM8C,UAAYF,EAAQkD,MAAQma,EAAW,CAC7C,IAAMuZ,EAAe52B,EAAQ6d,SAAS7J,KAClC,SAAAjP,GAAI,OAAIA,EAAK+Y,SAAW9V,EAAU,KAEtCE,EAAQ,CAAEiD,QAASnL,EAAS42B,sBAE5BxV,GAAShkB,EAAO+I,EAAM+B,EAAS,EAAsB,SAAA/B,GACjD,IAAMyC,EAAa,GADsC3G,GAAA,EAAAC,GAAA,EAAAC,OAAAb,EAAA,IAEzD,QAAAc,EAAAC,EAAmB8D,EAAKyC,WAAxBtG,OAAAC,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,OAASgJ,EAAT7I,EAAAO,MACIiG,EAAWqC,EAAO/H,KAAO+H,GAH4B,MAAAlI,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAd,EAAA,MAAAC,GAKzD/E,EAAM8K,QAAQ,CACVT,KAAKjK,OAAA6X,GAAA,EAAA7X,CAAA,GAAI2I,EAAKsB,KAAKvE,IAAMiD,EAAKsB,MAC9BmB,mBAKjB,CAACxL,EAAM8C,YACLiG,EAAKywB,aAAc,OAAO,KA1BL,IA2BlBA,EAA0BzwB,EAA1BywB,aAAczrB,EAAYhF,EAAZgF,QAKtB,OAJA/N,EAAM8K,QAAQ,CAAEoG,aAAcsoB,EAAanvB,OACvCmvB,GACAx5B,EAAM+K,aAAa,CAAEvE,KAAMgzB,EAAa/lB,KAAMmQ,IAAK7V,EAAQjI,MAExD0zB,EACHx4B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAC0gB,GAAA,EAAD,CACI9f,MACId,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAACunB,GAAD,CAAY5d,GAAIkD,EAAQjI,MAD5B,aAIJsc,UAAU,GAEVphB,EAAAC,EAAAC,cAACwnB,GAAD,CAAe7L,OAAQ2c,EAAa3c,SAEpC7b,EAAAC,EAAAC,cAAA,UAAKs4B,EAAa/lB,MAClBzS,EAAAC,EAAAC,cAAA,KAAGwF,MAAO,CAAEojB,WAAY,aACnB0P,EAAazP,aAElB/oB,EAAAC,EAAAC,cAAC8oB,GAAD,CACIZ,gBAAgB,EAChB/e,KAAMrK,EAAMqK,KAAKmvB,EAAanvB,MAC9BzH,QAAS5C,EAAM4C,QACf4I,WAAYxL,EAAMwL,WAClB+b,aAAa,MAIzB,QCjCO3nB,eACXC,YAboB,SAAAC,GACpB,MAAO,CACH8C,QAAS9C,EAAM8C,UAII,SAAC6G,GACxB,MAAO,CACHsB,aAAc,SAAAjJ,GAAK,OAAI2H,EAASgN,GAAqB3U,OAKzDjC,CA7Ba,SAAAG,GAKb,OAJAW,oBAAU,WACNX,EAAM+K,aAAa,CAAEvE,KAAM,WAAYod,IAAK,MAC7C,IAGC5iB,EAAAC,EAAAC,cAAA,WACKlB,EAAM4C,QAAQkD,IACX9E,EAAAC,EAAAC,cAAC6iB,GAAD,CAAkB3b,KAAK,WAAWxF,QAAS5C,EAAM4C,UAEjD5B,EAAAC,EAAAC,cAAA,iBCuBDtB,eAhCM,SAAAI,GAAS,IAClBqL,EAAarL,EAAbqL,SACAwd,EAASxd,EAATwd,KACR,OACI7nB,EAAAC,EAAAC,cAAC0gB,GAAA,EAAD,CACIxd,KAAK,QACLsC,MAAO,CAAEyS,MAAO,OAAQvS,OAAQ,WAChCwb,UAAU,EACVtgB,MACId,EAAAC,EAAAC,cAAA,OACII,QAAS,kBACLtB,EAAM+D,QAAQW,KAAK,eAAiB2G,EAASvF,MAEjDY,MAAO,CACH8hB,QAAS,OACTuK,WAAY,WAGflK,EAAKhM,OAAOhV,OAAS,GAClB7G,EAAAC,EAAAC,cAAA,OAAKwF,MAAO,CAAEyS,MAAO,OAAQqE,YAAa,SACtCxc,EAAAC,EAAAC,cAACwnB,GAAD,CAAe7L,OAAQgM,EAAKhM,OAAQxY,KAAM,MAGjDwkB,EAAKpV,KAdV,KAckB,IACdzS,EAAAC,EAAAC,cAACunB,GAAD,CAAY5d,GAAIQ,EAAS8E,MAAO4W,QAAQ,IAf5C,MAe2D,IACvD/lB,EAAAC,EAAAC,cAACunB,GAAD,CAAYzS,IAAK3K,EAASwd,KAAKxZ,MAAO/D,OAAO,SCwGlD1L,eACXC,YArBoB,SAAAC,GACpB,MAAO,CACHgD,SAAUhD,EAAMgD,SAChBF,QAAS9C,EAAM8C,QACfoN,MAAOlQ,EAAMuK,KACbiB,MAAOxL,EAAMwL,MACbE,WAAY1L,EAAM0L,WAClBD,aAAczL,EAAMyL,eAID,SAAC9B,GACxB,MAAO,CACHqB,QAAS,SAAA/B,GACLU,EAASgN,GAAgB1N,KAE7BgC,aAAc,SAAAjJ,GAAK,OAAI2H,EAASgN,GAAqB3U,OAKzDjC,CA1HU,SAAAG,GAAS,IAAAC,EACOC,mBAAS,IADhBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACZH,EADYK,EAAA,GACLG,EADKH,EAAA,GAAAI,EAEqCL,oBAAS,GAF9CM,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAEZqvB,EAFYpvB,EAAA,GAEU0uB,EAFV1uB,EAAA,GAIbi5B,EAAUz5B,EAAM+D,QAAQvC,SAASwC,SAASC,MAAM,KAAK,GAC3DtD,oBAAU,WACNX,EAAM8K,QAAQ,CAAEiE,aAAc0qB,KAC/B,CAACz5B,EAAM8C,WAPS,IASXwI,EAAoDtL,EAApDsL,MAAO1I,EAA6C5C,EAA7C4C,QAAS4I,EAAoCxL,EAApCwL,WAAYwE,EAAwBhQ,EAAxBgQ,MAAOzE,EAAiBvL,EAAjBuL,aAE3C,IAAKD,EAAMxF,IAAK,OAAO,KACvB9F,EAAM8K,QAAQ,CAAEoG,aAAc5F,EAAM0E,QAEpChQ,EAAM+K,aAAa,CAAEvE,KAAM8E,EAAMmI,KAAMmQ,IAAKtY,EAAM8E,SAElD,IAAMqf,EAAmBnkB,EAAMQ,WAC1BpE,OAAO,SAAAC,GAAI,OAAI4D,EAAa5D,KAC5B2V,IAAI,SAAA3V,GAAI,OAAI4D,EAAa5D,KAExBmoB,EACF9uB,EAAAC,EAAAC,cAACW,EAAA,EAAD,CACIC,MAAM,WACNC,QAAS6tB,EACTrtB,cAAY,EACZyF,UAAQ,EACR5F,SAAU,kBAAM8sB,GAAwB,IACxC/V,MAAM,OACNzS,MAAO,CAAEqpB,SAAU,UACnBlQ,OACI7e,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CACImC,IAAI,OACJjH,QAAS,kBAAM4tB,GAAwB,KAF3C,SAOJ5sB,gBAAgB,GAEhBtB,EAAAC,EAAAC,cAAC8uB,GAAD,CACId,wBAAyBA,EACzBtsB,QAASA,EACT4I,WAAYxL,EAAMwL,WAClB2jB,QAAS7jB,EAAMxF,OAI3B,OAAO0F,EACHxK,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgF,SAAA,KACIjF,EAAAC,EAAAC,cAAC8wB,GAAA,EAAD,KACIhxB,EAAAC,EAAAC,cAAC8wB,GAAA,EAAK1C,QAAN,CAAcW,IAAI,QAAQ1nB,IAAI,SAC1BvH,EAAAC,EAAAC,cAACgxB,GAAD,CACIpgB,OAAQ2nB,EACR72B,QAASA,EACTmP,WAAW,aAGdzG,EAAM0E,MAAMsN,IAAI,SAAA4C,GACb,GAAIlQ,EAAMkQ,GAAS,CACf,IAAM7V,EAAO2F,EAAMkQ,GACnB,OACIlf,EAAAC,EAAAC,cAAC0gB,GAAA,EAAD,KACI5gB,EAAAC,EAAAC,cAAC8oB,GAAD,CACIxe,WAAYA,EACZ5I,QAASA,EACTyH,KAAMA,KAIf,OAAO,QAGtBrJ,EAAAC,EAAAC,cAAC8wB,GAAA,EAAK1C,QAAN,CAAcW,IAAI,aAAa1nB,IAAI,cAC/BvH,EAAAC,EAAAC,cAACyiB,GAAD,CACI7hB,MAAM,uBACN8hB,IAAI,kCACJtB,OAAQ,WACJ4M,GAAwB,MAG/BO,EAAiBnS,IAAI,SAACjS,EAAUsT,GAAX,OAClB3d,EAAAC,EAAAC,cAACw4B,GAAD,CAAcnxB,IAAKoW,EAAOtT,SAAUA,MAEvCykB,IAIT9uB,EAAAC,EAAAC,cAACW,EAAA,EAAD,CACIE,QAASjC,EAAMwc,aACfuD,OAAQ,KACRzd,SAAU,kBAAM9B,EAASF,OAAAwe,GAAA,EAAAxe,CAAA,GAAKN,EAAN,CAAawc,aAAc,QAEnDtb,EAAAC,EAAAC,cAAA,OACI4e,IAAI,UACJpZ,MAAO,CAAEyS,MAAO,QAChBpS,IAAKjH,EAAMwc,iBAIvB,QC5BO1c,eACXC,YAvBoB,SAAAC,GACpB,MAAO,CACHgD,SAAUhD,EAAMgD,SAChBF,QAAS9C,EAAM8C,QACf+wB,WAAY7zB,EAAMuK,KAClBgB,SAAUvL,EAAMuL,SAChBG,WAAY1L,EAAM0L,WAClBD,aAAczL,EAAMyL,aACpBG,UAAW5L,EAAM4L,UACjB3I,kBAAmBjD,EAAMiD,oBAIN,SAAC0G,GACxB,MAAO,CACHqB,QAAS,SAAA/B,GACLU,EAASgN,GAAgB1N,KAE7BgC,aAAc,SAAAjJ,GAAK,OAAI2H,EAASgN,GAAqB3U,OAKzDjC,CAlFyB,SAAAG,GAAS,IAC1B4C,EAAiD5C,EAAjD4C,QAAS4I,EAAwCxL,EAAxCwL,WAAYD,EAA4BvL,EAA5BuL,aAAcG,EAAc1L,EAAd0L,UAErCiuB,EAAqB,SAAC14B,EAAGyxB,GAAJ,OACvB,IAAIC,KAAK1xB,EAAE2mB,MAAMgL,UAAY,IAAID,KAAKD,EAAE9K,MAAMgL,UAAY,GAAK,GAEnE,IAAKhwB,EAAQkD,IAAK,OAAO,KAEzB,IAAI/C,EAAoB,GARU8B,GAAA,EAAAC,GAAA,EAAAC,OAAAb,EAAA,IASlC,QAAAc,EAAAC,EAAqBrC,EAAQkJ,WAA7B5G,OAAAC,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,EAAyC,KAAhCwG,EAAgCrG,EAAAO,MACjCgG,EAAaF,KACbtI,EAAiB,GAAAtB,OAAArB,OAAAiQ,GAAA,EAAAjQ,CACV2C,GADU3C,OAAAiQ,GAAA,EAAAjQ,CAEVmL,EAAaF,GAAU2oB,kBAbJ,MAAAruB,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAd,EAAA,MAAAC,GAAA,IAAAgH,GAAA,EAAAC,GAAA,EAAAC,OAAA/H,EAAA,IAiBlC,QAAAgI,EAAAC,EAAkBvJ,EAAQwJ,OAA1BlH,OAAAC,cAAA4G,GAAAG,EAAAC,EAAA/G,QAAAC,MAAA0G,GAAA,EAAkC,KAAzBT,EAAyBY,EAAA3G,MAC1BmG,EAAUJ,KACVvI,EAAiB,GAAAtB,OAAArB,OAAAiQ,GAAA,EAAAjQ,CACV2C,GADU3C,OAAAiQ,GAAA,EAAAjQ,CAEVsL,EAAUJ,GAAO0oB,kBArBE,MAAAruB,GAAAqG,GAAA,EAAAC,EAAAtG,EAAA,YAAAoG,GAAA,MAAAI,EAAAvG,QAAAuG,EAAAvG,SAAA,WAAAoG,EAAA,MAAAC,GAAA,IAAAI,GAAA,EAAAC,GAAA,EAAAC,OAAArI,EAAA,IAyBlC,QAAAsI,EAAAC,EAAmB7J,EAAQ6E,QAA3BvC,OAAAC,cAAAkH,GAAAG,EAAAC,EAAArH,QAAAC,MAAAgH,GAAA,EAAoC,KAA3BwB,EAA2BrB,EAAAjH,MAE5BiG,EAAWqC,EAAOA,SACA,WAAlBA,EAAOjG,QACP4D,EAAWqC,EAAOA,QAAQmmB,gBAE1BjxB,EAAiB,GAAAtB,OAAArB,OAAAiQ,GAAA,EAAAjQ,CACV2C,GADU3C,OAAAiQ,GAAA,EAAAjQ,CAEVoL,EAAWqC,EAAOA,QAAQmmB,kBAjCP,MAAAruB,GAAA2G,GAAA,EAAAC,EAAA5G,EAAA,YAAA0G,GAAA,MAAAI,EAAA7G,QAAA6G,EAAA7G,SAAA,WAAA0G,EAAA,MAAAC,GAoClC,IAAMqtB,EAAgB,SAAC9wB,EAAKxD,EAAKqZ,EAAOkb,GAIpC,OAHK/wB,EAAI8N,KAAK,SAAAjP,GAAI,OAAIA,EAAKlC,QAAUH,EAAIG,SACrCqD,EAAIpE,KAAKY,GAENwD,GAiBX,OAbA/F,GAFAA,EAAoBA,EAAkBkP,OAAO2nB,EAAe,KAEtBnH,KAAKkH,GAAoBjF,MAAM,EAAG,KAQxE3xB,GADAA,GALAA,EAAoB,GAAAtB,OAAArB,OAAAiQ,GAAA,EAAAjQ,CACb2C,GADa3C,OAAAiQ,GAAA,EAAAjQ,CAEbwC,EAAQk3B,kBACbpyB,OAAO,SAAAC,GAAI,MAAkB,aAAdA,EAAKyN,QAEgBnD,OAAO2nB,EAAe,KACtBnH,KAAKkH,GACtC/E,KAAQ7xB,EAAmB/C,EAAM+C,oBAClC/C,EAAM8K,QAAQ,CAAE/H,sBAGb/B,EAAAC,EAAAC,cAAA,gBC/BLxB,GAAU,IAAIC,IA6GLC,eACXC,YAlBoB,SAAAC,GACpB,MAAO,CACHgD,SAAUhD,EAAMgD,SAChBsI,KAAMtL,EAAMsL,KACZxI,QAAS9C,EAAM8C,QACfm3B,iBAAkBj6B,EAAMi6B,mBAIL,SAACtwB,GACxB,MAAO,CACHF,QAAS,SAACvJ,EAAOwvB,GAAR,OACL/lB,EAASgN,GAAgBzW,EAAOwvB,KACpCxmB,OAAQ,kBAAMS,EAASgN,SAK3B5W,CA5GQ,SAAAG,GAAS,IACT8C,EAAa9C,EAAb8C,SACRnC,oBAAU,WACNX,EAAMuJ,QAAQvJ,IACf,IAEH,IAAMg6B,EAAat6B,GAAQoB,IAAI,cAE3Bk5B,GACAt6B,GAAQoK,OAAO,aAAc,CACzB5H,KAAM,MAId,IAAM+3B,EAAS,WAEX,OADAj6B,EAAMgJ,SACChI,EAAAC,EAAAC,cAACg5B,EAAA,EAAD,CAAUpH,GAAG,YAGpBqH,EACAn5B,EAAAC,EAAAC,cAACg5B,EAAA,EAAD,KACIl5B,EAAAC,EAAAC,cAACg5B,EAAA,EAAD,CAAOh4B,KAAK,SAASk4B,OAAK,EAACC,UAAWC,KACtCt5B,EAAAC,EAAAC,cAACg5B,EAAA,EAAD,CAAOh4B,KAAK,SAASm4B,UAAWE,KAEhCv5B,EAAAC,EAAAC,cAACg5B,EAAA,EAAD,CAAOh4B,KAAK,cAAck4B,OAAK,EAACC,UAAWG,KAC3Cx5B,EAAAC,EAAAC,cAACg5B,EAAA,EAAD,CAAOh4B,KAAK,cAAcm4B,UAAWI,KACrCz5B,EAAAC,EAAAC,cAACg5B,EAAA,EAAD,CAAOh4B,KAAK,UAAUm4B,UAAWxT,KAEjC7lB,EAAAC,EAAAC,cAACg5B,EAAA,EAAD,CAAOh4B,KAAK,WAAWm4B,UAAWK,KAElC15B,EAAAC,EAAAC,cAACg5B,EAAA,EAAD,CAAOh4B,KAAK,WAAWk4B,OAAK,EAACC,UAAWM,KAExC35B,EAAAC,EAAAC,cAACg5B,EAAA,EAAD,CAAOh4B,KAAK,WAAWk4B,OAAK,EAACC,UAAWO,KACxC55B,EAAAC,EAAAC,cAACg5B,EAAA,EAAD,CAAOh4B,KAAK,aAAak4B,OAAK,EAACC,UAAWQ,KAC1C75B,EAAAC,EAAAC,cAACg5B,EAAA,EAAD,CAAOh4B,KAAK,WAAWk4B,OAAK,EAACC,UAAWS,KAExC95B,EAAAC,EAAAC,cAACg5B,EAAA,EAAD,CAAOh4B,KAAK,QAAQk4B,OAAK,EAACC,UAAWU,KACrC/5B,EAAAC,EAAAC,cAACg5B,EAAA,EAAD,CAAOh4B,KAAK,QAAQm4B,UAAWW,KAC/Bh6B,EAAAC,EAAAC,cAACg5B,EAAA,EAAD,CAAOh4B,KAAK,YAAYk4B,OAAK,EAACC,UAAWY,KACzCj6B,EAAAC,EAAAC,cAACg5B,EAAA,EAAD,CAAOh4B,KAAK,YAAYm4B,UAAWa,MACjCp4B,GAAY9B,EAAAC,EAAAC,cAACg5B,EAAA,EAAD,CAAOh4B,KAAK,SAASk4B,OAAK,EAACC,UAAWc,IACpDn6B,EAAAC,EAAAC,cAACg5B,EAAA,EAAD,CAAOh4B,KAAK,UAAUk4B,OAAK,EAACC,UAAWJ,IAEvCj5B,EAAAC,EAAAC,cAACg5B,EAAA,EAAD,CAAOh4B,KAAK,oBAAoBk4B,OAAK,EAACC,UAAWe,MAEhDC,EAGAv4B,EAAW9B,EAAAC,EAAAC,cAACg5B,EAAA,EAAD,CAAUpH,GAAG,aAAgB9xB,EAAAC,EAAAC,cAACg5B,EAAA,EAAD,CAAUpH,GAAG,YA4B9D,OAxBI9yB,EAAM+5B,mBACNI,EACIn5B,EAAAC,EAAAC,cAACg5B,EAAA,EAAD,MACMp3B,GAAY9B,EAAAC,EAAAC,cAACg5B,EAAA,EAAD,CAAOh4B,KAAK,SAASk4B,OAAK,EAACC,UAAWc,IACpDn6B,EAAAC,EAAAC,cAACg5B,EAAA,EAAD,CAAOh4B,KAAK,UAAUk4B,OAAK,EAACC,UAAWJ,IAEvCj5B,EAAAC,EAAAC,cAACg5B,EAAA,EAAD,CACIh4B,KAAK,oBACLk4B,OAAK,EACLC,UAAWe,MAGdC,EAGAv4B,EACG9B,EAAAC,EAAAC,cAACg5B,EAAA,EAAD,CAAUpH,GAAG,sBAEb9xB,EAAAC,EAAAC,cAACg5B,EAAA,EAAD,CAAUpH,GAAG,aAMtBkH,EACHh5B,EAAAC,EAAAC,cAACg5B,EAAA,EAAD,CAAUpH,GAAIkH,IAEdh5B,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgF,SAAA,KACIjF,EAAAC,EAAAC,cAAA,OAAKwF,MAAO,CAAE0S,OAAQ,SAClBpY,EAAAC,EAAAC,cAACpC,GAAD,KAAgBq7B,GACfr3B,GAAY9B,EAAAC,EAAAC,cAACo6B,GAAD,MACZx4B,GAAY9B,EAAAC,EAAAC,cAACq6B,GAAD,qBCqBdC,GA9GCC,aAzBY,CACxB34B,UAAU,EACVsI,KAAM,KACNS,eAAgB,GAChBjJ,QAAS,GACT4I,WAAY,GACZG,gBAAiB,GACjBJ,aAAc,GACduC,eAAgB,GAChBC,QAAS,GACTkC,gBAAiB,GACjBlB,aAAc,GACdmC,aAAc,GACd7F,SAAU,GACVhB,KAAM,GACNoB,SAAU,GACVH,MAAO,GACPI,UAAW,GACX7I,UAAW,GACX9C,QAAS,GACTumB,mBAAoB,GACpByT,kBAAkB,EAClBh3B,kBAAmB,IAGqB,CACxC24B,SAAU,SAAC57B,EAAewiB,GACtB,GAAIA,EAAOvZ,KAAM,CACb,QAAA+M,EAAA,EAAAC,EAAgB,CACZ,OACA,UACA,WACA,iBACA,iBACA,eACA,eACA,UACA,QACA,kBACA,WACA,qBAZJD,EAAAC,EAAAlO,OAAAiO,IAaG,CAbE,IAAIvN,EAAGwN,EAAAD,GAcwB,qBAArBwM,EAAOvZ,KAAKR,KACnBzI,EAAMyI,GAAO+Z,EAAOvZ,KAAKR,IAGjC,QAAA8N,EAAA,EAAAD,EAAgB,CACZ,aACA,eACA,OACA,WACA,YACA,mBANJC,EAAAD,EAAAvO,OAAAwO,IAOG,CAPE,IAAI9N,EAAG6N,EAAAC,GAQR,GAAgC,qBAArBiM,EAAOvZ,KAAKR,GACnB,IAAK,IAAI4J,KAAQmQ,EAAOvZ,KAAKR,GACrB+Z,EAAOvZ,KAAKR,GAAK4J,KACjBrS,EAAMyI,GAAK4J,GAAQmQ,EAAOvZ,KAAKR,GAAK4J,KAMpDrS,EAAMsL,OACFtL,EAAMsL,KAAKS,gBACX/L,EAAM+L,eAAiB/L,EAAMsL,KAAKS,eAClC/L,EAAMi6B,kBAAmB,GAClBj6B,EAAMsL,KAAKuL,WAClB7W,EAAM+L,eAAiB/L,EAAMsL,KAAKuL,UAClC7W,EAAMi6B,kBAAmB,GAEzBj6B,EAAMi6B,kBAAmB,IAIrC4B,YAAa,SAAC77B,EAAewiB,GACzB,GAAIA,EAAOvZ,KAAM,CACb,QAAA6yB,EAAA,EAAAC,EAAgB,CACZ,OACA,UACA,UACA,WACA,SALJD,EAAAC,EAAAh0B,OAAA+zB,IAMG,CANE,IAAIrzB,EAAGszB,EAAAD,GAMT/2B,GAAA,EAAAC,GAAA,EAAAC,OAAAb,EAAA,IACC,QAAAc,EAAAC,EAAiBqd,EAAOvZ,KAAKR,GAA7BrD,OAAAC,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,EAAmC,KAA1B8C,EAA0B3C,EAAAO,MAC3BzF,EAAMyI,GAAKzC,MAAQ6B,IACnB7H,EAAMyI,GAAO,KAHtB,MAAA5C,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAd,EAAA,MAAAC,IAOH,QAAA+2B,EAAA,EAAAC,EAAgB,CACZ,OACA,aACA,eACA,WACA,YACA,mBANJD,EAAAC,EAAAl0B,OAAAi0B,IAOG,CAPE,IAAIvzB,EAAGwzB,EAAAD,GAOT/vB,GAAA,EAAAC,GAAA,EAAAC,OAAA/H,EAAA,IACC,QAAAgI,EAAAC,EAAiBmW,EAAOvZ,KAAKR,GAA7BrD,OAAAC,cAAA4G,GAAAG,EAAAC,EAAA/G,QAAAC,MAAA0G,GAAA,EAAmC,KAA1BpE,EAA0BuE,EAAA3G,aACxBzF,EAAMyI,GAAKZ,IAFvB,MAAAhC,GAAAqG,GAAA,EAAAC,EAAAtG,EAAA,YAAAoG,GAAA,MAAAI,EAAAvG,QAAAuG,EAAAvG,SAAA,WAAAoG,EAAA,MAAAC,OAOX+vB,yBAA0B,SAACl8B,EAAewiB,GACtCxiB,EAAMwmB,mBAAqBhE,EAAOvZ,MAGtCkzB,iBAAkB,SAACn8B,EAAewiB,GAC1BA,EAAOvZ,OACPjJ,EAAM8C,QAAQqS,YAAcqN,EAAOvZ,MAEnCuZ,EAAOvZ,KAAK2T,OAAM5c,EAAM4c,KAAO4F,EAAOvZ,KAAK2T,OAEnDwf,aAAc,SAACp8B,EAAewiB,GAC1BxiB,EAAM8C,QAAQoE,MAAQsb,EAAO6Z,GAEjCC,kBAAmB,SAACt8B,GAChBA,EAAM8C,QAAQoE,MAAQlH,EAAM8C,QAAQoE,MAAQ,GAEhDq1B,cAAe,SAACv8B,EAAewiB,GAC3BxiB,EAAMgD,SAAWwf,EAAOzX,IAE5ByxB,eAAgB,SAACx8B,EAAewiB,GAC5BxiB,EAAM+C,UAAYyf,EAAOxgB,OAE7By6B,cAAe,SAACz8B,EAAewiB,GACR,WAAfA,EAAO/d,KAAmC,YAAf+d,EAAO/d,MAClCzE,EAAMC,QAAUuiB,EAAO/d,MAE/Bi4B,sBAAuB,SAAC18B,EAAewiB,GACnCxiB,EAAMi6B,iBAAmBzX,EAAO/c,SCrIxCk3B,EAAAhb,EAAAib,EAAA,0BAAAC,KAiBIzyB,IAAMC,SAASyyB,QAAU,kCAItB,IAAM1xB,GAAQ2xB,sBACjBrB,GACAsB,8BAAoBC,0BAAgBC,OAGlCC,GACFj8B,EAAAC,EAAAC,cAACg8B,EAAA,EAAD,CAAUhyB,MAAOA,IACblK,EAAAC,EAAAC,cAACi8B,EAAA,EAAD,KACIn8B,EAAAC,EAAAC,cAACk8B,GAAD,QAKNC,GAAOziB,SAAS0iB,eAAe,QAErCC,IAASC,OAAOP,GAAKI","file":"static/js/main.7276fabb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Auth_Container__1KNy7\",\"socialButtons\":\"Auth_socialButtons__2wwH9\",\"Background\":\"Auth_Background__39m_a\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Dots\":\"imageCarousel_Dots__2JZGt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Avatar\":\"Account_Avatar__l4shx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Layout\":\"Layout_Layout__3t6t4\",\"Header\":\"Layout_Header__3lh1Y\",\"Footer\":\"Layout_Footer__1Dfqu\",\"HideHeader\":\"Layout_HideHeader__2WRsh\",\"FooterButton\":\"Layout_FooterButton__1lZv2\",\"TopHeader\":\"Layout_TopHeader__3_LuK\",\"BottomHeader\":\"Layout_BottomHeader__3DOBo\",\"Main\":\"Layout_Main__3usmk\",\"Button\":\"Layout_Button__1O5Hm\",\"MenuButtonContiner\":\"Layout_MenuButtonContiner__PpulB\",\"QuickButtonContiner\":\"Layout_QuickButtonContiner__4d4Lg\",\"PageTitle\":\"Layout_PageTitle__368dw\"};","import React, { useState, useEffect } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport Checkbox from 'antd/es/checkbox'\nimport Cookies from 'universal-cookie'\nimport classes from './Auth.module.css'\nimport Svg from '../../components/Svg/Svg'\nimport Modal from 'antd/es/modal'\nimport {\n    FacebookLoginButton,\n    GithubLoginButton,\n    GoogleLoginButton,\n} from 'react-social-login-buttons'\n\nconst cookies = new Cookies()\n\nconst Auth = props => {\n    const [state, setState] = useState(false)\n    const [cookieConsent, setCookieConsent] = useState(false)\n\n    useEffect(() => {\n        checkCookieConsent()\n    })\n\n    let remeberMeParam = '?rememberme=false'\n    if (state) {\n        remeberMeParam = '?rememberme=true'\n    }\n\n    let redirectParam = '&redirect=/login'\n    if (props.lastUrl) {\n        redirectParam = '&redirect=' + props.lastUrl\n    }\n\n    const checkCookieConsent = () => {\n        const cookiesConsent = cookies.get('cookies_consent')\n        if (cookiesConsent) {\n            setCookieConsent(true)\n        }\n    }\n\n    const agreeWithCookies = () => {\n        cookies.set('cookies_consent', 'true', {\n            path: '/',\n            maxAge: 31530000,\n        })\n        checkCookieConsent()\n    }\n    const basicURL =\n        process.env.NODE_ENV !== 'development'\n            ? 'https://getreward.herokuapp.com/api/auth/'\n            : 'http://my.websiter.test:5000/api/auth/'\n    return !cookieConsent ? (\n        <Modal\n            title=\"Cookies consent\"\n            visible={!cookieConsent}\n            onOk={agreeWithCookies}\n            onCancel={() => {\n                window.open('https://websiter.dev', '_self')\n            }}\n            destroyOnClose={true}\n            maskClosable={false}\n        >\n            <p>We use cookies only for login purposes. </p>\n            <p>\n                In order to proceed you need to agree with the use of cookies.\n            </p>\n        </Modal>\n    ) : (\n        <div className=\"contentDiv\">\n            <div className={classes.Container}>\n                <h1>Welcome to Websiter!</h1>\n                <h2>This is where great progresses live.</h2>\n                <h1>Continue with:</h1>\n                <div className={classes.socialButtons}>\n                    <FacebookLoginButton\n                        onClick={() =>\n                            (window.location =\n                                basicURL + `facebook/start${remeberMeParam}`)\n                        }\n                    />\n                    <GoogleLoginButton\n                        onClick={() =>\n                            (window.location =\n                                basicURL + `google/start${remeberMeParam}`)\n                        }\n                    />\n                    <GithubLoginButton\n                        onClick={() =>\n                            (window.location =\n                                basicURL + `github/start${remeberMeParam}`)\n                        }\n                    />\n                </div>\n                <Checkbox checked={state} onChange={() => setState(!state)}>\n                    Remember me\n                </Checkbox>\n            </div>\n            <div className={classes.Background} />\n        </div>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        lastUrl: state.lastUrl,\n    }\n}\n\nexport default withRouter(connect(mapStateToProps)(Auth))\n","import React from 'react'\n\nimport Form from 'antd/es/form'\nimport Input from 'antd/es/input'\nimport Button from 'antd/es/button'\nimport axios from 'axios'\nimport Cookies from 'universal-cookie'\n\nconst cookies = new Cookies()\n\nconst Auth = props => {\n    const layout = {\n        labelCol: { span: 8 },\n        wrapperCol: { span: 16 },\n    }\n    const tailLayout = {\n        wrapperCol: { offset: 8, span: 16 },\n    }\n    const onFinish = value => {\n        axios\n            .post('/api/authtest/' + value.id)\n            .then(res => {\n                cookies.set('auth_token', res.data.cookie)\n                props.onTryAutoSignup()\n            })\n            .catch(err => {})\n    }\n    return (\n        <Form\n            name=\"dynamic_form_nest_item\"\n            onFinish={onFinish}\n            autoComplete=\"off\"\n            {...layout}\n        >\n            <Form.Item\n                label=\"Id\"\n                name=\"id\"\n                rules={[\n                    { required: true, message: 'Please input the goal name.' },\n                ]}\n            >\n                <Input />\n            </Form.Item>\n            <Form.Item {...tailLayout}>\n                <Button type=\"primary\" htmlType=\"submit\" size=\"large\">\n                    Save\n                </Button>\n            </Form.Item>\n        </Form>\n    )\n}\n\nexport default Auth\n","export default (nickname, version) => {\n    if (!nickname) return ''\n    else {\n        return (\n            'https://websiter.s3.us-east-2.amazonaws.com/' +\n            nickname +\n            '/avatar?v=' +\n            (version || 0)\n        )\n    }\n}\n","import React, { useState, useEffect } from 'react'\nimport { withRouter } from 'react-router-dom'\n\nimport { connect } from 'react-redux'\nimport Layout from 'antd/es/layout'\nimport Tooltip from 'antd/es/tooltip'\nimport Menu from 'antd/es/menu'\nimport Avatar from 'antd/es/avatar'\nimport Drawer from 'antd/es/drawer'\nimport Button from 'antd/es/button'\nimport Badge from 'antd/es/badge'\nimport * as classes from './Layout.module.css'\nimport AimOutlined from '@ant-design/icons/AimOutlined'\nimport CoffeeOutlined from '@ant-design/icons/CoffeeOutlined'\nimport LogoutOutlined from '@ant-design/icons/LogoutOutlined'\nimport UserOutlined from '@ant-design/icons/UserOutlined'\nimport HeartFilled from '@ant-design/icons/HeartFilled'\nimport RocketFilled from '@ant-design/icons/RocketFilled'\nimport TeamOutlined from '@ant-design/icons/TeamOutlined'\nimport MenuOutlined from '@ant-design/icons/MenuOutlined'\nimport ShopFilled from '@ant-design/icons/ShopFilled'\nimport HomeFilled from '@ant-design/icons/HomeFilled'\nimport PageHeader from 'antd/es/page-header'\nimport getAvatar from '../../utils/getAvatar'\n\nconst { Header, Content, Footer } = Layout\n\nconst AccountLayout = props => {\n    const { account } = props\n    const [menuVisible, setMenuVisible] = useState()\n    const [lastScrollY, setLastScrollY] = useState(0)\n    const [headerVisible, setHeaderVisible] = useState(true)\n\n    useEffect(() => {\n        const handleScroll = () => {\n            const currentScrollY = window.scrollY\n\n            if (currentScrollY > lastScrollY) {\n                setHeaderVisible(false)\n            } else {\n                setHeaderVisible(true)\n            }\n            setLastScrollY(currentScrollY)\n        }\n        window.removeEventListener('scroll', handleScroll)\n        window.addEventListener('scroll', handleScroll)\n        return () => window.removeEventListener('scroll', handleScroll)\n    }, [lastScrollY])\n    const toggleMenu = () => {\n        setMenuVisible(!menuVisible)\n    }\n    const selectedKey =\n        props.history.location.pathname.split('/')[1] || undefined\n\n    const buttonProps = {\n        type: 'link',\n        // ghost: true,\n        size: 'large',\n\n        className: classes.Button,\n    }\n    const checkHighligh = url =>\n        selectedKey === url\n            ? {\n                  ghost: false,\n                  type: 'link',\n              }\n            : { type: 'text' }\n    const openLink = url => props.history.push('/' + url)\n\n    const isActivating = props.history.location.pathname === '/activate-account'\n\n    let numberOfUnseenNots = 0\n\n    for (let not of props.lastNotifications) {\n        if (parseInt(not.notId) > parseInt(account.lastSeenNot || 0))\n            numberOfUnseenNots++\n    }\n    const logedIn = props.isAuthed && account._id\n    return !['/login', '/logout'].includes(props.history.location.pathname) ? (\n        <>\n            <Layout className={classes.Layout}>\n                <Header\n                    className={\n                        headerVisible\n                            ? classes.Header\n                            : [classes.Header, classes.HideHeader].join(' ')\n                    }\n                >\n                    <div className={classes.TopHeader}>\n                        <div className={classes.MenuButtonContiner}>\n                            {logedIn && (\n                                <>\n                                    {!isActivating && (\n                                        <Button\n                                            {...buttonProps}\n                                            icon={<MenuOutlined />}\n                                            onClick={toggleMenu}\n                                        />\n                                    )}\n                                    <div className={classes.PageTitle}>\n                                        {isActivating\n                                            ? 'Activate your account'\n                                            : props.pageTitle.main}\n                                    </div>\n                                </>\n                            )}\n                        </div>\n                        <div className={classes.QuickButtonContiner}>\n                            {logedIn ? (\n                                !isActivating ? (\n                                    <span\n                                        onClick={() => openLink('account')}\n                                        style={{\n                                            margin: '0px 10px',\n                                            cursor: 'pointer',\n                                        }}\n                                    >\n                                        <Avatar\n                                            style={{\n                                                border: '1px solid white',\n                                            }}\n                                            src={getAvatar(\n                                                account._id,\n                                                account.image\n                                            )}\n                                        />\n                                    </span>\n                                ) : (\n                                    <Button\n                                        {...buttonProps}\n                                        {...checkHighligh('friends')}\n                                        icon={<LogoutOutlined />}\n                                        onClick={() =>\n                                            props.history.push('/logout')\n                                        }\n                                    >\n                                        Logout\n                                    </Button>\n                                )\n                            ) : (\n                                <Tooltip\n                                    title=\"Sign in or Sign up\"\n                                    placement=\"bottomRight\"\n                                    mouseEnterDelay={0.3}\n                                >\n                                    <Button\n                                        {...buttonProps}\n                                        {...checkHighligh('friends')}\n                                        icon={<LogoutOutlined />}\n                                        onClick={() =>\n                                            props.history.push('/login')\n                                        }\n                                    >\n                                        Sign in or Sign up\n                                    </Button>\n                                </Tooltip>\n                            )}\n                        </div>\n                    </div>\n                </Header>\n                <Content className={classes.Main}>{props.children}</Content>\n                {!isActivating && logedIn && (\n                    <Footer className={classes.Footer}>\n                        <Button\n                            {...buttonProps}\n                            {...checkHighligh('dashboard')}\n                            onClick={() => openLink('dashboard')}\n                        >\n                            <Badge count={numberOfUnseenNots}>\n                                <HomeFilled />{' '}\n                                <div className={classes.FooterButton}>\n                                    Dashboard\n                                </div>\n                            </Badge>\n                        </Button>\n\n                        <Button\n                            {...buttonProps}\n                            {...checkHighligh('progresses')}\n                            onClick={() => openLink('progresses')}\n                        >\n                            <Badge count={0}>\n                                <RocketFilled />\n                                <div className={classes.FooterButton}>\n                                    Progresses\n                                </div>\n                            </Badge>\n                        </Button>\n\n                        <Button\n                            {...buttonProps}\n                            {...checkHighligh('shop')}\n                            onClick={() => openLink('shop')}\n                        >\n                            <Badge count={0}>\n                                <ShopFilled />\n                                <div className={classes.FooterButton}>Shop</div>\n                            </Badge>\n                        </Button>\n\n                        <Button\n                            {...buttonProps}\n                            {...checkHighligh('friends')}\n                            onClick={() => openLink('friends')}\n                        >\n                            <Badge\n                                count={\n                                    account.friends.filter(\n                                        item => item.status === 'inviting'\n                                    ).length\n                                }\n                            >\n                                <TeamOutlined />\n                                <div className={classes.FooterButton}>\n                                    Friends\n                                </div>\n                            </Badge>\n                        </Button>\n                    </Footer>\n                )}\n                {!isActivating && logedIn && (\n                    <Drawer\n                        title=\"Menu\"\n                        closable={true}\n                        onClose={toggleMenu}\n                        visible={menuVisible}\n                        placement=\"left\"\n                    >\n                        <Menu\n                            theme=\"light\"\n                            mode=\"vertical\"\n                            selectedKeys={[selectedKey]}\n                            onClick={({ key }) => {\n                                props.history.push('/' + key)\n                                toggleMenu()\n                            }}\n                            overflowedIndicator={<MenuOutlined />}\n                        >\n                            <Menu.Item key=\"explore\" icon={<CoffeeOutlined />}>\n                                Explore\n                            </Menu.Item>\n                            <Menu.Item key=\"dashboard\" icon={<HomeFilled />}>\n                                Dashboard\n                            </Menu.Item>\n                            <Menu.Item key=\"progresses\" icon={<RocketFilled />}>\n                                Progresses\n                            </Menu.Item>\n                            <Menu.Item key=\"shop\" icon={<ShopFilled />}>\n                                Shop\n                            </Menu.Item>\n                            <Menu.Item key=\"friends\" icon={<TeamOutlined />}>\n                                Friends\n                            </Menu.Item>\n                            {/* <Menu.Item key=\"goals\" icon={<AimOutlined />}>\n                                Goals\n                            </Menu.Item> */}\n                            <Menu.Item key=\"wishlist\" icon={<HeartFilled />}>\n                                Wishlist\n                            </Menu.Item>\n                            <Menu.Item key=\"account\" icon={<UserOutlined />}>\n                                Account\n                            </Menu.Item>\n                            <Menu.Item key=\"logout\" icon={<LogoutOutlined />}>\n                                Logout\n                            </Menu.Item>\n                        </Menu>\n                    </Drawer>\n                )}\n            </Layout>\n        </>\n    ) : (\n        props.children\n    )\n\n    // <>\n    //         <Layout className={classes.Layout}>\n    //             <Header className={classes.Header}>\n    //                 <div className={classes.TopHeader}>\n    //                     <div className={classes.MenuButtonContiner} />\n    //                     <div className={classes.QuickButtonContiner}>\n    //                         <Tooltip\n    //                             title=\"Sign in or Sign up\"\n    //                             placement=\"bottomRight\"\n    //                             mouseEnterDelay={0.3}\n    //                         >\n    //                             <Button\n    //                                 {...buttonProps}\n    //                                 {...checkHighligh('friends')}\n    //                                 icon={<LogoutOutlined />}\n    //                                 onClick={() => props.history.push('/login')}\n    //                             >\n    //                                 Sign in or Sign up\n    //                             </Button>\n    //                         </Tooltip>\n    //                     </div>\n    //                 </div>\n    //                 {/* <div className={classes.BottomHeader}>\n    //                     <PageHeader\n    //                         className=\"site-page-header\"\n    //                         onBack={() => props.history.goBack()}\n    //                         title={props.pageTitle && props.pageTitle.main}\n    //                         subTitle={\n    //                             (props.pageTitle && props.pageTitle.sub) || ''\n    //                         }\n    //                     />\n    //                 </div> */}\n    //             </Header>\n    //             <Content className={classes.Main}>\n    //                 <div>{props.children}</div>\n    //             </Content>\n    //         </Layout>\n    //     </>\n}\n\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n        pageTitle: state.pageTitle,\n        isAuthed: state.isAuthed,\n        lastNotifications: state.lastNotifications,\n    }\n}\n\nexport default withRouter(connect(mapStateToProps)(AccountLayout))\n","import message from 'antd/es/message'\n\nexport default (res, props) => {\n    if (res.data.logout) props.history.push('/logout')\n    if (res.data.success === false) {\n        if (res.data.errorCode) {\n            switch (res.data.errorCode) {\n                case 'no account':\n                    message.warning('Account is not found. Please login.')\n                    break\n                case 'bad data':\n                    message.error(\n                        'Error. Please try one more time with correct data.'\n                    )\n                    break\n                case 'progress exist':\n                    message.warning('This progress already exists.')\n                    break\n                default:\n                    message.warning(\n                        'Something wrong has happened... Try again!'\n                    )\n                    break\n            }\n        } else {\n            message.error('Something failed')\n        }\n    } else {\n        if (res.data.successCode) {\n            switch (res.data.successCode) {\n                case 'avatar saved':\n                    message.success('The avatar image has been updated.')\n                    break\n                case 'success':\n                    message.success('Success!')\n                    break\n                case 'item saved':\n                    message.success('Item is saved')\n                    break\n                case 'prgress created':\n                    message.success('Progress has started!')\n                    break\n                default:\n                    message.success('Success!')\n                    break\n            }\n        }\n    }\n    if (res.data.status && res.data.status === 'no account')\n        props.history.push('/activate-account')\n}\n","import axios from 'axios'\n\nimport Cookies from 'universal-cookie'\nimport jwt from 'jsonwebtoken'\nimport processRes from '../../utils/processRes'\n\nconst cookies = new Cookies()\n\nexport const tryAuth = (props, forceLogin) => (dispatch: Object) => {\n    sessionStorage.setItem('systemRefresh', '0')\n    const token = cookies.get('auth_token')\n    const rememberMe = cookies.get('rememberme')\n    if (rememberMe) {\n        cookies.remove('rememberme', {\n            path: '/',\n        })\n        if (rememberMe === 'false') {\n            cookies.remove('auth_token', {\n                path: '/',\n            })\n        }\n    }\n    const userId = jwt.decode(token)\n    axios.defaults.headers.post['Content-Type'] = 'application/json'\n    axios.defaults.headers.put['Content-Type'] = 'application/json'\n    axios.defaults.headers.delete['Content-Type'] = 'application/json'\n    axios.defaults.headers.common.Accept = 'application/json'\n    if (token && userId) {\n        axios.defaults.headers.common['x-auth-token'] = token\n        axios.defaults.headers.post['x-auth-token'] = token\n        axios.defaults.headers.get['x-auth-token'] = token\n        axios.defaults.headers.delete['x-auth-token'] = token\n        axios.defaults.headers.put['x-auth-token'] = token\n        dispatch(setIsAuthed(userId._id))\n    } else {\n        dispatch(setIsAuthed(false))\n        dispatch(saveLastUrl(props.history.location.pathname))\n        const pathParts = props.history.location.pathname.split('/')\n        if (\n            pathParts.length === 2 &&\n            !['explore', 'login', 'logintest'].includes(pathParts[1])\n        )\n            props.history.push('/logout')\n\n        if (forceLogin) props.history.push('/logout')\n    }\n}\n\nconst saveLastUrl = url => ({\n    type: 'SAVE_LAST_URL',\n    url,\n})\n\nconst setIsAuthed = id => ({\n    type: 'SET_IS_AUTHED',\n    id,\n})\n\nexport const logout = () => dispatch => {\n    cookies.remove('rememberme', {\n        path: '/',\n    })\n    cookies.remove('auth_token', {\n        path: '/',\n    })\n    delete axios.defaults.headers.common['x-auth-token']\n    delete axios.defaults.headers.post['x-auth-token']\n    delete axios.defaults.headers.get['x-auth-token']\n    delete axios.defaults.headers.delete['x-auth-token']\n    delete axios.defaults.headers.put['x-auth-token']\n    dispatch(setIsAuthed(false))\n}\n\nexport const setData = data => ({\n    type: 'SET_DATA',\n    data,\n})\n\nexport const removeData = data => ({\n    type: 'REMOVE_DATA',\n    data,\n})\n\nexport const setFriendsData = data => ({\n    type: 'SET_FRIENDS_DATA',\n    data,\n})\n\nexport const setAvatarV = v => ({\n    type: 'SET_AVATAR_V',\n    v,\n})\n\nexport const increaseAvatarV = () => ({\n    type: 'INCREASE_AVATAR_V',\n})\n\nexport const setPageTitle = title => ({\n    type: 'SET_PAGE_TITLE',\n    title,\n})\n\nexport const buyPerk = (account, perk, owner, props) => dispatch => {\n    const currency = account.wallet.find(item => item.user === owner._id)\n    if (currency && currency.amount >= perk.price) {\n        axios\n            .post('/api/shop/buy', {\n                perkId: perk.perkId,\n                ownerId: owner._id,\n            })\n            .then(res => {\n                processRes(res)\n                if (res.data.success) {\n                    dispatch(setData(res.data, props.history.location.pathname))\n                }\n            })\n            .catch(err => {})\n    } else {\n        alert(\n            'You cannot buy this item as you do not have enough money from this user.'\n        )\n    }\n}\n\nexport const confirmTransaction = (transactionId, props) => dispatch => {\n    axios\n        .post('/api/shop/confirm', {\n            transactionId,\n        })\n        .then(res => {\n            processRes(res)\n            if (res.data.success) {\n                dispatch(setData(res.data, props.history.location.pathname))\n            }\n        })\n        .catch(err => {})\n}\n\nexport const cancelTransaction = (transactionId, props) => dispatch => {\n    axios\n        .post('/api/shop/cancel', {\n            transactionId,\n        })\n        .then(res => {\n            processRes(res)\n            if (res.data.success) {\n                dispatch(setData(res.data, props.history.location.pathname))\n            }\n        })\n        .catch(err => {})\n}\n\nexport const setFriendSearchResult = data => ({\n    type: 'SET_FRIEND_SEARCH_RESULT',\n    data,\n})\n\nexport const setAccountActivated = value => ({\n    type: 'SET_ACCOUNT_ACTIVATED',\n    value,\n})\n","export default props => {\n    const createEmptyObj = () => ({\n        user: [],\n        account: [],\n        progress: [],\n        post: [],\n        group: [],\n        progressData: [],\n        friendData: [],\n        postData: [],\n        groupData: [],\n        transactionData: [],\n    })\n    const { store } = props\n    const requestedResources = createEmptyObj()\n    const neededResources = createEmptyObj()\n    if (store.isAuthed) {\n        if (!store.user) {\n            requestedResources.user.push(store.isAuthed)\n        } else {\n            neededResources.user.push(store.user._id)\n            if (store.currentAccount) {\n                if (store.account._id !== store.currentAccount) {\n                    requestedResources.account.push(store.currentAccount)\n                } else {\n                    neededResources.account.push(store.account._id)\n                    for (let progress of store.account.progresses) {\n                        if (!store.progressData[progress]) {\n                            requestedResources.progressData.push(progress)\n                        }\n                        neededResources.progressData.push(progress)\n                    }\n                    for (let group of store.account.groups) {\n                        if (!store.groupData[group]) {\n                            requestedResources.groupData.push(group)\n                        }\n                        neededResources.groupData.push(group)\n                    }\n                    for (let post of store.account.followPosts) {\n                        if (!store.postData[post]) {\n                            requestedResources.postData.push(post)\n                        }\n                        neededResources.postData.push(post)\n                    }\n                    for (let post of store.account.myPosts) {\n                        if (!store.postData[post]) {\n                            requestedResources.postData.push(post)\n                        }\n                        neededResources.postData.push(post)\n                    }\n                    for (let transaction of store.account.transactions) {\n                        if (!store.transactionData[transaction]) {\n                            requestedResources.transactionData.push(transaction)\n                        }\n                        neededResources.transactionData.push(transaction)\n                    }\n                    for (let friend of store.account.friends) {\n                        if (!store.friendData[friend.friend]) {\n                            requestedResources.friendData.push(friend.friend)\n                        }\n                        neededResources.friendData.push(friend.friend)\n                    }\n                }\n            }\n            if (store.currentProfile) {\n                if (store.profile._id !== store.currentProfile) {\n                    requestedResources.account.push(store.currentProfile)\n                } else {\n                    neededResources.account.push(store.profile._id)\n                    for (let progress of store.profile.progresses) {\n                        if (!store.progressData[progress]) {\n                            requestedResources.progressData.push(progress)\n                        }\n                        neededResources.progressData.push(progress)\n                    }\n                    for (let group of store.profile.groups) {\n                        if (!store.groupData[group]) {\n                            requestedResources.groupData.push(group)\n                        }\n                        neededResources.groupData.push(group)\n                    }\n                    for (let friend of store.profile.friends) {\n                        if (!store.friendData[friend.friend]) {\n                            requestedResources.friendData.push(friend.friend)\n                        }\n                        neededResources.friendData.push(friend.friend)\n                    }\n                }\n            }\n            if (store.currentGroup) {\n                if (store.group._id !== store.currentGroup) {\n                    requestedResources.group.push(store.currentGroup)\n                } else {\n                    neededResources.group.push(store.group._id)\n                    for (let user of store.group.users) {\n                        if (!store.friendData[user]) {\n                            requestedResources.friendData.push(user)\n                        }\n                        neededResources.friendData.push(user)\n                    }\n                    for (let progress of store.group.progresses) {\n                        if (!store.progressData[progress]) {\n                            requestedResources.progressData.push(progress)\n                        }\n                        neededResources.progressData.push(progress)\n                    }\n                    for (let post of store.group.posts) {\n                        if (!store.postData[post]) {\n                            requestedResources.postData.push(post)\n                        }\n                        neededResources.postData.push(post)\n                    }\n                }\n            }\n            if (store.currentProgress) {\n                if (store.progress._id !== store.currentProgress) {\n                    requestedResources.progress.push(store.currentProgress)\n                } else {\n                    neededResources.progress.push(store.progress._id)\n                    let participants = []\n                    if (store.progress.owner)\n                        participants.push(store.progress.owner)\n                    if (store.progress.worker)\n                        participants.push(store.progress.worker)\n                    participants = [\n                        ...participants,\n                        ...(store.progress.experts || []),\n                        ...(store.progress.supporters || []),\n                    ]\n                    for (let friend of participants) {\n                        if (!store.friendData[friend]) {\n                            requestedResources.friendData.push(friend)\n                        }\n                        neededResources.friendData.push(friend)\n                    }\n                    for (let post of store.progress.posts) {\n                        if (!store.postData[post]) {\n                            requestedResources.postData.push(post)\n                        }\n                        neededResources.postData.push(post)\n                    }\n                }\n            }\n            if (store.currentPosts) {\n                for (let post of store.currentPosts) {\n                    const postEl = store.post[post]\n                    if (!postEl) {\n                        requestedResources.post.push(post)\n                    } else {\n                        neededResources.post.push(post)\n                        for (let friend of postEl.users) {\n                            if (!store.friendData[friend]) {\n                                requestedResources.friendData.push(friend)\n                            }\n                            neededResources.friendData.push(friend)\n                        }\n                        if (post.parent) {\n                            if (post.parent.parentType === 'progress')\n                                neededResources.progressData.push(\n                                    post.parent.parentId\n                                )\n                            else if (post.parent.parentType === 'group')\n                                neededResources.groupData.push(\n                                    post.parent.parentId\n                                )\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    const reduce = obj => {\n        for (let attr in obj) {\n            if (obj[attr]) {\n                obj[attr] = Array.from(new Set(obj[attr]))\n            }\n        }\n    }\n\n    reduce(neededResources)\n    const notNeededResources = createEmptyObj()\n    notNeededResources.profile = []\n    let notNeededExist\n    const check1 = (key, mode) => {\n        if (\n            store[mode]._id &&\n            !neededResources[key].includes(store[mode]._id)\n        ) {\n            notNeededResources[mode].push(store[mode]._id)\n            notNeededExist = true\n        }\n    }\n    const check2 = key => {\n        for (let attr in store[key]) {\n            if (!neededResources[key].includes(attr)) {\n                notNeededResources[key].push(attr)\n                notNeededExist = true\n            }\n        }\n    }\n    check1('account', 'account')\n    check1('account', 'profile')\n    check1('group', 'group')\n    check1('progress', 'progress')\n    check2('post')\n    check2('friendData')\n    check2('progressData')\n    check2('transactionData')\n    check2('postData')\n    check2('groupData')\n\n    if (notNeededExist) {\n        props.removeData(notNeededResources)\n    }\n\n    reduce(requestedResources)\n\n    return requestedResources\n}\n","import requestResource from './requestResource'\n\nexport default (versions, state, store, webSocket) => {\n    const notNeededResources = {\n        user: [],\n        account: [],\n        progress: [],\n        post: [],\n        group: [],\n        progressData: [],\n        friendData: [],\n        postData: [],\n        groupData: [],\n        transactionData: [],\n    }\n\n    const checkData = key => {\n        for (let attr in versions[key]) {\n            if (typeof versions[key][attr] !== 'undefined') {\n                if (store[key][attr]) {\n                    if (store[key][attr] !== versions[key][attr]) {\n                        requestResource(key, [attr], state)\n                    }\n                } else notNeededResources[key].push(attr)\n            }\n        }\n    }\n\n    const check = key => {\n        for (let attr in versions[key]) {\n            if (typeof versions[key][attr] !== 'undefined') {\n                if (store[key]._id === attr) {\n                    if (store[key].__v !== versions[key][attr]) {\n                        requestResource(key, [attr], state)\n                    }\n                    if (!store[key]._id) notNeededResources[key].push(attr)\n                } else notNeededResources[key].push(attr)\n            }\n        }\n    }\n\n    for (let attr in versions.user) {\n        if (typeof versions.user[attr] !== 'undefined') {\n            if (store.user._id === attr) {\n                if (store.user.__v !== versions.user[attr]) {\n                    requestResource('user', [attr], state)\n                }\n            } else notNeededResources.user.push(attr)\n        }\n    }\n\n    for (let attr in versions.account) {\n        if (typeof versions.account[attr] !== 'undefined') {\n            if (store.account._id === attr) {\n                if (store.account.__v !== versions.account[attr]) {\n                    requestResource('account', [attr], state)\n                }\n            }\n            if (store.profile._id === attr) {\n                if (store.profile.__v !== versions.account[attr]) {\n                    requestResource('account', [attr], state)\n                }\n                if (!store.account._id) notNeededResources.account.push(attr)\n            }\n        }\n        if (store.account._id !== attr && store.profile._id !== attr)\n            notNeededResources.account.push(attr)\n    }\n\n    check('progress')\n    check('group')\n\n    checkData('post')\n    checkData('friendData')\n    checkData('progressData')\n    checkData('postData')\n    checkData('groupData')\n    checkData('transactionData')\n\n    if (\n        notNeededResources.user.length > 0 ||\n        notNeededResources.account.length > 0 ||\n        notNeededResources.progress.length > 0 ||\n        notNeededResources.post.length > 0 ||\n        notNeededResources.group.length > 0 ||\n        notNeededResources.friendData.length > 0 ||\n        notNeededResources.progressData.length > 0 ||\n        notNeededResources.postData.length > 0 ||\n        notNeededResources.groupData.length > 0 ||\n        notNeededResources.transactionData.length > 0\n    ) {\n        return notNeededResources\n    }\n}\n","export default props => {\n    const { store } = props\n    const resources = {\n        user: {},\n        account: {},\n        progress: {},\n        post: {},\n        group: {},\n        transactionData: {},\n        friendData: {},\n        progressData: {},\n        groupData: {},\n        postData: {},\n    }\n\n    if (store.user && store.user._id) {\n        resources.user[store.user._id] = store.user.__v\n    }\n\n    if (store.account._id) {\n        resources.account[store.account._id] = store.account.__v\n    }\n    if (store.profile._id) {\n        resources.account[store.profile._id] = store.profile.__v\n    }\n    if (store.progress._id) {\n        resources.progress[store.progress._id] = store.progress.__v\n    }\n    if (store.group._id) {\n        resources.group[store.group._id] = store.group.__v\n    }\n\n    const addData = key => {\n        for (let item in store[key]) {\n            if (typeof store[key][item] !== 'undefined') {\n                if (store[key][item]._id) {\n                    resources[key][store[key][item]._id] = store[key][item].__v\n                }\n            }\n        }\n    }\n\n    addData('post')\n    addData('friendData')\n    addData('postData')\n    addData('groupData')\n    addData('progressData')\n    addData('TransactionData')\n\n    return resources\n}\n","import React, { Component } from 'react'\nimport axios from 'axios'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport message from 'antd/es/message'\nimport * as wsActions from '../../websocketActions'\nimport cloneDeep from 'lodash.clonedeep'\nimport getListOfNeededResources from './methods/getListOfNeededResources'\nimport compareVersionsAndRerequest from './methods/compareVersionsAndRerequest'\nimport getResourcesToMonitor from './methods/getResourcesToMonitor'\nconst diffpatcher = require('jsondiffpatch/dist/jsondiffpatch.umd.js').create({\n    propertyFilter: (name, context) => name !== 'patch',\n})\n\nexport let webSocket = false\n\nclass ConnectWebsocket extends Component {\n    state = {\n        user: [],\n        account: [],\n        progress: [],\n        post: [],\n        group: [],\n        friendData: [],\n        progressData: [],\n        postData: [],\n        groupData: [],\n        transactionData: [],\n    }\n    start = () => {\n        let url\n        if (process.env.NODE_ENV === 'development') {\n            url = 'ws://my.websiter.test:5000'\n        } else {\n            url = 'wss://getreward.herokuapp.com'\n        }\n        let pingTimeout\n        webSocket = new WebSocket(url)\n\n        const heartbeat = versions => {\n            let notNeededResources\n            if (versions) {\n                notNeededResources = compareVersionsAndRerequest(\n                    versions,\n                    this.state,\n                    this.props.store,\n                    webSocket\n                )\n            }\n            clearTimeout(pingTimeout)\n\n            pingTimeout = setTimeout(() => {\n                webSocket.close()\n            }, 30000 + 1000)\n\n            webSocket.send(\n                JSON.stringify({\n                    messageCode: 'heartbeat',\n                    notNeededResources,\n                    //get back list of online friends\n                })\n            )\n        }\n\n        webSocket.onopen = event => {\n            const resourcesToMonitor = getResourcesToMonitor(this.props)\n            webSocket.send(\n                JSON.stringify({\n                    messageCode: 'auth',\n                    user: axios.defaults.headers.common['x-auth-token'],\n                    resourcesToMonitor,\n                    // progressId: this.props.progress._id,\n                })\n            )\n            this.initializeRequestResources(this.props)\n            heartbeat()\n        }\n\n        webSocket.onmessage = event => {\n            const news = JSON.parse(event.data)\n\n            switch (news.messageCode) {\n                case 'heartbeat':\n                    heartbeat(news.versions)\n                    break\n                case 'logout':\n                    this.props.logout()\n                    this.props.history.push('/logout')\n                    break\n\n                case 'successMessage':\n                    message.success(news.messageText)\n                    break\n                case 'errorMessage':\n                    message.error(news.messageText)\n                    break\n                case 'friendsData':\n                    this.props.setFriendsData(news.friendsData)\n                    break\n                case 'redirectToProgresses':\n                    this.props.history.push('/progresses')\n                    break\n                case 'addResource':\n                    this.props.saveResource(news.resources, news.type)\n                    break\n                case 'updateResource':\n                    this.props.updateResource(\n                        news.code,\n                        news.id,\n                        news.update,\n                        this.state\n                    )\n                    break\n                case 'friendSearchResult':\n                    this.props.setFriendSearchResult(news.data)\n                    break\n\n                // case 'update':\n                //     let newProgress\n                //     let oldProgress = cloneDeep(this.props.progress)\n                //     if (oldProgress.__v === news.progress.__v - 1) {\n                //         newProgress = diffpatcher.patch(\n                //             oldProgress,\n                //             news.progress.patch\n                //         )\n                //         newProgress.__v = news.progress.__v\n                //         this.props.setData(\n                //             {\n                //                 progress: newProgress,\n                //             },\n                //             this.props.history.location.pathname\n                //         )\n                //     }\n                //     wsActions.getFriendsData(\n                //         newProgress || this.props.progress,\n                //         this.props.account.friends\n                //     )\n                //     break\n                case 'error':\n                    message.error(news.text)\n                    break\n                // case 'notFoundResource':\n                //     this.markNotFoundResource(data)\n                //     break\n                default:\n                    break\n            }\n        }\n        webSocket.onclose = event => {\n            clearTimeout(pingTimeout)\n        }\n    }\n\n    // markNotFoundResource = data => {\n    //     const requestedResources = this.state.requestedResources.filter(\n    //         item => item.id.toString() === data._id.toString()\n    //     )\n    //     this.setState({ requestedResources })\n    // }\n\n    checkInterval = null\n\n    check = () => {\n        if (!webSocket || webSocket.readyState === 3) {\n            clearInterval(this.checkInterval)\n            this.checkInterval = setInterval(this.check, 5000)\n            this.start()\n        }\n    }\n    componentWillMount() {\n        this.checkInterval = setInterval(this.check, 50)\n    }\n\n    reRequestResourcesInterval = null\n    reRequestResources = () => {\n        for (let group of [\n            'user',\n            'account',\n            'progress',\n            'post',\n            'group',\n            'postData',\n            'groupData',\n            'progressData',\n            'friendData',\n            'transactionData',\n        ]) {\n            if (this.state[group].length > 0) {\n                if (webSocket && webSocket.readyState === 1) {\n                    webSocket.send(\n                        JSON.stringify({\n                            messageCode: 'requestResource',\n                            ids: this.state[group],\n                            type: group,\n                        })\n                    )\n                }\n            }\n        }\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.checkInterval)\n        if (webSocket) {\n            webSocket.close()\n        }\n    }\n    // componentDidMount() {\n    //     this.initializeRequestResources(this.props)\n    // }\n    componentWillReceiveProps(nextProps) {\n        this.initializeRequestResources(nextProps)\n    }\n\n    initializeRequestResources = nextProps => {\n        const newRequestedResources = getListOfNeededResources(nextProps)\n        for (let group of [\n            'user',\n            'account',\n            'progress',\n            'post',\n            'group',\n            'postData',\n            'groupData',\n            'progressData',\n            'friendData',\n            'transactionData',\n        ]) {\n            if (newRequestedResources[group].length > 0) {\n                if (webSocket && webSocket.readyState === 1) {\n                    webSocket.send(\n                        JSON.stringify({\n                            messageCode: 'requestResource',\n                            ids: newRequestedResources[group].filter(\n                                item => !this.state[group].includes(item)\n                            ),\n                            type: group,\n                        })\n                    )\n                }\n            }\n        }\n        this.setState(() => newRequestedResources)\n        clearInterval(this.reRequestResourcesInterval)\n        this.reRequestResourcesInterval = setInterval(\n            this.reRequestResources,\n            3000\n        )\n    }\n\n    render() {\n        return null\n    }\n}\nconst mapStateToProps = state => {\n    return {\n        store: state,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: (data, pulledFrom) =>\n            dispatch(actions.setData(data, pulledFrom)),\n        removeData: data => dispatch(actions.removeData(data)),\n        saveResource: (data, type) =>\n            dispatch(actions.saveResource(data, type)),\n        setFriendsData: data => dispatch(actions.setFriendsData(data)),\n\n        updateResource: (code, id, update, state) =>\n            dispatch(actions.updateResource(code, id, update, state)),\n        setFriendSearchResult: data =>\n            dispatch(actions.setFriendSearchResult(data)),\n\n        logout: () => dispatch(actions.logout()),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(ConnectWebsocket)\n)\n","import { setData } from './auth'\n\nexport const saveResource = (data, type) => (dispatch, getState) => {\n    if (data.length > 0) {\n        const state = getState()\n        switch (type) {\n            case 'user':\n                const user = data[0]\n                let currentAccount = user.currentAccount\n                if (!currentAccount) currentAccount = user.myAccount\n                // if(!currentAccount)\n                //activate-account\n                dispatch(setData({ user, currentAccount }))\n                break\n            case 'account':\n                const account = data.find(\n                    item => item._id === state.currentAccount\n                )\n                if (account) {\n                    dispatch(setData({ account }))\n                }\n\n                const profile = data.find(\n                    item => item._id === state.currentProfile\n                )\n                if (profile) {\n                    dispatch(setData({ profile }))\n                }\n\n                break\n            case 'progress':\n                const progress = data.find(\n                    item => item._id === state.currentProgress\n                )\n                if (progress) {\n                    dispatch(setData({ progress }))\n                }\n                break\n            case 'group':\n                const group = data.find(item => item._id === state.currentGroup)\n                if (group) {\n                    dispatch(setData({ group }))\n                }\n                break\n            case 'post':\n                let post = {}\n                for (let item of data) {\n                    post[item._id] = item\n                }\n                dispatch(setData({ post }))\n                break\n            case 'friendData':\n                let friendData = {}\n                for (let item of data) {\n                    friendData[item._id] = item\n                }\n                dispatch(setData({ friendData }))\n                break\n            case 'progressData':\n                let progressData = {}\n                for (let item of data) {\n                    progressData[item._id] = item\n                }\n                dispatch(setData({ progressData }))\n                break\n            case 'transactionData':\n                let transactionData = {}\n                for (let item of data) {\n                    transactionData[item._id] = item\n                }\n                dispatch(setData({ transactionData }))\n                break\n            case 'postData':\n                let postData = {}\n                for (let item of data) {\n                    postData[item._id] = item\n                }\n                dispatch(setData({ postData }))\n                break\n            case 'groupData':\n                let groupData = {}\n                for (let item of data) {\n                    groupData[item._id] = item\n                }\n                dispatch(setData({ groupData }))\n                break\n            default:\n                break\n        }\n    }\n}\n","import { webSocket } from '../ConnectWebsocket'\n\nexport default (type, ids, state) => {\n    const notRequestedIds = ids.filter(id => !state[type].includes(id))\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'requestResource',\n                ids: notRequestedIds,\n                type,\n            })\n        )\n    }\n}\n","import requestResource from '../../containers/ConnectWebsocket/methods/requestResource'\nimport * as actions from './index'\nimport cloneDeep from 'lodash.clonedeep'\n\nconst applyDelta = (source, delta, watchFields) => {\n    // console.log('---------------------------APLY DELTA------------------------')\n    // console.log('----------------source----------------')\n    // console.log(source)\n    // console.log('----------------delta-------------------')\n    // console.log(delta)\n    const result = cloneDeep(source)\n\n    const applyUpdateToPart = (res, del, watchFields) => {\n        const applyWithDot = (res, keys, del) => {\n            if (keys.length > 1) {\n                const key = keys.shift()\n                applyWithDot(res[key], keys, del)\n            } else {\n                if (typeof res === 'array') {\n                    res.push(del)\n                } else {\n                    res[keys[0]] = del\n                }\n            }\n        }\n        for (let attr in del) {\n            const keys = attr.split('.')\n            if (!watchFields || watchFields.includes(keys[0])) {\n                if (typeof del[attr] !== 'undefined') {\n                    applyWithDot(res, keys, del[attr])\n                }\n            }\n        }\n    }\n\n    applyUpdateToPart(result, delta.updatedFields, watchFields)\n\n    const applyDeleteToPart = (result, keys) => {\n        if (keys.length > 1) {\n            const key = keys.shift()\n            applyDeleteToPart(result[key], keys)\n        } else {\n            if (typeof result === 'object') {\n                delete result[keys[0]]\n            } else if (typeof result === 'array') {\n                result.splice(keys[0], 1)\n            }\n        }\n    }\n\n    for (let field of delta.removedFields) {\n        if (field.indexOf('.') > -1) {\n            const keys = field.split('.')\n            if (!watchFields || watchFields.includes(keys[0]))\n                applyDeleteToPart(result, keys)\n        } else {\n            delete result[field]\n        }\n    }\n    return result\n}\n\nexport const updateResource = (code, id, update, parState) => (\n    dispatch,\n    getState\n) => {\n    if (update && id && code) {\n        const state = getState()\n        const check = key => {\n            if (state[key]._id === id) {\n                if (state[key].__v === update.updatedFields.__v - 1) {\n                    const element = applyDelta(state[key], update)\n                    dispatch(actions.setData({ [key]: element }))\n                } else {\n                    if (state[key].id) requestResource(code, [id], parState)\n                }\n            }\n        }\n        const check2 = (key, watchFields) => {\n            let updateData = {\n                [key]: cloneDeep(state[key]),\n            }\n            const friend = updateData[key][id]\n            if (friend) {\n                if (friend.__v === update.updatedFields.__v - 1) {\n                    updateData[key][id] = applyDelta(\n                        friend,\n                        update,\n                        watchFields\n                    )\n                    dispatch(actions.setData(updateData))\n                } else {\n                    requestResource(code, [id], parState)\n                }\n            }\n        }\n        switch (code) {\n            case 'user':\n                check('user')\n                break\n            case 'account':\n                check('account')\n                check('profile')\n                break\n            case 'progress':\n                check('progress')\n                break\n            case 'group':\n                check('group')\n                break\n            case 'post':\n                dispatch(actions.setData(check2(code)))\n                break\n            case 'friendData':\n                dispatch(\n                    actions.setData(\n                        check2(code, ['name', 'image', 'notifications', '__v'])\n                    )\n                )\n                break\n            case 'progressData':\n                dispatch(\n                    actions.setData(\n                        check2(code, [\n                            'owner',\n                            'worker',\n                            'goal',\n                            'notifications',\n                            '__v',\n                        ])\n                    )\n                )\n                break\n            case 'postData':\n                dispatch(\n                    actions.setData(check2(code, ['notifications', '__v']))\n                )\n                break\n            case 'groupData':\n                dispatch(\n                    actions.setData(check2(code, ['notifications', '__v']))\n                )\n                break\n            case 'transactionData':\n                dispatch(actions.setData(check2(code)))\n                break\n            default:\n                break\n        }\n    }\n}\n","import axios from 'axios'\nimport message from 'antd/es/message'\n\nexport const uploadFile = (file, size, filename, callback) => {\n    if (file == null) {\n        return alert('No file selected.')\n    }\n\n    const reader = new FileReader()\n    reader.onload = async event => {\n        resizeImageToSpecificSize(file, { width: size, height: size }, data => {\n            urltoFile(data, '/120').then(function(file) {\n                getSignedRequest(file, filename, callback)\n            })\n        })\n    }\n\n    reader.readAsArrayBuffer(file)\n}\n\nconst urltoFile = (url, filename, mimeType) => {\n    mimeType = mimeType || (url.match(/^data:([^;]+);/) || '')[1]\n    return fetch(url)\n        .then(function(res) {\n            return res.arrayBuffer()\n        })\n        .then(function(buf) {\n            return new File([buf], filename, { type: mimeType })\n        })\n}\n\nconst resizeImageToSpecificSize = (file, size, cb) => {\n    if (file) {\n        var reader = new FileReader()\n        reader.onload = function(event) {\n            resizeImageFromSrcToSpecificSize(event.target.result, size, cb)\n        }\n        reader.readAsDataURL(file)\n    }\n}\n\nconst resizeImageFromSrcToSpecificSize = (src, size, cb) => {\n    var data\n    var img = new Image()\n    img.onload = function() {\n        const widthCoef = img.width / size.width\n        const heightCoef = img.height / size.height\n        var oc = document.createElement('canvas'),\n            octx = oc.getContext('2d')\n        oc.width = img.width\n        oc.height = img.height\n        octx.drawImage(img, 0, 0)\n        if (widthCoef > 1 || heightCoef > 1) {\n            if (img.width > img.height) {\n                oc.height = (img.height / img.width) * size.width\n                oc.width = size.width\n            } else {\n                oc.width = (img.width / img.height) * size.width\n                oc.height = size.width\n            }\n        }\n        octx.drawImage(oc, 0, 0, oc.width, oc.height)\n        octx.drawImage(img, 0, 0, oc.width, oc.height)\n        data = oc.toDataURL()\n        cb(data)\n    }\n    img.src = src\n}\n\nconst getSignedRequest = (file, fileName, callback) => {\n    return axios\n        .post('/api/sign-s3', {\n            fileName,\n        })\n        .then(response => {\n            doUploadFile(file, response.data, callback)\n        })\n        .catch(err => {})\n}\n\nconst doUploadFile = (file, data, callback) => {\n    return axios\n        .put(data.signedRequest, file, {\n            headers: {\n                'Content-Type': 'multipart/form-data',\n            },\n        })\n        .then(response => {\n            callback(data.url)\n            message.success('The image has been saved.')\n        })\n        .catch(err => {\n            console.log(err)\n        })\n}\n","export default {\n    name: 200,\n    description: 10000,\n    message: 10000,\n}\n","import fieldLength from './fieldLength'\n\nexport const nicknameRules = [\n    {\n        required: true,\n        message: 'Nickname is too short. Minimal length is 2.',\n        whitespace: true,\n        min: 2,\n    },\n    {\n        message: `Nickname is too long. Miximum length is ${fieldLength.name}.`,\n        whitespace: true,\n        max: fieldLength.name,\n    },\n    {\n        pattern: /^[a-zA-Z0-9_-]*$/,\n        message: \"Nickname should contain only letters, numbers, '-' and '_'.\",\n    },\n]\n\nexport const nameRules = [\n    {\n        required: true,\n        min: 1,\n        whitespace: true,\n        message: 'Name is too short. Minimal length is 1.',\n    },\n    {\n        max: fieldLength.name,\n        message: `Name is too long. Miximum length is ${fieldLength.name}.`,\n    },\n]\n\nexport const accountNameRules = [\n    {\n        required: true,\n        min: 2,\n        whitespace: true,\n        message: 'Name is too short. Minimal length is 2.',\n    },\n    {\n        max: fieldLength.name,\n        message: `Name is too long. Miximum length is ${fieldLength.name}.`,\n    },\n]\n\nexport const descriptionRules = [\n    {\n        max: fieldLength.description,\n        message: `Description is too long. Miximum length is ${\n            fieldLength.description\n        }.`,\n    },\n]\n\nexport const messageRules = [\n    {\n        min: 1,\n        whitespace: true,\n        message: 'Message is too short. Minimal length is 1.',\n    },\n    {\n        max: fieldLength.message,\n        message: `Message is too long. Miximum length is ${\n            fieldLength.message\n        }.`,\n    },\n]\n\nexport const priceRules = [\n    {\n        required: true,\n        message: 'Please input the item price.',\n    },\n]\n","import React, { useState } from 'react'\nimport Modal from 'antd/es/modal'\n\nimport Button from 'antd/es/button'\nimport Input from 'antd/es/input'\nimport InputNumber from 'antd/es/input-number'\nimport Form from 'antd/es/form'\nimport Select from 'antd/es/select'\nimport Upload from 'antd/es/upload'\nimport PlusOutlined from '@ant-design/icons/PlusOutlined'\n\nimport Avatar from 'antd/es/avatar'\nimport Popconfirm from 'antd/es/popconfirm'\nimport {\n    nameRules,\n    descriptionRules,\n    priceRules,\n} from '../../constants/fieldRules'\nimport getAvatar from '../../utils/getAvatar'\n\nconst AddPerkForm = props => {\n    const [previewImage, setPreviewImage] = useState('')\n    const {\n        connections,\n        perkId,\n        perk,\n        deletePerk,\n        onFinish,\n        images,\n        setImages,\n        uploadImage,\n    } = props\n\n    const layout = {\n        labelCol: { span: 8 },\n        wrapperCol: { span: 16 },\n    }\n    const tailLayout = {\n        wrapperCol: { offset: 8, span: 16 },\n    }\n\n    const connectionsSelect = (\n        <Select\n            mode=\"multiple\"\n            style={{ width: '100%' }}\n            placeholder=\"Please select\"\n            getPopupContainer={trigger => trigger.parentNode}\n        >\n            {connections.map(item => (\n                <Select.Option key={item._id}>\n                    <Avatar\n                        src={getAvatar(item._id, item.image)}\n                        size={20}\n                        style={{ marginRight: '10px' }}\n                    />\n                    {item.name} - ({item._id})\n                </Select.Option>\n            ))}\n        </Select>\n    )\n    const [form] = Form.useForm()\n\n    const normFile = e => {\n        if (Array.isArray(e)) {\n            return e\n        }\n        return e && e.fileList.map(image => image.url)\n    }\n\n    return !props.perkId || perk ? (\n        <>\n            <Form\n                form={form}\n                name=\"dynamic_form_nest_item\"\n                onFinish={onFinish}\n                autoComplete=\"off\"\n                initialValues={perk || {}}\n                {...layout}\n            >\n                <Form.Item\n                    name=\"images\"\n                    label=\"Images\"\n                    valuePropName=\"images\"\n                    getValueFromEvent={normFile}\n                >\n                    <Upload\n                        listType=\"picture-card\"\n                        fileList={images.map((image, index) => ({\n                            ...image,\n                            uid: index,\n                        }))}\n                        onPreview={file => {\n                            setPreviewImage(file.url)\n                        }}\n                        onChange={({ fileList }) => setImages(fileList)}\n                        customRequest={({ file }) => {\n                            uploadImage(file)\n                        }}\n                    >\n                        {images.length >= 8 ? null : (\n                            <div>\n                                <PlusOutlined />\n                                <div className=\"ant-upload-text\">Upload</div>\n                            </div>\n                        )}\n                    </Upload>\n                </Form.Item>\n                <Form.Item label=\"Name\" name=\"name\" rules={nameRules}>\n                    <Input placeholder=\"New item\" />\n                </Form.Item>\n                <Form.Item\n                    label=\"Description\"\n                    name=\"description\"\n                    rules={descriptionRules}\n                >\n                    <Input.TextArea placeholder=\"Write a few words about this item.\" />\n                </Form.Item>\n\n                {props.mode === 'shop' && (\n                    <Form.Item label=\"Available for\" name=\"users\">\n                        {connectionsSelect}\n                    </Form.Item>\n                )}\n\n                {props.mode === 'shop' && (\n                    <Form.Item label=\"Price\" name=\"price\" rules={priceRules}>\n                        <InputNumber />\n                    </Form.Item>\n                )}\n\n                <Form.Item {...tailLayout}>\n                    <Button type=\"primary\" htmlType=\"submit\" size=\"large\">\n                        Save\n                    </Button>\n\n                    {perkId && (\n                        <Popconfirm\n                            title=\"Are you sure you want to delete this item?\"\n                            onConfirm={deletePerk}\n                            onCancel={() => {}}\n                            okText=\"Confirm\"\n                            cancelText=\"Cancel\"\n                        >\n                            <Button type=\"link\" danger size=\"large\">\n                                Delete\n                            </Button>\n                        </Popconfirm>\n                    )}\n                </Form.Item>\n            </Form>\n            <Modal\n                visible={previewImage}\n                footer={null}\n                onCancel={() => setPreviewImage('')}\n            >\n                <img\n                    alt=\"example\"\n                    style={{ width: '100%' }}\n                    src={previewImage}\n                />\n            </Modal>\n        </>\n    ) : null\n}\n\nexport default AddPerkForm\n","import { webSocket } from '../containers/ConnectWebsocket/ConnectWebsocket'\n\nexport const sendMessage = (\n    accountId,\n    postId,\n    messageValue,\n    image,\n    replyToMessage,\n    editedMessage\n) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'sendMessage',\n                messageValue,\n                image,\n                postId,\n                accountId,\n                replyToMessage,\n                editedMessage,\n            })\n        )\n    }\n}\n\nexport const changeLikesMessage = (\n    messageCode,\n    messageId,\n    accountId,\n    postId\n) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode,\n                messageId,\n                accountId,\n                postId,\n            })\n        )\n    }\n}\n\nexport const addPost = (\n    accountId,\n    parentId,\n    parentType,\n    messageValue,\n    images\n) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'addPost',\n                accountId,\n                parentId,\n                parentType,\n                messageValue,\n                images,\n            })\n        )\n    }\n}\n","import { webSocket } from '../containers/ConnectWebsocket/ConnectWebsocket'\n\nexport const savePerk = (accountId, id, value, mode) => {\n    if (accountId && webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode:\n                    mode === 'wishlist'\n                        ? 'saveWishlistItem'\n                        : mode === 'goals'\n                        ? 'saveGoal'\n                        : 'savePerk',\n                id,\n                value,\n                accountId,\n            })\n        )\n    }\n}\n\nexport const deletePerk = (accountId, id, mode) => {\n    if (accountId && id && webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode:\n                    mode === 'wishlist'\n                        ? 'deleteWishlistItem'\n                        : mode === 'goals'\n                        ? 'deleteGoal'\n                        : 'deletePerk',\n                id,\n                accountId,\n            })\n        )\n    }\n}\n\nexport const buyPerk = (buyer, seller, perkId) => {\n    if (perkId && buyer && seller && webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'buyPerk',\n                perkId,\n                buyer,\n                seller,\n            })\n        )\n    }\n}\n","import { webSocket } from '../containers/ConnectWebsocket/ConnectWebsocket'\n\nexport const searchFriends = search => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'searchFriends',\n                search,\n            })\n        )\n    }\n}\n\nexport const addFriend = (accountId, friendId) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'addFriend',\n                accountId,\n                friendId,\n            })\n        )\n    }\n}\n\nexport const acceptFriend = (accountId, friendId) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'acceptFriend',\n                accountId,\n                friendId,\n            })\n        )\n    }\n}\n\nexport const unfriend = (accountId, friendId) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'unfriend',\n                accountId,\n                friendId,\n            })\n        )\n    }\n}\n","import React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { uploadFile } from '../../utils/uploadFile'\nimport AddPerkForm from './AddPerkForm'\nimport { withRouter } from 'react-router-dom'\nimport * as wsActions from '../../websocketActions'\n\nconst AddPerk = props => {\n    const [perk, setPerk] = useState()\n    const [images, setImages] = useState([])\n    const { account, mode } = props\n    const perkId = props.perkId || ''\n    useEffect(() => {\n        if (perkId) {\n            const perk =\n                mode === 'wishlist'\n                    ? account.wishlist.find(item => item.itemId === perkId)\n                    : mode === 'goals'\n                    ? account.goals.find(item => item.goalId === perkId)\n                    : account.perks.find(item => item.perkId === perkId)\n            if (perk) {\n                setPerk(perk)\n                setImages(\n                    perk.images.map((url, index) => ({\n                        url,\n                        uid: index,\n                    }))\n                )\n            }\n        }\n    }, [])\n\n    const connections = [\n        account,\n        ...account.friends\n            .filter(friend => friend.status === 'friend')\n            .map(friend => props.friendData[friend.friend]),\n    ]\n\n    const uploadImage = file => {\n        uploadFile(file, 800, undefined, url => {\n            setImages(\n                [...images, { url }].map((image, index) => ({\n                    ...image,\n                    uid: index,\n                }))\n            )\n        })\n    }\n\n    return !props.perkId || perk ? (\n        <AddPerkForm\n            connections={connections}\n            perkId={perkId}\n            perk={perk}\n            deletePerk={() => {\n                wsActions.deletePerk(account._id, perkId, mode)\n                props.setEditPerkOpen(false)\n            }}\n            onFinish={value => {\n                const processedValue = {\n                    ...value,\n                    images: images.map(image => image.url),\n                }\n                wsActions.savePerk(account._id, perkId, processedValue, mode)\n                props.setEditPerkOpen(false)\n            }}\n            images={images}\n            setImages={setImages}\n            uploadImage={uploadImage}\n            mode={props.mode}\n        />\n    ) : null\n}\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n        friendData: state.friendData,\n    }\n}\nexport default withRouter(connect(mapStateToProps)(AddPerk))\n","import React from 'react'\nimport { withRouter } from 'react-router-dom'\n\nexport default withRouter(props => (\n    <div\n        onClick={() => props.history.push(props.onClickLink)}\n        style={{ cursor: 'pointer' }}\n    >\n        <img\n            style={{\n                width: '100%',\n                borderRadius: '15px',\n            }}\n            src={props.images.length > 0 ? props.images[0] : ''}\n        />\n        <div style={{ padding: '5px 0px' }}>{props.body}</div>\n    </div>\n))\n","import React from 'react'\n\nexport default props => (\n    <svg\n        viewBox=\"0 0 24 24\"\n        width=\"24\"\n        height=\"24\"\n        style={{ transform: 'rotate(90deg)' }}\n    >\n        <path d=\"M2 10h4v4H2v-4zm8 4h4v-4h-4v4zm8-4v4h4v-4h-4z\" />\n    </svg>\n)\n","import React from 'react'\nimport { withRouter } from 'react-router-dom'\n\nimport * as wsActions from '../../websocketActions'\nimport Dropdown from 'antd/es/dropdown'\nimport Menu from 'antd/es/menu'\nimport Button from 'antd/es/button'\nimport MasonryCard from '../../components/MasonryCard'\nimport EditFilled from '@ant-design/icons/EditFilled'\nimport Card from 'antd/es/card'\nimport MoreIcon from '../../components/UI/MoreIcon'\n\nconst PerkCard = props => {\n    const {\n        perk,\n        perkId,\n        owner,\n        account,\n        setEditedPerk,\n        setEditPerkOpen,\n        mode,\n    } = props\n\n    return (\n        <MasonryCard\n            onClickLink={`/${mode || 'shop'}/${owner._id}/${perkId}`}\n            images={perk.images}\n            body={\n                <Card\n                    extra={\n                        <span onClick={e => e.stopPropagation()}>\n                            {owner._id === account._id &&\n                            !props.onlyBuy &&\n                            props.mode === 'shop' ? (\n                                <Dropdown.Button\n                                    type=\"primary\"\n                                    key=\"1\"\n                                    onClick={() =>\n                                        wsActions.buyPerk(\n                                            account._id,\n                                            owner._id,\n                                            perkId\n                                        )\n                                    }\n                                    overlay={\n                                        <Menu>\n                                            <Menu.Item\n                                                key=\"0\"\n                                                onClick={() => {\n                                                    setEditedPerk(perkId)\n                                                    setEditPerkOpen(true)\n                                                }}\n                                            >\n                                                Edit\n                                            </Menu.Item>\n                                        </Menu>\n                                    }\n                                >\n                                    Buy\n                                </Dropdown.Button>\n                            ) : props.mode === 'shop' ? (\n                                <Button\n                                    type=\"primary\"\n                                    onClick={() =>\n                                        wsActions.buyPerk(\n                                            account._id,\n                                            owner._id,\n                                            perkId\n                                        )\n                                    }\n                                >\n                                    Buy\n                                </Button>\n                            ) : owner._id === account._id && !props.onlyBuy ? (\n                                <Dropdown\n                                    trigger={['click', 'hover']}\n                                    overlay={\n                                        <Menu>\n                                            <Menu.Item\n                                                key=\"0\"\n                                                onClick={() => {\n                                                    setEditedPerk(perkId)\n                                                    setEditPerkOpen(true)\n                                                }}\n                                            >\n                                                Edit\n                                            </Menu.Item>\n                                        </Menu>\n                                    }\n                                >\n                                    <Button type=\"link\">\n                                        <MoreIcon />\n                                    </Button>\n                                </Dropdown>\n                            ) : null}\n                        </span>\n                    }\n                    title={\n                        <span style={{ fontWeight: 'bold' }}>\n                            {perk.name}\n                            {mode === 'shop' && ` ($${perk.price})`}\n                        </span>\n                    }\n                    style={{ width: '100%' }}\n                    type=\"inner\"\n                    bordered={false}\n                />\n            }\n        />\n    )\n}\n\nexport default withRouter(PerkCard)\n","import React from 'react'\nimport Button from 'antd/es/button'\nimport { PlusOutlined } from '@ant-design/icons'\n\nconst AddCard = props => (\n    <Button\n        onClick={props.action}\n        type=\"primary\"\n        shape=\"round\"\n        icon={<PlusOutlined />}\n        size=\"large\"\n    >\n        {props.title}\n    </Button>\n)\n\nexport default AddCard\n","export const friendsBreakPoints = {\n    default: 4,\n    1600: 3,\n    1100: 2,\n    600: 1,\n}\n\nexport const cardBreakPoints = {\n    default: 4,\n    1100: 3,\n    700: 2,\n    350: 1,\n}\n","import React from 'react'\nimport Masonry from 'react-masonry-css'\nimport {\n    cardBreakPoints,\n    friendsBreakPoints,\n} from '../utils/masonryBreakPoints'\n\nexport default props => (\n    <div style={{ marginTop: '40px', ...props.style }}>\n        <Masonry\n            breakpointCols={3}\n            className=\"my-masonry-grid\"\n            columnClassName=\"my-masonry-grid_column\"\n            breakpointCols={\n                props.friends ? friendsBreakPoints : cardBreakPoints\n            }\n        >\n            {props.children}\n        </Masonry>\n    </div>\n)\n","import React, { useState } from 'react'\nimport Modal from 'antd/es/modal'\nimport Button from 'antd/es/button'\nimport AddPerk from './AddPerk'\nimport PerkCard from './PerkCard'\nimport AddCard from '../../components/AddCard/AddCard'\nimport { cardBreakPoints } from '../../utils/masonryBreakPoints'\nimport Masonry from 'react-masonry-css'\nimport MasonryGrid from '../../components/MasonryGrid'\nimport MasonryCard from '../../components/MasonryCard'\n\nconst WishlistAndPerks = props => {\n    const [editedPerk, setEditedPerk] = useState('')\n    const [editPerkOpen, setEditPerkOpen] = useState()\n\n    const { account } = props\n\n    const editPerk = (\n        <Modal\n            title=\"Add item\"\n            visible={editPerkOpen}\n            maskClosable\n            closable\n            onCancel={() => setEditPerkOpen(false)}\n            width=\"90%\"\n            footer={\n                <Button key=\"back\" onClick={() => setEditPerkOpen(false)}>\n                    Close\n                </Button>\n            }\n            destroyOnClose={true}\n        >\n            <AddPerk\n                setEditPerkOpen={setEditPerkOpen}\n                perkId={editedPerk}\n                mode={props.mode}\n            />\n        </Modal>\n    )\n\n    return account._id ? (\n        <>\n            <AddCard\n                action={() => {\n                    setEditedPerk('')\n                    setEditPerkOpen(true)\n                }}\n                title=\"Add item\"\n                sub={props.mode === 'shop' && 'Set price'}\n            />\n            <MasonryGrid>\n                {account[props.listKey || props.mode] &&\n                    account[props.listKey || props.mode].map((perk, index) => (\n                        <PerkCard\n                            key={index}\n                            perk={perk}\n                            perkId={\n                                props.mode === 'wishlist' ||\n                                props.mode === 'goals'\n                                    ? perk.itemId\n                                    : perk.perkId\n                            }\n                            owner={account}\n                            account={account}\n                            setEditedPerk={setEditedPerk}\n                            setEditPerkOpen={setEditPerkOpen}\n                            mode={props.mode}\n                            style={{ cursor: 'pointer' }}\n                        />\n                    ))}\n            </MasonryGrid>\n\n            {editPerk}\n        </>\n    ) : null\n}\n\nexport default WishlistAndPerks\n","import React, { useEffect } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport WishlistAndPerks from '../Shop/WishlistAndPerks'\n\nconst Goals = props => {\n    useEffect(() => {\n        props.setPageTitle({ main: 'Goals', sub: '' })\n    }, [])\n\n    return props.account._id ? (\n        <WishlistAndPerks mode=\"goals\" account={props.account} />\n    ) : (\n        <span />\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Goals)\n)\n","import axios from 'axios'\nimport processRes from './processRes'\nexport default (props, data, setData, options, callback) => {\n    // if (typeof props.isAuthed === 'undefined') return\n    // options = {\n    //     forceAuth: true,\n    //     forceActivate: true,\n    //     pullData: true,\n    //     ...(options || {}),\n    // }\n\n    // if (!props.isAuthed) {\n    //     props.tryAuth(props, options.forceAuth)\n    // }\n\n    // if (options.pullData) {\n    axios\n        .get('/api' + props.history.location.pathname)\n        .then(res => {\n            processRes(res, props)\n            // if (options.forceActivate) {\n            //     if (props.isAuthed && res.data.status === 'no account') {\n            //         props.history.push('/activate-account')\n            //     }\n            // }\n\n            setData(res.data)\n            callback(res.data)\n        })\n        .catch(err => {})\n    // }\n}\n","import React, { useState, useEffect } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport Button from 'antd/es/button'\nimport Comment from 'antd/es/comment'\nimport Avatar from 'antd/es/avatar'\nimport Input from 'antd/es/input'\nimport Form from 'antd/es/form'\nimport Upload from 'antd/es/upload'\nimport PictureFilled from '@ant-design/icons/PictureFilled'\nimport LoadingOutlined from '@ant-design/icons/LoadingOutlined'\nimport CloseCircleFilled from '@ant-design/icons/CloseCircleFilled'\nimport SendOutlined from '@ant-design/icons/SendOutlined'\nimport { uploadFile } from '../../utils/uploadFile'\nimport * as wsActions from '../../websocketActions'\nimport getAvatar from '../../utils/getAvatar'\nimport { messageRules } from '../../constants/fieldRules'\nimport { PlusOutlined } from '@ant-design/icons'\nimport message from 'antd/es/message'\nimport Modal from 'antd/es/modal/Modal'\n\nconst AddMessage = props => {\n    const [previewImage, setPreviewImage] = useState('')\n    const [imageLoading, setImageLoading] = useState(false)\n    const [images, setImages] = useState(props.images || [])\n    const { post, account } = props\n\n    const [messageText, setMessageText] = useState(\n        props.content ||\n            (props.replyToUser ? '@' + props.replyToUser + ' ' : '')\n    )\n\n    useEffect(() => {\n        setMessageText(\n            props.content ||\n                (props.replyToUser ? '@' + props.replyToUser + ' ' : '')\n        )\n    }, [props.replyToUser, props.content])\n\n    const uploadImage = file => {\n        uploadFile(file, 800, undefined, url => {\n            setImages([...images, url])\n        })\n    }\n\n    return post && account._id ? (\n        <div\n            style={{\n                background: '#fff',\n\n                ...(props.replyTo\n                    ? {}\n                    : {\n                          width: '100%',\n                          bottom: '-200px',\n                          left: '0px',\n                          //   position: 'absolute',\n                      }),\n            }}\n        >\n            <Comment\n                avatar={<Avatar src={getAvatar(account._id, account.image)} />}\n                content={\n                    <>\n                        <Form.Item rules={messageRules} style={{ margin: 0 }}>\n                            <Input.TextArea\n                                autoSize={{\n                                    minRows: 1,\n                                    maxRows: 3,\n                                }}\n                                rows={1}\n                                onChange={e => setMessageText(e.target.value)}\n                                value={messageText}\n                                placeholder=\"Write a comment\"\n                            />\n                        </Form.Item>\n                        {images.length > 0 && (\n                            <Form.Item style={{ margin: 0 }}>\n                                <Upload\n                                    listType=\"picture-card\"\n                                    fileList={images.map((image, index) => ({\n                                        url: image,\n                                        uid: index,\n                                    }))}\n                                    onPreview={file => {\n                                        setPreviewImage(file.url)\n                                    }}\n                                    onChange={({ fileList }) =>\n                                        setImages(\n                                            fileList.map(image => image.url)\n                                        )\n                                    }\n                                    customRequest={({ file }) => {\n                                        uploadImage(file)\n                                    }}\n                                >\n                                    {images.length >= 8 ? null : (\n                                        <div>\n                                            <PlusOutlined />\n                                            <div className=\"ant-upload-text\">\n                                                Upload\n                                            </div>\n                                        </div>\n                                    )}\n                                </Upload>\n                            </Form.Item>\n                        )}\n                        <Form.Item style={{ margin: 0 }}>\n                            <Button\n                                htmlType=\"submit\"\n                                onClick={() => {\n                                    wsActions.sendMessage(\n                                        account._id,\n                                        post._id,\n                                        messageText,\n                                        images,\n                                        props.replyTo,\n                                        props.editingMessage\n                                    )\n                                    setMessageText('')\n                                    setImages([])\n                                    if (props.onSend) props.onSend()\n                                }}\n                                icon={<SendOutlined />}\n                                type=\"text\"\n                            >\n                                Send\n                            </Button>\n                            <Upload\n                                showUploadList={false}\n                                customRequest={({ file }) => {\n                                    if (images.length > 8) {\n                                        message.warning(\n                                            'You can not attach more than 8 images.'\n                                        )\n                                        return\n                                    }\n                                    setImageLoading(true)\n                                    uploadFile(file, 800, undefined, url => {\n                                        setImageLoading(false)\n                                        setImages([...images, url])\n                                    })\n                                }}\n                            >\n                                <Button\n                                    type=\"text\"\n                                    icon={\n                                        imageLoading ? (\n                                            <LoadingOutlined />\n                                        ) : (\n                                            <PictureFilled />\n                                        )\n                                    }\n                                >\n                                    Image\n                                </Button>\n                            </Upload>\n                            {props.cancel && (\n                                <Button\n                                    onClick={props.cancel}\n                                    icon={<CloseCircleFilled />}\n                                    type=\"text\"\n                                >\n                                    Cancel\n                                </Button>\n                            )}\n                        </Form.Item>\n                    </>\n                }\n            />\n            <Modal\n                visible={previewImage}\n                footer={null}\n                onCancel={() => setPreviewImage('')}\n            >\n                <img\n                    alt=\"example\"\n                    style={{ width: '100%' }}\n                    src={previewImage}\n                />\n            </Modal>\n        </div>\n    ) : null\n}\n\nexport default withRouter(AddMessage)\n","import React from 'react'\nimport Carousel from 'antd/es/carousel'\nimport classes from './imageCarousel.module.css'\n\nconst ImageCarousel = props =>\n    props.images && props.images.length > 0 ? (\n        <Carousel\n            style={{ width: props.size || 'auto' }}\n            dots={{ className: classes.Dots }}\n        >\n            {props.images.map(\n                (image, index) =>\n                    image && (\n                        <div key={index}>\n                            <div\n                                style={{\n                                    backgroundImage: 'url(\"' + image + '\")',\n                                    backgroundSize: props.type || 'contain',\n                                    backgroundPosition: 'center',\n                                    width: props.size || '100%',\n                                    height:\n                                        props.height || props.size || '300px',\n                                    backgroundRepeat: 'no-repeat',\n                                }}\n                            />\n                        </div>\n                    )\n            )}\n        </Carousel>\n    ) : null\n\nexport default ImageCarousel\n","import React from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\n\nimport Button from 'antd/es/button'\nimport Avatar from 'antd/es/avatar'\nimport getAvatar from '../../utils/getAvatar'\nimport Typography from 'antd/es/typography'\n\nconst UserButton = props => {\n    const { account, profile, id, friendSearchResult } = props\n    const friendData = props.friendDataExp || props.friendData\n    const getUserData = id =>\n        id === account._id\n            ? account\n            : id === profile._id\n            ? profile\n            : id === friendSearchResult._id\n            ? friendSearchResult\n            : friendData[id]\n    const userName = id => (getUserData(id) ? getUserData(id).name : id)\n    const userAvatar = id =>\n        getUserData(id) ? (\n            <span\n                key={id}\n                onClick={() => {\n                    if (!props.noClick) handleClick(id)\n                }}\n            >\n                <Avatar\n                    src={getAvatar(id, getUserData(id).image)}\n                    size={props.size || (props.noClick ? 20 : 40)}\n                    style={props.group ? {} : { margin: ' 0 5px' }}\n                />\n            </span>\n        ) : null\n\n    const handleClick = id => props.history.push('/profile/' + (id || props.id))\n    return props.group ? (\n        <span onClick={e => e.stopPropagation()}>\n            <Avatar.Group style={{ margin: ' 0 5px' }}>\n                {props.ids.map(id => userAvatar(id))}\n            </Avatar.Group>\n        </span>\n    ) : props.noClick ? (\n        <>\n            {!props.noAva && userAvatar(id)}\n            {!props.noName && userName(id)}\n        </>\n    ) : props.span ? (\n        <span\n            style={{ cursor: 'pointer', fontWeight: 'bold', ...props.style }}\n            onClick={e => {\n                e.stopPropagation()\n                handleClick()\n            }}\n        >\n            {!props.noAva && userAvatar(id)}\n            {!props.noName && userName(id)}\n        </span>\n    ) : (\n        <Button\n            type=\"link\"\n            style={{ padding: '0px 5px', height: 'auto', ...props.style }}\n            onClick={e => {\n                e.stopPropagation()\n                handleClick()\n            }}\n        >\n            {!props.noAva && userAvatar(id)}\n\n            {!props.noName && userName(id)}\n        </Button>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        account: state.account,\n        profile: state.profile,\n        friendData: state.friendData,\n        friendSearchResult: state.friendSearchResult,\n    }\n}\n\nexport default withRouter(connect(mapStateToProps)(UserButton))\n","import React, { useState } from 'react'\nimport { withRouter } from 'react-router-dom'\n\nimport Comment from 'antd/es/comment'\n\nimport Tooltip from 'antd/es/tooltip'\nimport Avatar from 'antd/es/avatar'\nimport TimeAgo from 'timeago-react'\n\nimport * as wsActions from '../../websocketActions'\nimport LikeFilled from '@ant-design/icons/LikeFilled'\nimport LikeOutlined from '@ant-design/icons/LikeOutlined'\nimport Card from 'antd/es/card'\nimport Carousel from 'antd/es/carousel'\nimport AddMessage from './AddMessage'\nimport getAvatar from '../../utils/getAvatar'\nimport Button from 'antd/es/button'\nimport ImageCarousel from '../UI/ImageCarousel/ImageCarousel'\nimport UserButton from '../UserButton/UserButton'\n\nconst Message = props => {\n    const {\n        account,\n        state,\n        setState,\n        message,\n        friendData,\n        progressData,\n        groupData,\n        post,\n        replies,\n        isStart,\n    } = props\n    const [replyVisible, setReplyVisible] = useState(false)\n    const [replyToUser, setReplyToUser] = useState('')\n    const [editingMessage, setEditingMessage] = useState('')\n    const [showReplies, setShowReplies] = useState(false)\n    const commentProps = {\n        actions: !props.isStart && [\n            <span>\n                <TimeAgo datetime={message.date} live />\n            </span>,\n            <span key=\"comment-basic-like\">\n                <Tooltip title=\"Like\">\n                    {message.likes.includes(account._id) ? (\n                        <LikeFilled\n                            onClick={() =>\n                                wsActions.changeLikesMessage(\n                                    'dislikeMessage',\n                                    message.messageId,\n                                    account._id,\n                                    post._id\n                                )\n                            }\n                        />\n                    ) : (\n                        <LikeOutlined\n                            onClick={() =>\n                                wsActions.changeLikesMessage(\n                                    'likeMessage',\n                                    message.messageId,\n                                    account._id,\n                                    post._id\n                                )\n                            }\n                        />\n                    )}\n                </Tooltip>\n                <span style={{ paddingLeft: '8px' }}>\n                    {message.likes.length}\n                </span>\n            </span>,\n\n            message.author !== account._id && (\n                <span\n                    key=\"comment-basic-reply-to\"\n                    onClick={() => {\n                        if (props.setReplyVisible) {\n                            props.setReplyVisible(true)\n                            props.setReplyToUser(props.message.author)\n                        } else {\n                            setReplyVisible(true)\n                            setReplyToUser('')\n                        }\n                        setShowReplies(true)\n                    }}\n                >\n                    Reply\n                </span>\n            ),\n            message.author === account._id && (\n                <span\n                    key=\"comment-basic-reply-to\"\n                    onClick={() => setEditingMessage(message.messageId)}\n                >\n                    Edit\n                </span>\n            ),\n        ],\n        avatar: (\n            <Avatar\n                src={getAvatar(\n                    message.author,\n                    friendData[message.author]\n                        ? friendData[message.author].image\n                        : Math.floor(Math.random() * 1000000)\n                )}\n            />\n        ),\n        content: isStart ? (\n            <>\n                {message.messageType === 'wishlist' && (\n                    <>\n                        {' '}\n                        <span\n                            style={{\n                                fontWeight: 'bold',\n                                cursor: 'pointer',\n                                margin: '10px 0px 0px ',\n                            }}\n                            onClick={() =>\n                                props.history.push(\n                                    `/wishlist/${message.details.owner}/${\n                                        message.details.itemId\n                                    }`\n                                )\n                            }\n                        >\n                            {message.details.name}\n                        </span>\n                    </>\n                )}\n                {message.text && <p>{message.text}</p>}\n            </>\n        ) : (\n            <>\n                <div\n                    style={{\n                        background: '#eee',\n                        borderRadius: '5px',\n                        padding: '3px 10px',\n                        display:\n                            message.image && message.image.length > 0\n                                ? 'block'\n                                : 'inline-block',\n                    }}\n                >\n                    <UserButton\n                        id={message.author}\n                        span={true}\n                        noAva={true}\n                        style={{ fontWeight: 'bold' }}\n                    />\n\n                    {message.image && message.image.length > 0 && (\n                        <ImageCarousel\n                            images={message.image}\n                            height=\"60vmin\"\n                            type=\"contain\"\n                        />\n                    )}\n\n                    {message.text && <p>{message.text}</p>}\n                </div>\n                <div />\n            </>\n        ),\n        author: isStart && (\n            <span\n                style={{ color: '#333', fontWeight: 'bold', fontSize: '14px' }}\n            >\n                <UserButton id={message.author} span={true} noAva={true} />{' '}\n                &rArr;{' '}\n                {post.parent &&\n                    progressData &&\n                    progressData[post.parent.parentId] && (\n                        <span\n                            style={{ cursor: 'pointer' }}\n                            onClick={() =>\n                                props.history.push(\n                                    '/progresses/' + post.parent.parentId\n                                )\n                            }\n                        >\n                            {progressData[post.parent.parentId].goal.name}\n                        </span>\n                    )}\n                {post.startMessage &&\n                    ['wishlist', 'perk', 'goal'].includes(\n                        post.startMessage.messageType\n                    ) && (\n                        <span\n                            style={{ cursor: 'pointer' }}\n                            onClick={() =>\n                                props.history.push('/profile/' + message.author)\n                            }\n                        >\n                            {post.startMessage.messageType === 'wishlist'\n                                ? 'Wishlist'\n                                : post.startMessage.messageType === 'goals'\n                                ? 'Goals'\n                                : 'Shop'}\n                        </span>\n                    )}\n            </span>\n        ),\n        datetime: isStart && (\n            <span style={{ color: '#333' }}>\n                <TimeAgo datetime={message.date} live />\n            </span>\n        ),\n    }\n    return account && friendData ? (\n        account._id !== message.author || !editingMessage ? (\n            <Comment {...commentProps}>\n                {props.isTop && replies && replies.length > 0 ? (\n                    showReplies ? (\n                        replies.map((reply, index) => (\n                            <Message\n                                key={index}\n                                message={reply}\n                                post={post}\n                                account={account}\n                                friendData={friendData}\n                                setReplyVisible={setReplyVisible}\n                                setReplyToUser={setReplyToUser}\n                            />\n                        ))\n                    ) : (\n                        <Button\n                            type=\"text\"\n                            onClick={() => setShowReplies(true)}\n                        >\n                            Show {replies.length} replies\n                        </Button>\n                    )\n                ) : null}\n\n                {props.isTop && replyVisible ? (\n                    <AddMessage\n                        post={post}\n                        account={account}\n                        replyTo={message.messageId}\n                        replyToUser={replyToUser}\n                        cancel={() => setReplyVisible(false)}\n                    />\n                ) : null}\n            </Comment>\n        ) : (\n            <AddMessage\n                post={post}\n                account={account}\n                replyTo={message.messageId}\n                editingMessage={editingMessage}\n                content={message.text}\n                images={message.image}\n                onSend={() => setEditingMessage('')}\n                cancel={() => setEditingMessage('')}\n            />\n        )\n    ) : null\n}\n\nexport default withRouter(Message)\n","import React, { useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport * as wsActions from '../../websocketActions'\nimport Message from './Message'\nimport { LikeOutlined, LikeFilled } from '@ant-design/icons'\nimport AddMessage from './AddMessage'\nimport Divider from 'antd/es/divider'\nimport Button from 'antd/es/button'\nimport ImageCarousel from '../UI/ImageCarousel/ImageCarousel'\n\nconst Post = props => {\n    const { post, account, friendData, progressData, groupData } = props\n    const [postOpen, setPostOpen] = useState(props.showReplies)\n    const getNumberOfMessages = messages => {\n        let result = 0\n        for (let item of messages) {\n            result = result + 1 + item.replies.length\n        }\n        return result\n    }\n    return post ? (\n        <>\n            {!props.noStartMessage && (\n                <>\n                    <Message\n                        message={post.startMessage}\n                        post={post}\n                        account={account}\n                        friendData={friendData}\n                        progressData={progressData}\n                        groupData={groupData}\n                        replies={[]}\n                        isStart={true}\n                    />\n                    {post.startMessage.image &&\n                        post.startMessage.image.length > 0 && (\n                            <ImageCarousel\n                                images={post.startMessage.image}\n                                height=\"60vmin\"\n                                type=\"contain\"\n                            />\n                        )}\n                </>\n            )}\n            <Divider type=\"horizontal\" style={{ margin: '5px 0' }} />\n\n            <div\n                style={{\n                    textAlign: 'left',\n                    // marginBottom: '200px',\n                    position: 'relative',\n                }}\n            >\n                <div\n                    style={{ display: 'flex', justifyContent: 'space-around' }}\n                >\n                    <span key=\"comment-basic-like\">\n                        <Button type=\"text\">\n                            {post.startMessage.likes.includes(account._id) ? (\n                                <LikeFilled\n                                    onClick={() =>\n                                        wsActions.changeLikesMessage(\n                                            'dislikeMessage',\n                                            post.startMessage.messageId,\n                                            account._id,\n                                            post._id\n                                        )\n                                    }\n                                />\n                            ) : (\n                                <LikeOutlined\n                                    onClick={() =>\n                                        wsActions.changeLikesMessage(\n                                            'likeMessage',\n                                            post.startMessage.messageId,\n                                            account._id,\n                                            post._id\n                                        )\n                                    }\n                                />\n                            )}\n\n                            <span style={{ paddingLeft: '8px' }}>\n                                {post.startMessage.likes.length}\n                            </span>\n                        </Button>\n                    </span>\n                    <span>\n                        <Button onClick={() => setPostOpen(true)} type=\"text\">\n                            Comment\n                            <span style={{ paddingLeft: '8px' }}>\n                                {getNumberOfMessages(post.messages)}\n                            </span>\n                        </Button>\n                    </span>\n                </div>\n                <Divider type=\"horizontal\" style={{ margin: '5px 0' }} />\n                {postOpen ? (\n                    <>\n                        <AddMessage post={post} account={account} />\n                        {post.messages && post.messages.length\n                            ? post.messages.map((message, index) => (\n                                  <Message\n                                      key={index}\n                                      message={message}\n                                      post={post}\n                                      account={account}\n                                      friendData={friendData}\n                                      replies={message.replies}\n                                      isTop={true}\n                                  />\n                              ))\n                            : null}\n                    </>\n                ) : (\n                    <Button onClick={() => setPostOpen(true)} type=\"text\">\n                        Show replies and comment\n                    </Button>\n                )}\n            </div>\n        </>\n    ) : null\n}\n\nexport default withRouter(Post)\n","import React, { useEffect, useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport Card from 'antd/es/card'\nimport pullData from '../../utils/pullData'\nimport Post from '../../components/Post/Post'\nimport UserButton from '../../components/UserButton/UserButton'\nimport ImageCarousel from '../../components/UI/ImageCarousel/ImageCarousel'\n\nconst Goal = props => {\n    const [data, setData] = useState({})\n    const { account } = props\n    useEffect(() => {\n        const pathParts = props.history.location.pathname.split('/')\n        if (pathParts.length > 3) {\n            const accountId = pathParts[2]\n            if (props.isAuthed && account._id === accountId) {\n                const goal = account.goals.find(\n                    item => item.itemId === pathParts[3]\n                )\n                setData({ profile: account, goal })\n            } else {\n                pullData(props, data, setData, { forceAuth: false }, data => {\n                    const friendData = {}\n                    for (let friend of data.friendData)\n                        friendData[friend._id] = friend\n\n                    props.setData({\n                        post: { [data.post._id]: data.post },\n                        friendData,\n                    })\n                })\n            }\n        }\n    }, [props.isAuthed])\n    if (!data.goal) return null\n    const { goal, profile } = data\n    props.setData({ currentPosts: goal.post })\n    if (goal) {\n        props.setPageTitle({ main: goal.name, sub: profile._id })\n    }\n    return goal ? (\n        <Card\n            title={\n                <span>\n                    Goal from <UserButton id={profile._id} /> goals\n                </span>\n            }\n            bordered={false}\n        >\n            <ImageCarousel images={goal.images} />\n\n            <h1>{goal.name}</h1>\n            <p style={{ whiteSpace: 'pre-wrap' }}>{goal.description}</p>\n            <Post\n                noStartMessage={true}\n                post={props.post[goal.post]}\n                account={props.account}\n                friendData={props.friendData}\n                showReplies={true}\n            />\n        </Card>\n    ) : null\n}\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        account: state.account,\n        post: state.post,\n        friendData: state.friendData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: data => {\n            dispatch(actions.setData(data))\n        },\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Goal)\n)\n","import React from 'react'\n\nimport Select from 'antd/es/select'\nimport UserButton from '../UserButton/UserButton'\n\nexport default (account, friendData, value?, onSelect?) => (\n    <Select\n        mode=\"multiple\"\n        style={{ width: '100%' }}\n        placeholder=\"Please select\"\n        value={value}\n        onChange={onSelect}\n        getPopupContainer={trigger => trigger.parentNode}\n    >\n        {[\n            account,\n            ...account.friends\n                .filter(friend => friend.status === 'friend')\n                .map(friend => friendData[friend.friend]),\n        ].map(item => (\n            <Select.Option key={item._id}>\n                <UserButton id={item._id} noClick={true} />\n            </Select.Option>\n        ))}\n    </Select>\n)\n","import React, { useState } from 'react'\nimport Modal from 'antd/es/modal'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as wsActions from '../../websocketActions'\nimport Button from 'antd/es/button'\nimport Input from 'antd/es/input'\nimport InputNumber from 'antd/es/input-number'\nimport Form from 'antd/es/form'\nimport Select from 'antd/es/select'\n\nimport Upload from 'antd/es/upload'\nimport Divider from 'antd/es/divider'\nimport PlusOutlined from '@ant-design/icons/PlusOutlined'\n\nimport { uploadFile } from '../../utils/uploadFile'\nimport {\n    descriptionRules,\n    nameRules,\n    priceRules,\n} from '../../constants/fieldRules'\nimport connectionsSelect from '../EditGoalAndProgressForm/connectionsSelect'\nimport Descriptions from 'antd/es/descriptions'\nimport UserButton from '../UserButton/UserButton'\nimport Dropdown from 'antd/es/dropdown'\nimport Menu from 'antd/es/menu'\nimport Card from 'antd/es/card'\nimport MoreIcon from '../UI/MoreIcon'\n\nconst Rewards = props => {\n    const [previewImage, setPreviewImage] = useState('')\n    const [previewReward, setPreviewReward] = useState()\n    const [editedReward, setEditedReward] = useState()\n    const [editedRewardIndex, setEditedRewardIndex] = useState()\n    const { account, friendData, readOnly, progress } = props\n    const rewardsGI = props.rewards.findIndex(\n        item => item.key === props.rewardKey\n    )\n\n    if (rewardsGI === -1 && props.setRewards)\n        props.setRewards([\n            ...props.rewards,\n            {\n                key: props.rewardKey,\n                rewards: [],\n            },\n        ])\n    const RewardButton = props => (\n        <Button type=\"link\" onClick={() => setPreviewReward(props.item)}>\n            {props.item.mode === 'simple'\n                ? props.item.simple\n                : props.item.mode === 'money'\n                ? props.item.money + ' (money)'\n                : props.item.mode === 'item'\n                ? props.item.itemName\n                : ''}\n        </Button>\n    )\n\n    return rewardsGI >= 0 ? (\n        <div>\n            {props.onlyButton ? (\n                props.rewards[rewardsGI].rewards.map((item, index) => (\n                    <RewardButton item={item} />\n                ))\n            ) : (\n                <Form.Item label={props.label} key={props.rewardKey}>\n                    <ol>\n                        {props.rewards[rewardsGI].rewards.map((item, index) => {\n                            return (\n                                <li key={index}>\n                                    <RewardButton item={item} />\n                                    <UserButton\n                                        id={item.owner}\n                                        noName={true}\n                                    />{' '}\n                                    =&gt;\n                                    {item.for && item.for.length > 0 ? (\n                                        <UserButton\n                                            id={item.for}\n                                            noName={true}\n                                        />\n                                    ) : (\n                                        <span\n                                            style={{\n                                                fontWeight: 'bold',\n                                                marginLeft: '5px',\n                                            }}\n                                        >\n                                            All\n                                        </span>\n                                    )}\n                                    {item.owner === account._id && !readOnly && (\n                                        <>\n                                            <Dropdown\n                                                overlay={\n                                                    <Menu>\n                                                        <Menu.Item\n                                                            onClick={() => {\n                                                                setEditedRewardIndex(\n                                                                    index\n                                                                )\n                                                                setEditedReward(\n                                                                    item\n                                                                )\n                                                            }}\n                                                        >\n                                                            Edit\n                                                        </Menu.Item>\n\n                                                        <Menu.Item\n                                                            onClick={() => {\n                                                                if (\n                                                                    !window.confirm(\n                                                                        'Are you sure you want to delete this item?'\n                                                                    )\n                                                                )\n                                                                    return\n                                                                if (\n                                                                    props.setRewards\n                                                                ) {\n                                                                    const newRewards = [\n                                                                        ...props.rewards,\n                                                                    ]\n                                                                    newRewards[\n                                                                        rewardsGI\n                                                                    ] = {\n                                                                        ...newRewards[\n                                                                            rewardsGI\n                                                                        ],\n                                                                        rewards: newRewards[\n                                                                            rewardsGI\n                                                                        ].rewards.filter(\n                                                                            (\n                                                                                item,\n                                                                                indexIn\n                                                                            ) =>\n                                                                                indexIn !==\n                                                                                index\n                                                                        ),\n                                                                    }\n                                                                    props.setRewards(\n                                                                        newRewards\n                                                                    )\n                                                                } else {\n                                                                    wsActions.deleteReward(\n                                                                        account._id,\n                                                                        progress._id,\n                                                                        props.rewardKey,\n                                                                        item.rewardId\n                                                                    )\n                                                                }\n                                                            }}\n                                                        >\n                                                            Delete\n                                                        </Menu.Item>\n                                                    </Menu>\n                                                }\n                                            >\n                                                <Button type=\"link\">\n                                                    <MoreIcon />\n                                                </Button>\n                                            </Dropdown>\n                                        </>\n                                    )}\n                                </li>\n                            )\n                        })}\n                    </ol>\n\n                    {!readOnly && (\n                        <Button\n                            type=\"link\"\n                            onClick={() => {\n                                setEditedRewardIndex('new')\n                                setEditedReward({ mode: 'simple' })\n                            }}\n                        >\n                            <PlusOutlined />\n                            Add rewards\n                        </Button>\n                    )}\n                </Form.Item>\n            )}\n            <Modal\n                visible={editedReward}\n                title={\n                    editedReward === 'new' ? 'Add new reward' : 'Edit reward'\n                }\n                closable={true}\n                onCancel={() => setEditedReward()}\n                onOk={() => {\n                    let rewardToSave = {}\n                    if (editedReward.mode === 'money') {\n                        rewardToSave.money = editedReward.money\n                        rewardToSave.mode = editedReward.mode\n                        rewardToSave.for = editedReward.for\n                        rewardToSave.rewardId = editedReward.rewardId\n                    } else {\n                        rewardToSave = { ...editedReward, money: undefined }\n                    }\n                    rewardToSave.owner = account._id\n\n                    if (props.setRewards) {\n                        const newRewards = [...props.rewards]\n\n                        if (editedRewardIndex === 'new')\n                            newRewards[rewardsGI] = {\n                                ...newRewards[rewardsGI],\n                                rewards: [\n                                    ...newRewards[rewardsGI].rewards,\n                                    rewardToSave,\n                                ],\n                            }\n                        else\n                            newRewards[rewardsGI] = {\n                                ...newRewards[rewardsGI],\n                                rewards: newRewards[rewardsGI].rewards.map(\n                                    (item, index) => {\n                                        if (index === editedRewardIndex)\n                                            return rewardToSave\n                                        else return item\n                                    }\n                                ),\n                            }\n                        props.setRewards(newRewards)\n                        setEditedReward()\n                        setEditedRewardIndex()\n                    } else {\n                        wsActions.saveReward(\n                            account._id,\n                            progress._id,\n                            props.rewardKey,\n                            rewardToSave\n                        )\n                        setEditedReward()\n                        setEditedRewardIndex()\n                    }\n                }}\n                destroyOnClose={true}\n                okText=\"Save\"\n            >\n                {editedReward && (\n                    <>\n                        <Form.Item label=\"Reward type\">\n                            <Select\n                                placeholder=\"Type\"\n                                value={editedReward.mode}\n                                onSelect={value => {\n                                    setEditedReward({\n                                        ...editedReward,\n                                        mode: value,\n                                    })\n                                }}\n                                style={{ width: '100%' }}\n                                getPopupContainer={trigger =>\n                                    trigger.parentNode\n                                }\n                            >\n                                <Select.Option key=\"simple\" value=\"simple\">\n                                    Simple reward\n                                </Select.Option>\n                                <Select.Option key=\"item\" value=\"item\">\n                                    Item reward\n                                </Select.Option>\n                                <Select.Option key=\"money\" value=\"money\">\n                                    Money reward\n                                </Select.Option>\n                            </Select>\n                        </Form.Item>\n                        <Form.Item label=\"Reward for\">\n                            {connectionsSelect(\n                                account,\n                                friendData,\n                                editedReward.for,\n                                value => {\n                                    setEditedReward({\n                                        ...editedReward,\n                                        for: value,\n                                    })\n                                }\n                            )}\n                            <p>(leave blank for all)</p>\n                        </Form.Item>\n                        <Divider type=\"horizontal\" />\n                        {editedReward.mode === 'simple' ? (\n                            <Form.Item\n                                label=\"Description\"\n                                rules={[\n                                    ...descriptionRules,\n                                    {\n                                        required: true,\n                                        min: 1,\n                                        whitespace: true,\n                                        message:\n                                            'Desription is too short. Minimal length is 1.',\n                                    },\n                                ]}\n                            >\n                                <Input.TextArea\n                                    value={editedReward.simple}\n                                    onChange={({ target: { value } }) =>\n                                        setEditedReward({\n                                            ...editedReward,\n                                            simple: value,\n                                        })\n                                    }\n                                    placeholder=\"Explain how you will reward\"\n                                />\n                            </Form.Item>\n                        ) : editedReward.mode === 'money' ? (\n                            <Form.Item label=\"Amount\" rules={priceRules}>\n                                <InputNumber\n                                    value={editedReward.money}\n                                    onChange={value => {\n                                        setEditedReward({\n                                            ...editedReward,\n                                            money: value,\n                                        })\n                                    }}\n                                />\n                            </Form.Item>\n                        ) : (\n                            <>\n                                <Form.Item label=\"Images\">\n                                    <Upload\n                                        listType=\"picture-card\"\n                                        fileList={(\n                                            editedReward.itemImages || []\n                                        ).map((url, index) => ({\n                                            url,\n                                            uid: index,\n                                        }))}\n                                        onPreview={file => {\n                                            setPreviewImage(file.url)\n                                        }}\n                                        onChange={({ fileList }) => {\n                                            setEditedReward({\n                                                ...editedReward,\n                                                itemImages: fileList.map(\n                                                    image => image.url\n                                                ),\n                                            })\n                                        }}\n                                        customRequest={({ file }) => {\n                                            uploadFile(\n                                                file,\n                                                800,\n                                                undefined,\n                                                url => {\n                                                    setEditedReward({\n                                                        ...editedReward,\n                                                        itemImages: [\n                                                            ...(editedReward.itemImages ||\n                                                                []),\n                                                            url,\n                                                        ],\n                                                    })\n                                                }\n                                            )\n                                        }}\n                                    >\n                                        {(editedReward.itemImages || [])\n                                            .length >= 8 ? null : (\n                                            <div>\n                                                <PlusOutlined />\n                                                <div className=\"ant-upload-text\">\n                                                    Upload\n                                                </div>\n                                            </div>\n                                        )}\n                                    </Upload>\n                                </Form.Item>\n                                <Form.Item label=\"Name\" rules={nameRules}>\n                                    <Input\n                                        value={editedReward.itemName}\n                                        onChange={({ target: { value } }) =>\n                                            setEditedReward({\n                                                ...editedReward,\n                                                itemName: value,\n                                            })\n                                        }\n                                    />\n                                </Form.Item>\n                                <Form.Item\n                                    label=\"Description\"\n                                    rules={descriptionRules}\n                                >\n                                    <Input.TextArea\n                                        value={editedReward.itemDescription}\n                                        onChange={({ target: { value } }) =>\n                                            setEditedReward({\n                                                ...editedReward,\n                                                itemDescription: value,\n                                            })\n                                        }\n                                    />\n                                </Form.Item>\n                            </>\n                        )}\n                    </>\n                )}\n            </Modal>\n            <Modal\n                visible={previewImage}\n                footer={null}\n                onCancel={() => setPreviewImage('')}\n            >\n                <img\n                    alt=\"example\"\n                    style={{ width: '100%' }}\n                    src={previewImage}\n                />\n            </Modal>\n            <Modal\n                visible={previewReward}\n                footer={null}\n                onCancel={() => setPreviewReward()}\n                title=\"Reward details\"\n            >\n                {previewReward ? (\n                    <>\n                        {previewReward.itemImages &&\n                            previewReward.itemImages.map((image, index) => (\n                                <span\n                                    key={index}\n                                    onClick={() => setPreviewImage(image)}\n                                >\n                                    <Card\n                                        type=\"inner\"\n                                        style={{\n                                            width: 200,\n                                            display: 'inline-block',\n                                        }}\n                                        hoverable\n                                        cover={\n                                            <div\n                                                style={{\n                                                    backgroundImage:\n                                                        'url(' + image + ')',\n                                                    height: 200,\n                                                    width: 200,\n                                                    backgroundSize: 'cover',\n                                                }}\n                                            />\n                                        }\n                                    />\n                                </span>\n                            ))}\n\n                        <Descriptions\n                            title=\"Reward description\"\n                            bordered\n                            column={{\n                                xxl: 4,\n                                xl: 3,\n                                lg: 3,\n                                md: 3,\n                                sm: 2,\n                                xs: 1,\n                            }}\n                        >\n                            {previewReward.mode === 'item' && (\n                                <Descriptions.Item label=\"Name\">\n                                    {previewReward.itemName}\n                                </Descriptions.Item>\n                            )}\n                            {previewReward.mode === 'item' && (\n                                <Descriptions.Item label=\"Description\">\n                                    <p style={{ whiteSpace: 'pre-wrap' }}>\n                                        {previewReward.itemDescription}\n                                    </p>\n                                </Descriptions.Item>\n                            )}\n                            {previewReward.mode === 'simple' && (\n                                <Descriptions.Item label=\"Description\">\n                                    <p style={{ whiteSpace: 'pre-wrap' }}>\n                                        {previewReward.simple}\n                                    </p>\n                                </Descriptions.Item>\n                            )}\n                            {previewReward.mode === 'money' && (\n                                <Descriptions.Item label=\"Money\">\n                                    {previewReward.money}\n                                </Descriptions.Item>\n                            )}\n                        </Descriptions>\n                    </>\n                ) : null}\n            </Modal>\n        </div>\n    ) : null\n}\n\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        account: state.account,\n        friendData: state.friendData,\n        progress: state.progress,\n    }\n}\n\nexport default withRouter(connect(mapStateToProps)(Rewards))\n","import { webSocket } from '../containers/ConnectWebsocket/ConnectWebsocket'\n\nexport const changeStage = (data, value, milestoneId) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'changeStage',\n                milestoneId,\n                value,\n                progressId: data.progress._id,\n                accountId: data.account._id,\n            })\n        )\n    }\n}\n\nexport const leaveProgress = data => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'leaveProgress',\n                progressId: data.progress._id,\n                accountId: data.account._id,\n            })\n        )\n    }\n}\n\nexport const createGroup = (accountId, progressId) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'createGroup',\n                progressId,\n                accountId,\n            })\n        )\n    }\n}\n\nexport const getFriendsData = (progress, accountFriends) => {\n    if (webSocket && webSocket.readyState === 1) {\n        if (progress) {\n            let accountIds = [\n                progress.owner,\n                progress.worker,\n                ...progress.goal.supporters,\n                ...progress.goal.experts,\n                ...accountFriends,\n            ]\n\n            accountIds = [...new Set(accountIds)]\n\n            webSocket.send(\n                JSON.stringify({\n                    messageCode: 'getFriendsData',\n                    accountIds,\n                })\n            )\n        }\n    }\n}\n\nexport const editGoalInProgress = (data, value) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'editGoalInProgress',\n                progressId: data.progress._id,\n                accountId: data.account._id,\n                value,\n            })\n        )\n    }\n}\n\nexport const startProgress = (accountId, value, inGroup) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'startProgress',\n                accountId,\n                value,\n                inGroup,\n            })\n        )\n    }\n}\n\nexport const deleteReward = (accountId, progressId, rewardKey, rewardId) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'deleteReward',\n                accountId,\n                progressId,\n                rewardKey,\n                rewardId,\n            })\n        )\n    }\n}\n\nexport const saveReward = (accountId, progressId, rewardKey, reward) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'saveReward',\n                accountId,\n                progressId,\n                rewardKey,\n                reward,\n            })\n        )\n    }\n}\n","import React, { useState } from 'react'\nimport Modal from 'antd/es/modal'\n\nimport Button from 'antd/es/button'\nimport Input from 'antd/es/input'\nimport Form from 'antd/es/form'\nimport Collapse from 'antd/es/collapse'\nimport Divider from 'antd/es/divider'\nimport Upload from 'antd/es/upload'\nimport PlusOutlined from '@ant-design/icons/PlusOutlined'\n\nimport { uploadFile } from '../../utils/uploadFile'\nimport Rewards from '../Rewards/Rewards'\nimport { nameRules, descriptionRules } from '../../constants/fieldRules'\nimport connectionsSelect from './connectionsSelect'\nimport Dropdown from 'antd/es/dropdown/dropdown'\nimport { sisOutlined } from '@ant-design/icons'\nimport Menu from 'antd/es/menu'\nimport MoreIcon from '../UI/MoreIcon'\n\nconst EditGoalAndProgressForm = props => {\n    const { goal, account, friendData } = props\n\n    const [milestones, setMilestones] = useState(\n        (goal && goal.milestones) || [\n            { name: 'Start', key: 'start' },\n            { name: 'Finish', key: 'finish' },\n        ]\n    )\n\n    const [images, setImages] = useState(\n        (goal &&\n            goal.images.map((url, index) => ({\n                url,\n                uid: index,\n            }))) ||\n            []\n    )\n    const [withMilestones, setWithMilestones] = useState(\n        goal && goal.withMilestones\n    )\n    const [previewImage, setPreviewImage] = useState('')\n    const [newTabIndex, setNewTabIndex] = useState(\n        (goal && goal.newTabIndex) || 2\n    )\n\n    const [rewards, setRewards] = useState((goal && goal.rewardsGroups) || [])\n\n    const onFinish = value => {\n        const milestonesValues = []\n        for (let milestone of milestones) {\n            milestonesValues.push({\n                ...value[milestone.key],\n                key: milestone.key,\n                name: milestone.name,\n            })\n        }\n\n        props.onFinish({\n            ...value,\n            images: images.map(image => image.url),\n            milestones,\n            milestonesValues,\n            newTabIndex,\n            rewardsGroups: rewards,\n        })\n    }\n\n    const addMilestone = milestone => {\n        const newPanes = [...milestones]\n        const newKey = `mile${newTabIndex}`\n        if (typeof milestone !== 'undefined') {\n            const indexOfMile = milestones.findIndex(\n                mile => mile.key === milestone\n            )\n            if (indexOfMile < 0) return\n            newPanes.splice(indexOfMile + 1, 0, {\n                key: newKey,\n                name: 'New milestone',\n            })\n        } else {\n            if (newPanes.find(item => item.key === 'finish'))\n                newPanes.splice(newPanes.length - 1, 0, {\n                    key: newKey,\n                    name: 'New milestone',\n                })\n            else\n                newPanes.push({\n                    key: newKey,\n                    name: 'New milestone',\n                })\n        }\n        setMilestones(newPanes)\n        setNewTabIndex(newTabIndex + 1)\n        form.setFieldsValue({\n            [newKey]: { key: newKey, name: 'New milestone' },\n        })\n    }\n\n    const layout = {\n        labelCol: { span: 8 },\n        wrapperCol: { span: 16 },\n    }\n    const tailLayout = {\n        wrapperCol: { offset: 8, span: 16 },\n    }\n\n    const [form] = Form.useForm()\n\n    const normFile = e => {\n        if (Array.isArray(e)) {\n            return e\n        }\n        return e && e.fileList.map(image => image.url)\n    }\n\n    const connections = connectionsSelect(account, friendData)\n\n    const MilestoneControls = props => {\n        const moveMilestoneUp = () => {\n            const indexOfMile = milestones.findIndex(\n                mile => mile.key === props.milestone\n            )\n            if (indexOfMile <= 0) return\n            const newMilestones = [...milestones]\n            newMilestones.splice(\n                indexOfMile - 1,\n                0,\n                newMilestones.splice(indexOfMile, 1)[0]\n            )\n            setMilestones(newMilestones)\n        }\n\n        const moveMilestoneDown = () => {\n            const indexOfMile = milestones.findIndex(\n                mile => mile.key === props.milestone\n            )\n            if (indexOfMile < 0 || indexOfMile >= milestones.length - 1) return\n            const newMilestones = [...milestones]\n            newMilestones.splice(\n                indexOfMile + 1,\n                0,\n                newMilestones.splice(indexOfMile, 1)[0]\n            )\n            setMilestones(newMilestones)\n        }\n\n        const addMilestoneBelow = () => {\n            addMilestone(props.milestone)\n        }\n\n        const deleteMilestone = () => {\n            const newPanes = milestones.filter(\n                pane => pane.key !== props.milestone\n            )\n            setMilestones(newPanes)\n        }\n\n        return (\n            <Dropdown\n                overlay={\n                    <Menu\n                        onClick={({ domEvent }) => domEvent.stopPropagation()}\n                    >\n                        {!props.finish && (\n                            <Menu.Item key=\"0\" onClick={addMilestoneBelow}>\n                                Add a milestone below\n                            </Menu.Item>\n                        )}\n                        {!props.finish && !props.start && (\n                            <Menu.Item key=\"1\" onClick={moveMilestoneUp}>\n                                Move up\n                            </Menu.Item>\n                        )}\n                        {!props.finish && !props.start && (\n                            <Menu.Item key=\"2\" onClick={moveMilestoneDown}>\n                                Move down\n                            </Menu.Item>\n                        )}\n                        <Menu.Divider />\n                        <Menu.Item\n                            key=\"3\"\n                            danger={true}\n                            onClick={deleteMilestone}\n                        >\n                            Delete\n                        </Menu.Item>\n                    </Menu>\n                }\n                trigger={['click', 'hover']}\n            >\n                <a\n                    className=\"ant-dropdown-link\"\n                    onClick={e => {\n                        e.preventDefault()\n                        e.stopPropagation()\n                    }}\n                >\n                    <MoreIcon />\n                </a>\n            </Dropdown>\n        )\n    }\n    return !props.goalId || goal ? (\n        <>\n            <Form\n                form={form}\n                name=\"dynamic_form_nest_item\"\n                onFinish={onFinish}\n                autoComplete=\"off\"\n                initialValues={\n                    goal || {\n                        name: 'New achievement',\n                        start: {\n                            name: 'Start',\n                            key: 'start',\n                            description: 'This is the start of the progress.',\n                        },\n                        finish: {\n                            name: 'Finish',\n                            key: 'finish',\n                            description: 'This is the finish of the progress.',\n                        },\n                    }\n                }\n                {...layout}\n                onValuesChange={changedValues => {\n                    for (let attr in changedValues) {\n                        const index = milestones.findIndex(\n                            item => item.key === attr\n                        )\n\n                        if (index > -1) {\n                            if (changedValues[attr].name) {\n                                const newMilestones = [...milestones]\n                                newMilestones[index] = {\n                                    ...newMilestones[index],\n                                    name: changedValues[attr].name,\n                                }\n                                setMilestones(newMilestones)\n                            }\n                        }\n                        if (attr === 'withMilestones') {\n                            setWithMilestones(changedValues[attr])\n                        }\n                    }\n                }}\n            >\n                <Form.Item\n                    name=\"images\"\n                    label=\"Images\"\n                    valuePropName=\"images\"\n                    getValueFromEvent={normFile}\n                >\n                    <Upload\n                        listType=\"picture-card\"\n                        fileList={images.map((image, index) => ({\n                            ...image,\n                            uid: index,\n                        }))}\n                        onPreview={file => {\n                            setPreviewImage(file.url)\n                        }}\n                        onChange={({ fileList }) => setImages(fileList)}\n                        customRequest={({ file }) => {\n                            uploadFile(file, 800, undefined, url => {\n                                setImages(\n                                    [...images, { url }].map(\n                                        (image, index) => ({\n                                            ...image,\n                                            uid: index,\n                                        })\n                                    )\n                                )\n                            })\n                        }}\n                    >\n                        {images.length >= 8 ? null : (\n                            <div>\n                                <PlusOutlined />\n                                <div className=\"ant-upload-text\">Upload</div>\n                            </div>\n                        )}\n                    </Upload>\n                </Form.Item>\n                <Form.Item label=\"Name\" name=\"name\" rules={nameRules}>\n                    <Input />\n                </Form.Item>\n                <Form.Item\n                    label=\"Description\"\n                    name=\"description\"\n                    rules={descriptionRules}\n                >\n                    <Input.TextArea\n                        autoSize={{ minRows: 4, maxRows: 20 }}\n                        placeholder=\"Write a few words about why this goal is important and how to achieve it.\"\n                    />\n                </Form.Item>\n\n                <Form.Item label=\"Achievers\" name=\"users\">\n                    {connections}\n                </Form.Item>\n\n                <Form.Item label=\"Experts\" name=\"experts\">\n                    {connections}\n                </Form.Item>\n                <Form.Item label=\"Supporters\" name=\"supporters\">\n                    {connections}\n                </Form.Item>\n\n                <Divider>Milestones</Divider>\n                <Collapse expandIconPosition=\"right\" accordion>\n                    {[\n                        ...(milestones.find(item => item.key === 'start')\n                            ? [milestones.find(item => item.key === 'start')]\n                            : []),\n                        ...milestones.filter(\n                            item =>\n                                item.key !== 'start' && item.key !== 'finish'\n                        ),\n                        ...(milestones.find(item => item.key === 'finish')\n                            ? [milestones.find(item => item.key === 'finish')]\n                            : []),\n                    ].map(milestone => {\n                        return (\n                            <Collapse.Panel\n                                header={\n                                    form.getFieldValue([\n                                        milestone.key,\n                                        'name',\n                                    ]) || milestone.name\n                                }\n                                key={milestone.key}\n                                extra={\n                                    <MilestoneControls\n                                        milestone={milestone.key}\n                                        start={milestone.key === 'start'}\n                                        finish={milestone.key === 'finish'}\n                                    />\n                                }\n                            >\n                                <Form.Item\n                                    label=\"Name\"\n                                    name={[milestone.key, 'name']}\n                                    rules={nameRules}\n                                >\n                                    <Input />\n                                </Form.Item>\n                                <Form.Item\n                                    label=\"Description\"\n                                    name={[milestone.key, 'description']}\n                                    rules={descriptionRules}\n                                >\n                                    <Input.TextArea placeholder=\"Write a few words about why this milestone is important and how to achieve it.\" />\n                                </Form.Item>\n                                <Rewards\n                                    rewardKey={milestone.key}\n                                    label=\"Rewards\"\n                                    rewards={rewards}\n                                    setRewards={setRewards}\n                                />\n                            </Collapse.Panel>\n                        )\n                    })}\n                </Collapse>\n                <Button type=\"link\" onClick={() => addMilestone()}>\n                    <PlusOutlined /> Add a new milestone\n                </Button>\n\n                <Form.Item {...tailLayout}>\n                    <Button type=\"primary\" htmlType=\"submit\" size=\"large\">\n                        Save\n                    </Button>\n                </Form.Item>\n            </Form>\n            <Modal\n                visible={previewImage}\n                footer={null}\n                onCancel={() => setPreviewImage('')}\n            >\n                <img\n                    alt=\"example\"\n                    style={{ width: '100%' }}\n                    src={previewImage}\n                />\n            </Modal>\n        </>\n    ) : null\n}\n\nexport default EditGoalAndProgressForm\n","import React from 'react'\nimport * as wsActions from '../../websocketActions'\n\nimport EditGoalAndProgressForm from '../../components/EditGoalAndProgressForm/EditGoalAndProgressForm'\n\nconst AddProgress = props =>\n    props.account._id ? (\n        <EditGoalAndProgressForm\n            onFinish={value => {\n                props.setStartProgressVisible(false)\n                wsActions.startProgress(props.account._id, value, props.inGroup)\n            }}\n            account={props.account}\n            friendData={props.friendData}\n        />\n    ) : null\n\nexport default AddProgress\n","import React from 'react'\nimport { withRouter } from 'react-router-dom'\n\nimport Card from 'antd/es/card'\n\nconst { Meta } = Card\n\nconst GroupCard = props => {\n    const { group } = props\n\n    return (\n        <div\n            style={{\n                display: 'inline-block',\n                margin: '4px 8px',\n            }}\n            onClick={() => props.history.push('/groups/' + group._id)}\n        >\n            <Card\n                type=\"inner\"\n                style={{\n                    width: 200,\n                }}\n                hoverable\n                cover={\n                    <div\n                        onClick={() =>\n                            props.history.push('/groups/' + group._id)\n                        }\n                        style={{\n                            backgroundImage:\n                                'url(' +\n                                (group.images &&\n                                    group.images.length > 0 &&\n                                    group.images[0]) +\n                                ')',\n                            height: 200,\n                            width: 200,\n                            backgroundSize: 'cover',\n                        }}\n                    />\n                }\n            >\n                <Meta title={group.name} />\n            </Card>\n        </div>\n    )\n}\n\nexport default withRouter(GroupCard)\n","import React, { useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport Tabs from 'antd/es/tabs'\nimport Button from 'antd/es/button'\nimport Empty from 'antd/es/empty'\nimport ProgressCard from './ProgressCard'\nimport AddCard from '../../components/AddCard/AddCard'\nimport Modal from 'antd/es/modal/Modal'\nimport AddProgress from './AddProgress'\nimport GroupCard from './GroupCard'\nimport Masonry from 'react-masonry-css'\nimport { cardBreakPoints } from '../../utils/masonryBreakPoints'\nimport MasonryGrid from '../../components/MasonryGrid'\nimport MasonryCard from '../../components/MasonryCard'\nimport UserButton from '../../components/UserButton/UserButton'\n\nconst { TabPane } = Tabs\n\nconst Progresses = props => {\n    const { fromProfile, progressData, account, groupData, profile } = props\n\n    const { progresses, groups } = fromProfile ? profile : account\n    const [startProgressVisible, setStartProgressVisible] = useState(false)\n    if (!fromProfile) props.setPageTitle({ main: 'Progresses', sub: '' })\n    let loadedProgresses, loadedGroups\n    if (progresses) {\n        loadedProgresses = progresses\n            .filter(item => progressData[item])\n            .map(item => progressData[item])\n        loadedGroups = groups\n            .filter(item => groupData[item] && groupData[item].active)\n            .map(item => groupData[item])\n    }\n\n    const editGoal = fromProfile ? null : loadedProgresses && loadedGroups ? (\n        <Modal\n            title=\"Add progress\"\n            visible={startProgressVisible}\n            maskClosable\n            closable\n            onCancel={() => setStartProgressVisible(false)}\n            width=\"100%\"\n            style={{ maxWidth: '1000px' }}\n            footer={\n                <Button\n                    key=\"back\"\n                    onClick={() => setStartProgressVisible(false)}\n                >\n                    Close\n                </Button>\n            }\n            destroyOnClose={true}\n        >\n            <AddProgress\n                setStartProgressVisible={setStartProgressVisible}\n                account={account}\n                friendData={props.friendData}\n            />\n        </Modal>\n    ) : null\n\n    const innerTabs =\n        loadedProgresses && loadedGroups ? (\n            <>\n                <TabPane tab=\"Progresses\" key=\"progresses\">\n                    {!fromProfile && (\n                        <>\n                            <AddCard\n                                title=\"Start a new progress\"\n                                sub=\"Rich your goals or help others!\"\n                                action={() => {\n                                    setStartProgressVisible(true)\n                                }}\n                            />\n                            {editGoal}\n                        </>\n                    )}\n                    <MasonryGrid>\n                        {loadedProgresses.map((item, index) => (\n                            <MasonryCard\n                                key={index}\n                                onClickLink={'/progresses/' + item._id}\n                                images={item.goal.images}\n                                body={\n                                    <>\n                                        <UserButton\n                                            ids={item.goal.users}\n                                            group={true}\n                                        />\n                                        <span style={{ fontWeight: 'bold' }}>\n                                            {item.name}\n                                        </span>\n                                    </>\n                                }\n                            />\n                        ))}\n                    </MasonryGrid>\n                </TabPane>\n                <TabPane tab=\"Groups\" key=\"groups\">\n                    {loadedGroups.length > 0 ? (\n                        loadedGroups.map((group, index) => (\n                            <GroupCard key={index} group={group} />\n                        ))\n                    ) : (\n                        <Empty\n                            imageStyle={{\n                                height: 160,\n                            }}\n                            description={\n                                <span>\n                                    Here you will find your groups. Groups can\n                                    be created in existing progresses.\n                                </span>\n                            }\n                        />\n                    )}\n                </TabPane>\n            </>\n        ) : null\n\n    return loadedProgresses && loadedGroups ? (\n        // <Tabs\n        //     style={{\n        //         background: 'transparent',\n        //         boxShadow: 'none',\n        //         margin: '0',\n        //         marginTop: '-15px',\n        //     }}\n        // >\n        //     {innerTabs}\n        // </Tabs>\n        <div>\n            {!fromProfile && (\n                <>\n                    <AddCard\n                        title=\"Start a new progress\"\n                        sub=\"Rich your goals or help others!\"\n                        action={() => {\n                            setStartProgressVisible(true)\n                        }}\n                    />\n                    {editGoal}\n                </>\n            )}\n            <MasonryGrid style={{ marginTop: '40px' }}>\n                {loadedProgresses.map((item, index) => (\n                    <MasonryCard\n                        key={index}\n                        onClickLink={'/progresses/' + item._id}\n                        images={item.goal.images}\n                        body={\n                            <>\n                                <UserButton\n                                    ids={item.goal.users}\n                                    group={true}\n                                />\n                                <span style={{ fontWeight: 'bold' }}>\n                                    {item.name}\n                                </span>\n                            </>\n                        }\n                    />\n                ))}\n            </MasonryGrid>\n        </div>\n    ) : null\n\n    // ) : (\n    //     <Empty\n    //         imageStyle={{\n    //             height: 160,\n    //         }}\n    //         description={\n    //             <span>\n    //                 This user has no progresses. You can create a goal and\n    //                 invite this user.\n    //             </span>\n    //         }\n    //     />\n    // )\n}\n\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n        profile: state.profile,\n        isAuthed: state.isAuthed,\n        progressData: state.progressData,\n        groupData: state.groupData,\n        friendData: state.friendData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: (data, pulledFrom) =>\n            dispatch(actions.setData(data, pulledFrom)),\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n        tryAuth: (props, forceAuth) =>\n            dispatch(actions.tryAuth(props, forceAuth)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Progresses)\n)\n","import React from 'react'\nimport Checkbox from 'antd/es/checkbox'\nimport Descriptions from 'antd/es/descriptions'\n\nimport * as wsActions from '../../websocketActions'\nimport Rewards from '../../components/Rewards/Rewards'\nimport UserButton from '../../components/UserButton/UserButton'\nimport Collapse from 'antd/es/collapse'\nimport Badge from 'antd/es/badge'\nimport Typography from 'antd/es/typography'\nimport Divider from 'antd/es/divider'\n\nconst ActivityTable = props => {\n    const { progress, account } = props\n    const { goal } = progress\n    const { rewardsGroups } = goal\n\n    const renderCheckbox = ({ checked, milestoneId, disabled }) => (\n        <Checkbox\n            checked={checked}\n            onChange={e =>\n                wsActions.changeStage(props, e.target.checked, milestoneId)\n            }\n            disabled={disabled}\n        />\n    )\n\n    const getCheckboxStatus = (id, stage, milestone) => {\n        return {\n            checked: stage.approvedBy.find(item => item.accountId === id),\n            milestoneId: milestone.key,\n            disabled: id !== account._id,\n        }\n    }\n\n    return (\n        <Collapse\n            expandIconPosition=\"right\"\n            style={{ marginBottom: '50px' }}\n            destroyInactivePanel={true}\n            accordion\n        >\n            {goal.milestonesValues.map(milestone => {\n                const stage = progress.stages.find(\n                    stage => stage.milestoneId === milestone.key\n                ) || { approvedBy: [] }\n\n                const experts = goal.experts.map(expert => (\n                    <Descriptions.Item\n                        key={expert}\n                        label={\n                            <>\n                                <UserButton\n                                    id={expert}\n                                    noAva={true}\n                                    span={true}\n                                />{' '}\n                                {' (expert)'}\n                            </>\n                        }\n                    >\n                        {renderCheckbox(\n                            getCheckboxStatus(expert, stage, milestone)\n                        )}\n                    </Descriptions.Item>\n                ))\n\n                const users = goal.users.map(user => (\n                    <Descriptions.Item\n                        key={user}\n                        label={\n                            <>\n                                <UserButton\n                                    id={user}\n                                    noAva={true}\n                                    span={true}\n                                />{' '}\n                                {' (achiever)'}\n                            </>\n                        }\n                    >\n                        {renderCheckbox(\n                            getCheckboxStatus(user, stage, milestone)\n                        )}\n                    </Descriptions.Item>\n                ))\n\n                const owner = [\n                    <Descriptions.Item\n                        key={progress.owner}\n                        label={\n                            <>\n                                <UserButton\n                                    id={progress.owner}\n                                    noAva={true}\n                                    span={true}\n                                />{' '}\n                                {' (owner)'}\n                            </>\n                        }\n                    >\n                        {renderCheckbox(\n                            getCheckboxStatus(progress.owner, stage, milestone)\n                        )}\n                    </Descriptions.Item>,\n                ]\n                return (\n                    <Collapse.Panel\n                        header={\n                            <Badge\n                                color={stage.status ? 'green' : 'blue'}\n                                text={milestone.name}\n                            />\n                        }\n                        key={milestone.key}\n\n                        // extra={}\n                    >\n                        <Divider style={{ marginTop: '0px', fontSize: '15px' }}>\n                            Status\n                        </Divider>\n\n                        <Descriptions\n                            bordered\n                            column={{\n                                xxl: 4,\n                                xl: 3,\n                                lg: 3,\n                                md: 3,\n                                sm: 2,\n                                xs: 1,\n                            }}\n                        >\n                            <Descriptions.Item label=\"Current status\">\n                                {stage.status ? (\n                                    <Badge\n                                        status=\"success\"\n                                        text=\"Is complete\"\n                                    />\n                                ) : (\n                                    <Badge\n                                        status=\"processing\"\n                                        text=\"In process\"\n                                    />\n                                )}\n                            </Descriptions.Item>\n                            {users}\n                            {owner}\n                            {experts}\n                        </Descriptions>\n                        {milestone.description && (\n                            <>\n                                <Divider style={{ fontSize: '15px' }}>\n                                    Description\n                                </Divider>\n                                <Typography.Paragraph\n                                    ellipsis={{\n                                        rows: 3,\n                                        expandable: true,\n                                        symbol: 'more',\n                                    }}\n                                    style={{ whiteSpace: 'pre-wrap' }}\n                                >\n                                    {milestone.description}\n                                </Typography.Paragraph>\n                            </>\n                        )}\n\n                        {stage.status && (\n                            <>\n                                <Divider style={{ fontSize: '15px' }}>\n                                    Paid rewards\n                                </Divider>\n\n                                <Rewards\n                                    rewardKey={1}\n                                    rewards={[{ rewards: stage.paid, key: 1 }]}\n                                    readOnly={true}\n                                />\n                            </>\n                        )}\n                        <Divider style={{ fontSize: '15px' }}>Rewards</Divider>\n                        <Rewards\n                            rewardKey={milestone.key}\n                            rewards={rewardsGroups}\n                        />\n                    </Collapse.Panel>\n                )\n            })}\n        </Collapse>\n    )\n}\nexport default ActivityTable\n","import React from 'react'\n\nimport * as wsActions from '../../websocketActions'\nimport EditGoalAndProgressForm from '../../components/EditGoalAndProgressForm/EditGoalAndProgressForm'\n\nconst EditProgress = props => {\n    const { progress, account, state, setState, friendData } = props\n\n    const milestonesValues = {}\n    for (let milestone of progress.goal.milestonesValues) {\n        milestonesValues[milestone.key] = milestone\n    }\n    const goal = { ...progress.goal, ...milestonesValues }\n\n    const onFinish = value => {\n        wsActions.editGoalInProgress(props, value)\n        setState({ ...state, editProgressOpen: false })\n    }\n\n    return goal ? (\n        <EditGoalAndProgressForm\n            goal={goal}\n            onFinish={onFinish}\n            account={account}\n            friendData={friendData}\n        />\n    ) : null\n}\n\nexport default EditProgress\n","import React from 'react'\nimport { withRouter } from 'react-router-dom'\nimport Button from 'antd/es/button'\nimport Divider from 'antd/es/divider'\nimport Modal from 'antd/es/modal'\n\nimport Descriptions from 'antd/es/descriptions'\n\nconst { Item } = Descriptions\n\nimport * as wsActions from '../../websocketActions'\nimport ActivityTable from './ActivityTable'\nimport EditProgress from './EditProgress'\nimport Popconfirm from 'antd/es/popconfirm'\nimport Typography from 'antd/es/typography'\nimport UserButton from '../../components/UserButton/UserButton'\nimport ImageCarousel from '../../components/UI/ImageCarousel/ImageCarousel'\n\nconst Activity = props => {\n    const { account, progress, state, setState, friendData } = props\n    const { goal } = progress\n    return goal ? (\n        <>\n            {goal.images.length > 0 && <ImageCarousel images={goal.images} />}\n\n            <h1>{goal.name}</h1>\n            <Typography.Paragraph\n                ellipsis={{\n                    rows: 3,\n                    expandable: true,\n                    symbol: 'more',\n                }}\n                style={{ whiteSpace: 'pre-wrap' }}\n            >\n                {goal.description}\n            </Typography.Paragraph>\n\n            <Descriptions\n                bordered\n                column={{ xxl: 4, xl: 3, lg: 3, md: 3, sm: 2, xs: 1 }}\n            >\n                <Item label=\"Status\">{progress.status}</Item>\n                <Item label=\"Worker\">\n                    {goal.users && <UserButton ids={goal.users} group={true} />}\n                </Item>\n                <Item label=\"Owner\">\n                    <UserButton id={progress.owner} noName={true} />\n                </Item>\n                <Item label=\"Supporters\">\n                    {goal.supporters && (\n                        <UserButton ids={goal.supporters} group={true} />\n                    )}\n                </Item>\n                <Item label=\"Experts\">\n                    {goal.experts && (\n                        <UserButton ids={goal.experts} group={true} />\n                    )}\n                </Item>\n            </Descriptions>\n            <Divider orientation=\"center\" type=\"horizontal\">\n                Milestones\n            </Divider>\n            <ActivityTable\n                progress={progress}\n                account={account}\n                state={state}\n                setState={setState}\n            />\n            {account._id === progress.owner && (\n                <Button\n                    style={{ margin: '0px 20px 50px 0px' }}\n                    type=\"primary\"\n                    onClick={() => {\n                        setState({ ...state, editProgressOpen: true })\n                    }}\n                >\n                    Edit progress\n                </Button>\n            )}\n            {account._id === progress.owner && (\n                <Popconfirm\n                    title=\"Create a group if you want to have more similar prgresses with the same people.\"\n                    onConfirm={() =>\n                        wsActions.createGroup(account._id, progress._id)\n                    }\n                >\n                    <Button\n                        style={{ margin: '0px 20px 50px 0px' }}\n                        type=\"primary\"\n                    >\n                        Create a group\n                    </Button>\n                </Popconfirm>\n            )}\n            {account.progresses &&\n                account.progresses.includes(progress._id.toString()) && (\n                    <Button\n                        danger={true}\n                        onClick={() => {\n                            wsActions.leaveProgress(props)\n                        }}\n                    >\n                        Leave the progress\n                    </Button>\n                )}\n\n            <Modal\n                visible={state.editProgressOpen}\n                footer={null}\n                onCancel={() => setState({ ...state, editProgressOpen: false })}\n                closable={true}\n                destroyOnClose={true}\n                width=\"100%\"\n                style={{ maxWidth: '1000px' }}\n            >\n                <EditProgress\n                    progress={progress}\n                    account={account}\n                    state={state}\n                    setState={setState}\n                    friendData={friendData}\n                />\n            </Modal>\n        </>\n    ) : null\n}\n\nexport default withRouter(Activity)\n","import React, { useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport Button from 'antd/es/button'\nimport Comment from 'antd/es/comment'\nimport Avatar from 'antd/es/avatar'\nimport Input from 'antd/es/input'\nimport Form from 'antd/es/form'\nimport Upload from 'antd/es/upload'\nimport PictureOutlined from '@ant-design/icons/PictureOutlined'\nimport LoadingOutlined from '@ant-design/icons/LoadingOutlined'\nimport SendOutlined from '@ant-design/icons/SendOutlined'\nimport { uploadFile } from '../../utils/uploadFile'\nimport * as wsActions from '../../websocketActions'\nimport getAvatar from '../../utils/getAvatar'\nimport { messageRules } from '../../constants/fieldRules'\nimport {\n    PlusOutlined,\n    CloseCircleFilled,\n    PictureFilled,\n} from '@ant-design/icons'\nimport Modal from 'antd/es/modal/Modal'\n\nconst AddPost = props => {\n    const [previewImage, setPreviewImage] = useState('')\n    const [imageLoading, setImageLoading] = useState(false)\n    const [images, setImages] = useState([])\n\n    const { parent, account, parentType } = props\n\n    const [messageText, setMessageText] = useState(\n        props.content ||\n            (props.replyToUser ? '@' + props.replyToUser + ' ' : '')\n    )\n\n    const uploadImage = file => {\n        uploadFile(file, 800, undefined, url => {\n            setImages([...images, url])\n        })\n    }\n    return account._id ? (\n        <div\n            style={{\n                background: '#fff',\n                padding: '0px 10px',\n                bottom: '0px',\n                left: '0px',\n                zIndex: 1000,\n            }}\n        >\n            <h2>Post something new</h2>\n            <Comment\n                avatar={<Avatar src={getAvatar(account._id, account.image)} />}\n                content={\n                    <>\n                        <Form.Item rules={messageRules}>\n                            <Input.TextArea\n                                autoSize={{\n                                    minRows: 1,\n                                    maxRows: 3,\n                                }}\n                                rows={1}\n                                onChange={e => setMessageText(e.target.value)}\n                                value={messageText}\n                            />\n                        </Form.Item>\n                        {images.length > 0 && (\n                            <Form.Item style={{ margin: 0 }}>\n                                <Upload\n                                    listType=\"picture-card\"\n                                    fileList={images.map((image, index) => ({\n                                        url: image,\n                                        uid: index,\n                                    }))}\n                                    onPreview={file => {\n                                        setPreviewImage(file.url)\n                                    }}\n                                    onChange={({ fileList }) =>\n                                        setImages(\n                                            fileList.map(image => image.url)\n                                        )\n                                    }\n                                    customRequest={({ file }) => {\n                                        uploadImage(file)\n                                    }}\n                                >\n                                    {images.length >= 8 ? null : (\n                                        <div>\n                                            <PlusOutlined />\n                                            <div className=\"ant-upload-text\">\n                                                Upload\n                                            </div>\n                                        </div>\n                                    )}\n                                </Upload>\n                            </Form.Item>\n                        )}\n                        <Form.Item>\n                            <Button\n                                htmlType=\"submit\"\n                                onClick={() => {\n                                    wsActions.addPost(\n                                        account._id,\n                                        parent,\n                                        parentType,\n                                        messageText,\n                                        images\n                                    )\n                                    setMessageText('')\n                                    setImages([])\n                                    if (props.onSend) props.onSend()\n                                }}\n                                icon={<SendOutlined />}\n                                type=\"text\"\n                            >\n                                Send\n                            </Button>\n                            <Upload\n                                showUploadList={false}\n                                customRequest={({ file }) => {\n                                    if (images.length > 8) {\n                                        message.warning(\n                                            'You can not attach more than 8 images.'\n                                        )\n                                        return\n                                    }\n                                    setImageLoading(true)\n                                    uploadFile(file, 800, undefined, url => {\n                                        setImageLoading(false)\n                                        setImages([...images, url])\n                                    })\n                                }}\n                            >\n                                <Button\n                                    type=\"text\"\n                                    icon={\n                                        imageLoading ? (\n                                            <LoadingOutlined />\n                                        ) : (\n                                            <PictureFilled />\n                                        )\n                                    }\n                                >\n                                    Image\n                                </Button>\n                            </Upload>\n                            {messageText || images.length ? (\n                                <Button\n                                    onClick={() => {\n                                        setMessageText('')\n                                        setImages([])\n                                    }}\n                                    icon={<CloseCircleFilled />}\n                                    type=\"text\"\n                                >\n                                    Cancel\n                                </Button>\n                            ) : null}\n                        </Form.Item>\n                    </>\n                }\n            />\n            <Modal\n                visible={previewImage}\n                footer={null}\n                onCancel={() => setPreviewImage('')}\n            >\n                <img\n                    alt=\"example\"\n                    style={{ width: '100%' }}\n                    src={previewImage}\n                />\n            </Modal>\n        </div>\n    ) : null\n}\n\nexport default withRouter(AddPost)\n","import React, { useEffect, useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\n\nimport Modal from 'antd/es/modal'\nimport Activity from './Activity'\nimport Card from 'antd/es/card'\nimport Post from '../../components/Post/Post'\nimport AddPost from '../../components/Post/AddPost'\nimport Tabs from 'antd/es/tabs'\nimport pullData from '../../utils/pullData'\n\nconst Progress = props => {\n    const [state, setState] = useState({})\n\n    const [data, setData] = useState({})\n    const pathParts = props.history.location.pathname.split('/')\n    const progressId = pathParts.length > 2 ? pathParts[2] : ''\n    if (!progressId) return null\n    useEffect(() => {\n        if (props.isAuthed) {\n            props.setData({ currentProgress: progressId })\n        } else {\n            pullData(props, data, setData, { forceAuth: false }, data => {\n                const friendData = {}\n                for (let friend of data.friendData)\n                    friendData[friend._id] = friend\n                const post = {}\n                for (let item of data.post) post[item._id] = item\n\n                props.setData({\n                    friendData,\n                    posts: post,\n                    account: {},\n                    progress: data.progress,\n                })\n            })\n        }\n    }, [props.isAuthed, props.history.location.pathname])\n\n    const { progress, account, friendData, posts } = props.isAuthed\n        ? props\n        : { ...data, account: {} }\n\n    if (!progress || !progress._id) return null\n    props.setData({ currentPosts: progress.posts })\n\n    const { goal } = progress\n    if (goal) props.setPageTitle({ main: goal.name, sub: progress.worker })\n    return goal && friendData ? (\n        <div className=\"contentDiv\">\n            <Tabs>\n                <Tabs.TabPane tab=\"Details\" key=\"details\">\n                    <Activity\n                        state={state}\n                        setState={setState}\n                        progress={progress}\n                        account={account}\n                        friendData={friendData}\n                    />\n                </Tabs.TabPane>\n                <Tabs.TabPane tab=\"Posts\" key=\"posts\">\n                    {account._id && (\n                        <AddPost\n                            parent={progressId}\n                            account={account}\n                            parentType=\"progress\"\n                            // onSend={() => setEditingMessage('')}\n                        />\n                    )}\n                    {progress.posts.map(postId => {\n                        if (posts[postId]) {\n                            const post = posts[postId]\n                            return (\n                                <div key={postId}>\n                                    <div\n                                        style={{\n                                            height: '5px',\n                                            background: '#ddd',\n                                            width: 'calc(100% + 8px)',\n                                            position: 'absolute',\n                                            left: '-8px',\n                                        }}\n                                    />\n                                    <div style={{ paddingTop: '10px' }}>\n                                        <Post\n                                            friendData={friendData}\n                                            account={account}\n                                            post={post}\n                                        />\n                                    </div>\n                                </div>\n                            )\n                        } else return null\n                    })}\n                </Tabs.TabPane>\n            </Tabs>\n            <Modal\n                visible={state.previewImage}\n                footer={null}\n                onCancel={() => setState({ ...state, previewImage: '' })}\n            >\n                <img\n                    alt=\"example\"\n                    style={{ width: '100%' }}\n                    src={state.previewImage}\n                />\n            </Modal>\n        </div>\n    ) : null\n}\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        account: state.account,\n        posts: state.post,\n        progress: state.progress,\n        friendData: state.friendData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: data => {\n            dispatch(actions.setData(data))\n        },\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Progress)\n)\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { withRouter } from 'react-router-dom'\nimport Card from 'antd/es/card'\nimport Button from 'antd/es/button'\nimport UserButton from '../../components/UserButton/UserButton'\nimport MasonryGrid from '../../components/MasonryGrid'\n\nconst Wallet = props => {\n    const account = props.pulledProfile || props.account\n    return account.wallet ? (\n        <div>\n            <MasonryGrid>\n                {account.wallet.map((money, index) => (\n                    <div\n                        onClick={() =>\n                            props.history.push('/profile/' + money.user)\n                        }\n                        key={index}\n                    >\n                        <Card\n                            type=\"inner\"\n                            style={{ width: '100%' }}\n                            bordered={false}\n                            extra={<Button type=\"primary\">Visit shop</Button>}\n                            title={\n                                <div>\n                                    <span style={{ fontWeight: 'bold' }}>\n                                        ${money.amount}\n                                    </span>\n                                    <UserButton id={money.user} />\n                                </div>\n                            }\n                        />\n                    </div>\n                ))}\n            </MasonryGrid>\n        </div>\n    ) : null\n}\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n        isAuthed: state.isAuthed,\n    }\n}\n\nexport default withRouter(connect(mapStateToProps)(Wallet))\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { withRouter } from 'react-router-dom'\nimport * as actions from '../../store/actions'\nimport Button from 'antd/es/button'\nimport Tag from 'antd/es/tag'\nimport TimeAgo from 'timeago-react'\nimport Avatar from 'antd/es/avatar'\nimport getAvatar from '../../utils/getAvatar'\nimport Rewards from '../../components/Rewards/Rewards'\nimport Collapse from 'antd/es/collapse'\nimport Badge from 'antd/es/badge'\nimport UserButton from '../../components/UserButton/UserButton'\nimport Descriptions from 'antd/es/descriptions'\nimport date from 'date-and-time'\nimport Typography from 'antd/es/typography'\n\nconst Transactions = props => {\n    props.setPageTitle({ main: 'Shop', sub: 'Transactions' })\n\n    const { account, transactionData, friendData } = props\n    if (!account || !account._id) return null\n\n    const transactions = account.transactions\n        .filter(item => transactionData[item])\n        .map(item => transactionData[item])\n\n    const columns = [\n        {\n            title: 'Type',\n            dataIndex: 'types',\n            key: 'types',\n            render: types => (\n                <>\n                    {types.map(tag => {\n                        let color = tag.length > 5 ? 'geekblue' : 'green'\n                        if (tag === 'loser') {\n                            color = 'volcano'\n                        }\n                        return (\n                            <Tag color={color} key={tag}>\n                                {tag.toUpperCase()}\n                            </Tag>\n                        )\n                    })}\n                </>\n            ),\n        },\n        {\n            title: 'With',\n            dataIndex: 'user',\n            key: 'user',\n            render: user => {\n                const friend = friendData[user]\n                return friend ? (\n                    <Button\n                        type=\"link\"\n                        style={{ padding: 0 }}\n                        onClick={() => props.history.push('/profile/' + user)}\n                    >\n                        <Avatar\n                            src={getAvatar(user, friend.image)}\n                            style={{ marginRight: '5px' }}\n                        />\n                        {friend.name + ' (' + friend._id + ')'}\n                    </Button>\n                ) : (\n                    user\n                )\n            },\n        },\n        {\n            title: 'Item',\n            dataIndex: 'perk',\n            key: 'perk',\n            render: perk =>\n                perk.simple || (\n                    <Rewards\n                        rewardKey={1}\n                        label=\"Rewards\"\n                        rewards={[{ rewards: [perk], key: 1 }]}\n                        readOnly={true}\n                    />\n                ),\n        },\n        {\n            title: 'Amount',\n            dataIndex: 'amount',\n            key: 'amount',\n            render: amount => (amount > 0 ? amount : ''),\n        },\n        {\n            title: 'Date',\n            dataIndex: 'date',\n            key: 'date',\n            render: date => <TimeAgo datetime={date} live />,\n        },\n        {\n            title: 'Progress',\n            dataIndex: 'progress',\n            key: 'progress',\n            render: progress => (\n                <Button\n                    type=\"link\"\n                    onClick={() =>\n                        props.history.push('/progresses/' + progress)\n                    }\n                >\n                    {progress}\n                </Button>\n            ),\n        },\n        {\n            title: 'Status',\n            key: 'status',\n            dataIndex: 'status',\n            render: (status, record) => {\n                if (status === 'Not confirmed') {\n                    return (\n                        <>\n                            <Button\n                                danger={true}\n                                type=\"link\"\n                                onClick={() =>\n                                    wsActions.cancelTransaction(\n                                        account._id,\n                                        record.transaction._id\n                                    )\n                                }\n                            >\n                                Cancel\n                            </Button>\n                            {record.transaction.from === account._id && (\n                                <Button\n                                    type=\"link\"\n                                    onClick={() =>\n                                        wsActions.confirmTransaction(\n                                            account._id,\n                                            record.transaction._id\n                                        )\n                                    }\n                                >\n                                    Confirm\n                                </Button>\n                            )}\n                        </>\n                    )\n                }\n                return status\n            },\n        },\n    ]\n\n    const tableData = []\n    let sorted = [...transactions]\n    sorted = sorted.sort((a, b) =>\n        new Date(a.date).getTime() < new Date(b.date).getTime() ? 1 : -1\n    )\n    for (let transaction of sorted) {\n        const types = []\n        if (transaction.from === account._id && transaction.to === account.id) {\n            types.push('internal')\n        }\n        if (transaction.to === account._id) {\n            if (transaction.progress) {\n                types.push('earn')\n                if (!transaction.amount) types.push('item')\n                else types.push('money')\n            } else {\n                if (transaction.item && transaction.amount) {\n                    types.push('buy')\n                    types.push('item')\n                } else {\n                    types.push('recieve gift')\n                    if (!transaction.amount) types.push('item')\n                    else types.push('money')\n                }\n            }\n        } else if (transaction.from === account._id) {\n            if (transaction.progress) {\n                types.push('pay')\n                if (!transaction.amount) types.push('item')\n                else types.push('money')\n            } else {\n                if (transaction.item && transaction.amount) {\n                    types.push('sell')\n                    types.push('item')\n                } else {\n                    types.push('send gift')\n                    if (!transaction.amount) types.push('item')\n                    else types.push('money')\n                }\n            }\n        }\n\n        const user =\n            transaction.to !== account._id ? transaction.to : transaction.from\n\n        tableData.push({\n            key: tableData.length,\n            types,\n            user,\n            perk: transaction.item,\n            amount: transaction.amount,\n            date: transaction.date,\n            progress: transaction.progress,\n            status: transaction.status,\n            transaction,\n        })\n    }\n    return (\n        <Collapse\n            expandIconPosition=\"right\"\n            style={{ marginBottom: '50px' }}\n            destroyInactivePanel={true}\n            accordion\n        >\n            {sorted.map((transaction, index) => {\n                const types = []\n                if (\n                    transaction.from === account._id &&\n                    transaction.to === account.id\n                ) {\n                    types.push('internal')\n                }\n                if (transaction.to === account._id) {\n                    if (transaction.progress) {\n                        types.push('earn')\n                        if (!transaction.amount) types.push('item')\n                        else types.push('money')\n                    } else {\n                        if (transaction.item && transaction.amount) {\n                            types.push('buy')\n                            types.push('item')\n                        } else {\n                            types.push('recieve gift')\n                            if (!transaction.amount) types.push('item')\n                            else types.push('money')\n                        }\n                    }\n                } else if (transaction.from === account._id) {\n                    if (transaction.progress) {\n                        types.push('pay')\n                        if (!transaction.amount) types.push('item')\n                        else types.push('money')\n                    } else {\n                        if (transaction.item && transaction.amount) {\n                            types.push('sell')\n                            types.push('item')\n                        } else {\n                            types.push('send gift')\n                            if (!transaction.amount) types.push('item')\n                            else types.push('money')\n                        }\n                    }\n                }\n\n                const user =\n                    transaction.to !== account._id\n                        ? transaction.to\n                        : transaction.from\n\n                tableData.push({\n                    key: tableData.length,\n                    types,\n                    user,\n                    perk: transaction.item,\n                    amount: transaction.amount,\n                    date: transaction.date,\n                    progress: transaction.progress,\n                    status: transaction.status,\n                    transaction,\n                })\n                const { item: reward } = transaction\n                return (\n                    <Collapse.Panel\n                        style={{ padding: 0 }}\n                        header={\n                            <>\n                                <div\n                                    style={{\n                                        display: 'flex',\n                                        alignItems: 'center',\n                                    }}\n                                >\n                                    <Badge\n                                        color={\n                                            transaction.status ===\n                                            'Not confirmed'\n                                                ? 'blue'\n                                                : transaction.status ===\n                                                  'Cancelled'\n                                                ? 'red'\n                                                : 'green'\n                                        }\n                                    />\n                                    <Typography.Paragraph\n                                        ellipsis={{ rows: 1 }}\n                                        style={{ display: 'inline', margin: 0 }}\n                                    >\n                                        {reward.mode === 'simple'\n                                            ? reward.simple\n                                            : reward.mode === 'money'\n                                            ? reward.money + ' (money)'\n                                            : reward.mode === 'item'\n                                            ? reward.itemName\n                                            : ''}\n                                    </Typography.Paragraph>\n                                    <UserButton\n                                        noName={true}\n                                        id={\n                                            transaction.to !== account._id\n                                                ? transaction.to\n                                                : transaction.from\n                                        }\n                                    />\n                                </div>\n                                <div>\n                                    <TimeAgo datetime={transaction.date} live />\n                                </div>\n                            </>\n                        }\n                        key={index}\n\n                        // extra={}\n                    >\n                        <Descriptions\n                            layout=\"vertical\"\n                            size=\"small\"\n                            bordered\n                            column={{\n                                xxl: 4,\n                                xl: 3,\n                                lg: 3,\n                                md: 3,\n                                sm: 2,\n                                xs: 1,\n                            }}\n                        >\n                            <Descriptions.Item label=\"Type\">\n                                {types.map(tag => {\n                                    let color =\n                                        tag.length > 5 ? 'geekblue' : 'green'\n                                    if (tag === 'loser') {\n                                        color = 'volcano'\n                                    }\n                                    return (\n                                        <Tag color={color} key={tag}>\n                                            {tag.toUpperCase()}\n                                        </Tag>\n                                    )\n                                })}\n                            </Descriptions.Item>\n                            <Descriptions.Item label=\"Transaction with\">\n                                <UserButton\n                                    id={\n                                        transaction.to !== account._id\n                                            ? transaction.to\n                                            : transaction.from\n                                    }\n                                />\n                            </Descriptions.Item>\n\n                            <Descriptions.Item label=\"Item\">\n                                {\n                                    <Rewards\n                                        onlyButton={true}\n                                        rewardKey={1}\n                                        label=\"Rewards\"\n                                        rewards={[\n                                            {\n                                                rewards: [transaction.item],\n                                                key: 1,\n                                            },\n                                        ]}\n                                        readOnly={true}\n                                    />\n                                }\n                            </Descriptions.Item>\n\n                            {transaction.amount && (\n                                <Descriptions.Item label=\"Amount\">\n                                    {transaction.amount}\n                                </Descriptions.Item>\n                            )}\n                            <Descriptions.Item label=\"Date\">\n                                {date.format(\n                                    new Date(transaction.date),\n                                    'YYYY/MM/DD HH:mm:ss'\n                                )}\n                            </Descriptions.Item>\n\n                            {transaction.progress && transaction.progressId && (\n                                <Descriptions.Item label=\"Progress\">\n                                    <Button\n                                        type=\"text\"\n                                        onClick={() =>\n                                            props.history.push(\n                                                '/progresses/' +\n                                                    transaction.progressId\n                                            )\n                                        }\n                                    >\n                                        {transaction.progress}\n                                    </Button>\n                                </Descriptions.Item>\n                            )}\n                            <Descriptions.Item label=\"Status\">\n                                {status === 'Not confirmed' ? (\n                                    <>\n                                        <Button\n                                            danger={true}\n                                            type=\"link\"\n                                            onClick={() =>\n                                                wsActions.cancelTransaction(\n                                                    account._id,\n                                                    record.transaction._id\n                                                )\n                                            }\n                                        >\n                                            Cancel\n                                        </Button>\n                                        {record.transaction.from ===\n                                            account._id && (\n                                            <Button\n                                                type=\"link\"\n                                                onClick={() =>\n                                                    wsActions.confirmTransaction(\n                                                        account._id,\n                                                        record.transaction._id\n                                                    )\n                                                }\n                                            >\n                                                Confirm\n                                            </Button>\n                                        )}\n                                    </>\n                                ) : (\n                                    status || 'Confirmed'\n                                )}\n                            </Descriptions.Item>\n                        </Descriptions>\n                    </Collapse.Panel>\n                )\n            })}\n        </Collapse>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n        transactionData: state.transactionData,\n        friendData: state.friendData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Transactions)\n)\n","import React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport Tabs from 'antd/es/tabs'\nimport Wallet from './Wallet'\nimport Transactions from './Transactions'\nimport WishlistAndPerks from './WishlistAndPerks'\n\nconst Shop = props => {\n    useEffect(() => {\n        props.setPageTitle({ main: 'Shop', sub: 'My items' })\n    }, [])\n\n    return props.account._id ? (\n        <div>\n            <Tabs\n                style={{\n                    background: 'transparent',\n                    boxShadow: 'none',\n                    margin: '0',\n                    marginTop: '-15px',\n                }}\n            >\n                <Tabs.TabPane tab=\"My shop\" key={1}>\n                    <WishlistAndPerks\n                        mode=\"shop\"\n                        listKey=\"perks\"\n                        account={props.account}\n                    />\n                </Tabs.TabPane>\n                <Tabs.TabPane tab=\"Wallet\" key={3}>\n                    <Wallet />\n                </Tabs.TabPane>\n                <Tabs.TabPane tab=\"Transactions\" key={4}>\n                    <Transactions />\n                </Tabs.TabPane>\n            </Tabs>\n        </div>\n    ) : (\n        <span />\n    )\n}\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Shop)\n","import React, { useEffect, useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport isEqual from 'lodash.isequal'\n\nimport Post from '../../components/Post/Post'\n\nimport UserButton from '../../components/UserButton/UserButton'\nimport Divider from 'antd/es/divider'\n\nconst DashboardPosts = props => {\n    const {\n        account,\n        friendData,\n        statePosts,\n        progressData,\n        groupData,\n        currentPosts,\n    } = props\n\n    const [posts, setPosts] = useState([])\n    const [startTime] = useState(new Date().getTime())\n\n    const sortPosts = (a, b) => {\n        const aN = a.notifications.filter(item => item.user !== account._id)\n        const bN = b.notifications.filter(item => item.user !== account._id)\n        if (aN.length === 0 && bN.length > 0) return 1\n        else if (aN.length > 0 && bN.length === 0) return -1\n        else if (aN.length === 0 && bN.length === 0) return 0\n        else\n            return new Date(aN[0].date).getTime() <\n                new Date(bN[0].date).getTime()\n                ? 1\n                : -1\n    }\n\n    const sortNotifications = (a, b) =>\n        new Date(a.date).getTime() < new Date(b.date).getTime() ? 1 : -1\n\n    useEffect(() => {\n        if (currentPosts) {\n            const newPosts = currentPosts\n                .filter(item => statePosts[item])\n                .map(item => statePosts[item])\n\n            const newUnseenPosts = []\n            const newOldPosts = []\n            let oldPosts = [...posts]\n            for (let post of newPosts) {\n                let oldPostIndex = oldPosts.findIndex(item => {\n                    return item._id.toString() === post._id.toString()\n                })\n                if (oldPostIndex === -1) {\n                    if (\n                        post.notifications &&\n                        post.notifications.length > 0 &&\n                        new Date(post.notifications[0].date).getTime() >\n                            startTime\n                    ) {\n                        newUnseenPosts.push(post)\n                    } else {\n                        newOldPosts.push(post)\n                    }\n                } else {\n                    oldPosts[oldPostIndex] = post\n                }\n            }\n\n            for (let post of newOldPosts) {\n                const index = oldPosts.findIndex(item => {\n                    if (\n                        item &&\n                        item.notifications &&\n                        item.notifications.length > 0\n                    ) {\n                        return (\n                            new Date(item.notifications[0]).getTime() >\n                            new Date(post.notifications[0]).getTime()\n                        )\n                    } else return false\n                })\n                if (index === -1) {\n                    oldPosts.push(post)\n                } else {\n                    oldPosts.splice(index, 0, post)\n                }\n            }\n\n            let resultPosts = [...newUnseenPosts, ...oldPosts]\n            if (posts.length === 0) {\n                resultPosts = resultPosts.sort(sortPosts)\n            }\n            setPosts(resultPosts)\n        }\n    }, [currentPosts, statePosts])\n    if (!account._id) return null\n\n    let lastNotifications = []\n    for (let progress of account.progresses) {\n        if (progressData[progress])\n            lastNotifications = [\n                ...lastNotifications,\n                ...progressData[progress].notifications.filter(\n                    item =>\n                        item.code === 'add post' && item.user !== account._id\n                ),\n            ]\n    }\n\n    for (let group of account.groups) {\n        if (groupData[group])\n            lastNotifications = [\n                ...lastNotifications,\n                ...groupData[group].notifications.filter(\n                    item =>\n                        item.code === 'add post' && item.user !== account._id\n                ),\n            ]\n    }\n\n    lastNotifications = lastNotifications\n        .sort(sortNotifications)\n        .map(item => item.details.postId)\n        .slice(0, 10)\n\n    const neededPosts = [\n        ...new Set([\n            ...account.followPosts,\n            ...account.myPosts,\n            ...posts.map(post => post._id),\n            ...lastNotifications,\n        ]),\n    ]\n    if (!isEqual(currentPosts, neededPosts))\n        props.setData({ currentPosts: neededPosts })\n\n    props.setPageTitle({ main: 'Dashboard', sub: '' })\n\n    return posts.map(item => {\n        let text = null\n        const nots = item.notifications.filter(not => not.user !== account._id)\n        const not = nots.length > 0 ? nots[0] : null\n        if (not) {\n            switch (not.code) {\n                case 'edit wishlist item':\n                    text = 'edited item in wishlist.'\n\n                    break\n                case 'edit goal':\n                    text = 'edited goal.'\n\n                    break\n                case 'edit perk':\n                    text = 'edited item in shop.'\n\n                    break\n\n                case 'comment':\n                    text = 'added a comment.'\n\n                    break\n                case 'edit comment':\n                    text = 'edited a comment.'\n\n                    break\n                case 'like':\n                    text = 'added a like.'\n\n                    break\n                case 'dislike':\n                    text = 'removed a like.'\n\n                    break\n                default:\n                    text = null\n                    break\n            }\n        }\n        return (\n            <>\n                <div\n                    style={{\n                        height: '5px',\n                        background: '#ddd',\n                        width: 'calc(100% + 8px)',\n                        position: 'absolute',\n                        left: '-8px',\n                    }}\n                />\n                <div style={{ paddingTop: '10px' }}>\n                    {text && (\n                        <>\n                            <span>\n                                <UserButton\n                                    id={not.user}\n                                    noAva={true}\n                                    span={true}\n                                    style={{ fontWeight: 'bold' }}\n                                />{' '}\n                                {text}\n                            </span>\n                            <Divider\n                                type=\"horizontal\"\n                                style={{ margin: '5px 0' }}\n                            />\n                        </>\n                    )}\n                    <Post\n                        friendData={friendData}\n                        account={account}\n                        post={item}\n                        progressData={progressData}\n                        groupData={groupData}\n                    />\n                </div>\n            </>\n        )\n    })\n}\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        account: state.account,\n        statePosts: state.post,\n        progress: state.progress,\n        friendData: state.friendData,\n        progressData: state.progressData,\n        groupData: state.groupData,\n        currentPosts: state.currentPosts,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: data => {\n            dispatch(actions.setData(data))\n        },\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(DashboardPosts)\n)\n","import React from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\n\nimport Card from 'antd/es/card'\nimport Button from 'antd/es/button'\nimport UserButton from '../../components/UserButton/UserButton'\n\nconst DashboardEvents = props => {\n    const { lastNotifications } = props\n    const getRewardText = item =>\n        item.details.reward.money\n            ? '$' + item.details.reward.money\n            : item.details.reward.simple || item.details.reward.itemName\n    return lastNotifications.map(item => {\n        let text = null\n\n        switch (item.code) {\n            case 'change name':\n                text = (\n                    <span>\n                        {' '}\n                        <UserButton id={item.user} /> changed name.\n                    </span>\n                )\n                break\n            case 'delete account':\n                text = (\n                    <span>\n                        {item.user}\n                        deleted account.\n                    </span>\n                )\n                break\n            case 'friend request':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> wants to become friends\n                        with you.\n                    </span>\n                )\n                break\n            case 'friend add':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> and{' '}\n                        <UserButton id={item.details.friend} /> became friends.\n                    </span>\n                )\n                break\n            case 'unfriend':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> and{' '}\n                        <UserButton id={item.details.friend} /> stopped being\n                        friends.\n                    </span>\n                )\n                break\n            case 'add wishlist item':\n            case 'edit wishlist item':\n                text = (\n                    <span>\n                        <UserButton id={item.user} />{' '}\n                        {item.code === 'add wishlist item'\n                            ? 'added to wishlist a new item'\n                            : 'edited in wishlist'}{' '}\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/wishlist/${item.user}/${\n                                        item.details.itemId\n                                    }`\n                                )\n                            }\n                        >\n                            {item.details.itemName}\n                        </Button>{' '}\n                        .\n                    </span>\n                )\n                break\n            case 'delete wishlist item':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> deleted{' '}\n                        {item.details.itemName} from wishlist.\n                    </span>\n                )\n                break\n            case 'add goal':\n            case 'edit goal':\n                text = (\n                    <span>\n                        <UserButton id={item.user} />{' '}\n                        {item.code === 'add goal'\n                            ? 'added a new goal'\n                            : 'edited goal'}{' '}\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/goals/${item.user}/${item.details.itemId}`\n                                )\n                            }\n                        >\n                            {item.details.itemName}\n                        </Button>{' '}\n                        .\n                    </span>\n                )\n                break\n            case 'delete goal':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> deleted{' '}\n                        {item.details.itemName} from goals.\n                    </span>\n                )\n                break\n            case 'add perk':\n            case 'edit perk':\n                text = (\n                    <span>\n                        <UserButton id={item.user} />{' '}\n                        {item.code === 'add perk'\n                            ? 'added to shop a new item'\n                            : 'edited in shop'}{' '}\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/shop/${item.user}/${item.details.itemId}`\n                                )\n                            }\n                        >\n                            {item.details.itemName}\n                        </Button>{' '}\n                        .\n                    </span>\n                )\n                break\n            case 'delete perk':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> deleted{' '}\n                        {item.details.itemName} from shop.\n                    </span>\n                )\n                break\n            case 'buy perk':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> bought\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/shop/${item.user}/${item.details.itemId}`\n                                )\n                            }\n                        >\n                            {item.details.itemName} (${item.details.price})\n                        </Button>{' '}\n                        from <UserButton id={item.details.owner} /> .\n                    </span>\n                )\n                break\n            case 'cancel transaction':\n            case 'confirm transaction':\n                text = (\n                    <span>\n                        <UserButton id={item.user} />{' '}\n                        {item.code === 'cancel transaction'\n                            ? 'cancelled'\n                            : 'confirmed'}\n                        purchase of\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/shop/${item.user}/${item.details.itemId}`\n                                )\n                            }\n                        >\n                            {item.details.itemName} (${item.details.price})\n                        </Button>{' '}\n                        by <UserButton id={item.details.buyer} /> .\n                    </span>\n                )\n                break\n            case 'start progress':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> started participating in\n                        progress\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/progresses/${item.details.itemId}`\n                                )\n                            }\n                        >\n                            {item.details.itemName}\n                        </Button>{' '}\n                        as {item.details.as}.\n                    </span>\n                )\n                break\n            case 'approve milestone':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> approved milestone{' '}\n                        {item.details.itemName} in\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/progresses/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </Button>\n                        .\n                    </span>\n                )\n                break\n            case 'disapprove milestone':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> disapproved milestone{' '}\n                        {item.details.itemName} in\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/progresses/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </Button>\n                        .\n                    </span>\n                )\n                break\n            case 'finish progress':\n                text = (\n                    <span>\n                        Progress{' '}\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/progresses/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </Button>\n                        was approved and finished.\n                    </span>\n                )\n                break\n            case 'milestone finish':\n                text = (\n                    <span>\n                        Milestone {item.details.itemName} in progress{' '}\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/progresses/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </Button>\n                        was approved and finished.\n                    </span>\n                )\n                break\n            case 'get reward':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> recieved{' '}\n                        {getRewardText(item)} as a reward from{' '}\n                        <UserButton id={item.details.from} /> in progress\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/progresses/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </Button>\n                        .\n                    </span>\n                )\n                break\n            case 'leave progress':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> left progress{' '}\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/progresses/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </Button>\n                        .\n                    </span>\n                )\n                break\n            case 'edit progress':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> edited progress{' '}\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/progresses/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </Button>\n                        {item.details.addedAccounts.length > 0 ? (\n                            <>\n                                {' '}\n                                and added{' '}\n                                {item.details.addedAccounts.map(ac => (\n                                    <UserButton id={ac} />\n                                ))}{' '}\n                            </>\n                        ) : (\n                            ''\n                        )}\n                        {item.details.droppedAccounts.length > 0 ? (\n                            <>\n                                {' '}\n                                and removed{' '}\n                                {item.details.droppedAccounts.map(ac => (\n                                    <UserButton id={ac} />\n                                ))}{' '}\n                            </>\n                        ) : (\n                            ''\n                        )}\n                        .\n                    </span>\n                )\n                break\n            case 'remove from progress':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> removed{' '}\n                        <UserButton id={item.details.account} /> from progress\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/progresses/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </Button>\n                        .\n                    </span>\n                )\n                break\n            case 'add to progress':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> added{' '}\n                        <UserButton id={item.details.account} /> to progress\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/progresses/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </Button>\n                        .\n                    </span>\n                )\n                break\n            case 'add reward':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> added{' '}\n                        {getRewardText(item)} as a reward for\n                        {!item.details.for || item.details.for.length === 0\n                            ? 'all '\n                            : item.details.for.map(account => (\n                                  <>\n                                      <UserButton id={account} />,\n                                  </>\n                              ))}\n                        in progress\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/progresses/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </Button>\n                        .\n                    </span>\n                )\n                break\n            case 'delete reward':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> removed{' '}\n                        {getRewardText(item)} as a reward for{' '}\n                        {!item.details.for || item.details.for.length === 0\n                            ? 'all '\n                            : item.details.for.map(account => (\n                                  <>\n                                      <UserButton id={account} />,\n                                  </>\n                              ))}\n                        in progress\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/progresses/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </Button>\n                        .\n                    </span>\n                )\n                break\n            default:\n                console.log(item)\n                text = 'New event'\n                break\n        }\n        return <Card>{text}</Card>\n    })\n}\nconst mapStateToProps = state => {\n    return {\n        lastNotifications: state.lastNotifications,\n    }\n}\n\nexport default withRouter(connect(mapStateToProps)(DashboardEvents))\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport * as wsActions from '../../websocketActions'\n\nimport Tabs from 'antd/es/tabs'\nimport DashboardPosts from './DashboardPosts'\nimport DashboardEvents from './DashboardEvents'\nimport Badge from 'antd/es/badge'\n\nconst Progress = props => {\n    const { account, lastNotifications } = props\n\n    if (!account._id) return null\n\n    props.setPageTitle({ main: 'Dashboard', sub: '' })\n\n    let numberOfUnseenNots = 0\n    for (let not of lastNotifications) {\n        if (parseInt(not.notId) > parseInt(account.lastSeenNot || 0))\n            numberOfUnseenNots++\n    }\n\n    return (\n        <div className=\"contentDiv\">\n            <Tabs\n                onChange={activeTab => {\n                    if (activeTab === 'events') {\n                        const last = parseInt(\n                            lastNotifications.reduce((res, not) => {\n                                return parseInt(not.notId) > parseInt(res)\n                                    ? not.notId\n                                    : res\n                            }, 0)\n                        )\n                        if (\n                            lastNotifications.length > 0 &&\n                            parseInt(account.lastSeenNot) !== last\n                        ) {\n                            wsActions.setLastSeenNot(account._id, last)\n                        }\n                    }\n                }}\n            >\n                <Tabs.TabPane tab=\"Posts\" key=\"posts\">\n                    <DashboardPosts />\n                </Tabs.TabPane>\n\n                <Tabs.TabPane\n                    tab={\n                        <Badge count={numberOfUnseenNots} offset={[10, 0]}>\n                            Events\n                        </Badge>\n                    }\n                    key=\"events\"\n                >\n                    <DashboardEvents />\n                </Tabs.TabPane>\n            </Tabs>\n        </div>\n    )\n}\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n        lastNotifications: state.lastNotifications,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Progress)\n","import { webSocket } from '../containers/ConnectWebsocket/ConnectWebsocket'\n\nexport const setLastSeenNot = (accountId, notId) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'setLastSeenNot',\n                accountId,\n                notId,\n            })\n        )\n    }\n}\n","import React, { useState } from 'react'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport axios from 'axios'\nimport InfiniteScroll from 'react-infinite-scroller'\nimport message from 'antd/es/message'\n\nimport Input from 'antd/es/input'\nimport UserButton from '../../components/UserButton/UserButton'\nimport MasonryGrid from '../../components/MasonryGrid'\nimport MasonryCard from '../../components/MasonryCard'\n\nconst Explore = props => {\n    const [isSearching, setIsSearching] = useState(false)\n    const [foundProgresses, setFoundProgresses] = useState([])\n    const [progresses, setProgresses] = useState([])\n    const [noMore, setNoMore] = useState(false)\n    const [noMorePopular, setNoMorePopular] = useState(false)\n    const [searchValue, setSearchValue] = useState('')\n    const [friendData, setFriendData] = useState({})\n\n    const onSearch = (value, noNoMore) => {\n        if (!noMore || noNoMore) {\n            setNoMore(true)\n            axios\n                .post('/api/explore/search', {\n                    value: value || searchValue,\n                    skip: noNoMore ? 0 : foundProgresses.length,\n                })\n                .then(res => {\n                    if (res.data.success) {\n                        setNoMore(res.data.noMore)\n                        setFoundProgresses(res.data.progresses)\n                        if (res.data.progresses.length === 0)\n                            message.warning('There are no progresses found.')\n                        const newFriendData = {}\n                        for (let friend of res.data.friends) {\n                            newFriendData[friend._id] = friend\n                        }\n                        setFriendData(newFriendData)\n                    } else {\n                        if (res.data.errorCode) {\n                            message.error(\n                                'Something is wrong with the data. Please try one more time with new data.'\n                            )\n                        }\n                    }\n                })\n                .catch(err => {})\n        }\n    }\n\n    const onGetPopular = () => {\n        console.log('lets get more')\n        console.log(noMorePopular)\n        if (!noMorePopular) {\n            setNoMorePopular(true)\n            axios\n                .post('/api/explore/popular', {\n                    skip: progresses.length,\n                })\n                .then(res => {\n                    if (res.data.success) {\n                        setNoMorePopular(res.data.noMore)\n                        setProgresses([...progresses, ...res.data.progresses])\n                        const newFriendData = {}\n                        for (let friend of res.data.friends) {\n                            newFriendData[friend._id] = friend\n                        }\n                        setFriendData(newFriendData)\n                    } else {\n                        if (res.data.errorCode) {\n                            message.error(\n                                'Something is wrong with the data. Please try one more time with new data.'\n                            )\n                        }\n                    }\n                })\n                .catch(err => {})\n        }\n    }\n\n    props.setPageTitle({ main: 'Explore', sub: '' })\n    console.log('we are here')\n    console.log(noMorePopular)\n    return (\n        <div>\n            <Input.Search\n                placeholder=\"Find great progresses!\"\n                onSearch={value => {\n                    if (value) {\n                        setIsSearching(true)\n                        if (value !== searchValue) {\n                            setNoMore(false)\n                            setFoundProgresses([])\n                            setSearchValue(value)\n                            onSearch(value, true)\n                        }\n                    } else {\n                        setNoMore(false)\n                        setSearchValue(value)\n                        setIsSearching(false)\n                    }\n                }}\n                onChange={e => {\n                    if (!e.target.value) {\n                        setNoMore(false)\n                        setFoundProgresses([])\n                        setIsSearching(false)\n                        setSearchValue('')\n                    }\n                }}\n                enterButton\n                allowClear\n            />\n            {isSearching ? (\n                foundProgresses.length > 0 ? (\n                    <InfiniteScroll\n                        pageStart={0}\n                        loadMore={onSearch(searchValue)}\n                        hasMore={!noMore}\n                        loader={\n                            <div className=\"loader\" key={0}>\n                                Loading ...\n                            </div>\n                        }\n                    >\n                        <MasonryGrid>\n                            {foundProgresses.map((item, index) => (\n                                <MasonryCard\n                                    key={index}\n                                    onClickLink={'/progresses/' + item._id}\n                                    images={item.goal.images}\n                                    body={\n                                        <>\n                                            <UserButton\n                                                noName={true}\n                                                id={item.owner}\n                                                friendDataExp={friendData}\n                                            />\n                                            <span\n                                                style={{ fontWeight: 'bold' }}\n                                            >\n                                                {item.name}\n                                            </span>\n                                        </>\n                                    }\n                                />\n                            ))}\n                        </MasonryGrid>\n                    </InfiniteScroll>\n                ) : null\n            ) : (\n                <InfiniteScroll\n                    pageStart={0}\n                    loadMore={onGetPopular}\n                    hasMore={!noMorePopular}\n                    loader={\n                        <div className=\"loader\" key={0}>\n                            Loading ...\n                        </div>\n                    }\n                >\n                    <MasonryGrid>\n                        {progresses.map((item, index) => (\n                            <MasonryCard\n                                key={index}\n                                onClickLink={'/progresses/' + item._id}\n                                images={item.goal.images}\n                                body={\n                                    <>\n                                        <UserButton\n                                            noName={true}\n                                            id={item.owner}\n                                            friendDataExp={friendData}\n                                        />\n                                        <span style={{ fontWeight: 'bold' }}>\n                                            {item.name}\n                                        </span>\n                                    </>\n                                }\n                            />\n                        ))}\n                    </MasonryGrid>\n                </InfiniteScroll>\n            )}\n        </div>\n    )\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n        setData: data => dispatch(actions.setData(data)),\n    }\n}\n\nexport default connect(\n    null,\n    mapDispatchToProps\n)(Explore)\n","import React from 'react'\n\nimport * as wsActions from '../websocketActions'\nimport Menu from 'antd/es/menu'\nimport Dropdown from 'antd/es/dropdown'\nimport { DownOutlined } from '@ant-design/icons'\nimport Button from 'antd/es/button'\nimport MoreIcon from './UI/MoreIcon'\n\nconst FriendActionButton = props => {\n    const {\n        invitingFriends,\n        invitedFriends,\n        realFriends,\n        _id,\n        accountId,\n    } = props\n    if (!accountId) return []\n\n    if (accountId === _id) return [props.additionalButton]\n\n    const menu = (\n        <Menu onClick={({ domEvent }) => domEvent.stopPropagation()}>\n            {props.additionalButtons &&\n                props.additionalButtons.map((button, index) => (\n                    <Menu.Item key={index + 100} onClick={button.onClick}>\n                        {button.title}\n                    </Menu.Item>\n                ))}\n            {invitingFriends.find(item => item.friend === _id) ? (\n                <Menu.Item\n                    key=\"2\"\n                    onClick={() => wsActions.unfriend(accountId, _id)}\n                    danger={true}\n                >\n                    Decline\n                </Menu.Item>\n            ) : invitedFriends.find(item => item.friend === _id) ? (\n                <Menu.Item\n                    key=\"3\"\n                    onClick={() => wsActions.unfriend(accountId, _id)}\n                    danger={true}\n                >\n                    Cancel invitation\n                </Menu.Item>\n            ) : realFriends.find(item => item.friend === _id) ? (\n                <Menu.Item\n                    key=\"4\"\n                    onClick={() => wsActions.unfriend(accountId, _id)}\n                    danger={true}\n                >\n                    Unfriend\n                </Menu.Item>\n            ) : null}\n        </Menu>\n    )\n    return invitingFriends.find(item => item.friend === _id) ? (\n        <Dropdown.Button\n            type=\"primary\"\n            overlay={menu}\n            trigger={['click', 'hover']}\n            onClick={e => {\n                e.preventDefault()\n                e.stopPropagation()\n                wsActions.acceptFriend(accountId, _id)\n            }}\n        >\n            Accept\n        </Dropdown.Button>\n    ) : ![...realFriends, ...invitingFriends, ...invitedFriends].find(\n          item => item.friend === _id\n      ) ? (\n        <Dropdown.Button\n            type=\"primary\"\n            overlay={menu}\n            trigger={['click', 'hover']}\n            onClick={e => {\n                e.preventDefault()\n                e.stopPropagation()\n                wsActions.addFriend(accountId, _id)\n            }}\n        >\n            Add\n        </Dropdown.Button>\n    ) : (\n        <Dropdown overlay={menu} trigger={['click']}>\n            <a\n                // className=\"ant-dropdown-link\"\n                onClick={e => {\n                    e.preventDefault()\n                    e.stopPropagation()\n                }}\n            >\n                <Button type={props.asText ? 'primary' : 'link'}>\n                    {props.asText ? (\n                        <>\n                            Actions <DownOutlined />\n                        </>\n                    ) : (\n                        <MoreIcon />\n                    )}\n                </Button>\n            </a>\n        </Dropdown>\n    )\n}\n\nexport default FriendActionButton\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport * as actions from '../store/actions'\nimport { withRouter } from 'react-router-dom'\n\nimport Card from 'antd/es/card'\nimport friendActionButton from './FriendActionButton'\nimport UserButton from './UserButton/UserButton'\n\nconst FriendCard = props => {\n    const friendActions = friendActionButton({\n        accountId: props.account ? props.account._id : '',\n        realFriends: props.realFriends,\n        invitedFriends: props.invitedFriends,\n        invitingFriends: props.invitingFriends,\n        _id: props.friend._id,\n        asIcons: true,\n\n        additionalButtons: [\n            {\n                title: 'See profile',\n                onClick: () =>\n                    props.history.push('/profile/' + props.friend._id),\n            },\n        ],\n    })\n\n    return (\n        <Card\n            style={{ width: '100%' }}\n            type=\"inner\"\n            bordered={false}\n            extra={friendActions}\n            title={<UserButton id={props.friend._id} size={50} />}\n        />\n    )\n}\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n        isAuthed: state.isAuthed,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: (data, pulledFrom) =>\n            dispatch(actions.setData(data, pulledFrom)),\n        tryAuth: (props, forceAuth) =>\n            dispatch(actions.tryAuth(props, forceAuth)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(FriendCard)\n)\n","import React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport * as wsActions from '../../websocketActions'\nimport Card from 'antd/es/card'\nimport Button from 'antd/es/button'\nimport Modal from 'antd/es/modal'\n\nimport Input from 'antd/es/input'\nimport Form from 'antd/es/form'\n\nimport FriendCard from '../../components/FriendCard'\nimport { nicknameRules } from '../../constants/fieldRules'\n\nconst AddFriends = props => {\n    useEffect(() => {\n        props.setFriendSearchResult({})\n    }, [props.addFriendOpen])\n\n    const {\n        addFriendOpen,\n        setAddFriendOpen,\n        searchResult,\n        realFriends,\n        invitedFriends,\n        invitingFriends,\n    } = props\n    const layout = {\n        labelCol: { span: 8 },\n        wrapperCol: { span: 16 },\n    }\n    const tailLayout = {\n        wrapperCol: { offset: 8, span: 16 },\n    }\n\n    return (\n        <Modal\n            title=\"Add friend\"\n            visible={addFriendOpen}\n            maskClosable\n            closable\n            onCancel={() => setAddFriendOpen(false)}\n            footer={\n                <Button key=\"back\" onClick={() => setAddFriendOpen(false)}>\n                    Return\n                </Button>\n            }\n            destroyOnClose={true}\n        >\n            <p>To find a friend you need to enter your friend's nickname.</p>\n            <Form\n                name=\"dynamic_form_nest_item\"\n                onFinish={value => wsActions.searchFriends(value.search)}\n                autoComplete=\"off\"\n                {...layout}\n            >\n                <Form.Item label=\"Search\" name=\"search\" rules={nicknameRules}>\n                    <Input placeholder=\"Must be more than 2 characters long\" />\n                </Form.Item>\n\n                <Form.Item {...tailLayout}>\n                    <Button type=\"primary\" htmlType=\"submit\" size=\"large\">\n                        Search\n                    </Button>\n                </Form.Item>\n            </Form>\n            {searchResult._id && (\n                <Card title=\"Search result\">\n                    <FriendCard\n                        {...props}\n                        friend={searchResult}\n                        realFriends={realFriends}\n                        invitingFriends={invitingFriends}\n                        invitedFriends={invitedFriends}\n                    />\n                </Card>\n            )}\n        </Modal>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        searchResult: state.friendSearchResult,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setFriendSearchResult: data =>\n            dispatch(actions.setFriendSearchResult(data)),\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(AddFriends)\n","import React from 'react'\nimport { withRouter } from 'react-router-dom'\nimport Masonry from 'react-masonry-css'\nimport { friendsBreakPoints } from '../../utils/masonryBreakPoints'\n\nimport FriendCard from '../../components/FriendCard'\nimport MasonryGrid from '../../components/MasonryGrid'\n\nconst pendingFriends = props => {\n    const { realFriends, invitedFriends, invitingFriends } = props\n    return (\n        <>\n            {invitingFriends.length > 0 && (\n                <>\n                    <h2>People invited me to be friends</h2>\n                    <MasonryGrid friends={true}>\n                        {invitingFriends.map(friend => (\n                            <FriendCard\n                                key={friend._id}\n                                {...props}\n                                friend={friend}\n                                realFriends={realFriends}\n                                invitingFriends={invitingFriends}\n                                invitedFriends={invitedFriends}\n                            />\n                        ))}\n                    </MasonryGrid>\n                </>\n            )}\n\n            {invitedFriends.length > 0 && (\n                <>\n                    <h2>I invited these people</h2>\n                    <MasonryGrid friends={true}>\n                        {invitedFriends.map(friend => (\n                            <FriendCard\n                                key={friend._id}\n                                {...props}\n                                friend={friend}\n                                realFriends={realFriends}\n                                invitingFriends={invitingFriends}\n                                invitedFriends={invitedFriends}\n                            />\n                        ))}\n                    </MasonryGrid>\n                </>\n            )}\n        </>\n    )\n}\n\nexport default withRouter(pendingFriends)\n","import React, { useState, useEffect } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\n\nimport FriendCard from '../../components/FriendCard'\nimport AddCard from '../../components/AddCard/AddCard'\nimport AddFriends from './AddFriends'\nimport PendingFriends from './PendingFriends'\nimport Tabs from 'antd/es/tabs'\nimport Empty from 'antd/es/empty'\nimport Badge from 'antd/es/badge'\nimport Masonry from 'react-masonry-css'\nimport { friendsBreakPoints } from '../../utils/masonryBreakPoints'\nimport MasonryGrid from '../../components/MasonryGrid'\n\nconst Friends = props => {\n    const [addFriendOpen, setAddFriendOpen] = useState()\n\n    useEffect(() => {\n        props.setPageTitle({ main: 'Friends', sub: '' })\n    }, [])\n\n    const { account, friendData } = props\n    if (!account._id) return null\n    const realFriends = [],\n        invitedFriends = [],\n        invitingFriends = []\n\n    if (account.friends) {\n        for (let friend of account.friends) {\n            const fullFriend = { ...friendData[friend.friend], ...friend }\n            if (fullFriend) {\n                if (fullFriend.status === 'friend') realFriends.push(fullFriend)\n                else if (fullFriend.status === 'invited')\n                    invitedFriends.push(fullFriend)\n                else if (fullFriend.status === 'inviting')\n                    invitingFriends.push(fullFriend)\n            }\n        }\n    }\n\n    const confirmedFriends =\n        realFriends.length > 0 ? (\n            <MasonryGrid friends={true}>\n                {realFriends.map(friend => (\n                    <FriendCard\n                        key={friend._id}\n                        {...props}\n                        friend={friend}\n                        realFriends={realFriends}\n                        invitingFriends={invitingFriends}\n                        invitedFriends={invitedFriends}\n                    />\n                ))}\n            </MasonryGrid>\n        ) : (\n            <Empty\n                image=\"https://websiter.s3.us-east-2.amazonaws.com/image+4.jpg\"\n                imageStyle={{ height: '250px', marginTop: '50px' }}\n                description={false}\n            />\n        )\n    return (\n        <div>\n            <AddCard\n                title=\"Add friend\"\n                sub=\"Find by nickname\"\n                action={() => setAddFriendOpen(true)}\n            />\n            {invitedFriends.length > 0 || invitingFriends.length > 0 ? (\n                <Tabs>\n                    <Tabs.TabPane key=\"confirmed\" tab=\"Confrmed\">\n                        {confirmedFriends}\n                    </Tabs.TabPane>\n\n                    <Tabs.TabPane\n                        tab={\n                            <Badge\n                                count={invitingFriends.length}\n                                offset={[10, 0]}\n                            >\n                                Pending\n                            </Badge>\n                        }\n                        key=\"pending\"\n                    >\n                        <PendingFriends\n                            realFriends={realFriends}\n                            invitedFriends={invitedFriends}\n                            invitingFriends={invitingFriends}\n                        />\n                    </Tabs.TabPane>\n                </Tabs>\n            ) : (\n                confirmedFriends\n            )}\n            <AddFriends\n                addFriendOpen={addFriendOpen}\n                setAddFriendOpen={setAddFriendOpen}\n                realFriends={realFriends}\n                invitedFriends={invitedFriends}\n                invitingFriends={invitingFriends}\n                account={account}\n            />\n        </div>\n    )\n}\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n        friendData: state.friendData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Friends)\n)\n","import React, { useEffect, useState } from 'react'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport PageHeader from 'antd/es/page-header'\nimport Form from 'antd/es/form'\nimport Button from 'antd/es/button'\nimport Input from 'antd/es/input'\n\nimport { withRouter } from 'react-router-dom'\nimport Card from 'antd/es/card'\nimport Upload from 'antd/es/upload'\nimport * as classes from './Account.module.css'\n\nimport LoadingOutlined from '@ant-design/icons/LoadingOutlined'\nimport PlusOutlined from '@ant-design/icons/PlusOutlined'\n\nimport { uploadFile } from '../../utils/uploadFile'\nimport Avatar from 'antd/es/avatar'\nimport getAvatar from '../../utils/getAvatar'\nimport Modal from 'antd/es/modal'\nimport { accountNameRules } from '../../constants/fieldRules'\nimport * as wsActions from '../../websocketActions'\nimport message from 'antd/es/message'\nimport Dropdown from 'antd/es/dropdown'\nimport Menu from 'antd/es/menu'\n\nconst Account = props => {\n    const [deleteVisible, setDeleteVisible] = useState()\n    const [deleteField, setDeleteField] = useState('')\n    const { account } = props\n\n    useEffect(() => {\n        props.setPageTitle({ main: 'Account', sub: '' })\n    }, [])\n\n    const loading = false\n\n    const layout = {\n        labelCol: { span: 8 },\n        wrapperCol: { span: 16 },\n    }\n    const tailLayout = {\n        wrapperCol: { offset: 8, span: 0 },\n    }\n    return account && account.name ? (\n        <div className=\"contentDiv\">\n            <Card>\n                <Upload\n                    name=\"avatar\"\n                    listType=\"picture-card\"\n                    className={classes.Avatar}\n                    showUploadList={false}\n                    customRequest={({ file }) => {\n                        uploadFile(file, 800, 'avatar', () => {\n                            props.increaseAvatarV()\n                        })\n                    }}\n                >\n                    {account.image ? (\n                        <Avatar\n                            src={getAvatar(account._id, account.image)}\n                            size={150}\n                            style={{ margin: '25px' }}\n                        />\n                    ) : (\n                        <div>\n                            {loading ? <LoadingOutlined /> : <PlusOutlined />}\n                            <div className=\"ant-upload-text\">Upload</div>\n                        </div>\n                    )}\n                </Upload>\n                <Form\n                    name=\"dynamic_form_nest_item\"\n                    onFinish={value =>\n                        wsActions.editAccount(value, account._id)\n                    }\n                    autoComplete=\"off\"\n                    {...layout}\n                    initialValues={{\n                        name: account.name,\n                        nickname: account._id,\n                    }}\n                >\n                    <Form.Item\n                        label=\"Name\"\n                        name=\"name\"\n                        rules={accountNameRules}\n                    >\n                        <Input placeholder=\"Must be more than 1 character long\" />\n                    </Form.Item>\n                    <Form.Item label=\"Nickname\" name=\"nickname\">\n                        <Input disabled={true} />\n                    </Form.Item>\n                    <Form.Item\n                        {...tailLayout}\n                        style={{\n                            flex: 'none',\n                            maxWidth: ' 100%',\n                            overflow: 'hidden',\n                        }}\n                    >\n                        <Dropdown.Button\n                            type=\"primary\"\n                            htmlType=\"submit\"\n                            size=\"large\"\n                            overlay={\n                                <Menu>\n                                    <Menu.Item\n                                        danger={true}\n                                        onClick={() => setDeleteVisible(true)}\n                                    >\n                                        Delete account\n                                    </Menu.Item>\n                                </Menu>\n                            }\n                        >\n                            Save\n                        </Dropdown.Button>\n                    </Form.Item>\n                </Form>\n                <Modal\n                    title=\"Delete account\"\n                    visible={deleteVisible}\n                    onOk={() => {\n                        if (deleteField !== account._id) {\n                            message.warning('The nickmanme is not correct.')\n                        } else {\n                            wsActions.deleteAccount(account._id)\n                        }\n                    }}\n                    onCancel={() => {\n                        setDeleteVisible(false)\n                        setDeleteField('')\n                    }}\n                >\n                    <p>\n                        Please enter your nickname and press Ok to delete your\n                        account.\n                    </p>\n                    <Input onChange={e => setDeleteField(e.target.value)} />\n                </Modal>\n            </Card>\n        </div>\n    ) : null\n}\n\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n        increaseAvatarV: () => dispatch(actions.increaseAvatarV()),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Account)\n)\n","import { webSocket } from '../containers/ConnectWebsocket/ConnectWebsocket'\n\nexport const deleteAccount = id => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'deleteAccount',\n                accountId: id,\n            })\n        )\n    }\n}\n\nexport const editAccount = (value, id) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'editAccount',\n                name: value.name,\n                accountId: id,\n            })\n        )\n    }\n}\n","import React, { useEffect, useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport Avatar from 'antd/es/avatar'\nimport Card from 'antd/es/card'\n\nimport friendActionButton from '../../components/FriendActionButton'\nimport FriendCard from '../../components/FriendCard'\nimport Tabs from 'antd/es/tabs'\nimport Progresses from '../Progresses/Progresses'\nimport Wallet from '../Shop/Wallet'\nimport PerkCard from '../Shop/PerkCard'\nimport getAvatar from '../../utils/getAvatar'\nimport pullData from '../../utils/pullData'\nimport UserButton from '../../components/UserButton/UserButton'\nimport MasonryGrid from '../../components/MasonryGrid'\n\nconst Profile = props => {\n    const [data, setData] = useState({})\n    const { profile, friendData, account } = props.isAuthed ? props : data\n\n    useEffect(() => {\n        const pathParts = props.history.location.pathname.split('/')\n        if (pathParts.length > 2) {\n            const profileId = pathParts[2]\n            if (props.isAuthed) {\n                props.setData({ currentProfile: profileId })\n            } else {\n                pullData(props, data, setData, { forceAuth: false }, data => {\n                    const friendData = {}\n                    for (let friend of data.friendData)\n                        friendData[friend._id] = friend\n                    const progressData = {}\n                    for (let progress of data.progressData)\n                        progressData[progress._id] = progress\n                    const groupData = {}\n                    for (let group of data.groupData)\n                        groupData[group._id] = group\n\n                    props.setData({\n                        // profile: data.profile,\n                        friendData,\n                        progressData,\n                        groupData,\n                        account: {},\n                    })\n                })\n            }\n        }\n    }, [props.isAuthed, props.history.location.pathname])\n\n    if (!profile || !profile._id) return null\n    props.setPageTitle({ main: profile.name, sub: '' })\n\n    const realFriends = [],\n        invitedFriends = [],\n        invitingFriends = []\n    if (profile && profile.friends && account && account._id) {\n        for (let friend of account.friends) {\n            if (friend.status === 'friend') realFriends.push(friend)\n            else if (friend.status === 'invited') invitedFriends.push(friend)\n            else if (friend.status === 'inviting') invitingFriends.push(friend)\n        }\n    }\n    const friendActions = friendActionButton({\n        accountId: account ? account._id : '',\n        realFriends: realFriends,\n        invitedFriends: invitedFriends,\n        invitingFriends: invitingFriends,\n        _id: profile._id,\n        additionalButton: null,\n        asText: true,\n    })\n    return (\n        <div>\n            <Card>\n                <div style={{ textAlign: 'center', marginBottom: '50px' }}>\n                    <Avatar\n                        src={getAvatar(profile._id, profile.image)}\n                        size={200}\n                    />\n                    <h1>{profile.name}</h1>\n                    <h3>({profile._id})</h3>\n                    {friendActions}\n                </div>\n                <Tabs>\n                    <Tabs.TabPane tab=\"Progresses\" key={0}>\n                        <Progresses fromProfile={true} />\n                    </Tabs.TabPane>\n\n                    <Tabs.TabPane tab=\"Friends\" key={1}>\n                        <MasonryGrid friends={true}>\n                            {profile.friends\n                                .filter(friend => friend.status === 'friend')\n                                .map(friend => {\n                                    const oneFriendData = {\n                                        ...friendData[friend.friend],\n                                        ...friend.friend,\n                                    }\n\n                                    return (\n                                        <FriendCard\n                                            key={oneFriendData._id}\n                                            {...props}\n                                            account={account}\n                                            friend={oneFriendData}\n                                            realFriends={realFriends}\n                                            invitingFriends={invitingFriends}\n                                            invitedFriends={invitedFriends}\n                                        />\n                                    )\n                                })}\n                        </MasonryGrid>\n                    </Tabs.TabPane>\n                    {/* <Tabs.TabPane tab=\"Goals\" key={3}>\n                        {profile.goals.map((goal, index) => (\n                            <PerkCard\n                                key={index}\n                                perk={goal}\n                                perkId={goal.itemId}\n                                owner={profile}\n                                account={account || {}}\n                                setEditedPerk={() => {}}\n                                setEditPerkOpen={() => {}}\n                                onlyBuy={true}\n                                mode=\"goals\"\n                            />\n                        ))}\n                    </Tabs.TabPane> */}\n                    <Tabs.TabPane tab=\"Shop\" key={4}>\n                        <MasonryGrid>\n                            {profile.perks &&\n                                profile.perks.map((perk, index) => (\n                                    <PerkCard\n                                        key={index}\n                                        perk={perk}\n                                        perkId={perk.perkId}\n                                        owner={profile}\n                                        account={account || {}}\n                                        onlyBuy={true}\n                                        mode=\"shop\"\n                                    />\n                                ))}\n                        </MasonryGrid>\n                    </Tabs.TabPane>\n                    <Tabs.TabPane tab=\"Wallet\" key={5}>\n                        <Wallet pulledProfile={profile} account={profile} />\n                    </Tabs.TabPane>\n                    <Tabs.TabPane tab=\"Wishlist\" key={6}>\n                        <MasonryGrid>\n                            {profile.wishlist.map((item, index) => (\n                                <PerkCard\n                                    key={index}\n                                    perk={item}\n                                    perkId={item.itemId}\n                                    owner={profile}\n                                    account={account || {}}\n                                    setEditedPerk={() => {}}\n                                    setEditPerkOpen={() => {}}\n                                    onlyBuy={true}\n                                    mode=\"wishlist\"\n                                />\n                            ))}\n                        </MasonryGrid>\n                    </Tabs.TabPane>\n                </Tabs>\n            </Card>\n        </div>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n        profile: state.profile,\n        isAuthed: state.isAuthed,\n        friendData: state.friendData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: data => dispatch(actions.setData(data)),\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n        tryAuth: (props, forceAuth) =>\n            dispatch(actions.tryAuth(props, forceAuth)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Profile)\n)\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport Button from 'antd/es/button'\nimport message from 'antd/es/message'\n\nimport Input from 'antd/es/input'\nimport PageHeader from 'antd/es/page-header'\nimport Form from 'antd/es/form'\nimport { withRouter } from 'react-router-dom'\nimport axios from 'axios'\nimport { nicknameRules, accountNameRules } from '../../constants/fieldRules'\nimport * as actions from '../../store/actions'\n\nconst ActivateAccount = props => {\n    if (!props.isAuthed) props.history.push('/logout')\n    const onFinish = value => {\n        axios\n            .post('/api/activate-account', {\n                ...value,\n            })\n            .then(res => {\n                if (res.data.success) {\n                    message.success('Your account has been activated!')\n                    props.setAccountActivated(false)\n                    props.history.push('/account')\n                } else {\n                    if (res.data.nicknameNotUnique) {\n                        message.warning(\n                            'The nickname is taken. Choose another nickname please.'\n                        )\n                    }\n                    if (res.data.errorCode) {\n                        message.error(\n                            'Something is wrong with the data. Please try one more time with new data.'\n                        )\n                    }\n                }\n            })\n            .catch(err => {})\n    }\n\n    const layout = {\n        labelCol: { span: 8 },\n        wrapperCol: { span: 16 },\n    }\n    const tailLayout = {\n        wrapperCol: { offset: 8, span: 16 },\n    }\n\n    return (\n        <>\n            <PageHeader\n                className=\"site-page-header\"\n                title=\"Activate your account\"\n                backIcon={false}\n            />\n            <Form\n                name=\"dynamic_form_nest_item\"\n                onFinish={onFinish}\n                autoComplete=\"off\"\n                {...layout}\n            >\n                <Form.Item label=\"Name\" name=\"name\" rules={accountNameRules}>\n                    <Input placeholder=\"Must be more than 1 character long\" />\n                </Form.Item>\n                <Form.Item\n                    label=\"Nickname\"\n                    name=\"nickname\"\n                    rules={nicknameRules}\n                >\n                    <Input placeholder=\"Must be more than 1 character long\" />\n                </Form.Item>\n                <Form.Item {...tailLayout}>\n                    <Button type=\"primary\" htmlType=\"submit\" size=\"large\">\n                        Save\n                    </Button>\n                </Form.Item>\n            </Form>\n        </>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        user: state.user,\n        account: state.account,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n        setAccountActivated: value =>\n            dispatch(actions.setAccountActivated(value)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(ActivateAccount)\n)\n","import React, { useEffect, useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport Card from 'antd/es/card'\nimport pullData from '../../utils/pullData'\nimport Descriptions from 'antd/es/descriptions'\nimport Post from '../../components/Post/Post'\nimport UserButton from '../../components/UserButton/UserButton'\nimport ImageCarousel from '../../components/UI/ImageCarousel/ImageCarousel'\n\nconst { Item } = Descriptions\n\nconst Perk = props => {\n    const [data, setData] = useState({})\n    const { account } = props\n    useEffect(() => {\n        const pathParts = props.history.location.pathname.split('/')\n        if (pathParts.length > 3) {\n            const accountId = pathParts[2]\n            if (props.isAuthed && account._id === accountId) {\n                const perk = account.perks.find(\n                    item => item.perkId === pathParts[3]\n                )\n                setData({ profile: account, perk })\n            } else {\n                pullData(props, data, setData, { forceAuth: false }, data => {\n                    const friendData = {}\n                    for (let friend of data.friendData)\n                        friendData[friend._id] = friend\n\n                    props.setData({\n                        post: { [data.post._id]: data.post },\n                        friendData,\n                    })\n                })\n            }\n        }\n    }, [props.isAuthed])\n    if (!data.perk) return null\n    const { perk, profile } = data\n    props.setData({ currentPosts: perk.post })\n    if (perk) {\n        props.setPageTitle({ main: perk.name, sub: profile._id })\n    }\n\n    const getAccounts = items => {\n        if (profile && props.friendData) {\n            return items.map(item => <UserButton id={item} />)\n        } else return items\n    }\n\n    return perk ? (\n        <div className=\"contentDiv\">\n            <Card\n                title={\n                    <span>\n                        Item from <UserButton id={profile._id} /> shop\n                    </span>\n                }\n                bordered={false}\n            >\n                <ImageCarousel images={perk.images} />\n\n                <h1>{perk.name}</h1>\n                <p style={{ whiteSpace: 'pre-wrap' }}>{perk.description}</p>\n\n                <Descriptions\n                    title=\"Goal description\"\n                    bordered\n                    column={{ xxl: 4, xl: 3, lg: 3, md: 3, sm: 2, xs: 1 }}\n                >\n                    <Item label=\"Available for\">{getAccounts(perk.users)}</Item>\n                    <Item label=\"Price\">{perk.price}</Item>\n                </Descriptions>\n                <Post\n                    noStartMessage={true}\n                    post={props.post[perk.post]}\n                    account={props.account}\n                    friendData={props.friendData}\n                    showReplies={true}\n                />\n            </Card>\n        </div>\n    ) : null\n}\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        account: state.account,\n        post: state.post,\n        friendData: state.friendData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: data => {\n            dispatch(actions.setData(data))\n        },\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Perk)\n)\n","import React, { useEffect, useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport Card from 'antd/es/card'\nimport pullData from '../../utils/pullData'\nimport Post from '../../components/Post/Post'\nimport ImageCarousel from '../../components/UI/ImageCarousel/ImageCarousel'\nimport UserButton from '../../components/UserButton/UserButton'\n\nconst WishlistItem = props => {\n    const [data, setData] = useState({})\n    const { account } = props\n    useEffect(() => {\n        const pathParts = props.history.location.pathname.split('/')\n        if (pathParts.length > 3) {\n            const accountId = pathParts[2]\n            if (props.isAuthed && account._id === accountId) {\n                const wishlistItem = account.wishlist.find(\n                    item => item.itemId === pathParts[3]\n                )\n                setData({ profile: account, wishlistItem })\n            } else {\n                pullData(props, data, setData, { forceAuth: false }, data => {\n                    const friendData = {}\n                    for (let friend of data.friendData)\n                        friendData[friend._id] = friend\n\n                    props.setData({\n                        post: { [data.post._id]: data.post },\n                        friendData,\n                    })\n                })\n            }\n        }\n    }, [props.isAuthed])\n    if (!data.wishlistItem) return null\n    const { wishlistItem, profile } = data\n    props.setData({ currentPosts: wishlistItem.post })\n    if (wishlistItem) {\n        props.setPageTitle({ main: wishlistItem.name, sub: profile._id })\n    }\n    return wishlistItem ? (\n        <div className=\"contentDiv\">\n            <Card\n                title={\n                    <span>\n                        <UserButton id={profile._id} /> wishlist\n                    </span>\n                }\n                bordered={false}\n            >\n                <ImageCarousel images={wishlistItem.images} />\n\n                <h1>{wishlistItem.name}</h1>\n                <p style={{ whiteSpace: 'pre-wrap' }}>\n                    {wishlistItem.description}\n                </p>\n                <Post\n                    noStartMessage={true}\n                    post={props.post[wishlistItem.post]}\n                    account={props.account}\n                    friendData={props.friendData}\n                    showReplies={true}\n                />\n            </Card>\n        </div>\n    ) : null\n}\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        account: state.account,\n        post: state.post,\n        friendData: state.friendData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: data => {\n            dispatch(actions.setData(data))\n        },\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(WishlistItem)\n)\n","import React, { useEffect } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport WishlistAndPerks from '../Shop/WishlistAndPerks'\n\nconst Wishlist = props => {\n    useEffect(() => {\n        props.setPageTitle({ main: 'Wishlist', sub: '' })\n    }, [])\n\n    return (\n        <div>\n            {props.account._id ? (\n                <WishlistAndPerks mode=\"wishlist\" account={props.account} />\n            ) : (\n                <span />\n            )}\n        </div>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Wishlist)\n)\n","import React from 'react'\nimport { withRouter } from 'react-router-dom'\n\nimport Card from 'antd/es/card'\nimport UserButton from '../../components/UserButton/UserButton'\nimport ImageCarousel from '../../components/UI/ImageCarousel/ImageCarousel'\n\nconst ProgressCard = props => {\n    const { progress } = props\n    const { goal } = progress\n    return (\n        <Card\n            type=\"inner\"\n            style={{ width: '100%', cursor: 'pointer' }}\n            bordered={false}\n            title={\n                <div\n                    onClick={() =>\n                        props.history.push('/progresses/' + progress._id)\n                    }\n                    style={{\n                        display: 'flex',\n                        alignItems: 'center',\n                    }}\n                >\n                    {goal.images.length > 0 && (\n                        <div style={{ width: '50px', marginRight: '20px' }}>\n                            <ImageCarousel images={goal.images} size={50} />\n                        </div>\n                    )}\n                    {goal.name} -{' '}\n                    <UserButton id={progress.owner} noName={true} /> =&gt;{' '}\n                    <UserButton ids={progress.goal.users} group={true} />\n                </div>\n            }\n        />\n    )\n}\n\nexport default withRouter(ProgressCard)\n","import React, { useEffect, useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\n\nimport Modal from 'antd/es/modal'\nimport Button from 'antd/es/button'\nimport Card from 'antd/es/card'\nimport Post from '../../components/Post/Post'\nimport AddPost from '../../components/Post/AddPost'\nimport Tabs from 'antd/es/tabs'\nimport AddCard from '../../components/AddCard/AddCard'\nimport ProgressCard from '../Progresses/ProgressCard'\nimport AddProgress from '../Progresses/AddProgress'\n\nconst Group = props => {\n    const [state, setState] = useState({})\n    const [startProgressVisible, setStartProgressVisible] = useState(false)\n\n    const groupId = props.history.location.pathname.split('/')[2]\n    useEffect(() => {\n        props.setData({ currentGroup: groupId })\n    }, [props.isAuthed])\n\n    const { group, account, friendData, posts, progressData } = props\n\n    if (!group._id) return null\n    props.setData({ currentPosts: group.posts })\n\n    props.setPageTitle({ main: group.name, sub: group.worker })\n\n    const loadedProgresses = group.progresses\n        .filter(item => progressData[item])\n        .map(item => progressData[item])\n\n    const editGoal = (\n        <Modal\n            title=\"Add goal\"\n            visible={startProgressVisible}\n            maskClosable\n            closable\n            onCancel={() => setStartProgressVisible(false)}\n            width=\"100%\"\n            style={{ maxWidth: '1000px' }}\n            footer={\n                <Button\n                    key=\"back\"\n                    onClick={() => setStartProgressVisible(false)}\n                >\n                    Close\n                </Button>\n            }\n            destroyOnClose={true}\n        >\n            <AddProgress\n                setStartProgressVisible={setStartProgressVisible}\n                account={account}\n                friendData={props.friendData}\n                inGroup={group._id}\n            />\n        </Modal>\n    )\n    return friendData ? (\n        <>\n            <Tabs>\n                <Tabs.TabPane tab=\"Posts\" key=\"posts\">\n                    <AddPost\n                        parent={groupId}\n                        account={account}\n                        parentType=\"progress\"\n                        // onSend={() => setEditingMessage('')}\n                    />\n                    {group.posts.map(postId => {\n                        if (posts[postId]) {\n                            const post = posts[postId]\n                            return (\n                                <Card>\n                                    <Post\n                                        friendData={friendData}\n                                        account={account}\n                                        post={post}\n                                    />\n                                </Card>\n                            )\n                        } else return null\n                    })}\n                </Tabs.TabPane>\n                <Tabs.TabPane tab=\"Progresses\" key=\"progresses\">\n                    <AddCard\n                        title=\"Start a new progress\"\n                        sub=\"Rich your goals or help others!\"\n                        action={() => {\n                            setStartProgressVisible(true)\n                        }}\n                    />\n                    {loadedProgresses.map((progress, index) => (\n                        <ProgressCard key={index} progress={progress} />\n                    ))}\n                    {editGoal}\n                </Tabs.TabPane>\n            </Tabs>\n\n            <Modal\n                visible={state.previewImage}\n                footer={null}\n                onCancel={() => setState({ ...state, previewImage: '' })}\n            >\n                <img\n                    alt=\"example\"\n                    style={{ width: '100%' }}\n                    src={state.previewImage}\n                />\n            </Modal>\n        </>\n    ) : null\n}\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        account: state.account,\n        posts: state.post,\n        group: state.group,\n        friendData: state.friendData,\n        progressData: state.progressData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: data => {\n            dispatch(actions.setData(data))\n        },\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Group)\n)\n","import React from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport isEqual from 'lodash.isequal'\nconst NotificationsTracker = props => {\n    const { account, friendData, progressData, groupData } = props\n\n    const sortNotifiacations = (a, b) =>\n        new Date(a.date).getTime() < new Date(b.date).getTime() ? 1 : -1\n\n    if (!account._id) return null\n\n    let lastNotifications = []\n    for (let progress of account.progresses) {\n        if (progressData[progress])\n            lastNotifications = [\n                ...lastNotifications,\n                ...progressData[progress].notifications,\n            ]\n    }\n\n    for (let group of account.groups) {\n        if (groupData[group])\n            lastNotifications = [\n                ...lastNotifications,\n                ...groupData[group].notifications,\n            ]\n    }\n\n    for (let friend of account.friends) {\n        if (\n            friendData[friend.friend] &&\n            friend.status === 'friend' &&\n            friendData[friend.friend].notifications\n        )\n            lastNotifications = [\n                ...lastNotifications,\n                ...friendData[friend.friend].notifications,\n            ]\n    }\n    const filterSameNot = (res, not, index, arr) => {\n        if (!res.find(item => item.notId === not.notId)) {\n            res.push(not)\n        }\n        return res\n    }\n    lastNotifications = lastNotifications.reduce(filterSameNot, [])\n\n    lastNotifications = lastNotifications.sort(sortNotifiacations).slice(0, 100)\n\n    lastNotifications = [\n        ...lastNotifications,\n        ...account.myNotifications,\n    ].filter(item => item.code !== 'add post')\n\n    lastNotifications = lastNotifications.reduce(filterSameNot, [])\n    lastNotifications = lastNotifications.sort(sortNotifiacations)\n    if (!isEqual(lastNotifications, props.lastNotifications)) {\n        props.setData({ lastNotifications })\n    }\n\n    return <span />\n}\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        account: state.account,\n        statePosts: state.post,\n        progress: state.progress,\n        friendData: state.friendData,\n        progressData: state.progressData,\n        groupData: state.groupData,\n        lastNotifications: state.lastNotifications,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: data => {\n            dispatch(actions.setData(data))\n        },\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(NotificationsTracker)\n)\n","import React, { useEffect } from 'react'\nimport { Route, Switch, withRouter, Redirect } from 'react-router-dom'\n\nimport Auth from './containers/Auth/Auth'\nimport AuthTest from './containers/Auth/AuthTest'\nimport './components/UI/loadStyles'\nimport AccountLayout from './components/Layout/Layout'\nimport Goals from './containers/Goals/Goals'\nimport Goal from './containers/Goals/Goal'\nimport Progresses from './containers/Progresses/Progresses'\nimport Progress from './containers/Progress/Progress'\nimport Shop from './containers/Shop/Shop'\nimport Dashboard from './containers/Dashboard/Dashboard'\nimport Explore from './containers/Explore/Explore'\n\nimport Friends from './containers/Friends/Friends'\nimport Account from './containers/Account/Account'\nimport Profile from './containers/Profile/Profile'\n\nimport ActivateAccount from './containers/ActivateAccount/ActivateAccount'\nimport Cookies from 'universal-cookie'\nimport Perk from './containers/Shop/Perk'\n\nimport WishlistItem from './containers/Wishlist/WishlistItem'\nimport Wishlist from './containers/Wishlist/Wishlist'\nimport { connect } from 'react-redux'\nimport * as actions from './store/actions'\nimport ConnectWebsocket from './containers/ConnectWebsocket/ConnectWebsocket'\nimport Group from './containers/Group/Group'\nimport NotificationsTracker from './containers/Dashboard/NotificationsTracker'\n\nconst cookies = new Cookies()\n\nconst App = props => {\n    const { isAuthed } = props\n    useEffect(() => {\n        props.tryAuth(props)\n    }, [])\n\n    const redirectTo = cookies.get('redirectto')\n\n    if (redirectTo) {\n        cookies.remove('redirectto', {\n            path: '/',\n        })\n    }\n\n    const Logout = () => {\n        props.logout()\n        return <Redirect to=\"/login\" />\n    }\n\n    let routes = (\n        <Switch>\n            <Route path=\"/goals\" exact component={Goals} />\n            <Route path=\"/goals\" component={Goal} />\n\n            <Route path=\"/progresses\" exact component={Progresses} />\n            <Route path=\"/progresses\" component={Progress} />\n            <Route path=\"/groups\" component={Group} />\n\n            <Route path=\"/profile\" component={Profile} />\n\n            <Route path=\"/friends\" exact component={Friends} />\n\n            <Route path=\"/account\" exact component={Account} />\n            <Route path=\"/dashboard\" exact component={Dashboard} />\n            <Route path=\"/explore\" exact component={Explore} />\n\n            <Route path=\"/shop\" exact component={Shop} />\n            <Route path=\"/shop\" component={Perk} />\n            <Route path=\"/wishlist\" exact component={Wishlist} />\n            <Route path=\"/wishlist\" component={WishlistItem} />\n            {!isAuthed && <Route path=\"/login\" exact component={Auth} />}\n            <Route path=\"/logout\" exact component={Logout} />\n\n            <Route path=\"/activate-account\" exact component={ActivateAccount} />\n\n            {process.env.NODE_ENV === 'development' && !isAuthed && (\n                <Route path=\"/logintest\" exact component={AuthTest} />\n            )}\n            {isAuthed ? <Redirect to=\"/explore\" /> : <Redirect to=\"/login\" />}\n        </Switch>\n    )\n\n    if (props.accountNotActive) {\n        routes = (\n            <Switch>\n                {!isAuthed && <Route path=\"/login\" exact component={Auth} />}\n                <Route path=\"/logout\" exact component={Logout} />\n\n                <Route\n                    path=\"/activate-account\"\n                    exact\n                    component={ActivateAccount}\n                />\n\n                {process.env.NODE_ENV === 'development' && !isAuthed && (\n                    <Route path=\"/logintest\" exact component={AuthTest} />\n                )}\n                {isAuthed ? (\n                    <Redirect to=\"/activate-account\" />\n                ) : (\n                    <Redirect to=\"/login\" />\n                )}\n            </Switch>\n        )\n    }\n\n    return redirectTo ? (\n        <Redirect to={redirectTo} />\n    ) : (\n        <>\n            <div style={{ height: '100%' }}>\n                <AccountLayout>{routes}</AccountLayout>\n                {isAuthed && <ConnectWebsocket />}\n                {isAuthed && <NotificationsTracker />}\n            </div>\n            {/* {this.props.loading && <Spinner cover />} */}\n        </>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        user: state.user,\n        account: state.account,\n        accountNotActive: state.accountNotActive,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        tryAuth: (props, forceAuth) =>\n            dispatch(actions.tryAuth(props, forceAuth)),\n        logout: () => dispatch(actions.logout()),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(App)\n)\n","import { createReducer } from '@reduxjs/toolkit'\n\nexport const initialState = {\n    isAuthed: false,\n    user: null,\n    currentAccount: '',\n    account: {},\n    friendData: {},\n    transactionData: {},\n    progressData: {},\n    currentProfile: '',\n    profile: {},\n    currentProgress: '',\n    currentGroup: '',\n    currentPosts: [],\n    progress: {},\n    post: {},\n    postData: {},\n    group: {},\n    groupData: {},\n    pageTitle: {},\n    lastUrl: '',\n    friendSearchResult: {},\n    accountNotActive: false,\n    lastNotifications: [],\n}\n\nconst reducer = createReducer(initialState, {\n    SET_DATA: (state: Object, action: Object) => {\n        if (action.data) {\n            for (let key of [\n                'user',\n                'account',\n                'isAuthed',\n                'currentAccount',\n                'currentProfile',\n                'currentPosts',\n                'currentGroup',\n                'profile',\n                'group',\n                'currentProgress',\n                'progress',\n                'lastNotifications',\n            ]) {\n                if (typeof action.data[key] !== 'undefined') {\n                    state[key] = action.data[key]\n                }\n            }\n            for (let key of [\n                'friendData',\n                'progressData',\n                'post',\n                'postData',\n                'groupData',\n                'transactionData',\n            ]) {\n                if (typeof action.data[key] !== 'undefined') {\n                    for (let attr in action.data[key]) {\n                        if (action.data[key][attr]) {\n                            state[key][attr] = action.data[key][attr]\n                        }\n                    }\n                }\n            }\n        }\n        if (state.user) {\n            if (state.user.currentAccount) {\n                state.currentAccount = state.user.currentAccount\n                state.accountNotActive = false\n            } else if (state.user.myAccount) {\n                state.currentAccount = state.user.myAccount\n                state.accountNotActive = false\n            } else {\n                state.accountNotActive = true\n            }\n        }\n    },\n    REMOVE_DATA: (state: Object, action: Object) => {\n        if (action.data) {\n            for (let key of [\n                'user',\n                'account',\n                'profile',\n                'progress',\n                'group',\n            ]) {\n                for (let item of action.data[key]) {\n                    if (state[key]._id === item) {\n                        state[key] = {}\n                    }\n                }\n            }\n            for (let key of [\n                'post',\n                'friendData',\n                'progressData',\n                'postData',\n                'groupData',\n                'transactionData',\n            ]) {\n                for (let item of action.data[key]) {\n                    delete state[key][item]\n                }\n            }\n        }\n    },\n    SET_FRIEND_SEARCH_RESULT: (state: Object, action: Object) => {\n        state.friendSearchResult = action.data\n    },\n\n    SET_FRIENDS_DATA: (state: Object, action: Object) => {\n        if (action.data) {\n            state.account.friendsData = action.data\n        }\n        if (action.data.perk) state.perk = action.data.perk\n    },\n    SET_AVATAR_V: (state: Object, action: Object) => {\n        state.account.image = action.v\n    },\n    INCREASE_AVATAR_V: (state: Object) => {\n        state.account.image = state.account.image + 1\n    },\n    SET_IS_AUTHED: (state: Object, action: Object) => {\n        state.isAuthed = action.id\n    },\n    SET_PAGE_TITLE: (state: Object, action: Object) => {\n        state.pageTitle = action.title\n    },\n    SAVE_LAST_URL: (state: Object, action: Object) => {\n        if (action.url !== '/login' && action.url !== '/logout')\n            state.lastUrl = action.url\n    },\n    SET_ACCOUNT_ACTIVATED: (state: Object, action: Object) => {\n        state.accountNotActive = action.value\n    },\n})\n\nexport default reducer\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter } from 'react-router-dom'\nimport axios from 'axios'\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly'\n\nimport './index.css'\nimport App from './App'\nimport reducer from './store/reducer/reducer'\n//import * as serviceWorker from './serviceWorker';\n\nif (process.env.NODE_ENV === 'development') {\n    axios.defaults.baseURL = 'http://my.websiter.test:5000'\n} else {\n    axios.defaults.baseURL = 'https://getreward.herokuapp.com'\n}\n// axios.defaults.withCredentials = true\n\nexport const store = createStore(\n    reducer,\n    composeWithDevTools(applyMiddleware(thunk))\n)\n\nconst app = (\n    <Provider store={store}>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </Provider>\n)\n\nconst root = document.getElementById('root')\n\nReactDOM.render(app, root)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}