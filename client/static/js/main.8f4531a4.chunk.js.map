{"version":3,"sources":["containers/Auth/Auth.module.css","components/UI/ImageCarousel/imageCarousel.module.css","containers/Settings/Settings.module.css","components/Layout/Layout.module.css","containers/Auth/Auth.tsx","containers/Auth/AuthTest.tsx","utils/getAvatar.js","components/Layout/LoginModal.tsx","utils/processRes.js","store/actions/auth.tsx","containers/ConnectWebsocket/methods/requestResource.tsx","store/actions/updateResource.tsx","containers/ConnectWebsocket/methods/getListOfNeededResources.js","containers/ConnectWebsocket/methods/compareVersionsAndRerequest.js","containers/ConnectWebsocket/methods/getResourcesToMonitor.js","containers/ConnectWebsocket/ConnectWebsocket.tsx","store/actions/saveResources.tsx","websocketActions/posts.tsx","websocketActions/account.tsx","websocketActions/wishlistAndPerks.tsx","websocketActions/friends.tsx","utils/uploadFile.js","constants/fieldLength.js","constants/fieldRules.js","components/UserButton/UserButton.tsx","components/EditGoalAndProgressForm/connectionsSelect.tsx","components/UI/MoreIcon.js","components/Rewards/Rewards.tsx","websocketActions/progresses.tsx","components/EditGoalAndProgressForm/EditGoalAndProgressForm.tsx","containers/Progresses/AddProgress.tsx","components/Layout/Layout.tsx","containers/Shop/AddPerkForm.tsx","containers/Shop/AddPerk.tsx","components/MasonryCard.tsx","containers/Shop/PerkCard.tsx","components/AddCard/AddCard.tsx","utils/masonryBreakPoints.js","components/MasonryGrid.tsx","containers/Shop/WishlistAndPerks.tsx","containers/Goals/Goals.tsx","utils/pullData.js","components/Post/AddMessage.tsx","components/UI/ImageCarousel/ImageCarousel.tsx","components/Post/Message.tsx","components/Post/Post.tsx","containers/Goals/Goal.tsx","containers/Progresses/Progresses.tsx","containers/Progress/ActivityTable.tsx","containers/Progress/EditProgress.tsx","components/FollowButton.tsx","containers/Progress/Activity.tsx","components/Post/AddPost.tsx","containers/Progress/Progress.tsx","containers/Shop/Wallet.tsx","containers/Shop/Transactions.tsx","containers/Shop/Shop.tsx","containers/Dashboard/DashboardPosts.tsx","containers/Dashboard/DashboardEvents.tsx","containers/Dashboard/Dashboard.tsx","websocketActions/dashboard.tsx","containers/Explore/Explore.tsx","containers/Blog/Blog.tsx","components/FriendActionButton.tsx","components/FriendCard.tsx","containers/Friends/AddFriends.tsx","containers/Friends/PendingFriends.tsx","containers/Friends/Friends.tsx","containers/Settings/Settings.tsx","components/ProgressButton.tsx","containers/Profile/Profile.tsx","containers/ActivateAccount/ActivateAccount.tsx","containers/Shop/Perk.tsx","containers/Wishlist/WishlistItem.tsx","containers/Wishlist/Wishlist.tsx","containers/Progresses/ProgressCard.tsx","containers/Group/Group.tsx","containers/Dashboard/NotificationsTracker.tsx","App.tsx","store/reducer/reducer.tsx","index.tsx"],"names":["module","exports","Container","socialButtons","Background","Dots","Avatar","Layout","Header","Footer","HideHeader","FooterButton","TopHeader","BottomHeader","Main","MenuButtonContiner","QuickButtonContiner","PageTitle","cookies","Cookies","withRouter","connect","state","lastUrl","props","_useState","useState","_useState2","Object","slicedToArray","setState","_useState3","_useState4","cookieConsent","setCookieConsent","useEffect","checkCookieConsent","remeberMeParam","get","basicURL","react_default","a","createElement","className","classes","dist","onClick","window","location","concat","es_checkbox","checked","onChange","modal","title","visible","onOk","set","path","maxAge","onCancel","open","destroyOnClose","maskClosable","getAvatar","nickname","version","loginVisible","setLoginVisible","footer","width","style","maxWidth","fontWeight","lineHeight","marginBottom","fontSize","s","typography","Link","processRes","res","data","logout","history","push","success","errorCode","message","warning","error","successCode","status","tryAuth","forceLogin","dispatch","sessionStorage","setItem","token","rememberMe","remove","userId","jwt","decode","axios","defaults","headers","post","put","delete","common","Accept","setIsAuthed","_id","saveLastUrl","pathname","pathParts","split","length","includes","url","type","id","setData","setPageTitle","setFriendSearchResult","requestResource","ids","notRequestedIds","filter","webSocket","readyState","send","JSON","stringify","messageCode","applyDelta","source","delta","watchFields","result","cloneDeep","del","applyWithDot","keys","shift","attr","applyUpdateToPart","updatedFields","applyDeleteToPart","splice","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","removedFields","Symbol","iterator","next","done","field","value","indexOf","err","return","getListOfNeededResources","store","requestedResources","user","account","progress","group","progressData","friendData","postData","groupData","transactionData","neededResources","isAuthed","currentAccount","_i","_arr","toConsumableArray","progresses","followProgresses","groups","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","followPosts","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","myPosts","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","transactions","transaction","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","friends","friend","_i2","_arr2","followingAccounts","followAccounts","item","currentProfile","profile","_i3","_arr3","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","_i4","_arr4","currentGroup","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","users","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","posts","currentProgress","participants","owner","worker","experts","supporters","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_iterator11","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_step12","_iterator12","currentPosts","_iteratorNormalCompletion13","_didIteratorError13","_iteratorError13","_step13","_iterator13","postEl","_iteratorNormalCompletion14","_didIteratorError14","_iteratorError14","_step14","_iterator14","parent","parentType","parentId","reduce","obj","Array","from","Set","notNeededExist","notNeededResources","check1","key","mode","check2","removeData","compareVersionsAndRerequest","versions","checkData","check","__v","getResourcesToMonitor","resources","addData","require","create","propertyFilter","name","context","ConnectWebsocket","start","pingTimeout","WebSocket","heartbeat","_this","clearTimeout","setTimeout","close","onopen","event","resourcesToMonitor","initializeRequestResources","onmessage","news","parse","messageText","setFriendsData","friendsData","saveResource","updateResource","code","update","text","onclose","checkInterval","clearInterval","setInterval","reRequestResourcesInterval","reRequestResources","nextProps","newRequestedResources","_loop","this","setConnectingToWS","Component","pulledFrom","actions","getState","myAccount","find","parState","element","defineProperty","updateData","changeLikesMessage","messageId","accountId","postId","followProgress","progressId","unfollowProgress","followAccount","accountFollow","unfollowAccount","buyPerk","buyer","seller","perkId","unfriend","friendId","uploadFile","file","size","filename","callback","alert","reader","FileReader","onload","_ref","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","resizeImageToSpecificSize","height","urltoFile","then","getSignedRequest","stop","_x","apply","arguments","readAsArrayBuffer","mimeType","match","fetch","arrayBuffer","buf","File","cb","resizeImageFromSrcToSpecificSize","target","readAsDataURL","src","img","Image","widthCoef","heightCoef","oc","document","octx","getContext","drawImage","toDataURL","fileName","response","doUploadFile","catch","signedRequest","Content-Type","console","log","fieldLength","nicknameRules","required","whitespace","min","max","pattern","nameRules","accountNameRules","descriptionRules","messageRules","priceRules","friendSearchResult","friendDataExp","getUserData","userName","userAvatar","avatar","image","noClick","margin","onlyName","e","stopPropagation","Group","map","Fragment","noAva","noName","span","react_router_dom","objectSpread","cursor","to","es_button","padding","EditGoalAndProgressForm_connectionsSelect","onSelect","es_select","placeholder","getPopupContainer","trigger","parentNode","Option","components_UserButton_UserButton","MoreIcon","viewBox","transform","display","d","_React$createElement","previewImage","setPreviewImage","previewReward","setPreviewReward","_useState5","_useState6","editedReward","setEditedReward","_useState7","_useState8","editedRewardIndex","setEditedRewardIndex","readOnly","RewardButton","simple","money","itemName","rewards","onlyButton","index","es_form","Item","label","rewardKey","for","marginLeft","dropdown","overlay","es_menu","rewardId","confirm","setRewards","indexIn","paddingLeft","PlusOutlined_default","closable","reward","rewardToSave","newRewards","connectionsSelect","divider","rules","input","TextArea","input_number","upload","listType","fileList","itemImages","uid","onPreview","_ref2","customRequest","_ref3","_ref4","itemDescription","_ref5","alt","card","hoverable","cover","backgroundImage","backgroundSize","descriptions","bordered","column","xxl","xl","lg","md","sm","xs","whiteSpace","Select","EditGoalAndProgressForm","goal","images","setImages","_Form$useForm","Form","useForm","form","connections","goalId","assign","onFinish","autoComplete","initialValues","repeat","days","labelCol","wrapperCol","onValuesChange","changedFields","allValues","setFieldsValue","sort","valuePropName","getValueFromEvent","isArray","autoSize","minRows","maxRows","noStyle","shouldUpdate","prevValues","currentValues","getFieldValue","components_Rewards_Rewards","textAlign","marginTop","cancel","htmlType","borderRadius","AddProgress","components_EditGoalAndProgressForm_EditGoalAndProgressForm","inGroup","wsActions","setStartProgressVisible","body","removeAttribute","pageTitle","lastNotifications","isConnectingWS","menuVisible","setMenuVisible","lastScrollY","setLastScrollY","headerVisible","setHeaderVisible","_useState9","_useState10","startProgressVisible","_useState11","_useState12","pageAddress","setPageAddress","handleScroll","currentScrollY","scrollY","removeEventListener","addEventListener","scrollTo","top","left","behavior","toggleMenu","selectedKey","buttonProps","checkHighligh","ghost","openLink","isActivating","numberOfUnseenNots","not","parseInt","notId","lastSeenNot","logedIn","editGoal","Modal","Progresses_AddProgress","join","icon","MenuOutlined_default","PlusOutlined","shape","LogoutOutlined_default","border","marginRight","spin","indicator","LoadingOutlined_default","color","children","badge","count","HomeFilled_default","RocketFilled_default","ShopFilled_default","TeamOutlined_default","drawer","onClose","placement","theme","selectedKeys","overflowedIndicator","CoffeeOutlined_default","HeartFilled_default","UserOutlined_default","SettingFilled_default","Layout_LoginModal","back_top","backgroundColor","UpOutlined_default","AddPerkForm","perk","deletePerk","uploadImage","offset","popconfirm","onConfirm","okText","cancelText","danger","setPerk","wishlist","itemId","goals","perks","Shop_AddPerkForm","setEditPerkOpen","processedValue","Card","wordBreak","float","noLink","onClickLink","setEditedPerk","MasonryCard","onlyBuy","Button","price","AddCard","action","friendsBreakPoints","default","1600","1100","600","cardBreakPoints","700","310","MasonryGrid","react_masonry_css_es5_default","breakpointCols","columnClassName","WishlistAndPerks","editedPerk","editPerkOpen","editPerk","Shop_AddPerk","components_AddCard_AddCard","sub","listKey","Shop_PerkCard","main","Shop_WishlistAndPerks","pullData","options","imageLoading","setImageLoading","content","replyToUser","setMessageText","background","replyTo","bottom","comment","rows","messageValue","replyToMessage","editedMessage","editingMessage","onSend","SendOutlined_default","showUploadList","PictureFilled_default","CloseCircleFilled_default","ImageCarousel","carousel","dots","backgroundPosition","backgroundRepeat","Message","replies","isStart","replyVisible","setReplyVisible","setReplyToUser","setEditingMessage","showReplies","setShowReplies","commentProps","timeago_react","datetime","date","live","tooltip","likes","LikeFilled_default","LikeOutlined_default","author","messageType","details","UI_ImageCarousel_ImageCarousel","startMessage","Post_AddMessage","isTop","reply","postOpen","setPostOpen","noStartMessage","Post_Message","position","justifyContent","icons_LikeFilled","icons_LikeOutlined","CommentOutlined","messages","getNumberOfMessages","description","components_Post_Post","forceAuth","loadedProgresses","loadedGroups","fromProfile","active","es_Helmet","moment","format","ActivityTable","isOwner","lastStages","stages","slice","Math","b","aS","aF","bS","bF","old","day","year","dayOfYear","startOf","endOf","week","month","now","abs","diff","nowStageId","stageId","tabs","defaultActiveKey","findIndex","toString","stage","stageDate","getStatus","dismissed","failBy","approvedBy","getTag","es_tag","expert","tabTitle","myStatus","stageStatus","TabPane","tab","textTransform","es_radio","paid","EditProgress","editProgressOpen","FollowButton","Descriptions","followersVisible","setFollowersVisible","add","Paragraph","ellipsis","expandable","symbol","getDay","Progress_ActivityTable","Progress_EditProgress","components_FollowButton","zIndex","icons_PictureFilled","icons_CloseCircleFilled","Progress_Activity","Post_AddPost","paddingTop","pulledProfile","wallet","amount","tableData","sorted","Date","getTime","types","collapse","expandIconPosition","destroyInactivePanel","accordion","Panel","header","alignItems","layout","tag","toUpperCase","cancelTransaction","record","confirmTransaction","boxShadow","Shop_Wallet","Shop_Transactions","statePosts","setPosts","startTime","sortPosts","aN","notifications","bN","newPosts","newUnseenPosts","newOldPosts","oldPosts","oldPostIndex","_loop2","_newOldPosts","resultPosts","neededPosts","isEqual","nots","getRewardText","stageName","as","getStageName","progressName","addedAccounts","ac","droppedAccounts","activeTab","last","Dashboard_DashboardPosts","Dashboard_DashboardEvents","isSearching","setIsSearching","foundProgresses","setFoundProgresses","setProgresses","noMore","setNoMore","noMorePopular","setNoMorePopular","searchValue","setSearchValue","onSearch","noNoMore","skip","newFriendData","Search","enterButton","allowClear","react_infinite_scroller_default","pageStart","loadMore","hasMore","loader","setTitle","replace","dangerouslySetInnerHTML","__html","FriendActionButton","invitingFriends","invitedFriends","realFriends","additionalButton","menu","domEvent","additionalButtons","button","noFollow","preventDefault","asText","DownOutlined","friendActions","friendActionButton","asIcons","searchResult","addFriendOpen","setAddFriendOpen","search","components_FriendCard","fullFriend","confirmedFriends","empty","imageStyle","PendingFriends","Friends_AddFriends","increaseAvatarV","deleteVisible","setDeleteVisible","deleteField","setDeleteField","Helmet","disabled","flex","overflow","handleClick","followingVisible","setFollowingVisible","profileId","containers_Progresses_Progresses","oneFriendData","components_ProgressButton","accountNotActive","setAccountActivated","page_header","backIcon","nicknameNotUnique","items","Perk_Item","wishlistItem","groupId","Progresses_ProgressCard","sortNotifiacations","filterSameNot","arr","myNotifications","redirectTo","Logout","react_router","routes","exact","component","Explore","Goals","Goal","Progresses","Progress","Profile","Friends","Settings","Dashboard","Shop","Perk","Wishlist","WishlistItem","Blog","ActivateAccount","process","Auth","containers_ConnectWebsocket_ConnectWebsocket","Dashboard_NotificationsTracker","reducer","createReducer","SET_DATA","REMOVE_DATA","SET_FRIEND_SEARCH_RESULT","SET_FRIENDS_DATA","SET_AVATAR_V","v","INCREASE_AVATAR_V","SET_IS_AUTHED","SET_PAGE_TITLE","SAVE_LAST_URL","SET_ACCOUNT_ACTIVATED","SET_CONNECTING_WS","__webpack_require__","__webpack_exports__","src_store","baseURL","createStore","composeWithDevTools","applyMiddleware","thunk","app","es","src_App","root","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.8f4531a4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Auth_Container__1KNy7\",\"socialButtons\":\"Auth_socialButtons__2wwH9\",\"Background\":\"Auth_Background__39m_a\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Dots\":\"imageCarousel_Dots__2JZGt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Avatar\":\"Settings_Avatar__1usz_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Layout\":\"Layout_Layout__3t6t4\",\"Header\":\"Layout_Header__3lh1Y\",\"Footer\":\"Layout_Footer__1Dfqu\",\"HideHeader\":\"Layout_HideHeader__2WRsh\",\"FooterButton\":\"Layout_FooterButton__1lZv2\",\"TopHeader\":\"Layout_TopHeader__3_LuK\",\"BottomHeader\":\"Layout_BottomHeader__3DOBo\",\"Main\":\"Layout_Main__3usmk\",\"MenuButtonContiner\":\"Layout_MenuButtonContiner__PpulB\",\"QuickButtonContiner\":\"Layout_QuickButtonContiner__4d4Lg\",\"PageTitle\":\"Layout_PageTitle__368dw\"};","import React, { useState, useEffect } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport Checkbox from 'antd/es/checkbox'\nimport Cookies from 'universal-cookie'\nimport classes from './Auth.module.css'\nimport Modal from 'antd/es/modal'\nimport {\n    FacebookLoginButton,\n    GithubLoginButton,\n    GoogleLoginButton,\n} from 'react-social-login-buttons'\n\nconst cookies = new Cookies()\n\nconst Auth = props => {\n    const [state, setState] = useState(false)\n    const [cookieConsent, setCookieConsent] = useState(false)\n\n    useEffect(() => {\n        checkCookieConsent()\n    })\n\n    let remeberMeParam = '?rememberme=false'\n    if (state) {\n        remeberMeParam = '?rememberme=true'\n    }\n\n    let redirectParam = '&redirect=/login'\n    if (props.lastUrl) {\n        redirectParam = '&redirect=' + props.lastUrl\n    }\n\n    const checkCookieConsent = () => {\n        const cookiesConsent = cookies.get('cookies_consent')\n        if (cookiesConsent) {\n            setCookieConsent(true)\n        }\n    }\n\n    const agreeWithCookies = () => {\n        cookies.set('cookies_consent', 'true', {\n            path: '/',\n            maxAge: 31530000,\n        })\n        checkCookieConsent()\n    }\n    const basicURL =\n        process.env.NODE_ENV !== 'development'\n            ? 'https://addspire.com/api/auth/'\n            : 'http://my.websiter.test:5000/api/auth/'\n    return !cookieConsent ? (\n        <Modal\n            title=\"Cookies consent\"\n            visible={!cookieConsent}\n            onOk={agreeWithCookies}\n            onCancel={() => {\n                window.open('https://websiter.dev', '_self')\n            }}\n            destroyOnClose={true}\n            maskClosable={false}\n        >\n            <p>We use cookies only for login purposes. </p>\n            <p>\n                In order to proceed you need to agree with the use of cookies.\n            </p>\n        </Modal>\n    ) : (\n        <div className=\"contentDiv\">\n            <div className={classes.Container}>\n                <h1>Welcome to Addspire!</h1>\n                <h2>This is where great progresses live.</h2>\n                <h1>Continue with:</h1>\n                <div className={classes.socialButtons}>\n                    <FacebookLoginButton\n                        onClick={() =>\n                            (window.location =\n                                basicURL + `facebook/start${remeberMeParam}`)\n                        }\n                    />\n                    <GoogleLoginButton\n                        onClick={() =>\n                            (window.location =\n                                basicURL + `google/start${remeberMeParam}`)\n                        }\n                    />\n                    <GithubLoginButton\n                        onClick={() =>\n                            (window.location =\n                                basicURL + `github/start${remeberMeParam}`)\n                        }\n                    />\n                </div>\n                <Checkbox checked={state} onChange={() => setState(!state)}>\n                    Remember me\n                </Checkbox>\n            </div>\n            <div className={classes.Background} />\n        </div>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        lastUrl: state.lastUrl,\n    }\n}\n\nexport default withRouter(connect(mapStateToProps)(Auth))\n","import React from 'react'\n\nimport Form from 'antd/es/form'\nimport Input from 'antd/es/input'\nimport Button from 'antd/es/button'\nimport axios from 'axios'\nimport Cookies from 'universal-cookie'\n\nconst cookies = new Cookies()\n\nconst Auth = props => {\n    const layout = {\n        labelCol: { span: 8 },\n        wrapperCol: { span: 16 },\n    }\n    const tailLayout = {\n        wrapperCol: { offset: 8, span: 16 },\n    }\n    const onFinish = value => {\n        axios\n            .post('/api/authtest/' + value.id)\n            .then(res => {\n                cookies.set('auth_token', res.data.cookie)\n                props.onTryAutoSignup()\n            })\n            .catch(err => {})\n    }\n    return (\n        <Form\n            name=\"dynamic_form_nest_item\"\n            onFinish={onFinish}\n            autoComplete=\"off\"\n            {...layout}\n        >\n            <Form.Item\n                label=\"Id\"\n                name=\"id\"\n                rules={[\n                    { required: true, message: 'Please input the goal name.' },\n                ]}\n            >\n                <Input />\n            </Form.Item>\n            <Form.Item {...tailLayout}>\n                <Button type=\"primary\" htmlType=\"submit\" size=\"large\">\n                    Save\n                </Button>\n            </Form.Item>\n        </Form>\n    )\n}\n\nexport default Auth\n","export default (nickname, version) => {\n    if (!nickname) return ''\n    else {\n        return (\n            'https://websiter.s3.us-east-2.amazonaws.com/' +\n            nickname +\n            '/avatar?v=' +\n            (version || 0)\n        )\n    }\n}\n","import React, { useState, useEffect } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport Checkbox from 'antd/es/checkbox'\nimport Cookies from 'universal-cookie'\nimport classes from '../../containers/Auth/Auth.module.css'\nimport Modal from 'antd/es/modal'\nimport {\n    FacebookLoginButton,\n    GithubLoginButton,\n    GoogleLoginButton,\n} from 'react-social-login-buttons'\nimport Typography from 'antd/es/typography'\n\nconst cookies = new Cookies()\n\nconst LoginModal = props => {\n    const [state, setState] = useState(false)\n    const [cookieConsent, setCookieConsent] = useState(false)\n\n    useEffect(() => {\n        checkCookieConsent()\n    })\n\n    let remeberMeParam = '?rememberme=false'\n    if (state) {\n        remeberMeParam = '?rememberme=true'\n    }\n\n    let redirectParam = '&redirect=/login'\n    if (props.lastUrl) {\n        redirectParam = '&redirect=' + props.lastUrl\n    }\n\n    const checkCookieConsent = () => {\n        const cookiesConsent = cookies.get('cookies_consent')\n        if (cookiesConsent) {\n            setCookieConsent(true)\n        }\n    }\n\n    const agreeWithCookies = () => {\n        cookies.set('cookies_consent', 'true', {\n            path: '/',\n            maxAge: 31530000,\n        })\n        checkCookieConsent()\n    }\n    const basicURL =\n        process.env.NODE_ENV !== 'development'\n            ? 'https://addspire.com/api/auth/'\n            : 'http://my.websiter.test:5000/api/auth/'\n    return (\n        <Modal\n            visible={props.loginVisible}\n            onOk={() => {}}\n            onCancel={() => props.setLoginVisible(false)}\n            destroyOnClose={true}\n            maskClosable={false}\n            footer={[]}\n            width=\"100%\"\n            style={{ maxWidth: '600px' }}\n        >\n            {!cookieConsent ? (\n                <Modal\n                    title=\"Cookies consent\"\n                    visible={!cookieConsent}\n                    onOk={agreeWithCookies}\n                    onCancel={() => {\n                        window.open('https://addspire.com', '_self')\n                    }}\n                    destroyOnClose={true}\n                    maskClosable={false}\n                    width=\"100%\"\n                    style={{ maxWidth: '600px' }}\n                >\n                    <p style={{ marginBottom: '0.3em' }}>\n                        We use cookies only for login purposes.{' '}\n                    </p>\n                    <p>\n                        In order to proceed you need to agree with the use of\n                        cookies.\n                    </p>\n                </Modal>\n            ) : (\n                <div className=\"contentDiv\">\n                    <div className={classes.Container}>\n                        <h1\n                            style={{\n                                fontWeight: 'bold',\n                                lineHeight: '1.3em',\n                                marginBottom: 0,\n                                fontSize: '2.5em',\n                            }}\n                        >\n                            Welcome to Addspire!\n                        </h1>\n                        <h3>This is where great inspiration lives.</h3>\n                        <div\n                            className={classes.socialButtons}\n                            style={{ marginBottom: '30px' }}\n                        >\n                            <FacebookLoginButton\n                                onClick={() =>\n                                    (window.location =\n                                        basicURL +\n                                        `facebook/start${remeberMeParam}`)\n                                }\n                            />\n                            <GoogleLoginButton\n                                s\n                                onClick={() =>\n                                    (window.location =\n                                        basicURL +\n                                        `google/start${remeberMeParam}`)\n                                }\n                            />\n                            <GithubLoginButton\n                                onClick={() =>\n                                    (window.location =\n                                        basicURL +\n                                        `github/start${remeberMeParam}`)\n                                }\n                            />\n                        </div>\n                        <Checkbox\n                            checked={state}\n                            onChange={() => setState(!state)}\n                        >\n                            <Typography.Link style={{ fontSize: '17px' }}>\n                                Remember me\n                            </Typography.Link>\n                        </Checkbox>\n                    </div>\n                    <div className={classes.Background} />\n                </div>\n            )}\n        </Modal>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        lastUrl: state.lastUrl,\n    }\n}\n\nexport default withRouter(connect(mapStateToProps)(LoginModal))\n","import message from 'antd/es/message'\n\nexport default (res, props) => {\n    if (res.data.logout) props.history.push('/logout')\n    if (res.data.success === false) {\n        if (res.data.errorCode) {\n            switch (res.data.errorCode) {\n                case 'no account':\n                    message.warning('Account is not found. Please login.')\n                    break\n                case 'bad data':\n                    message.error(\n                        'Error. Please try one more time with correct data.'\n                    )\n                    break\n                case 'progress exist':\n                    message.warning('This progress already exists.')\n                    break\n                default:\n                    message.warning(\n                        'Something wrong has happened... Try again!'\n                    )\n                    break\n            }\n        } else {\n            message.error('Something failed')\n        }\n    } else {\n        if (res.data.successCode) {\n            switch (res.data.successCode) {\n                case 'avatar saved':\n                    message.success('The avatar image has been updated.')\n                    break\n                case 'success':\n                    message.success('Success!')\n                    break\n                case 'item saved':\n                    message.success('Item is saved')\n                    break\n                case 'prgress created':\n                    message.success('Progress has started!')\n                    break\n                default:\n                    message.success('Success!')\n                    break\n            }\n        }\n    }\n    if (res.data.status && res.data.status === 'no account')\n        props.history.push('/activate-account')\n}\n","import axios from 'axios'\n\nimport Cookies from 'universal-cookie'\nimport jwt from 'jsonwebtoken'\nimport processRes from '../../utils/processRes'\n\nconst cookies = new Cookies()\n\nexport const tryAuth = (props, forceLogin) => (dispatch: Object) => {\n    sessionStorage.setItem('systemRefresh', '0')\n    const token = cookies.get('auth_token')\n    const rememberMe = cookies.get('rememberme')\n    if (rememberMe) {\n        cookies.remove('rememberme', {\n            path: '/',\n        })\n        if (rememberMe === 'false') {\n            cookies.remove('auth_token', {\n                path: '/',\n            })\n        }\n    }\n    const userId = jwt.decode(token)\n    axios.defaults.headers.post['Content-Type'] = 'application/json'\n    axios.defaults.headers.put['Content-Type'] = 'application/json'\n    axios.defaults.headers.delete['Content-Type'] = 'application/json'\n    axios.defaults.headers.common.Accept = 'application/json'\n    if (token && userId) {\n        axios.defaults.headers.common['x-auth-token'] = token\n        axios.defaults.headers.post['x-auth-token'] = token\n        axios.defaults.headers.get['x-auth-token'] = token\n        axios.defaults.headers.delete['x-auth-token'] = token\n        axios.defaults.headers.put['x-auth-token'] = token\n        dispatch(setIsAuthed(userId._id))\n    } else {\n        dispatch(setIsAuthed(false))\n        dispatch(saveLastUrl(props.history.location.pathname))\n        const pathParts = props.history.location.pathname.split('/')\n        if (\n            pathParts.length === 2 &&\n            !['explore', 'login', 'logintest'].includes(pathParts[1])\n        )\n            props.history.push('/logout')\n\n        if (forceLogin) props.history.push('/logout')\n    }\n}\n\nconst saveLastUrl = url => ({\n    type: 'SAVE_LAST_URL',\n    url,\n})\n\nconst setIsAuthed = id => ({\n    type: 'SET_IS_AUTHED',\n    id,\n})\n\nexport const logout = () => dispatch => {\n    cookies.remove('rememberme', {\n        path: '/',\n    })\n    cookies.remove('auth_token', {\n        path: '/',\n    })\n    delete axios.defaults.headers.common['x-auth-token']\n    delete axios.defaults.headers.post['x-auth-token']\n    delete axios.defaults.headers.get['x-auth-token']\n    delete axios.defaults.headers.delete['x-auth-token']\n    delete axios.defaults.headers.put['x-auth-token']\n    dispatch(setIsAuthed(false))\n}\n\nexport const setData = data => ({\n    type: 'SET_DATA',\n    data,\n})\n\nexport const setConnectingToWS = data => ({\n    type: 'SET_CONNECTING_WS',\n    data,\n})\n\nexport const removeData = data => ({\n    type: 'REMOVE_DATA',\n    data,\n})\n\nexport const setFriendsData = data => ({\n    type: 'SET_FRIENDS_DATA',\n    data,\n})\n\nexport const setAvatarV = v => ({\n    type: 'SET_AVATAR_V',\n    v,\n})\n\nexport const increaseAvatarV = () => ({\n    type: 'INCREASE_AVATAR_V',\n})\n\nexport const setPageTitle = title => ({\n    type: 'SET_PAGE_TITLE',\n    title,\n})\n\nexport const buyPerk = (account, perk, owner, props) => dispatch => {\n    const currency = account.wallet.find(item => item.user === owner._id)\n    if (currency && currency.amount >= perk.price) {\n        axios\n            .post('/api/shop/buy', {\n                perkId: perk.perkId,\n                ownerId: owner._id,\n            })\n            .then(res => {\n                processRes(res)\n                if (res.data.success) {\n                    dispatch(setData(res.data, props.history.location.pathname))\n                }\n            })\n            .catch(err => {})\n    } else {\n        alert(\n            'You cannot buy this item as you do not have enough money from this user.'\n        )\n    }\n}\n\nexport const confirmTransaction = (transactionId, props) => dispatch => {\n    axios\n        .post('/api/shop/confirm', {\n            transactionId,\n        })\n        .then(res => {\n            processRes(res)\n            if (res.data.success) {\n                dispatch(setData(res.data, props.history.location.pathname))\n            }\n        })\n        .catch(err => {})\n}\n\nexport const cancelTransaction = (transactionId, props) => dispatch => {\n    axios\n        .post('/api/shop/cancel', {\n            transactionId,\n        })\n        .then(res => {\n            processRes(res)\n            if (res.data.success) {\n                dispatch(setData(res.data, props.history.location.pathname))\n            }\n        })\n        .catch(err => {})\n}\n\nexport const setFriendSearchResult = data => ({\n    type: 'SET_FRIEND_SEARCH_RESULT',\n    data,\n})\n\nexport const setAccountActivated = value => ({\n    type: 'SET_ACCOUNT_ACTIVATED',\n    value,\n})\n","import { webSocket } from '../ConnectWebsocket'\n\nexport default (type, ids, state) => {\n    const notRequestedIds = ids.filter(id => !state[type].includes(id))\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'requestResource',\n                ids: notRequestedIds,\n                type,\n            })\n        )\n    }\n}\n","import requestResource from '../../containers/ConnectWebsocket/methods/requestResource'\nimport * as actions from './index'\nimport cloneDeep from 'lodash.clonedeep'\n\nconst applyDelta = (source, delta, watchFields) => {\n    // console.log('---------------------------APLY DELTA------------------------')\n    // console.log('----------------source----------------')\n    // console.log(source)\n    // console.log('----------------delta-------------------')\n    // console.log(delta)\n    const result = cloneDeep(source)\n\n    const applyUpdateToPart = (res, del, watchFields) => {\n        const applyWithDot = (res, keys, del) => {\n            if (keys.length > 1) {\n                const key = keys.shift()\n                applyWithDot(res[key], keys, del)\n            } else {\n                if (typeof res === 'array') {\n                    res.push(del)\n                } else {\n                    res[keys[0]] = del\n                }\n            }\n        }\n        for (let attr in del) {\n            const keys = attr.split('.')\n            if (!watchFields || watchFields.includes(keys[0])) {\n                if (typeof del[attr] !== 'undefined') {\n                    applyWithDot(res, keys, del[attr])\n                }\n            }\n        }\n    }\n\n    applyUpdateToPart(result, delta.updatedFields, watchFields)\n\n    const applyDeleteToPart = (result, keys) => {\n        if (keys.length > 1) {\n            const key = keys.shift()\n            applyDeleteToPart(result[key], keys)\n        } else {\n            if (typeof result === 'object') {\n                delete result[keys[0]]\n            } else if (typeof result === 'array') {\n                result.splice(keys[0], 1)\n            }\n        }\n    }\n\n    for (let field of delta.removedFields) {\n        if (field.indexOf('.') > -1) {\n            const keys = field.split('.')\n            if (!watchFields || watchFields.includes(keys[0]))\n                applyDeleteToPart(result, keys)\n        } else {\n            delete result[field]\n        }\n    }\n    return result\n}\n\nexport const updateResource = (code, id, update, parState) => (\n    dispatch,\n    getState\n) => {\n    if (update && id && code) {\n        const state = getState()\n        const check = key => {\n            if (state[key]._id === id) {\n                if (state[key].__v === update.updatedFields.__v - 1) {\n                    const element = applyDelta(state[key], update)\n                    dispatch(actions.setData({ [key]: element }))\n                } else {\n                    if (state[key].id) requestResource(code, [id], parState)\n                }\n            }\n        }\n        const check2 = (key, watchFields) => {\n            let updateData = {\n                [key]: cloneDeep(state[key]),\n            }\n            const friend = updateData[key][id]\n            if (friend) {\n                if (friend.__v === update.updatedFields.__v - 1) {\n                    updateData[key][id] = applyDelta(\n                        friend,\n                        update,\n                        watchFields\n                    )\n                    dispatch(actions.setData(updateData))\n                } else {\n                    requestResource(code, [id], parState)\n                }\n            }\n        }\n        switch (code) {\n            case 'user':\n                check('user')\n                break\n            case 'account':\n                check('account')\n                check('profile')\n                break\n            case 'progress':\n                check('progress')\n                break\n            case 'group':\n                check('group')\n                break\n            case 'post':\n                dispatch(actions.setData(check2(code)))\n                break\n            case 'friendData':\n                dispatch(\n                    actions.setData(\n                        check2(code, ['name', 'image', 'notifications', '__v'])\n                    )\n                )\n                break\n            case 'progressData':\n                dispatch(\n                    actions.setData(\n                        check2(code, [\n                            'owner',\n                            'worker',\n                            'goal',\n                            'notifications',\n                            '__v',\n                        ])\n                    )\n                )\n                break\n            case 'postData':\n                dispatch(\n                    actions.setData(check2(code, ['notifications', '__v']))\n                )\n                break\n            case 'groupData':\n                dispatch(\n                    actions.setData(check2(code, ['notifications', '__v']))\n                )\n                break\n            case 'transactionData':\n                dispatch(actions.setData(check2(code)))\n                break\n            default:\n                break\n        }\n    }\n}\n","export default props => {\n    const createEmptyObj = () => ({\n        user: [],\n        account: [],\n        progress: [],\n        post: [],\n        group: [],\n        progressData: [],\n        friendData: [],\n        postData: [],\n        groupData: [],\n        transactionData: [],\n    })\n    const { store } = props\n    const requestedResources = createEmptyObj()\n    const neededResources = createEmptyObj()\n    if (store.isAuthed) {\n        if (!store.user) {\n            requestedResources.user.push(store.isAuthed)\n        } else {\n            neededResources.user.push(store.user._id)\n            if (store.currentAccount) {\n                if (store.account._id !== store.currentAccount) {\n                    requestedResources.account.push(store.currentAccount)\n                } else {\n                    neededResources.account.push(store.account._id)\n                    for (let progress of [\n                        ...store.account.progresses,\n                        ...store.account.followProgresses,\n                    ]) {\n                        if (!store.progressData[progress]) {\n                            requestedResources.progressData.push(progress)\n                        }\n                        neededResources.progressData.push(progress)\n                    }\n                    for (let group of store.account.groups) {\n                        if (!store.groupData[group]) {\n                            requestedResources.groupData.push(group)\n                        }\n                        neededResources.groupData.push(group)\n                    }\n                    for (let post of store.account.followPosts) {\n                        if (!store.postData[post]) {\n                            requestedResources.postData.push(post)\n                        }\n                        neededResources.postData.push(post)\n                    }\n                    for (let post of store.account.myPosts) {\n                        if (!store.postData[post]) {\n                            requestedResources.postData.push(post)\n                        }\n                        neededResources.postData.push(post)\n                    }\n                    for (let transaction of store.account.transactions) {\n                        if (!store.transactionData[transaction]) {\n                            requestedResources.transactionData.push(transaction)\n                        }\n                        neededResources.transactionData.push(transaction)\n                    }\n                    for (let friend of store.account.friends) {\n                        if (!store.friendData[friend.friend]) {\n                            requestedResources.friendData.push(friend.friend)\n                        }\n                        neededResources.friendData.push(friend.friend)\n                    }\n                    for (let item of [\n                        ...store.account.followingAccounts,\n                        ...store.account.followAccounts,\n                    ]) {\n                        if (!store.friendData[item]) {\n                            requestedResources.friendData.push(item)\n                        }\n                        neededResources.friendData.push(item)\n                    }\n                }\n            }\n            if (store.currentProfile) {\n                if (store.profile._id !== store.currentProfile) {\n                    requestedResources.account.push(store.currentProfile)\n                } else {\n                    neededResources.account.push(store.profile._id)\n                    for (let progress of [\n                        ...store.profile.progresses,\n                        ...store.profile.followProgresses,\n                    ]) {\n                        if (!store.progressData[progress]) {\n                            requestedResources.progressData.push(progress)\n                        }\n                        neededResources.progressData.push(progress)\n                    }\n                    for (let group of store.profile.groups) {\n                        if (!store.groupData[group]) {\n                            requestedResources.groupData.push(group)\n                        }\n                        neededResources.groupData.push(group)\n                    }\n                    for (let friend of store.profile.friends) {\n                        if (!store.friendData[friend.friend]) {\n                            requestedResources.friendData.push(friend.friend)\n                        }\n                        neededResources.friendData.push(friend.friend)\n                    }\n                    for (let item of [\n                        ...store.profile.followingAccounts,\n                        ...store.profile.followAccounts,\n                    ]) {\n                        if (!store.friendData[item]) {\n                            requestedResources.friendData.push(item)\n                        }\n                        neededResources.friendData.push(item)\n                    }\n                }\n            }\n            if (store.currentGroup) {\n                if (store.group._id !== store.currentGroup) {\n                    requestedResources.group.push(store.currentGroup)\n                } else {\n                    neededResources.group.push(store.group._id)\n                    for (let user of store.group.users) {\n                        if (!store.friendData[user]) {\n                            requestedResources.friendData.push(user)\n                        }\n                        neededResources.friendData.push(user)\n                    }\n                    for (let progress of store.group.progresses) {\n                        if (!store.progressData[progress]) {\n                            requestedResources.progressData.push(progress)\n                        }\n                        neededResources.progressData.push(progress)\n                    }\n                    for (let post of store.group.posts) {\n                        if (!store.postData[post]) {\n                            requestedResources.postData.push(post)\n                        }\n                        neededResources.postData.push(post)\n                    }\n                }\n            }\n            if (store.currentProgress) {\n                if (store.progress._id !== store.currentProgress) {\n                    requestedResources.progress.push(store.currentProgress)\n                } else {\n                    neededResources.progress.push(store.progress._id)\n                    let participants = []\n                    if (store.progress.owner)\n                        participants.push(store.progress.owner)\n                    if (store.progress.worker)\n                        participants.push(store.progress.worker)\n                    participants = [\n                        ...participants,\n                        ...(store.progress.experts || []),\n                        ...(store.progress.supporters || []),\n                    ]\n                    for (let friend of participants) {\n                        if (!store.friendData[friend]) {\n                            requestedResources.friendData.push(friend)\n                        }\n                        neededResources.friendData.push(friend)\n                    }\n                    for (let post of store.progress.posts) {\n                        if (!store.postData[post]) {\n                            requestedResources.postData.push(post)\n                        }\n                        neededResources.postData.push(post)\n                    }\n                }\n            }\n            if (store.currentPosts) {\n                for (let post of store.currentPosts) {\n                    const postEl = store.post[post]\n                    if (!postEl) {\n                        requestedResources.post.push(post)\n                    } else {\n                        neededResources.post.push(post)\n                        for (let friend of postEl.users) {\n                            if (!store.friendData[friend]) {\n                                requestedResources.friendData.push(friend)\n                            }\n                            neededResources.friendData.push(friend)\n                        }\n                        if (post.parent) {\n                            if (post.parent.parentType === 'progress')\n                                neededResources.progressData.push(\n                                    post.parent.parentId\n                                )\n                            else if (post.parent.parentType === 'group')\n                                neededResources.groupData.push(\n                                    post.parent.parentId\n                                )\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    const reduce = obj => {\n        for (let attr in obj) {\n            if (obj[attr]) {\n                obj[attr] = Array.from(new Set(obj[attr]))\n            }\n        }\n    }\n\n    reduce(neededResources)\n    const notNeededResources = createEmptyObj()\n    notNeededResources.profile = []\n    let notNeededExist\n    const check1 = (key, mode) => {\n        if (\n            store[mode]._id &&\n            !neededResources[key].includes(store[mode]._id)\n        ) {\n            notNeededResources[mode].push(store[mode]._id)\n            notNeededExist = true\n        }\n    }\n    const check2 = key => {\n        for (let attr in store[key]) {\n            if (!neededResources[key].includes(attr)) {\n                notNeededResources[key].push(attr)\n                notNeededExist = true\n            }\n        }\n    }\n    check1('account', 'account')\n    check1('account', 'profile')\n    check1('group', 'group')\n    check1('progress', 'progress')\n    check2('post')\n    check2('friendData')\n    check2('progressData')\n    check2('transactionData')\n    check2('postData')\n    check2('groupData')\n\n    if (notNeededExist) {\n        props.removeData(notNeededResources)\n    }\n\n    reduce(requestedResources)\n\n    return requestedResources\n}\n","import requestResource from './requestResource'\n\nexport default (versions, state, store, webSocket) => {\n    const notNeededResources = {\n        user: [],\n        account: [],\n        progress: [],\n        post: [],\n        group: [],\n        progressData: [],\n        friendData: [],\n        postData: [],\n        groupData: [],\n        transactionData: [],\n    }\n\n    const checkData = key => {\n        for (let attr in versions[key]) {\n            if (typeof versions[key][attr] !== 'undefined') {\n                if (store[key][attr]) {\n                    if (store[key][attr] !== versions[key][attr]) {\n                        requestResource(key, [attr], state)\n                    }\n                } else notNeededResources[key].push(attr)\n            }\n        }\n    }\n\n    const check = key => {\n        for (let attr in versions[key]) {\n            if (typeof versions[key][attr] !== 'undefined') {\n                if (store[key]._id === attr) {\n                    if (store[key].__v !== versions[key][attr]) {\n                        requestResource(key, [attr], state)\n                    }\n                    if (!store[key]._id) notNeededResources[key].push(attr)\n                } else notNeededResources[key].push(attr)\n            }\n        }\n    }\n\n    for (let attr in versions.user) {\n        if (typeof versions.user[attr] !== 'undefined') {\n            if (store.user._id === attr) {\n                if (store.user.__v !== versions.user[attr]) {\n                    requestResource('user', [attr], state)\n                }\n            } else notNeededResources.user.push(attr)\n        }\n    }\n\n    for (let attr in versions.account) {\n        if (typeof versions.account[attr] !== 'undefined') {\n            if (store.account._id === attr) {\n                if (store.account.__v !== versions.account[attr]) {\n                    requestResource('account', [attr], state)\n                }\n            }\n            if (store.profile._id === attr) {\n                if (store.profile.__v !== versions.account[attr]) {\n                    requestResource('account', [attr], state)\n                }\n                if (!store.account._id) notNeededResources.account.push(attr)\n            }\n        }\n        if (store.account._id !== attr && store.profile._id !== attr)\n            notNeededResources.account.push(attr)\n    }\n\n    check('progress')\n    check('group')\n\n    checkData('post')\n    checkData('friendData')\n    checkData('progressData')\n    checkData('postData')\n    checkData('groupData')\n    checkData('transactionData')\n\n    if (\n        notNeededResources.user.length > 0 ||\n        notNeededResources.account.length > 0 ||\n        notNeededResources.progress.length > 0 ||\n        notNeededResources.post.length > 0 ||\n        notNeededResources.group.length > 0 ||\n        notNeededResources.friendData.length > 0 ||\n        notNeededResources.progressData.length > 0 ||\n        notNeededResources.postData.length > 0 ||\n        notNeededResources.groupData.length > 0 ||\n        notNeededResources.transactionData.length > 0\n    ) {\n        return notNeededResources\n    }\n}\n","export default props => {\n    const { store } = props\n    const resources = {\n        user: {},\n        account: {},\n        progress: {},\n        post: {},\n        group: {},\n        transactionData: {},\n        friendData: {},\n        progressData: {},\n        groupData: {},\n        postData: {},\n    }\n\n    if (store.user && store.user._id) {\n        resources.user[store.user._id] = store.user.__v\n    }\n\n    if (store.account._id) {\n        resources.account[store.account._id] = store.account.__v\n    }\n    if (store.profile._id) {\n        resources.account[store.profile._id] = store.profile.__v\n    }\n    if (store.progress._id) {\n        resources.progress[store.progress._id] = store.progress.__v\n    }\n    if (store.group._id) {\n        resources.group[store.group._id] = store.group.__v\n    }\n\n    const addData = key => {\n        for (let item in store[key]) {\n            if (typeof store[key][item] !== 'undefined') {\n                if (store[key][item]._id) {\n                    resources[key][store[key][item]._id] = store[key][item].__v\n                }\n            }\n        }\n    }\n\n    addData('post')\n    addData('friendData')\n    addData('postData')\n    addData('groupData')\n    addData('progressData')\n    addData('TransactionData')\n\n    return resources\n}\n","import React, { Component } from 'react'\nimport axios from 'axios'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport message from 'antd/es/message'\nimport * as wsActions from '../../websocketActions'\nimport cloneDeep from 'lodash.clonedeep'\nimport getListOfNeededResources from './methods/getListOfNeededResources'\nimport compareVersionsAndRerequest from './methods/compareVersionsAndRerequest'\nimport getResourcesToMonitor from './methods/getResourcesToMonitor'\nconst diffpatcher = require('jsondiffpatch/dist/jsondiffpatch.umd.js').create({\n    propertyFilter: (name, context) => name !== 'patch',\n})\n\nexport let webSocket = false\n\nclass ConnectWebsocket extends Component {\n    state = {\n        user: [],\n        account: [],\n        progress: [],\n        post: [],\n        group: [],\n        friendData: [],\n        progressData: [],\n        postData: [],\n        groupData: [],\n        transactionData: [],\n    }\n    start = () => {\n        let url\n        if (process.env.NODE_ENV === 'development') {\n            url = 'ws://my.websiter.test:5000'\n        } else {\n            url = 'wss://addspire.com'\n        }\n        let pingTimeout\n        webSocket = new WebSocket(url)\n\n        const heartbeat = versions => {\n            let notNeededResources\n            if (versions) {\n                notNeededResources = compareVersionsAndRerequest(\n                    versions,\n                    this.state,\n                    this.props.store,\n                    webSocket\n                )\n            }\n            clearTimeout(pingTimeout)\n\n            pingTimeout = setTimeout(() => {\n                webSocket.close()\n            }, 30000 + 1000)\n\n            webSocket.send(\n                JSON.stringify({\n                    messageCode: 'heartbeat',\n                    notNeededResources,\n                    //get back list of online friends\n                })\n            )\n        }\n\n        webSocket.onopen = event => {\n            const resourcesToMonitor = getResourcesToMonitor(this.props)\n            webSocket.send(\n                JSON.stringify({\n                    messageCode: 'auth',\n                    user: axios.defaults.headers.common['x-auth-token'],\n                    resourcesToMonitor,\n                    // progressId: this.props.progress._id,\n                })\n            )\n            this.initializeRequestResources(this.props)\n            heartbeat()\n        }\n\n        webSocket.onmessage = event => {\n            const news = JSON.parse(event.data)\n\n            switch (news.messageCode) {\n                case 'heartbeat':\n                    heartbeat(news.versions)\n                    break\n                case 'logout':\n                    this.props.logout()\n                    this.props.history.push('/logout')\n                    break\n\n                case 'successMessage':\n                    message.success(news.messageText)\n                    break\n                case 'errorMessage':\n                    message.error(news.messageText)\n                    break\n                case 'friendsData':\n                    this.props.setFriendsData(news.friendsData)\n                    break\n                case 'redirectToProgresses':\n                    this.props.history.push('/inspirations')\n                    break\n                case 'addResource':\n                    this.props.saveResource(news.resources, news.type)\n                    break\n                case 'updateResource':\n                    this.props.updateResource(\n                        news.code,\n                        news.id,\n                        news.update,\n                        this.state\n                    )\n                    break\n                case 'friendSearchResult':\n                    this.props.setFriendSearchResult(news.data)\n                    break\n\n                // case 'update':\n                //     let newProgress\n                //     let oldProgress = cloneDeep(this.props.progress)\n                //     if (oldProgress.__v === news.progress.__v - 1) {\n                //         newProgress = diffpatcher.patch(\n                //             oldProgress,\n                //             news.progress.patch\n                //         )\n                //         newProgress.__v = news.progress.__v\n                //         this.props.setData(\n                //             {\n                //                 progress: newProgress,\n                //             },\n                //             this.props.history.location.pathname\n                //         )\n                //     }\n                //     wsActions.getFriendsData(\n                //         newProgress || this.props.progress,\n                //         this.props.account.friends\n                //     )\n                //     break\n                case 'error':\n                    message.error(news.text)\n                    break\n                // case 'notFoundResource':\n                //     this.markNotFoundResource(data)\n                //     break\n                default:\n                    break\n            }\n        }\n        webSocket.onclose = event => {\n            clearTimeout(pingTimeout)\n        }\n    }\n\n    // markNotFoundResource = data => {\n    //     const requestedResources = this.state.requestedResources.filter(\n    //         item => item.id.toString() === data._id.toString()\n    //     )\n    //     this.setState({ requestedResources })\n    // }\n\n    checkInterval = null\n\n    check = () => {\n        if (!webSocket || webSocket.readyState === 3) {\n            clearInterval(this.checkInterval)\n            this.checkInterval = setInterval(this.check, 5000)\n            this.start()\n        }\n    }\n    componentWillMount() {\n        this.checkInterval = setInterval(this.check, 50)\n    }\n\n    reRequestResourcesInterval = null\n    reRequestResources = () => {\n        for (let group of [\n            'user',\n            'account',\n            'progress',\n            'post',\n            'group',\n            'postData',\n            'groupData',\n            'progressData',\n            'friendData',\n            'transactionData',\n        ]) {\n            if (this.state[group].length > 0) {\n                if (webSocket && webSocket.readyState === 1) {\n                    webSocket.send(\n                        JSON.stringify({\n                            messageCode: 'requestResource',\n                            ids: this.state[group],\n                            type: group,\n                        })\n                    )\n                }\n            }\n        }\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.checkInterval)\n        if (webSocket) {\n            webSocket.close()\n        }\n        this.props.setConnectingToWS(false)\n    }\n    componentDidMount() {\n        this.props.setConnectingToWS(true)\n    }\n    componentWillReceiveProps(nextProps) {\n        this.initializeRequestResources(nextProps)\n    }\n\n    initializeRequestResources = nextProps => {\n        const newRequestedResources = getListOfNeededResources(nextProps)\n        for (let group of [\n            'user',\n            'account',\n            'progress',\n            'post',\n            'group',\n            'postData',\n            'groupData',\n            'progressData',\n            'friendData',\n            'transactionData',\n        ]) {\n            if (newRequestedResources[group].length > 0) {\n                if (webSocket && webSocket.readyState === 1) {\n                    webSocket.send(\n                        JSON.stringify({\n                            messageCode: 'requestResource',\n                            ids: newRequestedResources[group].filter(\n                                item => !this.state[group].includes(item)\n                            ),\n                            type: group,\n                        })\n                    )\n                }\n            }\n        }\n        this.setState(() => newRequestedResources)\n        clearInterval(this.reRequestResourcesInterval)\n        this.reRequestResourcesInterval = setInterval(\n            this.reRequestResources,\n            3000\n        )\n    }\n\n    render() {\n        return null\n    }\n}\nconst mapStateToProps = state => {\n    return {\n        store: state,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: (data, pulledFrom) =>\n            dispatch(actions.setData(data, pulledFrom)),\n        removeData: data => dispatch(actions.removeData(data)),\n        saveResource: (data, type) =>\n            dispatch(actions.saveResource(data, type)),\n        setFriendsData: data => dispatch(actions.setFriendsData(data)),\n\n        updateResource: (code, id, update, state) =>\n            dispatch(actions.updateResource(code, id, update, state)),\n        setFriendSearchResult: data =>\n            dispatch(actions.setFriendSearchResult(data)),\n        setConnectingToWS: data => dispatch(actions.setConnectingToWS(data)),\n\n        logout: () => dispatch(actions.logout()),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(ConnectWebsocket)\n)\n","import { setData } from './auth'\n\nexport const saveResource = (data, type) => (dispatch, getState) => {\n    if (data.length > 0) {\n        const state = getState()\n        switch (type) {\n            case 'user':\n                const user = data[0]\n                let currentAccount = user.currentAccount\n                if (!currentAccount) currentAccount = user.myAccount\n                // if(!currentAccount)\n                //activate-account\n                dispatch(setData({ user, currentAccount }))\n                break\n            case 'account':\n                const account = data.find(\n                    item => item._id === state.currentAccount\n                )\n                if (account) {\n                    dispatch(setData({ account }))\n                }\n\n                const profile = data.find(\n                    item => item._id === state.currentProfile\n                )\n                if (profile) {\n                    dispatch(setData({ profile }))\n                }\n\n                break\n            case 'progress':\n                const progress = data.find(\n                    item => item._id === state.currentProgress\n                )\n                if (progress) {\n                    dispatch(setData({ progress }))\n                }\n                break\n            case 'group':\n                const group = data.find(item => item._id === state.currentGroup)\n                if (group) {\n                    dispatch(setData({ group }))\n                }\n                break\n            case 'post':\n                let post = {}\n                for (let item of data) {\n                    post[item._id] = item\n                }\n                dispatch(setData({ post }))\n                break\n            case 'friendData':\n                let friendData = {}\n                for (let item of data) {\n                    friendData[item._id] = item\n                }\n                dispatch(setData({ friendData }))\n                break\n            case 'progressData':\n                let progressData = {}\n                for (let item of data) {\n                    progressData[item._id] = item\n                }\n                dispatch(setData({ progressData }))\n                break\n            case 'transactionData':\n                let transactionData = {}\n                for (let item of data) {\n                    transactionData[item._id] = item\n                }\n                dispatch(setData({ transactionData }))\n                break\n            case 'postData':\n                let postData = {}\n                for (let item of data) {\n                    postData[item._id] = item\n                }\n                dispatch(setData({ postData }))\n                break\n            case 'groupData':\n                let groupData = {}\n                for (let item of data) {\n                    groupData[item._id] = item\n                }\n                dispatch(setData({ groupData }))\n                break\n            default:\n                break\n        }\n    }\n}\n","import { webSocket } from '../containers/ConnectWebsocket/ConnectWebsocket'\n\nexport const sendMessage = (\n    accountId,\n    postId,\n    messageValue,\n    image,\n    replyToMessage,\n    editedMessage\n) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'sendMessage',\n                messageValue,\n                image,\n                postId,\n                accountId,\n                replyToMessage,\n                editedMessage,\n            })\n        )\n    }\n}\n\nexport const changeLikesMessage = (\n    messageCode,\n    messageId,\n    accountId,\n    postId\n) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode,\n                messageId,\n                accountId,\n                postId,\n            })\n        )\n    }\n}\n\nexport const addPost = (\n    accountId,\n    parentId,\n    parentType,\n    messageValue,\n    images\n) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'addPost',\n                accountId,\n                parentId,\n                parentType,\n                messageValue,\n                images,\n            })\n        )\n    }\n}\n","import { webSocket } from '../containers/ConnectWebsocket/ConnectWebsocket'\n\nexport const deleteAccount = id => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'deleteAccount',\n                accountId: id,\n            })\n        )\n    }\n}\n\nexport const editAccount = (value, id) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'editAccount',\n                name: value.name,\n                accountId: id,\n            })\n        )\n    }\n}\n\nexport const followProgress = (accountId, progressId) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'followProgress',\n                accountId,\n                progressId,\n            })\n        )\n    }\n}\nexport const unfollowProgress = (accountId, progressId) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'unfollowProgress',\n                accountId,\n                progressId,\n            })\n        )\n    }\n}\n\nexport const followAccount = (accountId, accountFollow) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'followAccount',\n                accountId,\n                accountFollow,\n            })\n        )\n    }\n}\nexport const unfollowAccount = (accountId, accountFollow) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'unfollowAccount',\n                accountId,\n                accountFollow,\n            })\n        )\n    }\n}\n","import { webSocket } from '../containers/ConnectWebsocket/ConnectWebsocket'\n\nexport const savePerk = (accountId, id, value, mode) => {\n    if (accountId && webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode:\n                    mode === 'wishlist'\n                        ? 'saveWishlistItem'\n                        : mode === 'goals'\n                        ? 'saveGoal'\n                        : 'savePerk',\n                id,\n                value,\n                accountId,\n            })\n        )\n    }\n}\n\nexport const deletePerk = (accountId, id, mode) => {\n    if (accountId && id && webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode:\n                    mode === 'wishlist'\n                        ? 'deleteWishlistItem'\n                        : mode === 'goals'\n                        ? 'deleteGoal'\n                        : 'deletePerk',\n                id,\n                accountId,\n            })\n        )\n    }\n}\n\nexport const buyPerk = (buyer, seller, perkId) => {\n    if (perkId && buyer && seller && webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'buyPerk',\n                perkId,\n                buyer,\n                seller,\n            })\n        )\n    }\n}\n","import { webSocket } from '../containers/ConnectWebsocket/ConnectWebsocket'\n\nexport const searchFriends = search => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'searchFriends',\n                search,\n            })\n        )\n    }\n}\n\nexport const addFriend = (accountId, friendId) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'addFriend',\n                accountId,\n                friendId,\n            })\n        )\n    }\n}\n\nexport const acceptFriend = (accountId, friendId) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'acceptFriend',\n                accountId,\n                friendId,\n            })\n        )\n    }\n}\n\nexport const unfriend = (accountId, friendId) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'unfriend',\n                accountId,\n                friendId,\n            })\n        )\n    }\n}\n","import axios from 'axios'\nimport message from 'antd/es/message'\n\nexport const uploadFile = (file, size, filename, callback) => {\n    if (file == null) {\n        return alert('No file selected.')\n    }\n\n    const reader = new FileReader()\n    reader.onload = async event => {\n        resizeImageToSpecificSize(file, { width: size, height: size }, data => {\n            urltoFile(data, '/120').then(function(file) {\n                getSignedRequest(file, filename, callback)\n            })\n        })\n    }\n\n    reader.readAsArrayBuffer(file)\n}\n\nconst urltoFile = (url, filename, mimeType) => {\n    mimeType = mimeType || (url.match(/^data:([^;]+);/) || '')[1]\n    return fetch(url)\n        .then(function(res) {\n            return res.arrayBuffer()\n        })\n        .then(function(buf) {\n            return new File([buf], filename, { type: 'image/jpeg' })\n        })\n}\n\nconst resizeImageToSpecificSize = (file, size, cb) => {\n    if (file) {\n        var reader = new FileReader()\n        reader.onload = function(event) {\n            resizeImageFromSrcToSpecificSize(event.target.result, size, cb)\n        }\n        reader.readAsDataURL(file)\n    }\n}\n\nconst resizeImageFromSrcToSpecificSize = (src, size, cb) => {\n    var data\n    var img = new Image()\n    img.onload = function() {\n        const widthCoef = img.width / size.width\n        const heightCoef = img.height / size.height\n        var oc = document.createElement('canvas'),\n            octx = oc.getContext('2d')\n        oc.width = img.width\n        oc.height = img.height\n        octx.drawImage(img, 0, 0)\n        if (widthCoef > 1 || heightCoef > 1) {\n            if (img.width > img.height) {\n                oc.height = (img.height / img.width) * size.width\n                oc.width = size.width\n            } else {\n                oc.width = (img.width / img.height) * size.width\n                oc.height = size.width\n            }\n        }\n        octx.drawImage(oc, 0, 0, oc.width, oc.height)\n        octx.drawImage(img, 0, 0, oc.width, oc.height)\n        data = oc.toDataURL('image/jpeg', 0.6)\n        cb(data)\n    }\n    img.src = src\n}\n\nconst getSignedRequest = (file, fileName, callback) => {\n    return axios\n        .post('/api/sign-s3', {\n            fileName,\n        })\n        .then(response => {\n            doUploadFile(file, response.data, callback)\n        })\n        .catch(err => {})\n}\n\nconst doUploadFile = (file, data, callback) => {\n    return axios\n        .put(data.signedRequest, file, {\n            headers: {\n                'Content-Type': 'multipart/form-data',\n            },\n        })\n        .then(response => {\n            callback(data.url)\n            message.success('The image has been saved.')\n        })\n        .catch(err => {\n            console.log(err)\n        })\n}\n","export default {\n    name: 200,\n    description: 10000,\n    message: 10000,\n}\n","import fieldLength from './fieldLength'\n\nexport const nicknameRules = [\n    {\n        required: true,\n        message: 'Nickname is too short. Minimal length is 2.',\n        whitespace: true,\n        min: 2,\n    },\n    {\n        message: `Nickname is too long. Miximum length is ${fieldLength.name}.`,\n        whitespace: true,\n        max: fieldLength.name,\n    },\n    {\n        pattern: /^[a-zA-Z0-9_-]*$/,\n        message: \"Nickname should contain only letters, numbers, '-' and '_'.\",\n    },\n]\n\nexport const nameRules = [\n    {\n        required: true,\n        min: 1,\n        whitespace: true,\n        message: 'Name is too short. Minimal length is 1.',\n    },\n    {\n        max: fieldLength.name,\n        message: `Name is too long. Miximum length is ${fieldLength.name}.`,\n    },\n]\n\nexport const accountNameRules = [\n    {\n        required: true,\n        min: 2,\n        whitespace: true,\n        message: 'Name is too short. Minimal length is 2.',\n    },\n    {\n        max: fieldLength.name,\n        message: `Name is too long. Miximum length is ${fieldLength.name}.`,\n    },\n]\n\nexport const descriptionRules = [\n    {\n        max: fieldLength.description,\n        message: `Description is too long. Miximum length is ${\n            fieldLength.description\n        }.`,\n    },\n]\n\nexport const messageRules = [\n    {\n        min: 1,\n        whitespace: true,\n        message: 'Message is too short. Minimal length is 1.',\n    },\n    {\n        max: fieldLength.message,\n        message: `Message is too long. Miximum length is ${\n            fieldLength.message\n        }.`,\n    },\n]\n\nexport const priceRules = [\n    {\n        required: true,\n        message: 'Please input the item price.',\n    },\n]\n","import React from 'react'\nimport { withRouter, Link } from 'react-router-dom'\nimport { connect } from 'react-redux'\n\nimport Button from 'antd/es/button'\nimport Avatar from 'antd/es/avatar'\nimport getAvatar from '../../utils/getAvatar'\n\nconst UserButton = props => {\n    const { account, profile, id, friendSearchResult } = props\n    const friendData = props.friendDataExp || props.friendData\n    const getUserData = id =>\n        id === account._id\n            ? account\n            : id === profile._id\n            ? profile\n            : id === friendSearchResult._id\n            ? friendSearchResult\n            : friendData[id]\n    const userName = id => (getUserData(id) ? getUserData(id).name : id)\n    const userAvatar = id =>\n        getUserData(id) ? (\n            <span key={id}>\n                <Avatar\n                    src={getAvatar(id, getUserData(id).image)}\n                    size={props.size || (props.noClick ? 20 : 40)}\n                    style={props.group ? {} : { margin: ' 0 5px' }}\n                />\n            </span>\n        ) : null\n\n    return props.onlyName ? (\n        userName(id)\n    ) : props.group ? (\n        <span onClick={e => e.stopPropagation()}>\n            <Avatar.Group style={{ margin: ' 0 5px' }}>\n                {props.ids.map(id => userAvatar(id))}\n            </Avatar.Group>\n        </span>\n    ) : props.noClick ? (\n        <>\n            {!props.noAva && userAvatar(id)}\n            {!props.noName && userName(id)}\n        </>\n    ) : props.span ? (\n        <Link\n            style={{ cursor: 'pointer', fontWeight: 'bold', ...props.style }}\n            onClick={e => {\n                e.stopPropagation()\n            }}\n            to={'/profile/' + (id || props.id)}\n        >\n            {!props.noAva && userAvatar(id)}\n            {!props.noName && userName(id)}\n        </Link>\n    ) : (\n        <Link\n            onClick={e => {\n                e.stopPropagation()\n            }}\n            to={'/profile/' + (id || props.id)}\n        >\n            <Button\n                type=\"link\"\n                style={{ padding: '0px 5px', height: 'auto', ...props.style }}\n            >\n                {!props.noAva && userAvatar(id)}\n\n                {!props.noName && userName(id)}\n            </Button>\n        </Link>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        account: state.account,\n        profile: state.profile,\n        friendData: state.friendData,\n        friendSearchResult: state.friendSearchResult,\n    }\n}\n\nexport default withRouter(connect(mapStateToProps)(UserButton))\n","import React from 'react'\n\nimport Select from 'antd/es/select'\nimport UserButton from '../UserButton/UserButton'\n\nexport default (account, friendData, value?, onSelect?) => (\n    <Select\n        mode=\"multiple\"\n        style={{ width: '100%' }}\n        placeholder=\"Please select\"\n        value={value}\n        onChange={onSelect}\n        getPopupContainer={trigger => trigger.parentNode}\n    >\n        {[\n            account,\n            ...account.friends\n                .filter(friend => friend.status === 'friend')\n                .map(friend => friendData[friend.friend]),\n        ].map(\n            item =>\n                item &&\n                item._id && (\n                    <Select.Option key={item._id}>\n                        <UserButton id={item._id} noClick={true} />\n                    </Select.Option>\n                )\n        )}\n    </Select>\n)\n","import React from 'react'\n\nexport default props => (\n    <svg\n        viewBox=\"0 0 24 24\"\n        width=\"18\"\n        height=\"18\"\n        style={{ transform: 'rotate(90deg)', display: 'block' }}\n    >\n        <path d=\"M2 10h4v4H2v-4zm8 4h4v-4h-4v4zm8-4v4h4v-4h-4z\" />\n    </svg>\n)\n","import React, { useState } from 'react'\nimport Modal from 'antd/es/modal'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as wsActions from '../../websocketActions'\nimport Button from 'antd/es/button'\nimport Input from 'antd/es/input'\nimport InputNumber from 'antd/es/input-number'\nimport Form from 'antd/es/form'\nimport Select from 'antd/es/select'\n\nimport Upload from 'antd/es/upload'\nimport Divider from 'antd/es/divider'\nimport PlusOutlined from '@ant-design/icons/PlusOutlined'\n\nimport { uploadFile } from '../../utils/uploadFile'\nimport {\n    descriptionRules,\n    nameRules,\n    priceRules,\n} from '../../constants/fieldRules'\nimport connectionsSelect from '../EditGoalAndProgressForm/connectionsSelect'\nimport Descriptions from 'antd/es/descriptions'\nimport UserButton from '../UserButton/UserButton'\nimport Dropdown from 'antd/es/dropdown'\nimport Menu from 'antd/es/menu'\nimport Card from 'antd/es/card'\nimport MoreIcon from '../UI/MoreIcon'\n\nconst Rewards = props => {\n    const [previewImage, setPreviewImage] = useState('')\n    const [previewReward, setPreviewReward] = useState()\n    const [editedReward, setEditedReward] = useState()\n    const [editedRewardIndex, setEditedRewardIndex] = useState()\n    const { account, friendData, readOnly, progress } = props\n\n    const RewardButton = props => (\n        <Button type=\"link\" onClick={() => setPreviewReward(props.item)}>\n            {props.item.mode === 'simple'\n                ? props.item.simple\n                : props.item.mode === 'money'\n                ? props.item.money + ' (money)'\n                : props.item.mode === 'item'\n                ? props.item.itemName\n                : ''}\n        </Button>\n    )\n\n    return props.rewards ? (\n        <div>\n            {props.onlyButton ? (\n                props.rewards.map((item, index) => (\n                    <RewardButton item={item} key={index} />\n                ))\n            ) : (\n                <Form.Item label={props.label} key={props.rewardKey}>\n                    {props.rewards.length > 0 && (\n                        <ol>\n                            {props.rewards.map((item, index) => {\n                                return (\n                                    <li key={index}>\n                                        <RewardButton item={item} />\n                                        <UserButton\n                                            id={item.owner}\n                                            noName={true}\n                                        />{' '}\n                                        in\n                                        {item.for && item.for.length > 0 ? (\n                                            <UserButton\n                                                id={item.for}\n                                                noName={true}\n                                            />\n                                        ) : (\n                                            <span\n                                                style={{\n                                                    fontWeight: 'bold',\n                                                    marginLeft: '5px',\n                                                }}\n                                            >\n                                                All\n                                            </span>\n                                        )}\n                                        {item.owner === account._id &&\n                                            !readOnly && (\n                                                <>\n                                                    <Dropdown\n                                                        overlay={\n                                                            <Menu>\n                                                                <Menu.Item\n                                                                    onClick={() => {\n                                                                        setEditedRewardIndex(\n                                                                            index\n                                                                        )\n                                                                        setEditedReward(\n                                                                            item\n                                                                        )\n                                                                    }}\n                                                                >\n                                                                    Edit\n                                                                </Menu.Item>\n\n                                                                <Menu.Item\n                                                                    onClick={() => {\n                                                                        if (\n                                                                            !window.confirm(\n                                                                                'Are you sure you want to delete this item?'\n                                                                            )\n                                                                        )\n                                                                            return\n                                                                        if (\n                                                                            props.setRewards\n                                                                        ) {\n                                                                            props.setRewards(\n                                                                                props.rewards.filter(\n                                                                                    (\n                                                                                        item,\n                                                                                        indexIn\n                                                                                    ) =>\n                                                                                        indexIn !==\n                                                                                        index\n                                                                                )\n                                                                            )\n                                                                        } else {\n                                                                            wsActions.deleteReward(\n                                                                                account._id,\n                                                                                progress._id,\n                                                                                item.rewardId\n                                                                            )\n                                                                        }\n                                                                    }}\n                                                                >\n                                                                    Delete\n                                                                </Menu.Item>\n                                                            </Menu>\n                                                        }\n                                                    >\n                                                        <Button type=\"link\">\n                                                            <MoreIcon />\n                                                        </Button>\n                                                    </Dropdown>\n                                                </>\n                                            )}\n                                    </li>\n                                )\n                            })}\n                        </ol>\n                    )}\n\n                    {!readOnly && (\n                        <Button\n                            type=\"link\"\n                            style={{ paddingLeft: 0 }}\n                            onClick={() => {\n                                setEditedRewardIndex('new')\n                                setEditedReward({ mode: 'simple' })\n                            }}\n                        >\n                            <PlusOutlined />\n                            Add rewards\n                        </Button>\n                    )}\n                </Form.Item>\n            )}\n            <Modal\n                visible={editedReward}\n                title={\n                    editedReward === 'new' ? 'Add new reward' : 'Edit reward'\n                }\n                closable={true}\n                destroyOnClose={true}\n                onCancel={() => setEditedReward()}\n                onOk={() => {\n                    let rewardToSave = {}\n                    if (editedReward.mode === 'money') {\n                        rewardToSave.money = editedReward.money\n                        rewardToSave.mode = editedReward.mode\n                        rewardToSave.for = editedReward.for\n                        rewardToSave.rewardId = editedReward.rewardId\n                    } else {\n                        rewardToSave = { ...editedReward, money: undefined }\n                    }\n                    rewardToSave.owner = account._id\n\n                    if (props.setRewards) {\n                        let newRewards = [...props.rewards]\n\n                        if (editedRewardIndex === 'new')\n                            newRewards = [...newRewards, rewardToSave]\n                        else\n                            newRewards = newRewards.map((item, index) => {\n                                if (index === editedRewardIndex)\n                                    return rewardToSave\n                                else return item\n                            })\n                        props.setRewards(newRewards)\n                        setEditedReward()\n                        setEditedRewardIndex()\n                    } else {\n                        wsActions.saveReward(\n                            account._id,\n                            progress._id,\n                            props.rewardKey,\n                            rewardToSave\n                        )\n                        setEditedReward()\n                        setEditedRewardIndex()\n                    }\n                }}\n                destroyOnClose={true}\n                okText=\"Save\"\n            >\n                {editedReward && (\n                    <>\n                        <Form.Item label=\"Reward type\">\n                            <Select\n                                placeholder=\"Type\"\n                                value={editedReward.mode}\n                                onSelect={value => {\n                                    setEditedReward({\n                                        ...editedReward,\n                                        mode: value,\n                                    })\n                                }}\n                                style={{ width: '100%' }}\n                                getPopupContainer={trigger =>\n                                    trigger.parentNode\n                                }\n                            >\n                                <Select.Option key=\"simple\" value=\"simple\">\n                                    Simple reward\n                                </Select.Option>\n                                <Select.Option key=\"item\" value=\"item\">\n                                    Item reward\n                                </Select.Option>\n                                <Select.Option key=\"money\" value=\"money\">\n                                    Money reward\n                                </Select.Option>\n                            </Select>\n                        </Form.Item>\n                        <Form.Item label=\"Reward for\">\n                            {connectionsSelect(\n                                account,\n                                friendData,\n                                editedReward.for,\n                                value => {\n                                    setEditedReward({\n                                        ...editedReward,\n                                        for: value,\n                                    })\n                                }\n                            )}\n                            <p>(leave blank for all)</p>\n                        </Form.Item>\n                        <Divider type=\"horizontal\" />\n                        {editedReward.mode === 'simple' ? (\n                            <Form.Item\n                                label=\"Description\"\n                                rules={[\n                                    ...descriptionRules,\n                                    {\n                                        required: true,\n                                        min: 1,\n                                        whitespace: true,\n                                        message:\n                                            'Desription is too short. Minimal length is 1.',\n                                    },\n                                ]}\n                            >\n                                <Input.TextArea\n                                    value={editedReward.simple}\n                                    onChange={({ target: { value } }) =>\n                                        setEditedReward({\n                                            ...editedReward,\n                                            simple: value,\n                                        })\n                                    }\n                                    placeholder=\"Explain how you will reward\"\n                                />\n                            </Form.Item>\n                        ) : editedReward.mode === 'money' ? (\n                            <Form.Item label=\"Amount\" rules={priceRules}>\n                                <InputNumber\n                                    value={editedReward.money}\n                                    onChange={value => {\n                                        setEditedReward({\n                                            ...editedReward,\n                                            money: value,\n                                        })\n                                    }}\n                                />\n                            </Form.Item>\n                        ) : (\n                            <>\n                                <Form.Item label=\"Images\">\n                                    <Upload\n                                        listType=\"picture-card\"\n                                        fileList={(\n                                            editedReward.itemImages || []\n                                        ).map((url, index) => ({\n                                            url,\n                                            uid: index,\n                                        }))}\n                                        onPreview={file => {\n                                            setPreviewImage(file.url)\n                                        }}\n                                        onChange={({ fileList }) => {\n                                            setEditedReward({\n                                                ...editedReward,\n                                                itemImages: fileList.map(\n                                                    image => image.url\n                                                ),\n                                            })\n                                        }}\n                                        customRequest={({ file }) => {\n                                            uploadFile(\n                                                file,\n                                                800,\n                                                undefined,\n                                                url => {\n                                                    setEditedReward({\n                                                        ...editedReward,\n                                                        itemImages: [\n                                                            ...(editedReward.itemImages ||\n                                                                []),\n                                                            url,\n                                                        ],\n                                                    })\n                                                }\n                                            )\n                                        }}\n                                    >\n                                        {(editedReward.itemImages || [])\n                                            .length >= 8 ? null : (\n                                            <div>\n                                                <PlusOutlined />\n                                                <div className=\"ant-upload-text\">\n                                                    Upload\n                                                </div>\n                                            </div>\n                                        )}\n                                    </Upload>\n                                </Form.Item>\n                                <Form.Item label=\"Name\" rules={nameRules}>\n                                    <Input\n                                        value={editedReward.itemName}\n                                        onChange={({ target: { value } }) =>\n                                            setEditedReward({\n                                                ...editedReward,\n                                                itemName: value,\n                                            })\n                                        }\n                                    />\n                                </Form.Item>\n                                <Form.Item\n                                    label=\"Description\"\n                                    rules={descriptionRules}\n                                >\n                                    <Input.TextArea\n                                        value={editedReward.itemDescription}\n                                        onChange={({ target: { value } }) =>\n                                            setEditedReward({\n                                                ...editedReward,\n                                                itemDescription: value,\n                                            })\n                                        }\n                                    />\n                                </Form.Item>\n                            </>\n                        )}\n                    </>\n                )}\n            </Modal>\n            <Modal\n                visible={previewImage}\n                footer={null}\n                onCancel={() => setPreviewImage('')}\n                destroyOnClose={true}\n            >\n                <img\n                    alt=\"example\"\n                    style={{ width: '100%' }}\n                    src={previewImage}\n                />\n            </Modal>\n            <Modal\n                visible={previewReward}\n                footer={null}\n                onCancel={() => setPreviewReward()}\n                title=\"Reward details\"\n                destroyOnClose={true}\n            >\n                {previewReward ? (\n                    <>\n                        {previewReward.itemImages &&\n                            previewReward.itemImages.map((image, index) => (\n                                <span\n                                    key={index}\n                                    onClick={() => setPreviewImage(image)}\n                                >\n                                    <Card\n                                        type=\"inner\"\n                                        style={{\n                                            width: 200,\n                                            display: 'inline-block',\n                                        }}\n                                        hoverable\n                                        cover={\n                                            <div\n                                                style={{\n                                                    backgroundImage:\n                                                        'url(' + image + ')',\n                                                    height: 200,\n                                                    width: 200,\n                                                    backgroundSize: 'cover',\n                                                }}\n                                            />\n                                        }\n                                    />\n                                </span>\n                            ))}\n\n                        <Descriptions\n                            title=\"Reward description\"\n                            bordered\n                            column={{\n                                xxl: 4,\n                                xl: 3,\n                                lg: 3,\n                                md: 3,\n                                sm: 2,\n                                xs: 1,\n                            }}\n                        >\n                            {previewReward.mode === 'item' && (\n                                <Descriptions.Item label=\"Name\">\n                                    {previewReward.itemName}\n                                </Descriptions.Item>\n                            )}\n                            {previewReward.mode === 'item' && (\n                                <Descriptions.Item label=\"Description\">\n                                    <p style={{ whiteSpace: 'pre-wrap' }}>\n                                        {previewReward.itemDescription}\n                                    </p>\n                                </Descriptions.Item>\n                            )}\n                            {previewReward.mode === 'simple' && (\n                                <Descriptions.Item label=\"Description\">\n                                    <p style={{ whiteSpace: 'pre-wrap' }}>\n                                        {previewReward.simple}\n                                    </p>\n                                </Descriptions.Item>\n                            )}\n                            {previewReward.mode === 'money' && (\n                                <Descriptions.Item label=\"Money\">\n                                    {previewReward.money}\n                                </Descriptions.Item>\n                            )}\n                        </Descriptions>\n                    </>\n                ) : null}\n            </Modal>\n        </div>\n    ) : null\n}\n\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        account: state.account,\n        friendData: state.friendData,\n        progress: state.progress,\n    }\n}\n\nexport default withRouter(connect(mapStateToProps)(Rewards))\n","import { webSocket } from '../containers/ConnectWebsocket/ConnectWebsocket'\n\nexport const changeStage = (value, accountId, progressId, stageId) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'changeStage',\n                value,\n                progressId,\n                accountId,\n                stageId,\n            })\n        )\n    }\n}\n\nexport const leaveProgress = data => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'leaveProgress',\n                progressId: data.progress._id,\n                accountId: data.account._id,\n            })\n        )\n    }\n}\n\nexport const createGroup = (accountId, progressId) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'createGroup',\n                progressId,\n                accountId,\n            })\n        )\n    }\n}\n\nexport const getFriendsData = (progress, accountFriends) => {\n    if (webSocket && webSocket.readyState === 1) {\n        if (progress) {\n            let accountIds = [\n                progress.owner,\n                progress.worker,\n                ...progress.goal.supporters,\n                ...progress.goal.experts,\n                ...accountFriends,\n            ]\n\n            accountIds = [...new Set(accountIds)]\n\n            webSocket.send(\n                JSON.stringify({\n                    messageCode: 'getFriendsData',\n                    accountIds,\n                })\n            )\n        }\n    }\n}\n\nexport const editGoalInProgress = (data, value) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'editGoalInProgress',\n                progressId: data.progress._id,\n                accountId: data.account._id,\n                value,\n            })\n        )\n    }\n}\n\nexport const startProgress = (accountId, value, inGroup) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'startProgress',\n                accountId,\n                value,\n                inGroup,\n            })\n        )\n    }\n}\n\nexport const deleteReward = (accountId, progressId, rewardId) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'deleteReward',\n                accountId,\n                progressId,\n                rewardId,\n            })\n        )\n    }\n}\n\nexport const saveReward = (accountId, progressId, rewardKey, reward) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'saveReward',\n                accountId,\n                progressId,\n                rewardKey,\n                reward,\n            })\n        )\n    }\n}\n\nexport const changeLikesProgress = (accountId, progressId, add) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'changeLikesProgress',\n                accountId,\n                progressId,\n                add,\n            })\n        )\n    }\n}\n","import React, { useState } from 'react'\nimport Modal from 'antd/es/modal'\n\nimport Button from 'antd/es/button'\nimport Input from 'antd/es/input'\nimport Form from 'antd/es/form'\nimport Upload from 'antd/es/upload'\nimport PlusOutlined from '@ant-design/icons/PlusOutlined'\n\nimport { uploadFile } from '../../utils/uploadFile'\nimport Rewards from '../Rewards/Rewards'\nimport { nameRules, descriptionRules } from '../../constants/fieldRules'\nimport connectionsSelect from './connectionsSelect'\nimport Select from 'antd/es/select'\n\nconst { Option } = Select\n\nconst EditGoalAndProgressForm = props => {\n    const { goal, account, friendData } = props\n\n    const [images, setImages] = useState(\n        (goal &&\n            goal.images.map((url, index) => ({\n                url,\n                uid: index,\n            }))) ||\n            []\n    )\n\n    const [previewImage, setPreviewImage] = useState('')\n\n    const [rewards, setRewards] = useState((goal && goal.rewards) || [])\n\n    const onFinish = value => {\n        props.onFinish({\n            ...value,\n            images: images.map(image => image.url),\n            rewards,\n        })\n    }\n\n    const layout = {\n        labelCol: { span: 8 },\n        wrapperCol: { span: 16 },\n    }\n\n    const [form] = Form.useForm()\n\n    const normFile = e => {\n        if (Array.isArray(e)) {\n            return e\n        }\n        return e && e.fileList.map(image => image.url)\n    }\n\n    const connections = connectionsSelect(account, friendData)\n\n    return !props.goalId || goal ? (\n        <>\n            <Form\n                form={form}\n                name=\"dynamic_form_nest_item\"\n                onFinish={onFinish}\n                autoComplete=\"off\"\n                initialValues={\n                    goal || {\n                        name: 'New achievement',\n                        repeat: 'no',\n                        days: ['0'],\n                    }\n                }\n                {...layout}\n                onValuesChange={(changedFields, allValues) =>\n                    allValues.days &&\n                    form.setFieldsValue({ days: allValues.days.sort() })\n                }\n            >\n                <Form.Item\n                    name=\"images\"\n                    label=\"Images\"\n                    valuePropName=\"images\"\n                    getValueFromEvent={normFile}\n                >\n                    <Upload\n                        listType=\"picture-card\"\n                        fileList={images.map((image, index) => ({\n                            ...image,\n                            uid: index,\n                        }))}\n                        onPreview={file => {\n                            setPreviewImage(file.url)\n                        }}\n                        onChange={({ fileList }) => setImages(fileList)}\n                        customRequest={({ file }) => {\n                            uploadFile(file, 800, undefined, url => {\n                                setImages(\n                                    [...images, { url }].map(\n                                        (image, index) => ({\n                                            ...image,\n                                            uid: index,\n                                        })\n                                    )\n                                )\n                            })\n                        }}\n                    >\n                        {images.length >= 8 ? null : (\n                            <div>\n                                <PlusOutlined />\n                                <div className=\"ant-upload-text\">Upload</div>\n                            </div>\n                        )}\n                    </Upload>\n                </Form.Item>\n                <Form.Item label=\"Name\" name=\"name\" rules={nameRules}>\n                    <Input />\n                </Form.Item>\n                <Form.Item\n                    label=\"Description\"\n                    name=\"description\"\n                    rules={descriptionRules}\n                >\n                    <Input.TextArea\n                        autoSize={{ minRows: 4, maxRows: 20 }}\n                        placeholder=\"Write a few words about why this goal is important and how to achieve it.\"\n                    />\n                </Form.Item>\n                <Form.Item label=\"Achievers\" name=\"users\">\n                    {connections}\n                </Form.Item>\n                <Form.Item label=\"Experts\" name=\"experts\">\n                    {connections}\n                </Form.Item>\n                <Form.Item label=\"Repeat\" name=\"repeat\">\n                    <Select>\n                        <Option value=\"no\">No repeat</Option>\n                        <Option value=\"day\">Every day</Option>\n                        <Option value=\"weekday\">Every day of week</Option>\n                        <Option value=\"week\">Every week</Option>\n                        <Option value=\"month\">Every month</Option>\n                        <Option value=\"year\">Every year</Option>\n                    </Select>\n                </Form.Item>\n                <Form.Item\n                    noStyle\n                    shouldUpdate={(prevValues, currentValues) =>\n                        prevValues.repeat !== currentValues.repeat\n                    }\n                >\n                    {({ getFieldValue }) => {\n                        return getFieldValue('repeat') === 'weekday' ? (\n                            <Form.Item label=\"Days of week\" name=\"days\">\n                                <Select mode=\"tags\">\n                                    <Option value=\"0\">Sunday</Option>\n                                    <Option value=\"1\">Monday</Option>\n                                    <Option value=\"2\">Tuesday</Option>\n                                    <Option value=\"3\">Wednesday</Option>\n                                    <Option value=\"4\">Thursday</Option>\n                                    <Option value=\"5\">Friday</Option>\n                                    <Option value=\"6\">Saturday</Option>\n                                </Select>\n                            </Form.Item>\n                        ) : null\n                    }}\n                </Form.Item>\n                <Rewards\n                    label=\"Rewards\"\n                    rewards={rewards}\n                    setRewards={setRewards}\n                />\n                <div style={{ textAlign: 'right', marginTop: '50px' }}>\n                    <Button\n                        type=\"text\"\n                        size=\"large\"\n                        onClick={() => props.cancel(false)}\n                    >\n                        Cancel\n                    </Button>\n                    <Button\n                        type=\"primary\"\n                        htmlType=\"submit\"\n                        size=\"large\"\n                        style={{\n                            borderRadius: '6px',\n                            padding: '0px 25px',\n                            marginLeft: '10px',\n                        }}\n                    >\n                        Save\n                    </Button>\n                </div>\n            </Form>\n            <Modal\n                visible={previewImage}\n                footer={null}\n                onCancel={() => setPreviewImage('')}\n                destroyOnClose={true}\n            >\n                <img\n                    alt=\"example\"\n                    style={{ width: '100%' }}\n                    src={previewImage}\n                />\n            </Modal>\n        </>\n    ) : null\n}\n\nexport default EditGoalAndProgressForm\n","import React from 'react'\nimport * as wsActions from '../../websocketActions'\n\nimport EditGoalAndProgressForm from '../../components/EditGoalAndProgressForm/EditGoalAndProgressForm'\n\nconst AddProgress = props =>\n    props.account._id ? (\n        <EditGoalAndProgressForm\n            onFinish={value => {\n                wsActions.startProgress(props.account._id, value, props.inGroup)\n                props.setStartProgressVisible(false)\n                document.body.removeAttribute('style')\n            }}\n            account={props.account}\n            friendData={props.friendData}\n            cancel={props.cancel}\n        />\n    ) : null\n\nexport default AddProgress\n","import React, { useState, useEffect } from 'react'\nimport { withRouter, Link } from 'react-router-dom'\n\nimport { connect } from 'react-redux'\nimport Menu from 'antd/es/menu'\nimport Avatar from 'antd/es/avatar'\nimport Drawer from 'antd/es/drawer'\nimport Button from 'antd/es/button'\nimport Badge from 'antd/es/badge'\nimport * as classes from './Layout.module.css'\nimport CoffeeOutlined from '@ant-design/icons/CoffeeOutlined'\nimport LogoutOutlined from '@ant-design/icons/LogoutOutlined'\nimport UserOutlined from '@ant-design/icons/UserOutlined'\nimport HeartFilled from '@ant-design/icons/HeartFilled'\nimport RocketFilled from '@ant-design/icons/RocketFilled'\nimport TeamOutlined from '@ant-design/icons/TeamOutlined'\nimport MenuOutlined from '@ant-design/icons/MenuOutlined'\nimport ShopFilled from '@ant-design/icons/ShopFilled'\nimport HomeFilled from '@ant-design/icons/HomeFilled'\nimport SettingFilled from '@ant-design/icons/SettingFilled'\nimport getAvatar from '../../utils/getAvatar'\nimport LoginModal from './LoginModal'\nimport Spin from 'antd/es/spin'\nimport BackTop from 'antd/es/back-top'\nimport LoadingOutlined from '@ant-design/icons/LoadingOutlined'\nimport UpOutlined from '@ant-design/icons/UpOutlined'\nimport { PlusOutlined } from '@ant-design/icons'\n\nimport Modal from 'antd/es/modal/Modal'\nimport AddProgress from '../../containers/Progresses/AddProgress'\n\nconst AccountLayout = props => {\n    const { account } = props\n    const [menuVisible, setMenuVisible] = useState()\n    const [lastScrollY, setLastScrollY] = useState(0)\n    const [headerVisible, setHeaderVisible] = useState(true)\n    const [loginVisible, setLoginVisible] = useState(false)\n    const [startProgressVisible, setStartProgressVisible] = useState(false)\n    const [pageAddress, setPageAddress] = useState(\n        props.history.location.pathname\n    )\n\n    useEffect(() => {\n        const handleScroll = () => {\n            const currentScrollY = window.scrollY\n            if (window.scrollY < 100) setHeaderVisible(true)\n            else {\n                if (currentScrollY > lastScrollY) {\n                    setHeaderVisible(false)\n                } else {\n                    setHeaderVisible(true)\n                }\n            }\n            setLastScrollY(currentScrollY)\n        }\n        window.removeEventListener('scroll', handleScroll)\n        window.addEventListener('scroll', handleScroll)\n        if (pageAddress !== props.history.location.pathname) {\n            window.scrollTo({\n                top: 0,\n                left: 0,\n                behavior: 'smooth',\n            })\n            setPageAddress(props.history.location.pathname)\n        }\n        return () => window.removeEventListener('scroll', handleScroll)\n    }, [lastScrollY, props.history.location.pathname])\n    const toggleMenu = () => {\n        setMenuVisible(!menuVisible)\n    }\n    const selectedKey =\n        props.history.location.pathname.split('/')[1] || undefined\n\n    const buttonProps = {\n        type: 'link',\n        // ghost: true,\n        size: 'large',\n\n        className: classes.Button,\n    }\n    const checkHighligh = url =>\n        selectedKey === url\n            ? {\n                  ghost: false,\n                  type: 'link',\n              }\n            : { type: 'text' }\n    const openLink = url => props.history.push('/' + url)\n\n    const isActivating = props.history.location.pathname === '/activate-account'\n\n    let numberOfUnseenNots = 0\n\n    for (let not of props.lastNotifications) {\n        if (parseInt(not.notId) > parseInt(account.lastSeenNot || 0))\n            numberOfUnseenNots++\n    }\n    const logedIn = props.isAuthed && account._id\n    const editGoal = (\n        <Modal\n            title=\"Add progress\"\n            visible={startProgressVisible}\n            maskClosable\n            closable\n            onCancel={() => setStartProgressVisible(false)}\n            width=\"100%\"\n            style={{ maxWidth: '1000px' }}\n            footer={null}\n            destroyOnClose={true}\n        >\n            <AddProgress\n                setStartProgressVisible={setStartProgressVisible}\n                account={account}\n                friendData={props.friendData}\n                cancel={() => setStartProgressVisible(false)}\n            />\n        </Modal>\n    )\n\n    return (\n        <>\n            <div className={classes.Layout}>\n                <header\n                    className={\n                        headerVisible\n                            ? classes.Header\n                            : [classes.Header, classes.HideHeader].join(' ')\n                    }\n                >\n                    <div className={classes.TopHeader}>\n                        <div className={classes.MenuButtonContiner}>\n                            <Link to=\"/\">\n                                <img\n                                    style={{ height: '30px' }}\n                                    src=\"/logo.jpg\"\n                                />\n                            </Link>\n                            {logedIn &&\n                                (!isActivating && (\n                                    <Button\n                                        {...buttonProps}\n                                        icon={\n                                            <MenuOutlined\n                                                style={{ fontSize: '20px' }}\n                                            />\n                                        }\n                                        style={{ width: '60px' }}\n                                        onClick={toggleMenu}\n                                        size=\"large\"\n                                    />\n                                ))}\n                        </div>\n                        <div className={classes.QuickButtonContiner}>\n                            {(logedIn || !props.isConnectingWS) && (\n                                <div className={classes.PageTitle}>\n                                    {isActivating ? (\n                                        'Activate your account'\n                                    ) : (\n                                        <>\n                                            <Button\n                                                type=\"default\"\n                                                icon={<PlusOutlined />}\n                                                shape=\"round\"\n                                                onClick={() => {\n                                                    account._id\n                                                        ? setStartProgressVisible(\n                                                              true\n                                                          )\n                                                        : setLoginVisible(true)\n                                                }}\n                                            >\n                                                Add inspiration\n                                            </Button>\n                                            {editGoal}\n                                        </>\n                                    )}\n                                </div>\n                            )}\n                            {logedIn ? (\n                                !isActivating ? (\n                                    <span\n                                        onClick={() => openLink('account')}\n                                        style={{\n                                            margin: '0px 10px',\n                                            cursor: 'pointer',\n                                        }}\n                                    >\n                                        <Avatar\n                                            style={{\n                                                border: '1px solid white',\n                                            }}\n                                            src={getAvatar(\n                                                account._id,\n                                                account.image\n                                            )}\n                                        />\n                                    </span>\n                                ) : (\n                                    <Button\n                                        {...buttonProps}\n                                        {...checkHighligh('friends')}\n                                        icon={<LogoutOutlined />}\n                                        onClick={() =>\n                                            props.history.push('/logout')\n                                        }\n                                    >\n                                        Logout\n                                    </Button>\n                                )\n                            ) : props.isConnectingWS ? (\n                                <>\n                                    <span style={{ marginRight: '30px' }}>\n                                        <Spin\n                                            indicator={\n                                                <LoadingOutlined\n                                                    style={{\n                                                        color: 'white',\n                                                        marginRight: '10px',\n                                                    }}\n                                                />\n                                            }\n                                        />{' '}\n                                        Trying to login\n                                    </span>\n                                    <Button\n                                        {...buttonProps}\n                                        {...checkHighligh('friends')}\n                                        icon={<LogoutOutlined />}\n                                        onClick={() =>\n                                            props.history.push('/logout')\n                                        }\n                                    >\n                                        Logout\n                                    </Button>\n                                </>\n                            ) : (\n                                <Button\n                                    {...buttonProps}\n                                    {...checkHighligh('friends')}\n                                    icon={<LogoutOutlined />}\n                                    onClick={() => setLoginVisible(true)}\n                                >\n                                    Sign in or Sign up\n                                </Button>\n                            )}\n                        </div>\n                    </div>\n                </header>\n                <main className={classes.Main}>{props.children}</main>\n                {!isActivating && logedIn && (\n                    <footer className={classes.Footer}>\n                        <Button\n                            {...buttonProps}\n                            {...checkHighligh('dashboard')}\n                            onClick={() => openLink('dashboard')}\n                        >\n                            <Badge count={numberOfUnseenNots}>\n                                <HomeFilled />{' '}\n                                <div className={classes.FooterButton}>\n                                    Dashboard\n                                </div>\n                            </Badge>\n                        </Button>\n\n                        <Button\n                            {...buttonProps}\n                            {...checkHighligh('inspirations')}\n                            onClick={() => openLink('inspirations')}\n                        >\n                            <Badge count={0}>\n                                <RocketFilled />\n                                <div className={classes.FooterButton}>\n                                    Inspirations\n                                </div>\n                            </Badge>\n                        </Button>\n\n                        <Button\n                            {...buttonProps}\n                            {...checkHighligh('shop')}\n                            onClick={() => openLink('shop')}\n                        >\n                            <Badge count={0}>\n                                <ShopFilled />\n                                <div className={classes.FooterButton}>Shop</div>\n                            </Badge>\n                        </Button>\n\n                        <Button\n                            {...buttonProps}\n                            {...checkHighligh('friends')}\n                            onClick={() => openLink('friends')}\n                        >\n                            <Badge\n                                count={\n                                    account.friends.filter(\n                                        item => item.status === 'inviting'\n                                    ).length\n                                }\n                            >\n                                <TeamOutlined />\n                                <div className={classes.FooterButton}>\n                                    Friends\n                                </div>\n                            </Badge>\n                        </Button>\n                    </footer>\n                )}\n                {!isActivating && logedIn && (\n                    <Drawer\n                        closable={true}\n                        onClose={toggleMenu}\n                        visible={menuVisible}\n                        placement=\"left\"\n                        title={\n                            <Link to=\"/\">\n                                <img\n                                    style={{ width: '77px' }}\n                                    src=\"/addspire-logo.jpg\"\n                                />\n                            </Link>\n                        }\n                    >\n                        <Menu\n                            theme=\"light\"\n                            mode=\"vertical\"\n                            selectedKeys={[selectedKey || 'main']}\n                            onClick={({ key }) => {\n                                props.history.push('/' + key)\n                                toggleMenu()\n                            }}\n                            overflowedIndicator={<MenuOutlined />}\n                        >\n                            <Menu.Item key=\"main\" icon={<CoffeeOutlined />}>\n                                Explore\n                            </Menu.Item>\n                            <Menu.Item key=\"dashboard\" icon={<HomeFilled />}>\n                                Dashboard\n                            </Menu.Item>\n                            <Menu.Item\n                                key=\"inspirations\"\n                                icon={<RocketFilled />}\n                            >\n                                Inspirations\n                            </Menu.Item>\n                            <Menu.Item key=\"shop\" icon={<ShopFilled />}>\n                                Shop\n                            </Menu.Item>\n                            <Menu.Item key=\"friends\" icon={<TeamOutlined />}>\n                                Friends\n                            </Menu.Item>\n                            {/* <Menu.Item key=\"goals\" icon={<AimOutlined />}>\n                                Goals\n                            </Menu.Item> */}\n                            <Menu.Item key=\"wishlist\" icon={<HeartFilled />}>\n                                Wishlist\n                            </Menu.Item>\n                            <Menu.Item key=\"account\" icon={<UserOutlined />}>\n                                Account\n                            </Menu.Item>\n                            <Menu.Item key=\"settings\" icon={<SettingFilled />}>\n                                Settings\n                            </Menu.Item>\n                            <Menu.Item key=\"logout\" icon={<LogoutOutlined />}>\n                                Logout\n                            </Menu.Item>\n                        </Menu>\n                    </Drawer>\n                )}\n            </div>\n            <LoginModal\n                loginVisible={loginVisible}\n                setLoginVisible={setLoginVisible}\n            />\n            <BackTop>\n                <div\n                    style={{\n                        height: 40,\n                        width: 40,\n                        lineHeight: '40px',\n                        borderRadius: '100%',\n                        backgroundColor: '#1088e9',\n                        color: '#fff',\n                        textAlign: 'center',\n                        fontSize: 14,\n                    }}\n                >\n                    <UpOutlined />\n                </div>\n            </BackTop>\n        </>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n        pageTitle: state.pageTitle,\n        isAuthed: state.isAuthed,\n        lastNotifications: state.lastNotifications,\n        isConnectingWS: state.isConnectingWS,\n        friendData: state.friendData,\n    }\n}\n\nexport default withRouter(connect(mapStateToProps)(AccountLayout))\n","import React, { useState } from 'react'\nimport Modal from 'antd/es/modal'\n\nimport Button from 'antd/es/button'\nimport Input from 'antd/es/input'\nimport InputNumber from 'antd/es/input-number'\nimport Form from 'antd/es/form'\nimport Select from 'antd/es/select'\nimport Upload from 'antd/es/upload'\nimport PlusOutlined from '@ant-design/icons/PlusOutlined'\n\nimport Avatar from 'antd/es/avatar'\nimport Popconfirm from 'antd/es/popconfirm'\nimport {\n    nameRules,\n    descriptionRules,\n    priceRules,\n} from '../../constants/fieldRules'\nimport getAvatar from '../../utils/getAvatar'\n\nconst AddPerkForm = props => {\n    const [previewImage, setPreviewImage] = useState('')\n    const {\n        connections,\n        perkId,\n        perk,\n        deletePerk,\n        onFinish,\n        images,\n        setImages,\n        uploadImage,\n    } = props\n\n    const layout = {\n        labelCol: { span: 8 },\n        wrapperCol: { span: 16 },\n    }\n    const tailLayout = {\n        wrapperCol: { offset: 8, span: 16 },\n    }\n\n    const connectionsSelect = (\n        <Select\n            mode=\"multiple\"\n            style={{ width: '100%' }}\n            placeholder=\"Please select\"\n            getPopupContainer={trigger => trigger.parentNode}\n        >\n            {connections.map(item => (\n                <Select.Option key={item._id}>\n                    <Avatar\n                        src={getAvatar(item._id, item.image)}\n                        size={20}\n                        style={{ marginRight: '10px' }}\n                    />\n                    {item.name} - ({item._id})\n                </Select.Option>\n            ))}\n        </Select>\n    )\n    const [form] = Form.useForm()\n\n    const normFile = e => {\n        if (Array.isArray(e)) {\n            return e\n        }\n        return e && e.fileList.map(image => image.url)\n    }\n\n    return !props.perkId || perk ? (\n        <>\n            <Form\n                form={form}\n                name=\"dynamic_form_nest_item\"\n                onFinish={onFinish}\n                autoComplete=\"off\"\n                initialValues={perk || {}}\n                {...layout}\n            >\n                <Form.Item\n                    name=\"images\"\n                    label=\"Images\"\n                    valuePropName=\"images\"\n                    getValueFromEvent={normFile}\n                >\n                    <Upload\n                        listType=\"picture-card\"\n                        fileList={images.map((image, index) => ({\n                            ...image,\n                            uid: index,\n                        }))}\n                        onPreview={file => {\n                            setPreviewImage(file.url)\n                        }}\n                        onChange={({ fileList }) => setImages(fileList)}\n                        customRequest={({ file }) => {\n                            uploadImage(file)\n                        }}\n                    >\n                        {images.length >= 8 ? null : (\n                            <div>\n                                <PlusOutlined />\n                                <div className=\"ant-upload-text\">Upload</div>\n                            </div>\n                        )}\n                    </Upload>\n                </Form.Item>\n                <Form.Item label=\"Name\" name=\"name\" rules={nameRules}>\n                    <Input placeholder=\"New item\" />\n                </Form.Item>\n                <Form.Item\n                    label=\"Description\"\n                    name=\"description\"\n                    rules={descriptionRules}\n                >\n                    <Input.TextArea placeholder=\"Write a few words about this item.\" />\n                </Form.Item>\n\n                {props.mode === 'shop' && (\n                    <Form.Item label=\"Available for\" name=\"users\">\n                        {connectionsSelect}\n                    </Form.Item>\n                )}\n\n                {props.mode === 'shop' && (\n                    <Form.Item label=\"Price\" name=\"price\" rules={priceRules}>\n                        <InputNumber />\n                    </Form.Item>\n                )}\n\n                <Form.Item {...tailLayout}>\n                    <Button type=\"primary\" htmlType=\"submit\" size=\"large\">\n                        Save\n                    </Button>\n\n                    {perkId && (\n                        <Popconfirm\n                            title=\"Are you sure you want to delete this item?\"\n                            onConfirm={deletePerk}\n                            onCancel={() => {}}\n                            okText=\"Confirm\"\n                            cancelText=\"Cancel\"\n                        >\n                            <Button type=\"link\" danger size=\"large\">\n                                Delete\n                            </Button>\n                        </Popconfirm>\n                    )}\n                </Form.Item>\n            </Form>\n            <Modal\n                visible={previewImage}\n                footer={null}\n                onCancel={() => setPreviewImage('')}\n            >\n                <img\n                    alt=\"example\"\n                    style={{ width: '100%' }}\n                    src={previewImage}\n                />\n            </Modal>\n        </>\n    ) : null\n}\n\nexport default AddPerkForm\n","import React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { uploadFile } from '../../utils/uploadFile'\nimport AddPerkForm from './AddPerkForm'\nimport { withRouter } from 'react-router-dom'\nimport * as wsActions from '../../websocketActions'\n\nconst AddPerk = props => {\n    const [perk, setPerk] = useState()\n    const [images, setImages] = useState([])\n    const { account, mode } = props\n    const perkId = props.perkId || ''\n    useEffect(() => {\n        if (perkId) {\n            const perk =\n                mode === 'wishlist'\n                    ? account.wishlist.find(item => item.itemId === perkId)\n                    : mode === 'goals'\n                    ? account.goals.find(item => item.goalId === perkId)\n                    : account.perks.find(item => item.perkId === perkId)\n            if (perk) {\n                setPerk(perk)\n                setImages(\n                    perk.images.map((url, index) => ({\n                        url,\n                        uid: index,\n                    }))\n                )\n            }\n        }\n    }, [])\n\n    const connections = [\n        account,\n        ...account.friends\n            .filter(friend => friend.status === 'friend')\n            .map(friend => props.friendData[friend.friend]),\n    ]\n\n    const uploadImage = file => {\n        uploadFile(file, 800, undefined, url => {\n            setImages(\n                [...images, { url }].map((image, index) => ({\n                    ...image,\n                    uid: index,\n                }))\n            )\n        })\n    }\n\n    return !props.perkId || perk ? (\n        <AddPerkForm\n            connections={connections}\n            perkId={perkId}\n            perk={perk}\n            deletePerk={() => {\n                wsActions.deletePerk(account._id, perkId, mode)\n                props.setEditPerkOpen(false)\n            }}\n            onFinish={value => {\n                const processedValue = {\n                    ...value,\n                    images: images.map(image => image.url),\n                }\n                wsActions.savePerk(account._id, perkId, processedValue, mode)\n                props.setEditPerkOpen(false)\n            }}\n            images={images}\n            setImages={setImages}\n            uploadImage={uploadImage}\n            mode={props.mode}\n        />\n    ) : null\n}\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n        friendData: state.friendData,\n    }\n}\nexport default withRouter(connect(mapStateToProps)(AddPerk))\n","import React from 'react'\nimport { Link, withRouter } from 'react-router-dom'\n\nexport default withRouter(props => {\n    const Card = (\n        <>\n            {props.images && props.images.length > 0 && (\n                <img\n                    style={{\n                        maxWidth: '100%',\n                        margin: 'auto',\n                        display: 'block',\n                        borderRadius: '15px',\n                    }}\n                    src={props.images.length > 0 ? props.images[0] : ''}\n                />\n            )}\n            <div style={{ padding: '5px 0px', wordBreak: 'break-word' }}>\n                {props.actions && (\n                    <div style={{ float: 'right' }}>{props.actions}</div>\n                )}\n                <span style={{ float: 'none' }}>{props.body}</span>\n            </div>\n        </>\n    )\n    return props.noLink ? (\n        Card\n    ) : (\n        <Link to={props.onClickLink} style={{ cursor: 'pointer' }}>\n            {Card}\n        </Link>\n    )\n})\n","import React from 'react'\nimport { withRouter } from 'react-router-dom'\n\nimport * as wsActions from '../../websocketActions'\nimport Dropdown from 'antd/es/dropdown'\nimport Menu from 'antd/es/menu'\nimport Button from 'antd/es/button'\nimport MasonryCard from '../../components/MasonryCard'\nimport EditFilled from '@ant-design/icons/EditFilled'\nimport Card from 'antd/es/card'\nimport MoreIcon from '../../components/UI/MoreIcon'\n\nconst PerkCard = props => {\n    const {\n        perk,\n        perkId,\n        owner,\n        account,\n        setEditedPerk,\n        setEditPerkOpen,\n        mode,\n    } = props\n\n    return (\n        <MasonryCard\n            onClickLink={`/${mode || 'shop'}/${owner._id}/${perkId}`}\n            images={perk.images}\n            actions={\n                <span onClick={e => e.stopPropagation()}>\n                    {owner._id === account._id &&\n                    !props.onlyBuy &&\n                    props.mode === 'shop' ? (\n                        <Dropdown.Button\n                            type=\"primary\"\n                            key=\"1\"\n                            onClick={() =>\n                                wsActions.buyPerk(\n                                    account._id,\n                                    owner._id,\n                                    perkId\n                                )\n                            }\n                            overlay={\n                                <Menu>\n                                    <Menu.Item\n                                        key=\"0\"\n                                        onClick={() => {\n                                            setEditedPerk(perkId)\n                                            setEditPerkOpen(true)\n                                        }}\n                                    >\n                                        Edit\n                                    </Menu.Item>\n                                </Menu>\n                            }\n                        >\n                            Buy\n                        </Dropdown.Button>\n                    ) : props.mode === 'shop' ? (\n                        <Button\n                            type=\"primary\"\n                            onClick={() =>\n                                wsActions.buyPerk(\n                                    account._id,\n                                    owner._id,\n                                    perkId\n                                )\n                            }\n                        >\n                            Buy\n                        </Button>\n                    ) : owner._id === account._id && !props.onlyBuy ? (\n                        <Dropdown\n                            trigger={['click', 'hover']}\n                            overlay={\n                                <Menu>\n                                    <Menu.Item\n                                        key=\"0\"\n                                        onClick={() => {\n                                            setEditedPerk(perkId)\n                                            setEditPerkOpen(true)\n                                        }}\n                                    >\n                                        Edit\n                                    </Menu.Item>\n                                </Menu>\n                            }\n                        >\n                            <Button type=\"link\">\n                                <MoreIcon />\n                            </Button>\n                        </Dropdown>\n                    ) : null}\n                </span>\n            }\n            body={\n                <span style={{ fontWeight: 'bold' }}>\n                    {perk.name}\n                    {mode === 'shop' && ` ($${perk.price})`}\n                </span>\n            }\n        />\n    )\n}\n\nexport default withRouter(PerkCard)\n","import React from 'react'\nimport Button from 'antd/es/button'\nimport { PlusOutlined } from '@ant-design/icons'\n\nconst AddCard = props => (\n    <Button\n        onClick={props.action}\n        type=\"primary\"\n        shape=\"round\"\n        icon={<PlusOutlined />}\n        size=\"large\"\n    >\n        {props.title}\n    </Button>\n)\n\nexport default AddCard\n","export const friendsBreakPoints = {\n    default: 4,\n    1600: 3,\n    1100: 2,\n    600: 1,\n}\n\nexport const cardBreakPoints = {\n    default: 4,\n    1100: 3,\n    700: 2,\n    310: 1,\n}\n","import React from 'react'\nimport Masonry from 'react-masonry-css'\nimport {\n    cardBreakPoints,\n    friendsBreakPoints,\n} from '../utils/masonryBreakPoints'\n\nexport default props => (\n    <div style={{ marginTop: '40px', ...props.style }}>\n        <Masonry\n            breakpointCols={3}\n            className=\"my-masonry-grid\"\n            columnClassName=\"my-masonry-grid_column\"\n            breakpointCols={\n                props.friends ? friendsBreakPoints : cardBreakPoints\n            }\n        >\n            {props.children}\n        </Masonry>\n    </div>\n)\n","import React, { useState } from 'react'\nimport Modal from 'antd/es/modal'\nimport Button from 'antd/es/button'\nimport AddPerk from './AddPerk'\nimport PerkCard from './PerkCard'\nimport AddCard from '../../components/AddCard/AddCard'\nimport { cardBreakPoints } from '../../utils/masonryBreakPoints'\nimport Masonry from 'react-masonry-css'\nimport MasonryGrid from '../../components/MasonryGrid'\nimport MasonryCard from '../../components/MasonryCard'\n\nconst WishlistAndPerks = props => {\n    const [editedPerk, setEditedPerk] = useState('')\n    const [editPerkOpen, setEditPerkOpen] = useState()\n\n    const { account } = props\n\n    const editPerk = (\n        <Modal\n            title=\"Add item\"\n            visible={editPerkOpen}\n            maskClosable\n            closable\n            onCancel={() => setEditPerkOpen(false)}\n            width=\"90%\"\n            footer={\n                <Button key=\"back\" onClick={() => setEditPerkOpen(false)}>\n                    Close\n                </Button>\n            }\n            destroyOnClose={true}\n        >\n            <AddPerk\n                setEditPerkOpen={setEditPerkOpen}\n                perkId={editedPerk}\n                mode={props.mode}\n            />\n        </Modal>\n    )\n\n    return account._id ? (\n        <>\n            <AddCard\n                action={() => {\n                    setEditedPerk('')\n                    setEditPerkOpen(true)\n                }}\n                title=\"Add item\"\n                sub={props.mode === 'shop' && 'Set price'}\n            />\n            <MasonryGrid>\n                {account[props.listKey || props.mode] &&\n                    account[props.listKey || props.mode].map((perk, index) => (\n                        <PerkCard\n                            key={index}\n                            perk={perk}\n                            perkId={\n                                props.mode === 'wishlist' ||\n                                props.mode === 'goals'\n                                    ? perk.itemId\n                                    : perk.perkId\n                            }\n                            owner={account}\n                            account={account}\n                            setEditedPerk={setEditedPerk}\n                            setEditPerkOpen={setEditPerkOpen}\n                            mode={props.mode}\n                            style={{ cursor: 'pointer' }}\n                        />\n                    ))}\n            </MasonryGrid>\n\n            {editPerk}\n        </>\n    ) : null\n}\n\nexport default WishlistAndPerks\n","import React, { useEffect } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport WishlistAndPerks from '../Shop/WishlistAndPerks'\n\nconst Goals = props => {\n    useEffect(() => {\n        props.setPageTitle({ main: 'Goals', sub: '' })\n    }, [])\n\n    return props.account._id ? (\n        <WishlistAndPerks mode=\"goals\" account={props.account} />\n    ) : (\n        <span />\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Goals)\n)\n","import axios from 'axios'\nimport processRes from './processRes'\nexport default (props, data, setData, options, callback) => {\n    // if (typeof props.isAuthed === 'undefined') return\n    // options = {\n    //     forceAuth: true,\n    //     forceActivate: true,\n    //     pullData: true,\n    //     ...(options || {}),\n    // }\n\n    // if (!props.isAuthed) {\n    //     props.tryAuth(props, options.forceAuth)\n    // }\n\n    // if (options.pullData) {\n    axios\n        .get('/api' + props.history.location.pathname)\n        .then(res => {\n            processRes(res, props)\n            // if (options.forceActivate) {\n            //     if (props.isAuthed && res.data.status === 'no account') {\n            //         props.history.push('/activate-account')\n            //     }\n            // }\n\n            setData(res.data)\n            callback(res.data)\n        })\n        .catch(err => {})\n    // }\n}\n","import React, { useState, useEffect } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport Button from 'antd/es/button'\nimport Comment from 'antd/es/comment'\nimport Avatar from 'antd/es/avatar'\nimport Input from 'antd/es/input'\nimport Form from 'antd/es/form'\nimport Upload from 'antd/es/upload'\nimport PictureFilled from '@ant-design/icons/PictureFilled'\nimport LoadingOutlined from '@ant-design/icons/LoadingOutlined'\nimport CloseCircleFilled from '@ant-design/icons/CloseCircleFilled'\nimport SendOutlined from '@ant-design/icons/SendOutlined'\nimport { uploadFile } from '../../utils/uploadFile'\nimport * as wsActions from '../../websocketActions'\nimport getAvatar from '../../utils/getAvatar'\nimport { messageRules } from '../../constants/fieldRules'\nimport { PlusOutlined } from '@ant-design/icons'\nimport message from 'antd/es/message'\nimport Modal from 'antd/es/modal/Modal'\n\nconst AddMessage = props => {\n    const [previewImage, setPreviewImage] = useState('')\n    const [imageLoading, setImageLoading] = useState(false)\n    const [images, setImages] = useState(props.images || [])\n    const { post, account } = props\n\n    const [messageText, setMessageText] = useState(\n        props.content ||\n            (props.replyToUser ? '@' + props.replyToUser + ' ' : '')\n    )\n\n    useEffect(() => {\n        setMessageText(\n            props.content ||\n                (props.replyToUser ? '@' + props.replyToUser + ' ' : '')\n        )\n    }, [props.replyToUser, props.content])\n\n    const uploadImage = file => {\n        uploadFile(file, 800, undefined, url => {\n            setImages([...images, url])\n        })\n    }\n\n    return post && account._id ? (\n        <div\n            style={{\n                background: '#fff',\n\n                ...(props.replyTo\n                    ? {}\n                    : {\n                          width: '100%',\n                          bottom: '-200px',\n                          left: '0px',\n                          //   position: 'absolute',\n                      }),\n            }}\n        >\n            <Comment\n                avatar={<Avatar src={getAvatar(account._id, account.image)} />}\n                content={\n                    <>\n                        <Form.Item rules={messageRules} style={{ margin: 0 }}>\n                            <Input.TextArea\n                                autoSize={{\n                                    minRows: 1,\n                                    maxRows: 3,\n                                }}\n                                rows={1}\n                                onChange={e => setMessageText(e.target.value)}\n                                value={messageText}\n                                placeholder=\"Write a comment\"\n                            />\n                        </Form.Item>\n                        {images.length > 0 && (\n                            <Form.Item style={{ margin: 0 }}>\n                                <Upload\n                                    listType=\"picture-card\"\n                                    fileList={images.map((image, index) => ({\n                                        url: image,\n                                        uid: index,\n                                    }))}\n                                    onPreview={file => {\n                                        setPreviewImage(file.url)\n                                    }}\n                                    onChange={({ fileList }) =>\n                                        setImages(\n                                            fileList.map(image => image.url)\n                                        )\n                                    }\n                                    customRequest={({ file }) => {\n                                        uploadImage(file)\n                                    }}\n                                >\n                                    {images.length >= 8 ? null : (\n                                        <div>\n                                            <PlusOutlined />\n                                            <div className=\"ant-upload-text\">\n                                                Upload\n                                            </div>\n                                        </div>\n                                    )}\n                                </Upload>\n                            </Form.Item>\n                        )}\n                        <Form.Item style={{ margin: 0 }}>\n                            <Button\n                                htmlType=\"submit\"\n                                onClick={() => {\n                                    wsActions.sendMessage(\n                                        account._id,\n                                        post._id,\n                                        messageText,\n                                        images,\n                                        props.replyTo,\n                                        props.editingMessage\n                                    )\n                                    setMessageText('')\n                                    setImages([])\n                                    if (props.onSend) props.onSend()\n                                }}\n                                icon={<SendOutlined />}\n                                type=\"text\"\n                            >\n                                Send\n                            </Button>\n                            <Upload\n                                showUploadList={false}\n                                customRequest={({ file }) => {\n                                    if (images.length > 8) {\n                                        message.warning(\n                                            'You can not attach more than 8 images.'\n                                        )\n                                        return\n                                    }\n                                    setImageLoading(true)\n                                    uploadFile(file, 800, undefined, url => {\n                                        setImageLoading(false)\n                                        setImages([...images, url])\n                                    })\n                                }}\n                            >\n                                <Button\n                                    type=\"text\"\n                                    icon={\n                                        imageLoading ? (\n                                            <LoadingOutlined />\n                                        ) : (\n                                            <PictureFilled />\n                                        )\n                                    }\n                                >\n                                    Image\n                                </Button>\n                            </Upload>\n                            {props.cancel && (\n                                <Button\n                                    onClick={props.cancel}\n                                    icon={<CloseCircleFilled />}\n                                    type=\"text\"\n                                >\n                                    Cancel\n                                </Button>\n                            )}\n                        </Form.Item>\n                    </>\n                }\n            />\n            <Modal\n                visible={previewImage}\n                footer={null}\n                onCancel={() => setPreviewImage('')}\n            >\n                <img\n                    alt=\"example\"\n                    style={{ width: '100%' }}\n                    src={previewImage}\n                />\n            </Modal>\n        </div>\n    ) : null\n}\n\nexport default withRouter(AddMessage)\n","import React, { useState } from 'react'\nimport Carousel from 'antd/es/carousel'\nimport classes from './imageCarousel.module.css'\nimport Modal from 'antd/es/modal/Modal'\n\nconst ImageCarousel = props => {\n    const [previewImage, setPreviewImage] = useState(false)\n\n    return props.images && props.images.length > 0 ? (\n        <>\n            <Carousel\n                style={{ width: props.size || 'auto' }}\n                dots={{ className: classes.Dots }}\n            >\n                {props.images.map(\n                    (image, index) =>\n                        image && (\n                            <div\n                                key={index}\n                                onClick={() => setPreviewImage(image)}\n                            >\n                                <div\n                                    style={{\n                                        backgroundImage: 'url(\"' + image + '\")',\n                                        backgroundSize: props.type || 'contain',\n                                        backgroundPosition: 'center',\n                                        width: props.size || '100%',\n                                        height:\n                                            props.height ||\n                                            props.size ||\n                                            '300px',\n                                        backgroundRepeat: 'no-repeat',\n                                    }}\n                                />\n                            </div>\n                        )\n                )}\n            </Carousel>\n            <Modal\n                visible={previewImage}\n                footer={null}\n                onCancel={() => setPreviewImage('')}\n            >\n                <img\n                    alt=\"example\"\n                    style={{ width: '100%' }}\n                    src={previewImage}\n                />\n            </Modal>\n        </>\n    ) : null\n}\n\nexport default ImageCarousel\n","import React, { useState } from 'react'\nimport { withRouter } from 'react-router-dom'\n\nimport Comment from 'antd/es/comment'\n\nimport Tooltip from 'antd/es/tooltip'\nimport Avatar from 'antd/es/avatar'\nimport TimeAgo from 'timeago-react'\n\nimport * as wsActions from '../../websocketActions'\nimport LikeFilled from '@ant-design/icons/LikeFilled'\nimport LikeOutlined from '@ant-design/icons/LikeOutlined'\nimport AddMessage from './AddMessage'\nimport getAvatar from '../../utils/getAvatar'\nimport Button from 'antd/es/button'\nimport ImageCarousel from '../UI/ImageCarousel/ImageCarousel'\nimport UserButton from '../UserButton/UserButton'\n\nconst Message = props => {\n    const {\n        account,\n        state,\n        setState,\n        message,\n        friendData,\n        progressData,\n        groupData,\n        post,\n        replies,\n        isStart,\n    } = props\n    const [replyVisible, setReplyVisible] = useState(false)\n    const [replyToUser, setReplyToUser] = useState('')\n    const [editingMessage, setEditingMessage] = useState('')\n    const [showReplies, setShowReplies] = useState(false)\n    const commentProps = {\n        actions: !props.isStart && [\n            <span>\n                <TimeAgo datetime={message.date} live />\n            </span>,\n            <span key=\"comment-basic-like\">\n                <Tooltip title=\"Like\">\n                    {message.likes.includes(account._id) ? (\n                        <LikeFilled\n                            onClick={() =>\n                                wsActions.changeLikesMessage(\n                                    'dislikeMessage',\n                                    message.messageId,\n                                    account._id,\n                                    post._id\n                                )\n                            }\n                        />\n                    ) : (\n                        <LikeOutlined\n                            onClick={() =>\n                                wsActions.changeLikesMessage(\n                                    'likeMessage',\n                                    message.messageId,\n                                    account._id,\n                                    post._id\n                                )\n                            }\n                        />\n                    )}\n                </Tooltip>\n                <span style={{ paddingLeft: '8px' }}>\n                    {message.likes.length}\n                </span>\n            </span>,\n\n            message.author !== account._id && (\n                <span\n                    key=\"comment-basic-reply-to\"\n                    onClick={() => {\n                        if (props.setReplyVisible) {\n                            props.setReplyVisible(true)\n                            props.setReplyToUser(props.message.author)\n                        } else {\n                            setReplyVisible(true)\n                            setReplyToUser('')\n                        }\n                        setShowReplies(true)\n                    }}\n                >\n                    Reply\n                </span>\n            ),\n            message.author === account._id && (\n                <span\n                    key=\"comment-basic-reply-to\"\n                    onClick={() => setEditingMessage(message.messageId)}\n                >\n                    Edit\n                </span>\n            ),\n        ],\n        avatar: <UserButton noName={true} id={message.author} span={true} />,\n        content: isStart ? (\n            <>\n                {message.messageType === 'wishlist' && (\n                    <>\n                        {' '}\n                        <span\n                            style={{\n                                fontWeight: 'bold',\n                                cursor: 'pointer',\n                                margin: '10px 0px 0px ',\n                            }}\n                            onClick={() =>\n                                props.history.push(\n                                    `/wishlist/${message.details.owner}/${\n                                        message.details.itemId\n                                    }`\n                                )\n                            }\n                        >\n                            {message.details.name}\n                        </span>\n                    </>\n                )}\n                {message.text && <p>{message.text}</p>}\n            </>\n        ) : (\n            <>\n                <div\n                    style={{\n                        background: '#eee',\n                        borderRadius: '5px',\n                        padding: '3px 10px',\n                        display:\n                            message.image && message.image.length > 0\n                                ? 'block'\n                                : 'inline-block',\n                    }}\n                >\n                    <UserButton\n                        id={message.author}\n                        span={true}\n                        noAva={true}\n                        style={{ fontWeight: 'bold' }}\n                    />\n\n                    {message.image && message.image.length > 0 && (\n                        <ImageCarousel\n                            images={message.image}\n                            height=\"60vmin\"\n                            type=\"contain\"\n                        />\n                    )}\n\n                    {message.text && <p>{message.text}</p>}\n                </div>\n                <div />\n            </>\n        ),\n        author: isStart && (\n            <span\n                style={{ color: '#333', fontWeight: 'bold', fontSize: '14px' }}\n            >\n                <UserButton id={message.author} span={true} noAva={true} />{' '}\n                <span style={{ fontWeight: 'normal' }}>in</span>{' '}\n                {post.parent &&\n                    progressData &&\n                    progressData[post.parent.parentId] && (\n                        <span\n                            style={{ cursor: 'pointer' }}\n                            onClick={() =>\n                                props.history.push(\n                                    '/inspirations/' + post.parent.parentId\n                                )\n                            }\n                        >\n                            {progressData[post.parent.parentId].goal.name}\n                        </span>\n                    )}\n                {post.startMessage &&\n                    ['wishlist', 'perk', 'goal'].includes(\n                        post.startMessage.messageType\n                    ) && (\n                        <span\n                            style={{ cursor: 'pointer' }}\n                            onClick={() =>\n                                props.history.push('/profile/' + message.author)\n                            }\n                        >\n                            {post.startMessage.messageType === 'wishlist'\n                                ? 'Wishlist'\n                                : post.startMessage.messageType === 'goals'\n                                ? 'Goals'\n                                : 'Shop'}\n                        </span>\n                    )}\n            </span>\n        ),\n        datetime: isStart && (\n            <span style={{ color: '#333' }}>\n                <TimeAgo datetime={message.date} live />\n            </span>\n        ),\n    }\n    return account && friendData ? (\n        account._id !== message.author || !editingMessage ? (\n            <Comment {...commentProps}>\n                {props.isTop && replies && replies.length > 0 ? (\n                    showReplies ? (\n                        replies.map((reply, index) => (\n                            <Message\n                                key={index}\n                                message={reply}\n                                post={post}\n                                account={account}\n                                friendData={friendData}\n                                setReplyVisible={setReplyVisible}\n                                setReplyToUser={setReplyToUser}\n                            />\n                        ))\n                    ) : (\n                        <Button\n                            type=\"text\"\n                            onClick={() => setShowReplies(true)}\n                        >\n                            Show {replies.length} replies\n                        </Button>\n                    )\n                ) : null}\n\n                {props.isTop && replyVisible ? (\n                    <AddMessage\n                        post={post}\n                        account={account}\n                        replyTo={message.messageId}\n                        replyToUser={replyToUser}\n                        cancel={() => setReplyVisible(false)}\n                    />\n                ) : null}\n            </Comment>\n        ) : (\n            <AddMessage\n                post={post}\n                account={account}\n                replyTo={message.messageId}\n                editingMessage={editingMessage}\n                content={message.text}\n                images={message.image}\n                onSend={() => setEditingMessage('')}\n                cancel={() => setEditingMessage('')}\n            />\n        )\n    ) : null\n}\n\nexport default withRouter(Message)\n","import React, { useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport * as wsActions from '../../websocketActions'\nimport Message from './Message'\nimport { LikeOutlined, LikeFilled, CommentOutlined } from '@ant-design/icons'\nimport AddMessage from './AddMessage'\nimport Divider from 'antd/es/divider'\nimport Button from 'antd/es/button'\n\nconst Post = props => {\n    const { post, account, friendData, progressData, groupData } = props\n    const [postOpen, setPostOpen] = useState(props.showReplies)\n    const getNumberOfMessages = messages => {\n        let result = 0\n        for (let item of messages) {\n            result = result + 1 + item.replies.length\n        }\n        return result\n    }\n    return post ? (\n        <>\n            {!props.noStartMessage && (\n                <>\n                    <Message\n                        message={post.startMessage}\n                        post={post}\n                        account={account}\n                        friendData={friendData}\n                        progressData={progressData}\n                        groupData={groupData}\n                        replies={[]}\n                        isStart={true}\n                    />\n                    {post.startMessage.image &&\n                        post.startMessage.image.length > 0 && (\n                            <img\n                                style={{\n                                    maxWidth: '100%',\n                                    margin: 'auto',\n                                    display: 'block',\n                                }}\n                                src={post.startMessage.image[0]}\n                            />\n                        )}\n                </>\n            )}\n            <Divider type=\"horizontal\" style={{ margin: '5px 0' }} />\n\n            <div\n                style={{\n                    textAlign: 'left',\n                    // marginBottom: '200px',\n                    position: 'relative',\n                }}\n            >\n                <div\n                    style={{ display: 'flex', justifyContent: 'space-around' }}\n                >\n                    <span key=\"comment-basic-like\">\n                        <Button\n                            type=\"text\"\n                            onClick={() =>\n                                wsActions.changeLikesMessage(\n                                    post.startMessage.likes.includes(\n                                        account._id\n                                    )\n                                        ? 'dislikeMessage'\n                                        : 'likeMessage',\n                                    post.startMessage.messageId,\n                                    account._id,\n                                    post._id\n                                )\n                            }\n                        >\n                            {post.startMessage.likes.includes(account._id) ? (\n                                <LikeFilled style={{ fontSize: '20px' }} />\n                            ) : (\n                                <LikeOutlined style={{ fontSize: '20px' }} />\n                            )}\n                            Likes\n                            <span style={{ paddingLeft: '8px' }}>\n                                {post.startMessage.likes.length}\n                            </span>\n                        </Button>\n                    </span>\n                    <span>\n                        <Button onClick={() => setPostOpen(true)} type=\"text\">\n                            <CommentOutlined style={{ fontSize: '20px' }} />\n                            Comment\n                            <span style={{ paddingLeft: '8px' }}>\n                                {getNumberOfMessages(post.messages)}\n                            </span>\n                        </Button>\n                    </span>\n                </div>\n                <Divider type=\"horizontal\" style={{ margin: '5px 0' }} />\n                {postOpen && (\n                    <>\n                        <AddMessage post={post} account={account} />\n                        {post.messages && post.messages.length\n                            ? post.messages.map((message, index) => (\n                                  <Message\n                                      key={index}\n                                      message={message}\n                                      post={post}\n                                      account={account}\n                                      friendData={friendData}\n                                      replies={message.replies}\n                                      isTop={true}\n                                  />\n                              ))\n                            : null}\n                    </>\n                )}\n            </div>\n        </>\n    ) : null\n}\n\nexport default withRouter(Post)\n","import React, { useEffect, useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport Card from 'antd/es/card'\nimport pullData from '../../utils/pullData'\nimport Post from '../../components/Post/Post'\nimport UserButton from '../../components/UserButton/UserButton'\nimport ImageCarousel from '../../components/UI/ImageCarousel/ImageCarousel'\n\nconst Goal = props => {\n    const [data, setData] = useState({})\n    const { account } = props\n    useEffect(() => {\n        const pathParts = props.history.location.pathname.split('/')\n        if (pathParts.length > 3) {\n            const accountId = pathParts[2]\n            if (props.isAuthed && account._id === accountId) {\n                const goal = account.goals.find(\n                    item => item.itemId === pathParts[3]\n                )\n                setData({ profile: account, goal })\n            } else {\n                pullData(props, data, setData, { forceAuth: false }, data => {\n                    const friendData = {}\n                    for (let friend of data.friendData)\n                        friendData[friend._id] = friend\n\n                    props.setData({\n                        post: { [data.post._id]: data.post },\n                        friendData,\n                    })\n                })\n            }\n        }\n    }, [props.isAuthed])\n    if (!data.goal) return null\n    const { goal, profile } = data\n    props.setData({ currentPosts: goal.post })\n    if (goal) {\n        props.setPageTitle({ main: goal.name, sub: profile._id })\n    }\n    return goal ? (\n        <Card\n            title={\n                <span>\n                    Goal from <UserButton id={profile._id} /> goals\n                </span>\n            }\n            bordered={false}\n        >\n            <ImageCarousel images={goal.images} />\n\n            <h1>{goal.name}</h1>\n            <p style={{ whiteSpace: 'pre-wrap' }}>{goal.description}</p>\n            <Post\n                noStartMessage={true}\n                post={props.post[goal.post]}\n                account={props.account}\n                friendData={props.friendData}\n                showReplies={true}\n            />\n        </Card>\n    ) : null\n}\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        account: state.account,\n        post: state.post,\n        friendData: state.friendData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: data => {\n            dispatch(actions.setData(data))\n        },\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Goal)\n)\n","import React, { useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport AddCard from '../../components/AddCard/AddCard'\nimport Modal from 'antd/es/modal/Modal'\nimport AddProgress from './AddProgress'\nimport MasonryGrid from '../../components/MasonryGrid'\nimport MasonryCard from '../../components/MasonryCard'\nimport UserButton from '../../components/UserButton/UserButton'\nimport Helmet from 'react-helmet'\n\nconst Progresses = props => {\n    const [startProgressVisible, setStartProgressVisible] = useState(false)\n\n    const { fromProfile, progressData, account, groupData, profile } = props\n\n    const { progresses, groups } = fromProfile ? profile : account\n    if (!fromProfile) props.setPageTitle({ main: 'Inspirations', sub: '' })\n    let loadedProgresses, loadedGroups\n    if (progresses) {\n        loadedProgresses = progresses\n            .filter(item => progressData[item])\n            .map(item => progressData[item])\n        loadedGroups = groups\n            .filter(item => groupData[item] && groupData[item].active)\n            .map(item => groupData[item])\n    }\n\n    const editGoal = fromProfile ? null : loadedProgresses && loadedGroups ? (\n        <Modal\n            title=\"Add progress\"\n            visible={startProgressVisible}\n            maskClosable\n            closable\n            onCancel={() => setStartProgressVisible(false)}\n            width=\"100%\"\n            style={{ maxWidth: '1000px' }}\n            footer={null}\n            destroyOnClose={true}\n        >\n            <AddProgress\n                setStartProgressVisible={setStartProgressVisible}\n                account={account}\n                friendData={props.friendData}\n                cancel={() => setStartProgressVisible(false)}\n            />\n        </Modal>\n    ) : null\n\n    return loadedProgresses && loadedGroups ? (\n        <div>\n            <Helmet>\n                <title>Addspire - Your inspirations live here!</title>\n                <meta\n                    name=\"description\"\n                    content=\"Addspire is a social network where you can inspire and motivate yourself or the people you care.\"\n                />\n            </Helmet>\n            {!fromProfile && (\n                <>\n                    <AddCard\n                        title=\"Start a new progress\"\n                        sub=\"Rich your goals or help others!\"\n                        action={() => {\n                            setStartProgressVisible(true)\n                        }}\n                    />\n                    {editGoal}\n                </>\n            )}\n            <MasonryGrid style={{ marginTop: '40px' }}>\n                {loadedProgresses.map((item, index) => (\n                    <MasonryCard\n                        key={index}\n                        onClickLink={'/inspirations/' + item._id}\n                        images={item.goal.images}\n                        body={\n                            <>\n                                <UserButton\n                                    ids={item.goal.users}\n                                    group={true}\n                                />\n                                <span style={{ fontWeight: 'bold' }}>\n                                    {item.name}\n                                </span>\n                            </>\n                        }\n                    />\n                ))}\n            </MasonryGrid>\n        </div>\n    ) : null\n}\n\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n        profile: state.profile,\n        isAuthed: state.isAuthed,\n        progressData: state.progressData,\n        groupData: state.groupData,\n        friendData: state.friendData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: (data, pulledFrom) =>\n            dispatch(actions.setData(data, pulledFrom)),\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n        tryAuth: (props, forceAuth) =>\n            dispatch(actions.tryAuth(props, forceAuth)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Progresses)\n)\n","import React from 'react'\nimport Descriptions from 'antd/es/descriptions'\n\nimport * as wsActions from '../../websocketActions'\nimport Rewards from '../../components/Rewards/Rewards'\nimport UserButton from '../../components/UserButton/UserButton'\nimport Divider from 'antd/es/divider'\nimport Tabs from 'antd/es/tabs'\nimport Tag from 'antd/es/tag'\nimport Radio from 'antd/es/radio'\nimport Badge from 'antd/es/badge'\nimport moment from 'moment'\n\nmoment().format()\n\nconst ActivityTable = props => {\n    const { progress, account } = props\n    const { goal } = progress\n\n    const isOwner = account && account._id === progress.owner\n\n    let lastStages = progress.stages\n        .slice(Math.max(progress.stages.length - 7, 0))\n        .sort((a, b) => {\n            let aS, aF, bS, bF\n            if (a.old && !b.old) return 1\n            else if (b.old && !a.old) return -1\n            else {\n                if (a.day) {\n                    aS = moment()\n                        .year(a.year)\n                        .dayOfYear(a.day)\n                        .startOf('day')\n                    aF = moment()\n                        .year(a.year)\n                        .dayOfYear(a.day)\n                        .endOf('day')\n                    bS = moment()\n                        .year(b.year)\n                        .dayOfYear(b.day)\n                        .startOf('day')\n                    bF = moment()\n                        .year(b.year)\n                        .dayOfYear(b.day)\n                        .endOf('day')\n                } else if (a.week) {\n                    aS = moment()\n                        .year(a.year)\n                        .week(a.week)\n                        .startOf('week')\n                    aF = moment()\n                        .year(a.year)\n                        .week(a.week)\n                        .endOf('week')\n                    bS = moment()\n                        .year(b.year)\n                        .week(b.week)\n                        .startOf('week')\n                    bF = moment()\n                        .year(b.year)\n                        .week(b.week)\n                        .endOf('week')\n                } else if (a.month) {\n                    aS = moment()\n                        .year(a.year)\n                        .month(a.month)\n                        .startOf('month')\n                    aF = moment()\n                        .year(a.year)\n                        .month(a.month)\n                        .endOf('month')\n                    bS = moment()\n                        .year(b.year)\n                        .month(b.month)\n                        .startOf('month')\n                    bF = moment()\n                        .year(b.year)\n                        .month(b.month)\n                        .endOf('month')\n                } else if (a.year) {\n                    aS = moment()\n                        .year(a.year)\n                        .startOf('year')\n                    aF = moment()\n                        .year(a.year)\n                        .endOf('year')\n                    bS = moment()\n                        .year(b.year)\n                        .startOf('year')\n                    bF = moment()\n                        .year(b.year)\n                        .endOf('year')\n                }\n                if (aS) {\n                    const now = moment()\n\n                    if (\n                        Math.min(\n                            Math.abs(now.diff(aS)),\n                            Math.abs(now.diff(aF))\n                        ) <=\n                        Math.min(Math.abs(now.diff(bS)), Math.abs(now.diff(bF)))\n                    )\n                        return -1\n                    else return 1\n                }\n            }\n            return 0\n        })\n\n    const nowStageId = lastStages.length > 0 ? lastStages[0].stageId : 0\n\n    lastStages = progress.stages\n\n    return lastStages.length === 0 ? null : (\n        <div\n            style={{\n                border: '1px solid #eee',\n                padding: '10px 5px',\n            }}\n        >\n            <Tabs\n                type=\"card\"\n                defaultActiveKey={\n                    nowStageId\n                        ? lastStages\n                              .findIndex(item => item.stageId === nowStageId)\n                              .toString()\n                        : '2'\n                }\n                // className={classes.fff}\n            >\n                {lastStages.map((stage, index) => {\n                    const getStatus = id => {\n                        if (isOwner && stage.dismissed) return 'dismissed'\n                        if (stage.failBy.find(item => item.accountId === id))\n                            return 'fail'\n                        if (\n                            stage.approvedBy.find(item => item.accountId === id)\n                        )\n                            return 'complete'\n                        return 'process'\n                    }\n\n                    const getTag = id => {\n                        const status = getStatus(id)\n                        let text = 'In process',\n                            color = '#108ee9'\n                        switch (status) {\n                            case 'fail':\n                                text = 'Failed'\n                                color = '#f50'\n                                break\n                            case 'complete':\n                                text = 'Complete'\n                                color = '#87d068'\n                                break\n                            case 'dismissed':\n                                text = 'Dismissed'\n                                color = '#ffa500'\n                                break\n                            default:\n                                break\n                        }\n\n                        return <Tag color={color}>{text}</Tag>\n                    }\n\n                    const experts = goal.experts.map(expert => (\n                        <Descriptions.Item\n                            key={expert}\n                            label={\n                                <>\n                                    <UserButton\n                                        id={expert}\n                                        noAva={true}\n                                        span={true}\n                                    />{' '}\n                                    {' (expert)'}\n                                </>\n                            }\n                        >\n                            {getTag(expert)}\n                        </Descriptions.Item>\n                    ))\n\n                    const users = goal.users.map(user => (\n                        <Descriptions.Item\n                            key={user}\n                            label={\n                                <>\n                                    <UserButton\n                                        id={user}\n                                        noAva={true}\n                                        span={true}\n                                    />{' '}\n                                    {' (achiever)'}\n                                </>\n                            }\n                        >\n                            {getTag(user)}\n                        </Descriptions.Item>\n                    ))\n\n                    const owner = [\n                        <Descriptions.Item\n                            key={progress.owner}\n                            label={\n                                <>\n                                    <UserButton\n                                        id={progress.owner}\n                                        noAva={true}\n                                        span={true}\n                                    />{' '}\n                                    {' (owner)'}\n                                </>\n                            }\n                        >\n                            {getTag(progress.owner)}\n                        </Descriptions.Item>,\n                    ]\n                    let stageDate\n                    let tabTitle = ''\n                    if (stage.day) {\n                        stageDate = moment()\n                            .year(stage.year)\n                            .dayOfYear(stage.day)\n                        tabTitle = (\n                            <>\n                                <div>{stageDate.format('dddd')}</div>\n                                <div>{stageDate.format('D MMM YY')}</div>\n                            </>\n                        )\n                    } else if (stage.week) {\n                        stageDate = moment()\n                            .year(stage.year)\n                            .week(stage.week)\n                        tabTitle = (\n                            <>\n                                <div>{stageDate.format('wo')} week</div>\n                                <div>\n                                    {stageDate\n                                        .startOf('week')\n                                        .format('D MMM YY')}\n                                </div>\n                                <div>\n                                    {stageDate.endOf('week').format('D MMM YY')}\n                                </div>\n                            </>\n                        )\n                    } else if (stage.month) {\n                        stageDate = moment()\n                            .year(stage.year)\n                            .month(stage.month)\n                        tabTitle = (\n                            <>\n                                <div>{stageDate.format('MMMM')}</div>\n                                <div>{stageDate.format('YYYY')}</div>\n                            </>\n                        )\n                    } else if (stage.year) {\n                        stageDate = moment().year(stage.year)\n\n                        tabTitle = <div>{stageDate.format('YYYY')}</div>\n                    }\n\n                    const myStatus =\n                        account && account._id && getStatus(account._id)\n\n                    const stageStatus = getStatus(progress.owner)\n                    return (\n                        <Tabs.TabPane\n                            tab={\n                                <Badge\n                                    color={\n                                        stageStatus === 'complete'\n                                            ? 'green'\n                                            : stageStatus === 'dismissed'\n                                            ? 'orange'\n                                            : stageStatus === 'fail'\n                                            ? 'volcano'\n                                            : 'rgba(0,0,0,0)'\n                                    }\n                                >\n                                    <span\n                                        style={{\n                                            fontSize: '12px',\n                                            textTransform: 'uppercase',\n                                            textAlign: 'center',\n                                        }}\n                                    >\n                                        {tabTitle}\n                                    </span>\n                                </Badge>\n                            }\n                            key={index}\n                        >\n                            {account && account._id && (\n                                <>\n                                    Set status:\n                                    <Radio.Group\n                                        value={myStatus}\n                                        style={{ padding: '20px 0px ' }}\n                                        onChange={value =>\n                                            wsActions.changeStage(\n                                                value.target.value,\n                                                account._id,\n                                                progress._id,\n                                                stage.stageId\n                                            )\n                                        }\n                                    >\n                                        <Radio value=\"process\">\n                                            <Tag\n                                                color={\n                                                    myStatus !== 'process'\n                                                        ? 'processing'\n                                                        : '#108ee9'\n                                                }\n                                            >\n                                                In process\n                                            </Tag>\n                                        </Radio>\n                                        <Radio value=\"complete\">\n                                            <Tag\n                                                color={\n                                                    myStatus !== 'complete'\n                                                        ? 'green'\n                                                        : '#87d068'\n                                                }\n                                            >\n                                                Complete\n                                            </Tag>\n                                        </Radio>\n                                        <Radio value=\"fail\">\n                                            <Tag\n                                                color={\n                                                    myStatus !== 'fail'\n                                                        ? 'volcano'\n                                                        : '#f50'\n                                                }\n                                            >\n                                                Fail\n                                            </Tag>\n                                        </Radio>\n                                        {isOwner && (\n                                            <Radio value=\"dismissed\">\n                                                <Tag\n                                                    color={\n                                                        myStatus !== 'dismissed'\n                                                            ? 'orange'\n                                                            : '#ffa500'\n                                                    }\n                                                >\n                                                    Dismiss\n                                                </Tag>\n                                            </Radio>\n                                        )}\n                                    </Radio.Group>\n                                </>\n                            )}\n\n                            <Descriptions\n                                size=\"small\"\n                                bordered\n                                column={{\n                                    xxl: 4,\n                                    xl: 3,\n                                    lg: 3,\n                                    md: 3,\n                                    sm: 2,\n                                    xs: 1,\n                                }}\n                            >\n                                {owner}\n                                {users}\n                                {experts}\n                            </Descriptions>\n\n                            {stage.paid.length > 0 && (\n                                <>\n                                    <Divider style={{ fontSize: '15px' }}>\n                                        Paid rewards\n                                    </Divider>\n\n                                    <Rewards\n                                        rewardKey={1}\n                                        rewards={stage.paid}\n                                        readOnly={true}\n                                    />\n                                </>\n                            )}\n                        </Tabs.TabPane>\n                    )\n                })}\n            </Tabs>\n        </div>\n    )\n}\nexport default ActivityTable\n","import React from 'react'\n\nimport * as wsActions from '../../websocketActions'\nimport EditGoalAndProgressForm from '../../components/EditGoalAndProgressForm/EditGoalAndProgressForm'\n\nconst EditProgress = props => {\n    const { progress, account, state, setState, friendData } = props\n\n    const onFinish = value => {\n        wsActions.editGoalInProgress(props, value)\n        setState({ ...state, editProgressOpen: false })\n        document.body.removeAttribute('style')\n    }\n\n    return progress.goal ? (\n        <EditGoalAndProgressForm\n            goal={progress.goal}\n            onFinish={onFinish}\n            account={account}\n            friendData={friendData}\n            cancel={props.cancel}\n        />\n    ) : null\n}\n\nexport default EditProgress\n","import React from 'react'\nimport Button from 'antd/es/button'\nimport * as wsActions from '../websocketActions'\n\nconst FollowButton = props => {\n    const { account, type, id } = props\n    if (account && account._id && account._id !== id) {\n        if (type === 'progress') {\n            return account.followProgresses.includes(id) ? (\n                <Button\n                    danger\n                    onClick={() => wsActions.unfollowProgress(account._id, id)}\n                >\n                    Unfollow\n                </Button>\n            ) : (\n                <Button\n                    type=\"primary\"\n                    onClick={() => wsActions.followProgress(account._id, id)}\n                >\n                    Follow\n                </Button>\n            )\n        } else {\n            return account.followAccounts.includes(id) ? (\n                <Button\n                    danger\n                    onClick={() => wsActions.unfollowAccount(account._id, id)}\n                >\n                    Unfollow\n                </Button>\n            ) : (\n                <Button\n                    type=\"primary\"\n                    onClick={() => wsActions.followAccount(account._id, id)}\n                >\n                    Follow\n                </Button>\n            )\n        }\n    }\n    return null\n}\n\nexport default FollowButton\n","import React, { useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport Button from 'antd/es/button'\n\nimport Modal from 'antd/es/modal'\n\nimport Descriptions from 'antd/es/descriptions'\n\nconst { Item } = Descriptions\n\nimport * as wsActions from '../../websocketActions'\nimport ActivityTable from './ActivityTable'\nimport EditProgress from './EditProgress'\n\nimport Typography from 'antd/es/typography'\nimport UserButton from '../../components/UserButton/UserButton'\nimport ImageCarousel from '../../components/UI/ImageCarousel/ImageCarousel'\n\nimport Tag from 'antd/es/tag'\nimport Rewards from '../../components/Rewards/Rewards'\nimport MasonryCard from '../../components/MasonryCard'\nimport FollowButton from '../../components/FollowButton'\nimport Helmet from 'react-helmet'\nimport { LikeFilled, LikeOutlined } from '@ant-design/icons'\n\nconst Activity = props => {\n    const { account, progress, state, setState, friendData } = props\n    const { goal } = progress\n    const [followersVisible, setFollowersVisible] = useState(false)\n\n    const getDay = day => {\n        switch (day) {\n            case '0':\n                return 'Sunday'\n            case '1':\n                return 'Monday'\n            case '2':\n                return 'Tuesday'\n            case '3':\n                return 'Wednesday'\n            case '4':\n                return 'Thursday'\n            case '5':\n                return 'Friday'\n            case '6':\n                return 'Saturday'\n\n            default:\n                return ''\n        }\n    }\n    return goal ? (\n        <>\n            <Helmet>\n                <title>\n                    {goal.name} by {progress.owner} at Addspire\n                </title>\n                <meta name=\"description\" content={goal.description} />\n            </Helmet>\n            {goal.images.length > 0 && <ImageCarousel images={goal.images} />}\n\n            <h1>{goal.name}</h1>\n            <Button type=\"text\" onClick={() => setFollowersVisible(true)}>\n                {progress.followingAccounts.length} Followers\n            </Button>\n            <Button\n                type=\"text\"\n                onClick={() =>\n                    wsActions.changeLikesProgress(\n                        account._id,\n                        progress._id,\n                        !progress.likes.includes(account._id)\n                    )\n                }\n            >\n                {progress.likes.includes(account._id) ? (\n                    <LikeFilled style={{ fontSize: '20px' }} />\n                ) : (\n                    <LikeOutlined style={{ fontSize: '20px' }} />\n                )}\n                Likes\n                <span style={{ paddingLeft: '8px' }}>\n                    {progress.likes.length}\n                </span>\n            </Button>\n\n            <div>\n                {account &&\n                account._id &&\n                account.followProgresses.includes(progress._id) ? (\n                    <Button\n                        type=\"link\"\n                        onClick={() =>\n                            wsActions.unfollowProgress(\n                                account._id,\n                                progress._id\n                            )\n                        }\n                    >\n                        Following\n                    </Button>\n                ) : (\n                    <Button\n                        type=\"primary\"\n                        onClick={() =>\n                            wsActions.followProgress(account._id, progress._id)\n                        }\n                    >\n                        Follow\n                    </Button>\n                )}\n            </div>\n            {account._id === progress.owner && (\n                <Button\n                    style={{ margin: '0px 20px 50px 0px' }}\n                    type=\"primary\"\n                    onClick={() => {\n                        setState({ ...state, editProgressOpen: true })\n                    }}\n                >\n                    Edit progress\n                </Button>\n            )}\n            <Typography.Paragraph\n                ellipsis={{\n                    rows: 3,\n                    expandable: true,\n                    symbol: 'more',\n                }}\n                style={{ whiteSpace: 'pre-wrap' }}\n            >\n                {goal.description}\n            </Typography.Paragraph>\n\n            <Descriptions\n                size=\"small\"\n                bordered\n                column={{ xxl: 4, xl: 3, lg: 3, md: 3, sm: 2, xs: 1 }}\n            >\n                <Item label=\"Repeat\">{goal.repeat || ''}</Item>\n                {goal.repeat === 'weekday' && (\n                    <Item label=\"Days\">\n                        {goal.days.map((day, index) => (\n                            <Tag key={index}>{getDay(day)}</Tag>\n                        ))}\n                    </Item>\n                )}\n                <Item label=\"Rewards\">\n                    <Rewards rewards={goal.rewards} />\n                </Item>\n            </Descriptions>\n            <div style={{ margin: '50px 0px' }}>\n                <ActivityTable\n                    progress={progress}\n                    account={account}\n                    state={state}\n                    setState={setState}\n                />\n            </div>\n\n            {account.progresses &&\n                account.progresses.includes(progress._id.toString()) && (\n                    <Button\n                        danger={true}\n                        onClick={() => {\n                            wsActions.leaveProgress(props)\n                        }}\n                    >\n                        Leave the progress\n                    </Button>\n                )}\n\n            <Modal\n                visible={state.editProgressOpen}\n                footer={null}\n                onCancel={() => setState({ ...state, editProgressOpen: false })}\n                closable={true}\n                destroyOnClose={true}\n                width=\"100%\"\n                style={{ maxWidth: '1000px' }}\n            >\n                <EditProgress\n                    progress={progress}\n                    account={account}\n                    state={state}\n                    setState={setState}\n                    friendData={friendData}\n                    cancel={() =>\n                        setState({ ...state, editProgressOpen: false })\n                    }\n                />\n            </Modal>\n            <Modal\n                title=\"Followers\"\n                visible={followersVisible}\n                footer={null}\n                onCancel={() => setFollowersVisible(false)}\n            >\n                {progress.followingAccounts.map(item => (\n                    <MasonryCard\n                        noLink={true}\n                        key={item}\n                        actions={<FollowButton account={account} id={item} />}\n                        body={<UserButton span={true} id={item} size={50} />}\n                    />\n                ))}\n            </Modal>\n        </>\n    ) : null\n}\n\nexport default withRouter(Activity)\n","import React, { useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport Button from 'antd/es/button'\nimport Comment from 'antd/es/comment'\nimport Avatar from 'antd/es/avatar'\nimport Input from 'antd/es/input'\nimport Form from 'antd/es/form'\nimport Upload from 'antd/es/upload'\nimport PictureOutlined from '@ant-design/icons/PictureOutlined'\nimport LoadingOutlined from '@ant-design/icons/LoadingOutlined'\nimport SendOutlined from '@ant-design/icons/SendOutlined'\nimport { uploadFile } from '../../utils/uploadFile'\nimport * as wsActions from '../../websocketActions'\nimport getAvatar from '../../utils/getAvatar'\nimport { messageRules } from '../../constants/fieldRules'\nimport {\n    PlusOutlined,\n    CloseCircleFilled,\n    PictureFilled,\n} from '@ant-design/icons'\nimport Modal from 'antd/es/modal/Modal'\n\nconst AddPost = props => {\n    const [previewImage, setPreviewImage] = useState('')\n    const [imageLoading, setImageLoading] = useState(false)\n    const [images, setImages] = useState([])\n\n    const { parent, account, parentType } = props\n\n    const [messageText, setMessageText] = useState(\n        props.content ||\n            (props.replyToUser ? '@' + props.replyToUser + ' ' : '')\n    )\n\n    const uploadImage = file => {\n        uploadFile(file, 800, undefined, url => {\n            setImages([...images, url])\n        })\n    }\n    return account._id ? (\n        <div\n            style={{\n                background: '#fff',\n                padding: '0px 10px',\n                bottom: '0px',\n                left: '0px',\n                zIndex: 1000,\n            }}\n        >\n            <h2>Post something new</h2>\n            <Comment\n                avatar={<Avatar src={getAvatar(account._id, account.image)} />}\n                content={\n                    <>\n                        <Form.Item rules={messageRules}>\n                            <Input.TextArea\n                                autoSize={{\n                                    minRows: 1,\n                                    maxRows: 3,\n                                }}\n                                rows={1}\n                                onChange={e => setMessageText(e.target.value)}\n                                value={messageText}\n                            />\n                        </Form.Item>\n                        {images.length > 0 && (\n                            <Form.Item style={{ margin: 0 }}>\n                                <Upload\n                                    listType=\"picture-card\"\n                                    fileList={images.map((image, index) => ({\n                                        url: image,\n                                        uid: index,\n                                    }))}\n                                    onPreview={file => {\n                                        setPreviewImage(file.url)\n                                    }}\n                                    onChange={({ fileList }) =>\n                                        setImages(\n                                            fileList.map(image => image.url)\n                                        )\n                                    }\n                                    customRequest={({ file }) => {\n                                        uploadImage(file)\n                                    }}\n                                >\n                                    {images.length >= 8 ? null : (\n                                        <div>\n                                            <PlusOutlined />\n                                            <div className=\"ant-upload-text\">\n                                                Upload\n                                            </div>\n                                        </div>\n                                    )}\n                                </Upload>\n                            </Form.Item>\n                        )}\n                        <Form.Item>\n                            <Button\n                                htmlType=\"submit\"\n                                onClick={() => {\n                                    wsActions.addPost(\n                                        account._id,\n                                        parent,\n                                        parentType,\n                                        messageText,\n                                        images\n                                    )\n                                    setMessageText('')\n                                    setImages([])\n                                    if (props.onSend) props.onSend()\n                                }}\n                                icon={<SendOutlined />}\n                                type=\"text\"\n                            >\n                                Send\n                            </Button>\n                            <Upload\n                                showUploadList={false}\n                                customRequest={({ file }) => {\n                                    if (images.length > 8) {\n                                        message.warning(\n                                            'You can not attach more than 8 images.'\n                                        )\n                                        return\n                                    }\n                                    setImageLoading(true)\n                                    uploadFile(file, 800, undefined, url => {\n                                        setImageLoading(false)\n                                        setImages([...images, url])\n                                    })\n                                }}\n                            >\n                                <Button\n                                    type=\"text\"\n                                    icon={\n                                        imageLoading ? (\n                                            <LoadingOutlined />\n                                        ) : (\n                                            <PictureFilled />\n                                        )\n                                    }\n                                >\n                                    Image\n                                </Button>\n                            </Upload>\n                            {messageText || images.length ? (\n                                <Button\n                                    onClick={() => {\n                                        setMessageText('')\n                                        setImages([])\n                                    }}\n                                    icon={<CloseCircleFilled />}\n                                    type=\"text\"\n                                >\n                                    Cancel\n                                </Button>\n                            ) : null}\n                        </Form.Item>\n                    </>\n                }\n            />\n            <Modal\n                visible={previewImage}\n                footer={null}\n                onCancel={() => setPreviewImage('')}\n            >\n                <img\n                    alt=\"example\"\n                    style={{ width: '100%' }}\n                    src={previewImage}\n                />\n            </Modal>\n        </div>\n    ) : null\n}\n\nexport default withRouter(AddPost)\n","import React, { useEffect, useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\n\nimport Modal from 'antd/es/modal'\nimport Activity from './Activity'\nimport Post from '../../components/Post/Post'\nimport AddPost from '../../components/Post/AddPost'\nimport pullData from '../../utils/pullData'\n\nconst Progress = props => {\n    const [state, setState] = useState({})\n\n    const [data, setData] = useState({})\n    const pathParts = props.history.location.pathname.split('/')\n    const progressId = pathParts.length > 2 ? pathParts[2] : ''\n    if (!progressId) return null\n    useEffect(() => {\n        if (props.isAuthed) {\n            props.setData({ currentProgress: progressId })\n        } else {\n            pullData(props, data, setData, { forceAuth: false }, data => {\n                const friendData = {}\n                for (let friend of data.friendData)\n                    friendData[friend._id] = friend\n                const post = {}\n                for (let item of data.post) post[item._id] = item\n\n                props.setData({\n                    friendData,\n                    posts: post,\n                    account: {},\n                    progress: data.progress,\n                })\n            })\n        }\n    }, [props.isAuthed, props.history.location.pathname])\n\n    const { progress, account, friendData, posts } = props.isAuthed\n        ? props\n        : { ...data, account: {} }\n\n    if (!progress || !progress._id) return null\n    props.setData({ currentPosts: progress.posts })\n\n    const { goal } = progress\n    if (goal) props.setPageTitle({ main: goal.name, sub: progress.worker })\n    return goal && friendData ? (\n        <div className=\"contentDiv\">\n            <Activity\n                state={state}\n                setState={setState}\n                progress={progress}\n                account={account}\n                friendData={friendData}\n            />\n\n            {account._id && (\n                <AddPost\n                    parent={progressId}\n                    account={account}\n                    parentType=\"progress\"\n                    // onSend={() => setEditingMessage('')}\n                />\n            )}\n            {progress.posts.map(postId => {\n                if (posts[postId]) {\n                    const post = posts[postId]\n                    return (\n                        <div key={postId}>\n                            <div\n                                style={{\n                                    height: '5px',\n                                    background: '#ddd',\n                                    width: 'calc(100% + 8px)',\n                                    position: 'absolute',\n                                    left: '-8px',\n                                }}\n                            />\n                            <div style={{ paddingTop: '10px' }}>\n                                <Post\n                                    friendData={friendData}\n                                    account={account}\n                                    post={post}\n                                />\n                            </div>\n                        </div>\n                    )\n                } else return null\n            })}\n\n            <Modal\n                visible={state.previewImage}\n                footer={null}\n                onCancel={() => setState({ ...state, previewImage: '' })}\n            >\n                <img\n                    alt=\"example\"\n                    style={{ width: '100%' }}\n                    src={state.previewImage}\n                />\n            </Modal>\n        </div>\n    ) : null\n}\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        account: state.account,\n        posts: state.post,\n        progress: state.progress,\n        friendData: state.friendData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: data => {\n            dispatch(actions.setData(data))\n        },\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Progress)\n)\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { withRouter, Link } from 'react-router-dom'\nimport UserButton from '../../components/UserButton/UserButton'\nimport MasonryGrid from '../../components/MasonryGrid'\nimport MasonryCard from '../../components/MasonryCard'\n\nconst Wallet = props => {\n    const account = props.pulledProfile || props.account\n    return account.wallet ? (\n        <MasonryGrid friends={true}>\n            {account.wallet.map((money, index) => (\n                <Link to={'/profile/' + money.user} key={index}>\n                    <MasonryCard\n                        body={\n                            <>\n                                <span style={{ fontWeight: 'bold' }}>\n                                    ${money.amount}\n                                </span>\n                                <UserButton span={true} id={money.user} />\n                            </>\n                        }\n                    />\n                </Link>\n            ))}\n        </MasonryGrid>\n    ) : null\n}\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n        isAuthed: state.isAuthed,\n    }\n}\n\nexport default withRouter(connect(mapStateToProps)(Wallet))\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { withRouter } from 'react-router-dom'\nimport * as actions from '../../store/actions'\nimport Button from 'antd/es/button'\nimport Tag from 'antd/es/tag'\nimport TimeAgo from 'timeago-react'\nimport Avatar from 'antd/es/avatar'\nimport getAvatar from '../../utils/getAvatar'\nimport Rewards from '../../components/Rewards/Rewards'\nimport Collapse from 'antd/es/collapse'\nimport Badge from 'antd/es/badge'\nimport UserButton from '../../components/UserButton/UserButton'\nimport Descriptions from 'antd/es/descriptions'\nimport date from 'date-and-time'\nimport Typography from 'antd/es/typography'\n\nconst Transactions = props => {\n    props.setPageTitle({ main: 'Shop', sub: 'Transactions' })\n\n    const { account, transactionData, friendData } = props\n    if (!account || !account._id) return null\n\n    const transactions = account.transactions\n        .filter(item => transactionData[item])\n        .map(item => transactionData[item])\n\n    const columns = [\n        {\n            title: 'Type',\n            dataIndex: 'types',\n            key: 'types',\n            render: types => (\n                <>\n                    {types.map(tag => {\n                        let color = tag.length > 5 ? 'geekblue' : 'green'\n                        if (tag === 'loser') {\n                            color = 'volcano'\n                        }\n                        return (\n                            <Tag color={color} key={tag}>\n                                {tag.toUpperCase()}\n                            </Tag>\n                        )\n                    })}\n                </>\n            ),\n        },\n        {\n            title: 'With',\n            dataIndex: 'user',\n            key: 'user',\n            render: user => {\n                const friend = friendData[user]\n                return friend ? (\n                    <Button\n                        type=\"link\"\n                        style={{ padding: 0 }}\n                        onClick={() => props.history.push('/profile/' + user)}\n                    >\n                        <Avatar\n                            src={getAvatar(user, friend.image)}\n                            style={{ marginRight: '5px' }}\n                        />\n                        {friend.name + ' (' + friend._id + ')'}\n                    </Button>\n                ) : (\n                    user\n                )\n            },\n        },\n        {\n            title: 'Item',\n            dataIndex: 'perk',\n            key: 'perk',\n            render: perk =>\n                perk.simple || (\n                    <Rewards\n                        rewardKey={1}\n                        label=\"Rewards\"\n                        rewards={[{ rewards: [perk], key: 1 }]}\n                        readOnly={true}\n                    />\n                ),\n        },\n        {\n            title: 'Amount',\n            dataIndex: 'amount',\n            key: 'amount',\n            render: amount => (amount > 0 ? amount : ''),\n        },\n        {\n            title: 'Date',\n            dataIndex: 'date',\n            key: 'date',\n            render: date => <TimeAgo datetime={date} live />,\n        },\n        {\n            title: 'Progress',\n            dataIndex: 'progress',\n            key: 'progress',\n            render: progress => (\n                <Button\n                    type=\"link\"\n                    onClick={() =>\n                        props.history.push('/inspirations/' + progress)\n                    }\n                >\n                    {progress}\n                </Button>\n            ),\n        },\n        {\n            title: 'Status',\n            key: 'status',\n            dataIndex: 'status',\n            render: (status, record) => {\n                if (status === 'Not confirmed') {\n                    return (\n                        <>\n                            <Button\n                                danger={true}\n                                type=\"link\"\n                                onClick={() =>\n                                    wsActions.cancelTransaction(\n                                        account._id,\n                                        record.transaction._id\n                                    )\n                                }\n                            >\n                                Cancel\n                            </Button>\n                            {record.transaction.from === account._id && (\n                                <Button\n                                    type=\"link\"\n                                    onClick={() =>\n                                        wsActions.confirmTransaction(\n                                            account._id,\n                                            record.transaction._id\n                                        )\n                                    }\n                                >\n                                    Confirm\n                                </Button>\n                            )}\n                        </>\n                    )\n                }\n                return status\n            },\n        },\n    ]\n\n    const tableData = []\n    let sorted = [...transactions]\n    sorted = sorted.sort((a, b) =>\n        new Date(a.date).getTime() < new Date(b.date).getTime() ? 1 : -1\n    )\n    for (let transaction of sorted) {\n        const types = []\n        if (transaction.from === account._id && transaction.to === account.id) {\n            types.push('internal')\n        }\n        if (transaction.to === account._id) {\n            if (transaction.progress) {\n                types.push('earn')\n                if (!transaction.amount) types.push('item')\n                else types.push('money')\n            } else {\n                if (transaction.item && transaction.amount) {\n                    types.push('buy')\n                    types.push('item')\n                } else {\n                    types.push('recieve gift')\n                    if (!transaction.amount) types.push('item')\n                    else types.push('money')\n                }\n            }\n        } else if (transaction.from === account._id) {\n            if (transaction.progress) {\n                types.push('pay')\n                if (!transaction.amount) types.push('item')\n                else types.push('money')\n            } else {\n                if (transaction.item && transaction.amount) {\n                    types.push('sell')\n                    types.push('item')\n                } else {\n                    types.push('send gift')\n                    if (!transaction.amount) types.push('item')\n                    else types.push('money')\n                }\n            }\n        }\n\n        const user =\n            transaction.to !== account._id ? transaction.to : transaction.from\n\n        tableData.push({\n            key: tableData.length,\n            types,\n            user,\n            perk: transaction.item,\n            amount: transaction.amount,\n            date: transaction.date,\n            progress: transaction.progress,\n            status: transaction.status,\n            transaction,\n        })\n    }\n    return (\n        <Collapse\n            expandIconPosition=\"right\"\n            style={{ marginBottom: '50px' }}\n            destroyInactivePanel={true}\n            accordion\n        >\n            {sorted.map((transaction, index) => {\n                const types = []\n                if (\n                    transaction.from === account._id &&\n                    transaction.to === account.id\n                ) {\n                    types.push('internal')\n                }\n                if (transaction.to === account._id) {\n                    if (transaction.progress) {\n                        types.push('earn')\n                        if (!transaction.amount) types.push('item')\n                        else types.push('money')\n                    } else {\n                        if (transaction.item && transaction.amount) {\n                            types.push('buy')\n                            types.push('item')\n                        } else {\n                            types.push('recieve gift')\n                            if (!transaction.amount) types.push('item')\n                            else types.push('money')\n                        }\n                    }\n                } else if (transaction.from === account._id) {\n                    if (transaction.progress) {\n                        types.push('pay')\n                        if (!transaction.amount) types.push('item')\n                        else types.push('money')\n                    } else {\n                        if (transaction.item && transaction.amount) {\n                            types.push('sell')\n                            types.push('item')\n                        } else {\n                            types.push('send gift')\n                            if (!transaction.amount) types.push('item')\n                            else types.push('money')\n                        }\n                    }\n                }\n\n                const user =\n                    transaction.to !== account._id\n                        ? transaction.to\n                        : transaction.from\n\n                tableData.push({\n                    key: tableData.length,\n                    types,\n                    user,\n                    perk: transaction.item,\n                    amount: transaction.amount,\n                    date: transaction.date,\n                    progress: transaction.progress,\n                    status: transaction.status,\n                    transaction,\n                })\n                const { item: reward } = transaction\n                return (\n                    <Collapse.Panel\n                        style={{ padding: 0 }}\n                        header={\n                            <>\n                                <div\n                                    style={{\n                                        display: 'flex',\n                                        alignItems: 'center',\n                                    }}\n                                >\n                                    <Badge\n                                        color={\n                                            transaction.status ===\n                                            'Not confirmed'\n                                                ? 'blue'\n                                                : transaction.status ===\n                                                  'Cancelled'\n                                                ? 'red'\n                                                : 'green'\n                                        }\n                                    />\n                                    <Typography.Paragraph\n                                        ellipsis={{ rows: 1 }}\n                                        style={{ display: 'inline', margin: 0 }}\n                                    >\n                                        {reward.mode === 'simple'\n                                            ? reward.simple\n                                            : reward.mode === 'money'\n                                            ? reward.money + ' (money)'\n                                            : reward.mode === 'item'\n                                            ? reward.itemName\n                                            : ''}\n                                    </Typography.Paragraph>\n                                    <UserButton\n                                        noName={true}\n                                        id={\n                                            transaction.to !== account._id\n                                                ? transaction.to\n                                                : transaction.from\n                                        }\n                                    />\n                                </div>\n                                <div>\n                                    <TimeAgo datetime={transaction.date} live />\n                                </div>\n                            </>\n                        }\n                        key={index}\n\n                        // extra={}\n                    >\n                        <Descriptions\n                            layout=\"vertical\"\n                            size=\"small\"\n                            bordered\n                            column={{\n                                xxl: 4,\n                                xl: 3,\n                                lg: 3,\n                                md: 3,\n                                sm: 2,\n                                xs: 1,\n                            }}\n                        >\n                            <Descriptions.Item label=\"Type\">\n                                {types.map(tag => {\n                                    let color =\n                                        tag.length > 5 ? 'geekblue' : 'green'\n                                    if (tag === 'loser') {\n                                        color = 'volcano'\n                                    }\n                                    return (\n                                        <Tag color={color} key={tag}>\n                                            {tag.toUpperCase()}\n                                        </Tag>\n                                    )\n                                })}\n                            </Descriptions.Item>\n                            <Descriptions.Item label=\"Transaction with\">\n                                <UserButton\n                                    id={\n                                        transaction.to !== account._id\n                                            ? transaction.to\n                                            : transaction.from\n                                    }\n                                />\n                            </Descriptions.Item>\n\n                            <Descriptions.Item label=\"Item\">\n                                {\n                                    <Rewards\n                                        onlyButton={true}\n                                        rewardKey={1}\n                                        label=\"Rewards\"\n                                        rewards={[\n                                            {\n                                                rewards: [transaction.item],\n                                                key: 1,\n                                            },\n                                        ]}\n                                        readOnly={true}\n                                    />\n                                }\n                            </Descriptions.Item>\n\n                            {transaction.amount && (\n                                <Descriptions.Item label=\"Amount\">\n                                    {transaction.amount}\n                                </Descriptions.Item>\n                            )}\n                            <Descriptions.Item label=\"Date\">\n                                {date.format(\n                                    new Date(transaction.date),\n                                    'YYYY/MM/DD HH:mm:ss'\n                                )}\n                            </Descriptions.Item>\n\n                            {transaction.progress && transaction.progressId && (\n                                <Descriptions.Item label=\"Progress\">\n                                    <Button\n                                        type=\"text\"\n                                        onClick={() =>\n                                            props.history.push(\n                                                '/inspirations/' +\n                                                    transaction.progressId\n                                            )\n                                        }\n                                    >\n                                        {transaction.progress}\n                                    </Button>\n                                </Descriptions.Item>\n                            )}\n                            <Descriptions.Item label=\"Status\">\n                                {status === 'Not confirmed' ? (\n                                    <>\n                                        <Button\n                                            danger={true}\n                                            type=\"link\"\n                                            onClick={() =>\n                                                wsActions.cancelTransaction(\n                                                    account._id,\n                                                    record.transaction._id\n                                                )\n                                            }\n                                        >\n                                            Cancel\n                                        </Button>\n                                        {record.transaction.from ===\n                                            account._id && (\n                                            <Button\n                                                type=\"link\"\n                                                onClick={() =>\n                                                    wsActions.confirmTransaction(\n                                                        account._id,\n                                                        record.transaction._id\n                                                    )\n                                                }\n                                            >\n                                                Confirm\n                                            </Button>\n                                        )}\n                                    </>\n                                ) : (\n                                    status || 'Confirmed'\n                                )}\n                            </Descriptions.Item>\n                        </Descriptions>\n                    </Collapse.Panel>\n                )\n            })}\n        </Collapse>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n        transactionData: state.transactionData,\n        friendData: state.friendData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Transactions)\n)\n","import React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport Tabs from 'antd/es/tabs'\nimport Wallet from './Wallet'\nimport Transactions from './Transactions'\nimport WishlistAndPerks from './WishlistAndPerks'\nimport Helmet from 'react-helmet'\n\nconst Shop = props => {\n    useEffect(() => {\n        props.setPageTitle({ main: 'Shop', sub: 'My items' })\n    }, [])\n\n    return props.account._id ? (\n        <div>\n            <Helmet>\n                <title>Addspire - reward and motivate for great changes!</title>\n                <meta\n                    name=\"description\"\n                    content=\"Addspire is a social network where you can inspire and motivate yourself or the people you care.\"\n                />\n            </Helmet>\n            <Tabs\n                style={{\n                    background: 'transparent',\n                    boxShadow: 'none',\n                    margin: '0',\n                    marginTop: '-15px',\n                }}\n            >\n                <Tabs.TabPane tab=\"My shop\" key={1}>\n                    <WishlistAndPerks\n                        mode=\"shop\"\n                        listKey=\"perks\"\n                        account={props.account}\n                    />\n                </Tabs.TabPane>\n                <Tabs.TabPane tab=\"Wallet\" key={3}>\n                    <Wallet />\n                </Tabs.TabPane>\n                <Tabs.TabPane tab=\"Transactions\" key={4}>\n                    <Transactions />\n                </Tabs.TabPane>\n            </Tabs>\n        </div>\n    ) : (\n        <span />\n    )\n}\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Shop)\n","import React, { useEffect, useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport isEqual from 'lodash.isequal'\n\nimport Post from '../../components/Post/Post'\n\nimport UserButton from '../../components/UserButton/UserButton'\nimport Divider from 'antd/es/divider'\n\nconst DashboardPosts = props => {\n    const {\n        account,\n        friendData,\n        statePosts,\n        progressData,\n        groupData,\n        currentPosts,\n    } = props\n\n    const [posts, setPosts] = useState([])\n    const [startTime] = useState(new Date().getTime())\n\n    const sortPosts = (a, b) => {\n        const aN = a.notifications.filter(item => item.user !== account._id)\n        const bN = b.notifications.filter(item => item.user !== account._id)\n        if (aN.length === 0 && bN.length > 0) return 1\n        else if (aN.length > 0 && bN.length === 0) return -1\n        else if (aN.length === 0 && bN.length === 0) return 0\n        else\n            return new Date(aN[0].date).getTime() <\n                new Date(bN[0].date).getTime()\n                ? 1\n                : -1\n    }\n\n    const sortNotifications = (a, b) =>\n        new Date(a.date).getTime() < new Date(b.date).getTime() ? 1 : -1\n\n    useEffect(() => {\n        if (currentPosts) {\n            const newPosts = currentPosts\n                .filter(item => statePosts[item])\n                .map(item => statePosts[item])\n\n            const newUnseenPosts = []\n            const newOldPosts = []\n            let oldPosts = [...posts]\n            for (let post of newPosts) {\n                let oldPostIndex = oldPosts.findIndex(item => {\n                    return item._id.toString() === post._id.toString()\n                })\n                if (oldPostIndex === -1) {\n                    if (\n                        post.notifications &&\n                        post.notifications.length > 0 &&\n                        new Date(post.notifications[0].date).getTime() >\n                            startTime\n                    ) {\n                        newUnseenPosts.push(post)\n                    } else {\n                        newOldPosts.push(post)\n                    }\n                } else {\n                    oldPosts[oldPostIndex] = post\n                }\n            }\n\n            for (let post of newOldPosts) {\n                const index = oldPosts.findIndex(item => {\n                    if (\n                        item &&\n                        item.notifications &&\n                        item.notifications.length > 0\n                    ) {\n                        return (\n                            new Date(item.notifications[0]).getTime() >\n                            new Date(post.notifications[0]).getTime()\n                        )\n                    } else return false\n                })\n                if (index === -1) {\n                    oldPosts.push(post)\n                } else {\n                    oldPosts.splice(index, 0, post)\n                }\n            }\n\n            let resultPosts = [...newUnseenPosts, ...oldPosts]\n            if (posts.length === 0) {\n                resultPosts = resultPosts.sort(sortPosts)\n            }\n            setPosts(resultPosts)\n        }\n    }, [currentPosts, statePosts])\n    if (!account._id) return null\n\n    let lastNotifications = []\n    for (let progress of account.followProgresses) {\n        if (progressData[progress])\n            lastNotifications = [\n                ...lastNotifications,\n                ...progressData[progress].notifications.filter(\n                    item =>\n                        item.code === 'add post' && item.user !== account._id\n                ),\n            ]\n    }\n\n    for (let group of account.groups) {\n        if (groupData[group])\n            lastNotifications = [\n                ...lastNotifications,\n                ...groupData[group].notifications.filter(\n                    item =>\n                        item.code === 'add post' && item.user !== account._id\n                ),\n            ]\n    }\n\n    lastNotifications = lastNotifications\n        .sort(sortNotifications)\n        .map(item => item.details.postId)\n        .slice(0, 10)\n\n    const neededPosts = [\n        ...new Set([\n            ...account.followPosts,\n            ...account.myPosts,\n            ...posts.map(post => post._id),\n            ...lastNotifications,\n        ]),\n    ]\n    if (!isEqual(currentPosts, neededPosts))\n        props.setData({ currentPosts: neededPosts })\n\n    props.setPageTitle({ main: 'Dashboard', sub: '' })\n\n    return posts.map(item => {\n        let text = null\n        const nots = item.notifications.filter(not => not.user !== account._id)\n        const not = nots.length > 0 ? nots[0] : null\n        if (not) {\n            switch (not.code) {\n                case 'edit wishlist item':\n                    text = 'edited item in wishlist.'\n\n                    break\n                case 'edit goal':\n                    text = 'edited goal.'\n\n                    break\n                case 'edit perk':\n                    text = 'edited item in shop.'\n\n                    break\n\n                case 'comment':\n                    text = 'added a comment.'\n\n                    break\n                case 'edit comment':\n                    text = 'edited a comment.'\n\n                    break\n                case 'like':\n                    text = 'added a like.'\n\n                    break\n                case 'dislike':\n                    text = 'removed a like.'\n\n                    break\n                default:\n                    text = null\n                    break\n            }\n        }\n        return (\n            <>\n                <div\n                    style={{\n                        height: '5px',\n                        background: '#ddd',\n                        width: 'calc(100% + 8px)',\n                        position: 'absolute',\n                        left: '-8px',\n                    }}\n                />\n                <div style={{ paddingTop: '10px' }}>\n                    {text && (\n                        <>\n                            <span>\n                                <UserButton\n                                    id={not.user}\n                                    noAva={true}\n                                    span={true}\n                                    style={{ fontWeight: 'bold' }}\n                                />{' '}\n                                {text}\n                            </span>\n                            <Divider\n                                type=\"horizontal\"\n                                style={{ margin: '5px 0' }}\n                            />\n                        </>\n                    )}\n                    <Post\n                        friendData={friendData}\n                        account={account}\n                        post={item}\n                        progressData={progressData}\n                        groupData={groupData}\n                    />\n                </div>\n            </>\n        )\n    })\n}\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        account: state.account,\n        statePosts: state.post,\n        progress: state.progress,\n        friendData: state.friendData,\n        progressData: state.progressData,\n        groupData: state.groupData,\n        currentPosts: state.currentPosts,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: data => {\n            dispatch(actions.setData(data))\n        },\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(DashboardPosts)\n)\n","import React from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\n\nimport UserButton from '../../components/UserButton/UserButton'\nimport Comment from 'antd/es/comment'\nimport Divider from 'antd/es/divider'\nimport moment from 'moment'\n\nmoment().format()\n\nconst DashboardEvents = props => {\n    const { lastNotifications } = props\n    const getRewardText = item => (\n        <span style={{ fontWeight: 'bold' }}>\n            {item.details.reward.money\n                ? '$' + item.details.reward.money\n                : item.details.reward.simple || item.details.reward.itemName}\n        </span>\n    )\n\n    const getStageName = stage => {\n        let stageDate\n        if (stage.day) {\n            stageDate = moment()\n                .year(stage.year)\n                .dayOfYear(stage.day)\n            return stageDate.format('dddd D MMM YYYY')\n        } else if (stage.week) {\n            stageDate = moment()\n                .year(stage.year)\n                .week(stage.week)\n            return (\n                stageDate.startOf('week').format('wo [week] D MMM YYYY - ') +\n                stageDate.endOf('week').format('D MMM YYYY')\n            )\n        } else if (stage.month) {\n            stageDate = moment()\n                .year(stage.year)\n                .month(stage.month)\n            return stageDate.format('MMMM YYYY')\n        } else if (stage.year) {\n            stageDate = moment().year(stage.year)\n            return stageDate.format('YYYY')\n        }\n    }\n    return lastNotifications.map(item => {\n        let text = null,\n            stageName\n\n        switch (item.code) {\n            case 'change name':\n                text = (\n                    <span>\n                        {' '}\n                        <UserButton span={true} noAva={true} id={item.user} />\n                        {' changed name.'}\n                    </span>\n                )\n                break\n            case 'delete account':\n                text = (\n                    <span>\n                        {item.user}\n                        deleted account.\n                    </span>\n                )\n                break\n            case 'friend request':\n                text = (\n                    <span>\n                        <UserButton span={true} noAva={true} id={item.user} />\n                        {' wants to become friends with you.'}\n                    </span>\n                )\n                break\n            case 'friend add':\n                text = (\n                    <span>\n                        <UserButton span={true} noAva={true} id={item.user} />\n                        {' and '}\n                        <UserButton\n                            span={true}\n                            noAva={true}\n                            id={item.details.friend}\n                        />\n                        {' became friends.'}\n                    </span>\n                )\n                break\n            case 'unfriend':\n                text = (\n                    <span>\n                        <UserButton span={true} noAva={true} id={item.user} />\n                        {' and '}\n                        <UserButton\n                            span={true}\n                            noAva={true}\n                            id={item.details.friend}\n                        />\n                        {' stopped being friends.'}\n                    </span>\n                )\n                break\n            case 'add wishlist item':\n            case 'edit wishlist item':\n                text = (\n                    <span>\n                        <UserButton span={true} noAva={true} id={item.user} />{' '}\n                        {item.code === 'add wishlist item'\n                            ? 'added to wishlist a new item'\n                            : 'edited in wishlist'}{' '}\n                        <span\n                            style={{ fontWeight: 'bold' }}\n                            onClick={() =>\n                                props.history.push(\n                                    `/wishlist/${item.user}/${\n                                        item.details.itemId\n                                    }`\n                                )\n                            }\n                        >\n                            {item.details.itemName}\n                        </span>{' '}\n                        .\n                    </span>\n                )\n                break\n            case 'delete wishlist item':\n                text = (\n                    <span>\n                        <UserButton span={true} noAva={true} id={item.user} />\n                        {' deleted '}\n                        {item.details.itemName} from wishlist.\n                    </span>\n                )\n                break\n            case 'add goal':\n            case 'edit goal':\n                text = (\n                    <span>\n                        <UserButton span={true} noAva={true} id={item.user} />{' '}\n                        {item.code === 'add goal'\n                            ? 'added a new goal'\n                            : 'edited goal'}{' '}\n                        <span\n                            style={{ fontWeight: 'bold' }}\n                            onClick={() =>\n                                props.history.push(\n                                    `/goals/${item.user}/${item.details.itemId}`\n                                )\n                            }\n                        >\n                            {item.details.itemName}\n                        </span>\n                        {' .'}\n                    </span>\n                )\n                break\n            case 'delete goal':\n                text = (\n                    <span>\n                        <UserButton span={true} noAva={true} id={item.user} />\n                        {' deleted '}\n                        {item.details.itemName} from goals.\n                    </span>\n                )\n                break\n            case 'add perk':\n            case 'edit perk':\n                text = (\n                    <span>\n                        <UserButton span={true} noAva={true} id={item.user} />{' '}\n                        {item.code === 'add perk'\n                            ? 'added to shop a new item'\n                            : 'edited in shop'}{' '}\n                        <span\n                            style={{ fontWeight: 'bold' }}\n                            onClick={() =>\n                                props.history.push(\n                                    `/shop/${item.user}/${item.details.itemId}`\n                                )\n                            }\n                        >\n                            {item.details.itemName}\n                        </span>\n                        {' .'}\n                    </span>\n                )\n                break\n            case 'delete perk':\n                text = (\n                    <span>\n                        <UserButton span={true} noAva={true} id={item.user} />\n                        {' deleted '}\n                        {item.details.itemName} from shop.\n                    </span>\n                )\n                break\n            case 'buy perk':\n                text = (\n                    <span>\n                        <UserButton span={true} noAva={true} id={item.user} />\n                        {' bought '}\n                        <span\n                            style={{ fontWeight: 'bold' }}\n                            onClick={() =>\n                                props.history.push(\n                                    `/shop/${item.user}/${item.details.itemId}`\n                                )\n                            }\n                        >\n                            {item.details.itemName} (${item.details.price})\n                        </span>\n                        {' from '}\n                        <UserButton\n                            span={true}\n                            noAva={true}\n                            id={item.details.owner}\n                        />\n                        {' .'}\n                    </span>\n                )\n                break\n            case 'cancel transaction':\n            case 'confirm transaction':\n                text = (\n                    <span>\n                        <UserButton span={true} noAva={true} id={item.user} />{' '}\n                        {item.code === 'cancel transaction'\n                            ? 'cancelled'\n                            : 'confirmed'}\n                        {' purchase of '}\n                        <span\n                            style={{ fontWeight: 'bold' }}\n                            onClick={() =>\n                                props.history.push(\n                                    `/shop/${item.user}/${item.details.itemId}`\n                                )\n                            }\n                        >\n                            {item.details.itemName} (${item.details.price})\n                        </span>\n                        {' by '}\n                        <UserButton\n                            span={true}\n                            noAva={true}\n                            id={item.details.buyer}\n                        />\n                        {' .'}\n                    </span>\n                )\n                break\n            case 'start progress':\n                text = (\n                    <span>\n                        <UserButton span={true} noAva={true} id={item.user} />\n                        {' started participating in progress '}\n                        <span\n                            style={{ fontWeight: 'bold' }}\n                            onClick={() =>\n                                props.history.push(\n                                    `/inspirations/${item.details.itemId}`\n                                )\n                            }\n                        >\n                            {item.details.itemName}\n                        </span>\n                        {' as '}\n                        {item.details.as}.\n                    </span>\n                )\n                break\n            case 'stage approve':\n            case 'stage progress':\n            case 'stage fail':\n            case 'stage dismiss':\n                stageName = getStageName(item.details)\n                text = (\n                    <span>\n                        <UserButton span={true} noAva={true} id={item.user} />\n                        {item.code === 'stage approve'\n                            ? ' approved  '\n                            : item.code === 'stage progress'\n                            ? ' put into process '\n                            : item.code === 'stage fail'\n                            ? ' marked as failed '\n                            : ' dismissed '}\n                        <span\n                            style={{ fontWeight: 'bold' }}\n                            onClick={() =>\n                                props.history.push(\n                                    `/inspirations/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </span>\n                        {stageName && (\n                            <>\n                                {' for '}\n                                <span style={{ fontWeight: 'bold' }}>\n                                    {stageName}\n                                </span>\n                            </>\n                        )}\n                        .\n                    </span>\n                )\n                break\n\n            case 'stage complete':\n                text = (\n                    <span>\n                        {'Progress '}\n                        <span\n                            style={{ fontWeight: 'bold' }}\n                            onClick={() =>\n                                props.history.push(\n                                    `/inspirations/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </span>\n                        {stageName && (\n                            <>\n                                {' for '}\n                                <span style={{ fontWeight: 'bold' }}>\n                                    {stageName}\n                                </span>\n                            </>\n                        )}\n\n                        {' was approved and finished.'}\n                    </span>\n                )\n                break\n            case 'milestone finish':\n                text = (\n                    <span>\n                        Milestone {item.details.itemName}\n                        {' in progress '}\n                        <span\n                            style={{ fontWeight: 'bold' }}\n                            onClick={() =>\n                                props.history.push(\n                                    `/inspirations/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </span>\n                        {' was approved and finished.'}\n                    </span>\n                )\n                break\n            case 'get reward':\n                text = (\n                    <span>\n                        <UserButton span={true} noAva={true} id={item.user} />\n                        {' recieved '}\n                        {getRewardText(item)}\n                        {' as a reward from '}\n                        <UserButton\n                            span={true}\n                            noAva={true}\n                            id={item.details.from}\n                        />\n                        {' in progress '}\n                        <span\n                            style={{ fontWeight: 'bold' }}\n                            onClick={() =>\n                                props.history.push(\n                                    `/inspirations/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </span>\n                        .\n                    </span>\n                )\n                break\n            case 'leave progress':\n                text = (\n                    <span>\n                        <UserButton span={true} noAva={true} id={item.user} />\n                        {' left progress '}\n                        <span\n                            style={{ fontWeight: 'bold' }}\n                            onClick={() =>\n                                props.history.push(\n                                    `/inspirations/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </span>\n                        .\n                    </span>\n                )\n                break\n            case 'edit progress':\n                text = (\n                    <span>\n                        <UserButton span={true} noAva={true} id={item.user} />\n                        {' edited progress '}\n                        <span\n                            style={{ fontWeight: 'bold' }}\n                            onClick={() =>\n                                props.history.push(\n                                    `/inspirations/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </span>\n                        {item.details.addedAccounts.length > 0 ? (\n                            <>\n                                {' and added '}\n                                {item.details.addedAccounts.map(ac => (\n                                    <UserButton\n                                        span={true}\n                                        noAva={true}\n                                        id={ac}\n                                    />\n                                ))}{' '}\n                            </>\n                        ) : (\n                            ''\n                        )}\n                        {item.details.droppedAccounts.length > 0 ? (\n                            <>\n                                {' and removed '}\n                                {item.details.droppedAccounts.map(ac => (\n                                    <UserButton\n                                        span={true}\n                                        noAva={true}\n                                        id={ac}\n                                    />\n                                ))}\n                                {' .'}\n                            </>\n                        ) : (\n                            '.'\n                        )}\n                    </span>\n                )\n                break\n            case 'remove from progress':\n                text = (\n                    <span>\n                        <UserButton span={true} noAva={true} id={item.user} />\n                        {' removed '}\n                        <UserButton\n                            span={true}\n                            noAva={true}\n                            id={item.details.account}\n                        />\n                        {' from progress '}\n                        <span\n                            style={{ fontWeight: 'bold' }}\n                            onClick={() =>\n                                props.history.push(\n                                    `/inspirations/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </span>\n                        .\n                    </span>\n                )\n                break\n            case 'add to progress':\n                text = (\n                    <span>\n                        <UserButton span={true} noAva={true} id={item.user} />\n                        {' added '}\n                        <UserButton\n                            span={true}\n                            noAva={true}\n                            id={item.details.account}\n                        />\n                        {' to progress '}\n                        <span\n                            style={{ fontWeight: 'bold' }}\n                            onClick={() =>\n                                props.history.push(\n                                    `/inspirations/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </span>\n                        .\n                    </span>\n                )\n                break\n            case 'add reward':\n                text = (\n                    <span>\n                        <UserButton span={true} noAva={true} id={item.user} />\n                        {' added '}\n                        {getRewardText(item)} as a reward for\n                        {!item.details.for || item.details.for.length === 0\n                            ? ' all '\n                            : item.details.for.map(account => (\n                                  <>\n                                      <UserButton\n                                          noAva={true}\n                                          span={true}\n                                          id={account}\n                                      />\n                                      ,\n                                  </>\n                              ))}\n                        {' in progress '}\n                        <span\n                            style={{ fontWeight: 'bold' }}\n                            onClick={() =>\n                                props.history.push(\n                                    `/inspirations/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </span>\n                        .\n                    </span>\n                )\n                break\n            case 'delete reward':\n                text = (\n                    <span>\n                        <UserButton span={true} noAva={true} id={item.user} />\n                        {' removed '}\n                        {getRewardText(item)}\n                        {' as a reward for '}\n                        {!item.details.for || item.details.for.length === 0\n                            ? ' all '\n                            : item.details.for.map(account => (\n                                  <>\n                                      <UserButton\n                                          span={true}\n                                          noAva={true}\n                                          id={account}\n                                      />\n                                      ,\n                                  </>\n                              ))}\n                        {' in progress '}\n                        <span\n                            style={{ fontWeight: 'bold' }}\n                            onClick={() =>\n                                props.history.push(\n                                    `/inspirations/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </span>\n                        .\n                    </span>\n                )\n                break\n            default:\n                text = 'New event'\n                break\n        }\n        return (\n            <>\n                <Divider style={{ margin: '5px 0px' }} />\n                <Comment\n                    avatar={\n                        <UserButton noName={true} id={item.user} span={true} />\n                    }\n                    content={text}\n                />\n            </>\n        )\n\n        // <Card>{text}</Card>\n    })\n}\nconst mapStateToProps = state => {\n    return {\n        lastNotifications: state.lastNotifications,\n    }\n}\n\nexport default withRouter(connect(mapStateToProps)(DashboardEvents))\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport * as wsActions from '../../websocketActions'\n\nimport Tabs from 'antd/es/tabs'\nimport DashboardPosts from './DashboardPosts'\nimport DashboardEvents from './DashboardEvents'\nimport Badge from 'antd/es/badge'\nimport Helmet from 'react-helmet'\n\nconst Progress = props => {\n    const { account, lastNotifications } = props\n\n    if (!account._id) return null\n\n    props.setPageTitle({ main: 'Dashboard', sub: '' })\n\n    let numberOfUnseenNots = 0\n    for (let not of lastNotifications) {\n        if (parseInt(not.notId) > parseInt(account.lastSeenNot || 0))\n            numberOfUnseenNots++\n    }\n\n    return (\n        <div className=\"contentDiv\">\n            <Helmet>\n                <title>Addspire Dashboard with with great posts and news</title>\n                <meta\n                    name=\"description\"\n                    content=\"Addspire is a social network where you can inspire and motivate yourself or the people you care.\"\n                />\n            </Helmet>\n            <Tabs\n                onChange={activeTab => {\n                    if (activeTab === 'events') {\n                        const last = parseInt(\n                            lastNotifications.reduce((res, not) => {\n                                return parseInt(not.notId) > parseInt(res)\n                                    ? not.notId\n                                    : res\n                            }, 0)\n                        )\n                        if (\n                            lastNotifications.length > 0 &&\n                            parseInt(account.lastSeenNot) !== last\n                        ) {\n                            wsActions.setLastSeenNot(account._id, last)\n                        }\n                    }\n                }}\n            >\n                <Tabs.TabPane tab=\"Posts\" key=\"posts\">\n                    <DashboardPosts />\n                </Tabs.TabPane>\n\n                <Tabs.TabPane\n                    tab={\n                        <Badge count={numberOfUnseenNots} offset={[10, 0]}>\n                            Events\n                        </Badge>\n                    }\n                    key=\"events\"\n                >\n                    <DashboardEvents />\n                </Tabs.TabPane>\n            </Tabs>\n        </div>\n    )\n}\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n        lastNotifications: state.lastNotifications,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Progress)\n","import { webSocket } from '../containers/ConnectWebsocket/ConnectWebsocket'\n\nexport const setLastSeenNot = (accountId, notId) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'setLastSeenNot',\n                accountId,\n                notId,\n            })\n        )\n    }\n}\n","import React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport axios from 'axios'\nimport InfiniteScroll from 'react-infinite-scroller'\nimport message from 'antd/es/message'\n\nimport Input from 'antd/es/input'\nimport MasonryGrid from '../../components/MasonryGrid'\nimport MasonryCard from '../../components/MasonryCard'\nimport Helmet from 'react-helmet'\n\nconst Explore = props => {\n    useEffect(() => {\n        props.setPageTitle({ main: 'Explore', sub: '' })\n    }, [])\n    const [isSearching, setIsSearching] = useState(false)\n    const [foundProgresses, setFoundProgresses] = useState([])\n    const [progresses, setProgresses] = useState([])\n    const [noMore, setNoMore] = useState(false)\n    const [noMorePopular, setNoMorePopular] = useState(false)\n    const [searchValue, setSearchValue] = useState('')\n\n    const onSearch = (value, noNoMore) => {\n        if (!noMore || noNoMore) {\n            setNoMore(true)\n            axios\n                .post('/api/explore/search', {\n                    value: value || searchValue,\n                    skip: noNoMore ? 0 : foundProgresses.length,\n                })\n                .then(res => {\n                    if (res.data.success) {\n                        setNoMore(res.data.noMore)\n                        setFoundProgresses(res.data.progresses)\n                        if (res.data.progresses.length === 0)\n                            message.warning('There are no progresses found.')\n                        const newFriendData = {}\n                        for (let friend of res.data.friends) {\n                            newFriendData[friend._id] = friend\n                        }\n                    } else {\n                        if (res.data.errorCode) {\n                            message.error(\n                                'Something is wrong with the data. Please try one more time with new data.'\n                            )\n                        }\n                    }\n                })\n                .catch(err => {})\n        }\n    }\n\n    const onGetPopular = () => {\n        console.log('lets get more')\n        console.log(noMorePopular)\n        if (!noMorePopular) {\n            setNoMorePopular(true)\n            axios\n                .post('/api/explore/popular', {\n                    skip: progresses.length,\n                })\n                .then(res => {\n                    if (res.data.success) {\n                        setNoMorePopular(res.data.noMore)\n                        setProgresses([...progresses, ...res.data.progresses])\n                        const newFriendData = {}\n                        for (let friend of res.data.friends) {\n                            newFriendData[friend._id] = friend\n                        }\n                    } else {\n                        if (res.data.errorCode) {\n                            message.error(\n                                'Something is wrong with the data. Please try one more time with new data.'\n                            )\n                        }\n                    }\n                })\n                .catch(err => {})\n        }\n    }\n\n    return (\n        <div>\n            <Helmet>\n                <title>\n                    Explore inspirations and ideas from around the World!\n                </title>\n                <meta\n                    name=\"description\"\n                    content=\"Addspire is a social network where you can inspire and motivate yourself or the people you care.\"\n                />\n            </Helmet>\n            <Input.Search\n                placeholder=\"Find great inspirations!\"\n                onSearch={value => {\n                    if (value) {\n                        setIsSearching(true)\n                        if (value !== searchValue) {\n                            setNoMore(false)\n                            setFoundProgresses([])\n                            setSearchValue(value)\n                            onSearch(value, true)\n                        }\n                    } else {\n                        setNoMore(false)\n                        setSearchValue(value)\n                        setIsSearching(false)\n                    }\n                }}\n                onChange={e => {\n                    if (!e.target.value) {\n                        setNoMore(false)\n                        setFoundProgresses([])\n                        setIsSearching(false)\n                        setSearchValue('')\n                    }\n                }}\n                enterButton\n                allowClear\n                style={{\n                    maxWidth: '500px',\n                    borderRadius: '10px',\n                }}\n            />\n            {isSearching ? (\n                foundProgresses.length > 0 ? (\n                    <InfiniteScroll\n                        pageStart={0}\n                        loadMore={onSearch(searchValue)}\n                        hasMore={!noMore}\n                        loader={\n                            <div className=\"loader\" key={0}>\n                                Loading ...\n                            </div>\n                        }\n                    >\n                        <MasonryGrid>\n                            {foundProgresses.map((item, index) => (\n                                <MasonryCard\n                                    key={index}\n                                    onClickLink={'/inspirations/' + item._id}\n                                    images={item.goal.images}\n                                    body={\n                                        <>\n                                            {/* <UserButton\n                                                noName={true}\n                                                id={item.owner}\n                                                friendDataExp={friendData}\n                                            /> */}\n                                            <span\n                                                style={{ fontWeight: 'bold' }}\n                                            >\n                                                {item.name}\n                                            </span>\n                                        </>\n                                    }\n                                />\n                            ))}\n                        </MasonryGrid>\n                    </InfiniteScroll>\n                ) : null\n            ) : (\n                <InfiniteScroll\n                    pageStart={0}\n                    loadMore={onGetPopular}\n                    hasMore={!noMorePopular}\n                    loader={\n                        <div className=\"loader\" key={0}>\n                            Loading ...\n                        </div>\n                    }\n                >\n                    <MasonryGrid>\n                        {progresses.map((item, index) => (\n                            <MasonryCard\n                                key={index}\n                                onClickLink={'/inspirations/' + item._id}\n                                images={item.goal.images}\n                                body={\n                                    <>\n                                        {/* <UserButton\n                                            noName={true}\n                                            id={item.owner}\n                                            friendDataExp={friendData}\n                                        /> */}\n                                        <span style={{ fontWeight: 'bold' }}>\n                                            {item.name}\n                                        </span>\n                                    </>\n                                }\n                            />\n                        ))}\n                    </MasonryGrid>\n                </InfiniteScroll>\n            )}\n        </div>\n    )\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n        setData: data => dispatch(actions.setData(data)),\n    }\n}\n\nexport default connect(\n    null,\n    mapDispatchToProps\n)(Explore)\n","import React, { useEffect, useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport Helmet from 'react-helmet'\nimport axios from 'axios'\n\nconst styles = `<style> article,  aside,  details,  figcaption,  figure,  footer,  header,  hgroup,  menu,  nav,  section {      display: block;  }   html {      height: 100%;      padding: 0;      margin: 0;  }   body {      margin: auto;      font-weight: 300;      font-family: 'Open Sans', sans-serif !important;      color: #444;      font-size: 17px;      line-height: 1.231;      height: 100%;  }   .clearafter:after {      clear: both;      content: '.';      display: block;      height: 0;      visibility: hidden;  }   h1 {      margin: 0px;  }   .twofold a {      color: #888;      text-decoration: none;  }   .twofold a:hover {      color: #3665c1;  }   .twofold {      display: inline-block;      margin: 5px 0px;      width: 143px;      padding-left: 35px;      font-family: 'Open Sans', sans-serif !important;      color: #999;      font-size: 12px;  }   .twofold_mail {      display: inline-block;      margin: 5px 0px;      cursor: pointer;      color: #999;      padding-left: 35px;      width: 120px;      font-family: 'Open Sans', sans-serif !important;      font-size: 12px;  }   .twofold_mail:hover {      color: #4683ea;  }   .wrapp {      min-height: 100%;      position: relative;      margin: auto;  }   .cont {      width: 94%;      margin: auto;      padding-bottom: 320px;      text-align: center;  }   .logo_back {      padding: 9px 4%;  }   a.logo {      border: none;      text-decoration: none;  }   a img {      border: none;  }   .maintext0 {      font-weight: 300;      font-size: 45px;      color: #222;      margin: 50px auto 10px;      text-align: center;  }   .maintext1 {      font-size: 20px;      font-weight: 300;      letter-spacing: -1px;      margin: 0px auto 20px;      text-align: center;  }   .leftTitle {      font-size: 22px;      font-weight: 600;      margin: 20px auto 20px;      text-align: left;  }   .maintext2 {      font-size: 37px;      font-weight: 300;      text-align: center;      margin: 100px 0px 0px;      color: #222;  }   .maintext3 {      font-size: 22px;      font-weight: 300;      text-align: center;      margin: 50px 0px 20px;      color: #222;  }   .maintext4 {      font-size: 37px;      font-weight: 300;      text-align: center;      margin: 25px 0px 35px;      color: #222;  }   .contactusleft:hover {      background: #FF5935;  }   .facebookleft:hover {      background: #2350A2;  }   .googleleft:hover {      background: #d34836;  }   .linkedinleft:hover {      background: #006699;  }   .twitterleft:hover {      background: #00ACEF;  }   .twitterleft,  .linkedinleft,  .googleleft,  .facebookleft,  .contactusleft {      background: none;      border: none;      cursor: pointer;      width: 28px;      height: 34px;      outline: none;  }   .noselect {      -webkit-touch-callout: none;      -webkit-user-select: none;      -khtml-user-select: none;      -moz-user-select: none;      -ms-user-select: none;      user-select: none;  }   .totop {      position: absolute;      color: #2B7BC7;      bottom: 0px;      right: 0px;      text-decoration: none;      font-size: 15px;  }   .totop:hover {      text-decoration: underline;  }   .totopmap {      margin-left: 965px;      color: #2B7BC7;      text-decoration: none;      font-size: 15px;  }   .totopmap:hover {      text-decoration: underline;  }   .arrow {      padding-right: 15px;  }   .regulartitlemap {      color: #535353;      font-size: 25px;      font-weight: normal;      margin: 100px 0px 20px 20px;      font-weight: 600;  }   .regulartitleprice {      top: 0px;      color: #535353;      font-size: 25px;      font-weight: normal;      margin: 80px 0px 0px 20px;      font-weight: 600;  }   .even {      padding: 3px;      border-bottom: 1px solid #EEE;      height: 34px;  }   .even:hover {      background-color: #EAFBFB;  }   .pricing {      width: 700px;      margin: auto;      border: 0px solid black;      border-bottom: none;      border-bottom: 1px solid black;      border-collapse: collapse;      font-size: 17px;      text-align: center;      margin-top: 70px;  }   .countries {      list-style-type: none;      top: 0px;      margin: 100px 0px 100px;      text-align: left;  }   .countries li {      width: 188px;      margin: 5px 0 24px 0px;      display: inline-block;  }   .countries li.clear {      clear: left;  }   .countries li svg {      float: left;      margin: 0 10px 0 0;      border: 1px solid #e6e6e6;  }   .countries li a {      display: table;      width: 160px;      color: #666;      *display: block;      *position: relative;      cursor: pointer;      text-decoration: none;      vertical-align: middle;  }   .countries li a:hover {      color: #08c;  }   .countries li span {      display: table-cell;      width: 160px;      vertical-align: middle;      *display: block;      *position: absolute;      *top: 50%;  }   .countries li span span {      width: 100%;      *display: block;      *position: relative;      *top: -50%;  }   /* .menu { position:absolute; left:196px; top:27px; *font-family: arial, sans-serif; } .menu ul{ \tmargin:0px; \tlist-style-type: none; } .menu ul li{ \tfloat:left; \tpadding:0px; \tmargin:0px 35px 0px 5px; } .menu ul li a { \tdisplay:table; \tcolor:#999;     height:24px; \tcursor:pointer; \ttext-decoration:none; \tvertical-align:middle; } .menu ul li a:hover {  color:#333; } .menu ul li span { \tdisplay:table-cell;  padding: 0px;  font-size:14px; \tfont-weight:600; \tvertical-align:middle; \ttext-align:center; } .login {  font-size:14px;  font-weight:600;  text-align:center;  display:table;  color:#999;  cursor:pointer;  text-decoration:none;  line-height:0; } .login:hover {  color:#333; } .signup {  font-size:14px;  font-weight:600;  text-align:center;  display:table;  color:#999;  cursor:pointer;  text-decoration:none;  line-height:0; } .signup:hover {  color:#333; } */  .menu {      position: absolute;      right: 240px;      top: 27px;      *font-family: arial, sans-serif;  }   .menu ul {      margin: 0px;      list-style-type: none;  }   .menu ul li {      float: left;      padding: 0px;      margin: 0px 45px 0px 5px;  }   .menu ul li a {      display: table;      color: #888;      height: 24px;      cursor: pointer;      text-decoration: none;      vertical-align: middle;  }   .menu ul li a:hover {      color: #333;  }   .menu ul li span {      display: table-cell;      padding: 0px;      font-size: 14px;      font-weight: 600;      vertical-align: middle;      text-align: center;  }   .login {      font-size: 14px;      font-weight: 600;      text-align: center;      display: table;      color: #888;      cursor: pointer;      text-decoration: none;      line-height: 0;  }   .login:hover {      color: #333;  }   .signup {      font-size: 14px;      font-weight: 600;      text-align: center;      display: table;      color: #888;      cursor: pointer;      text-decoration: none;      line-height: 0;  }   .signup:hover {      color: #333;  }   .language {      cursor: pointer;  }   .language:hover {}   .language svg {      border: 1px solid #e6e6e6;  }   .download {      height: 24px;      background: #1EAB4B;      padding: 0px 25px 0px;      float: right;      border: none;      border-radius: 3px;      color: white;      font-family: 'Open Sans';      font-weight: 900;  }   button {      cursor: pointer;  }   .download:hover {      background: #27ae60;  }   .social_footer {      padding-left: 35px;      height: 12px;      display: inline-block;      margin: 5px 0px;      width: 120px;  }   .social_footer p {      float: left;      display: inline;      margin: 0px 13px;      color: #999;  }   .social_footer svg {      float: left;      display: inline;  }   .tmsdownloads {      background: #1EAB4B;      border: none;      line-height: 13px;      cursor: pointer;      min-height: 37px;      padding: 7px 0px;      color: #fff;      font-size: 15px;      font-family: 'Open Sans', sans-serif;      font-weight: 600;      border-radius: 3px;      -webkit-border-radius: 3px;      -moz-border-radius: 3px;      -khtml-border-radius: 3px;  }   .tmsdownloads:hover {      background: #27ae60;  }   .blueBut {      background: #4683ea;      border: none;      cursor: pointer;      height: 37px;      color: #fff;      font-size: 15px;      font-family: 'Open Sans', sans-serif;      font-weight: 600;      border-radius: 3px;      -webkit-border-radius: 3px;      -moz-border-radius: 3px;      -khtml-border-radius: 3px;  }   .blueBut:hover {      background: #4d92f7;  }   .orderBut {      background: #F6F9FF;      outline: none;  }   .orderBut:hover {      background: #dce9ff;  }   .hpLoginBlocks {      vertical-align: top;      max-width: 400px;      min-width: 310px;      width: 100%;      display: inline-block;      margin-bottom: 30px;  }   .market:hover {      box-shadow: 1px 2px #ddd;  }   #readMore {      margin: 30px auto 0px;      color: #0087e2;      fill: #0087e2;      cursor: pointer;  }   #readMore:hover,  #readMore:hover path {      color: #4d92f7;      fill: #4d92f7;  }   .simplelink {      text-decoration: none;      color: #333;  }   .simplelink:hover {      text-decoration: none;      color: #3665c1;  }   .right_submenu {      position: absolute;      height: 39px;      right: 45px;      top: 18px;      display: block;      border: 1px solid #E6E6E6;  }   footer {      font-size: 12px;      background: #f3f3f3;      background: -moz-linear-gradient(top, #f3f3f3 0, #fff 100%);      background: -webkit-gradient(linear, left top, left bottom, color-stop(0, #f3f3f3), color-stop(100%, #fff));      background: -webkit-linear-gradient(top, #f3f3f3 0, #fff 100%);      background: -o-linear-gradient(top, #f3f3f3 0, #fff 100%);      background: -ms-linear-gradient(top, #f3f3f3 0, #fff 100%);      background: linear-gradient(top, #f3f3f3 0, #fff 100%);      font-size: 12px;      padding: 30px 0 0px;      margin-top: 100px;      width: 100%;      height: 158px;      color: #888;      position: absolute;      bottom: 0px;  }   .footer_header {      font-weight: 300;      color: #555;      font-size: 13px;      text-align: left;      padding-left: 35px;  }   .flag svg {      border: 1px solid #e6e6e6;  }   .price {      width: 80%;      margin: auto;      border-collapse: collapse;  }   .price tr {      height: 36px;      border-bottom: 1px solid #ddd;  }   table .yel:hover td {      background: #e7f4fd;  }   .gre {      padding-left: 10px;      background: #fff;  }   .price button {      cursor: pointer;      font-size: 23px;      color: #fff;      border: none;      border-radius: 3px;      min-height: 40px;      box-shadow: 0px 2px 1px 1px #adadad;      padding: 0px 35px;  }   .doodle {      height: 0px;      position: relative;      bottom: 26px;  }   .signup_free {      background: #1EAB4B;  }   .signup_free:hover {      background: #27ae60;  }   .signup_pro {      background: #1548B8;  }   .signup_pro:hover {      background: #1851CE;  }   .free {      color: #1EAB4B;      font-size: 13px;      background: #f5f5f5;  }   .pro {      color: #1548B8;      font-size: 13px;      background: #f5f5f5;  }   .pricing_image {      margin: 85px auto 0px;      text-align: center;  }   .tworow {      width: 49.999%;      float: left;      display: inline;      text-align: center;      margin-top: 80px;  }   .tworow>div {      width: 30%;      max-width: 80px;      text-align: center;      margin: auto;  }   .half {      margin: 10px 10%;      text-align: center;      line-height: 1.6;  }   .oneimage {      text-align: center;      margin: auto;      margin-top: 85px;      max-width: 750px;      width: 100%;  }   #placeholder #lozenge {      fill: #666;  }   #placeholder:hover #lozenge {      fill: url(#SVGID_1_);  }   .passbut:hover {      text-decoration: underline;  }   #regbut:hover {      background: #21b951;  }   #loginbut:hover {      background: #70bcf0;  }   .passbut {      text-decoration: none;      color: #4683ea;  }   #regbut {      background: #1eab4b;  }   #loginbut {      background: #51aded;  }   input {      width: 300px;      height: 35px;      border: 1px solid #cccccc;      border-radius: 3px;      -webkit-border-radius: 3px;      -moz-border-radius: 3px;      -khtml-border-radius: 3px;      color: #555555;      font-size: 15px;  }   input[type='checkbox'] {      height: 16px;      width: 16px;  }   .linksimple {      color: #4683ea;      text-decoration: none;  }   .linksimple:hover {      color: #4683ea;      text-decoration: underline;  }   .linksimple:visited {      color: #4683ea;      text-decoration: none;  }   .LoginButton {      cursor: pointer;      border: none;      height: 62px;      color: white;      font-size: 16px;      font-weight: bold;      box-shadow: 0px 2px 1px 1px #adadad;      width: 330px;      margin: 15px auto 15px;      border-radius: 3px;      -webkit-border-radius: 3px;      -moz-border-radius: 3px;      -khtml-border-radius: 3px;  }   #reghome {      background: #1eab4b;  }   #reghome:hover {      background: #21b951;  }   .regtable {      width: 55%;      margin: auto;      border-collapse: collapse;      text-align: center;  }   .regtable tr {      height: 48px;  }   .regtable td {      width: 50%;  }   .regtable input {      padding-left: 5px;      height: 30px;      color: #111;      background: #fff;  }   ::-webkit-input-placeholder {      color: #999;  }   :-moz-placeholder {      color: #999;      opacity: 1;  }   ::-moz-placeholder {      color: #999;      opacity: 1;  }   :-ms-input-placeholder {      color: #999;  }   .logo_svg:hover polygon {      fill: #00CACD;  }   .logo_svg:hover path {      fill: #00CACD;  }   /* FLOAT DIV STYLES */  .floatDiv {      position: absolute;      background: grey;      width: 300px;      height: 200px;      resize: both;      overflow: hidden;      border: 1px solid #bbb;      top: 100px;      left: 300px;  }   .floatDivTH {      width: 100%;      height: 25px;      background: #eee;      border: 1px solid #bbb;      cursor: pointer;      line-height: 0px;  }   .floatDivTH td {      width: 25px;  }   .floatDivTH td:first-child {      width: auto;      white-space: nowrap;  }   .rollDiv {      left: 0px;      top: 0px;      width: 200px;      resize: none;  }   .expandDiv {      left: 0px;      top: 0px;      height: 100%;      width: 100%;      resize: none;      border: none;  }   .topPan {      width: 100%;      height: 25px;      background: #eee;  }   .topClose {      width: 25px;      height: 21px;      background: #eee;      top: 1px;      right: 2px;      text-align: center;      border: 1px solid #bbb;      cursor: pointer;  }   .topExpand {      width: 25px;      height: 21px;      background: #eee;      top: 1px;      right: 27px;      text-align: center;      border: 1px solid #bbb;      cursor: pointer;  }   .topRoll {      width: 25px;      height: 21px;      background: #eee;      top: 1px;      right: 53px;      text-align: center;      border: 1px solid #bbb;      cursor: pointer;  }   .dock {      left: 0px;      bottom: 0px;      height: 33px;      width: 200px;      resize: none;      position: absolute;      background: grey;      overflow: hidden;  }   .undock {      left: 0px;      bottom: 0px;      height: auto;      max-height: 100%;      width: 200px;      resize: none;      position: absolute;      background: grey;      overflow: hidden;      overflow-y: auto;  }   .expandDock {      position: absolute;      left: 199px;      bottom: 0px;      width: 33px;      height: 33px;      cursor: pointer;      background: #eee;  }   .expandDock table,  .expandDock table tr td {      border: 1px solid #bbb;      text-align: center;      width: 100%;      height: 100%;      line-height: 0;  }   .rollDiv .topPan {      cursor: pointer;  }   .floatDiv .topPan {      cursor: default;  }   .st0,  .floatDivTH path {      fill: #444 !important;  }   #ratioWrap {      width: 95%;      max-width: 640px;      display: inline-block;      position: relative;      margin: 40px auto 20px;      /* z-index:25; */  }   #ratioWrap:after {      padding-top: 56.25%;      display: block;      content: '';  }   #div1 {      margin: auto;      position: absolute;      top: 0;      bottom: 0;      right: 0;      left: 0;      cursor: pointer;      text-align: center;      background: #fff;      \" } #placeholder{   margin:auto;   position: absolute;   top: 0;   bottom: 0;   right: 0;   left: 0;   cursor:pointer;   text-align:center;   background:#fff;\"  }   #contLogin {      margin-top: 0px;      padding-top: 30px;      padding-bottom: 130px;  }   #header {      position: fixed;      height: 79px;      width: 100%;      display: block;      background: white;      z-index: 21;      top: 0px;  }   .prodList {      text-align: center;      width: 100%;      margin-top: 75px;  }   .prodList a {      color: inherit;      display: inline-block;      margin: 0px 46px;      width: 210px;      border: 1px solid #eee;      border-radius: 20px;      background: #F6F9FF;      box-shadow: 1px 2px #ddd;      cursor: pointer;      text-decoration: none;      vertical-align: top;  }   .prodList div {      display: inline-block;      margin: 0px 50px;      width: 210px;      border: 1px solid #eee;      border-radius: 20px;      background: #F6F9FF;      box-shadow: 1px 2px #ddd;      cursor: pointer;  }   .prodList table {      width: 100%;      border-collapse: collapse;      border: none;      text-align: center;  }   .prodList tr:first-child td {      padding-top: 33px;  }   .prodList tr:nth-child(2) td {      padding: 9px 20px 20px;  }   .prodList tr:last-child td {      padding: 0px 20px 33px;      font-size: 14px;  }   .appList {      text-align: center;      width: 100%;      margin-top: 75px;  }   .appList a {      color: inherit;  }   .appList div {      display: inline-block;      margin: 0px 50px;      width: 210px;      cursor: pointer;  }   .sharePan {      width: 100%;      list-style-type: none;      padding: 0;  }   .sharePan li {      width: 25%;      float: left;      box-sizing: border-box;      height: 30px;  }   .sharePan a {      color: white;      text-decoration: none;      display: block;      width: 100%;      height: 100%;      position: relative;  }   .sharePan a div {      position: absolute;      top: 5px;      left: 40px;      font-weight: 700;  }   .sharePan a svg {      margin: 8px 15px;  }   .sharePan li:nth-child(1) {      background: #3b5998;  }   .sharePan li:nth-child(2) {      background: #1da1f2;  }   .sharePan li:nth-child(3) {      background: #006fa6;  }   .sharePan li:nth-child(4) {      background: #db4437;  }   .tag {      display: inline-block;      border-radius: 3px;      padding: 4px 20px;      margin: 5px 10px 5px 0px;      border: 1px solid transparent;      cursor: pointer;      font-size: 15px;      -webkit-touch-callout: none;      -webkit-user-select: none;      -khtml-user-select: none;      -moz-user-select: none;      -ms-user-select: none;      user-select: none;  }   .processes .tag {      background: rgba(70, 131, 234, 0.2);  }   .processes .tag:hover {      border: 1px solid background:rgba(70, 131, 234, 0.5);      background: rgba(70, 131, 234, 0.4);  }   .processes .activeTag {      background: rgba(70, 131, 234, 1);      color: white;  }   .processes .activeTag:hover {      background: #4d92f7;      border: 1px solid #4d92f7;  }   .services .tag {      background: rgba(30, 171, 75, 0.2);  }   .services .tag:hover {      border: 1px solid background:rgba(30, 171, 75, 0.5);      background: rgba(30, 171, 75, 0.4);  }   .services .activeTag {      background: rgba(30, 171, 75, 1);      color: white;  }   .services .activeTag:hover {      background: #1EAB4B;      border: 1px solid #1EAB4B;  }   .articles {      text-align: center;  }   .articles>a {      text-align: left;      display: inline-block;      margin: 20px 10px 0px 10px;      border-radius: 3px;      border: 1px solid transparent;      cursor: pointer;      text-decoration: none;      color: #777;      max-width: 284px;      width: 100%;      vertical-align: top;  }   .articles>a:hover {      opacity: .8;  }   .toKnowledge {      margin: 50px auto 30px;      text-align: right;  }   .toKnowledge a {      padding: 10px 20px;      background: #0087e2;      border: 1px solid #bbb;      color: white;      border-radius: 3px;  }   .toKnowledge a:hover {      background: #4d92f7;      border: 1px solid #ccc;      text-decoration: none;  }   .blueLink {      text-decoration: none;      color: #0087e2;  }   .blueLink:hover {      text-decoration: underline;  }   .articleTags {      width: 100%;  }   .articleTags div {      display: inline-block;      border-radius: 3px;      padding: 2px 4px;      margin: 5px 5px 5px 0px;      cursor: pointer;      font-size: 14px;      -webkit-touch-callout: none;      -webkit-user-select: none;      -khtml-user-select: none;      -moz-user-select: none;      -ms-user-select: none;      user-select: none;  }   .artProcTag {      background: rgba(70, 131, 234, 0.2);      color: #777;  }   .artProcTag.active {      background: rgba(70, 131, 234, 1);      color: white;  }   .artServTag {      background: rgba(30, 171, 75, 0.2);      color: #777;  }   .artServTag,  .active {      background: rgba(30, 171, 75, 1);      color: white;  }   .article h3 {      font-weight: 600;      font-size: 20px;      margin: 7px 0px 10px;  }   .article p {      font-style: italic;      margin: 0px 0px 8px;      font-size: 15px;  }   /* ------------------ARTICLES--------------------- */  .artB {      color: #444;      font-size: 18px;      line-height: 26px;  }   .artB h1 {      font-size: 44px;      font-weight: 700;      color: #191919;      text-align: center;      line-height: 60px;  }   .artB h2 {      font-size: 30px;      font-weight: 400;      color: #191919;      text-align: center;      line-height: 35px;  }   .artB table {      width: 100%;      vertical-align: top;      border-collapse: collapse;  }   .artB table.twotd td {      width: 50%;      vertical-align: top;  }   .artB table.threetd td {      width: 33%;      vertical-align: top;  }   .artB td {      border: 1px solid #999;      padding-left: 10px;  }   .artB td ol {      margin: 0px;  }   .artB ol {      margin: 0px;      margin: 35px 0px -13px 0px;      font-style: italic;      font-weight: 600;  }   .artB ol p {      color: #444;      /*font-size: 17px;*/      line-height: 26px;      font-style: initial;      font-weight: 300;      margin-left: -40px;  }   .artB ol i p {      font-style: italic;      color: #008b8b;  }   .artB p.total {      color: #134f5c;      font-weight: bold;      margin-top: 0px;  }   .artB iframe {      margin: auto;      display: block;  }   @media screen and (min-width: 1200px) {       #mob-menu-but,      #mob-menu {          display: none !important;      }       #cont {          display: block !important;      }  }   @media screen and (max-width: 1100px) {      .footSep {          visibility: hidden;      }  }   @media screen and (max-width: 1200px) {       #menu,      #submenu {          display: none;      }       #mob-menu-but {          width: 30px;          height: 30px;          position: absolute;          right: 4%;          top: 21px;          display: block;      }       #mob-menu {          display: none;          width: 100%;          background: white;          z-index: 9999;          margin: 0px;          padding: 0px;          margin-top: 89px;      }       #mob-menu li {          text-align: center;          list-style: none;          margin: 20px;      }       #mob-menu a {          text-decoration: none;          font-size: 16px;          font-weight: 500;          color: #0F3F9F !important;          cursor: pointer;      }  }   @media screen and (max-width: 750px) {      .maintext0 {          font-size: 30px;      }       .maintext1 {          font-size: 18px;      }       .maintext2,      .maintext4 {          font-size: 26px;      }       .maintext4 {          margin: 15px 0px 30px;      }       .pricing_image {          margin: 70px auto 20px;      }       .half {          14px;      }       #cont {          margin-top: 50px;      }  }   @media screen and (max-width: 650px) {      .sharePan div {          display: none;      }       .articles>a {          margin: 50px 0px 0px 0px;      }  }   @media screen and (max-width: 450px) {      .artB h1 {          font-size: 26px;          font-weight: 400;          color: #191919;          text-align: center;          line-height: 40px;      }       .artB h2 {          font-size: 22px;          font-weight: 400;          font-style: italic;          color: #191919;          text-align: center;          line-height: 30px;      }       .maintext0 {          font-size: 26px;      }       .maintext1 {          font-size: 18px;      }       .maintext2 {          font-size: 25px;          margin: 50px 0px 0px;      }       .maintext4 {          font-size: 25px;          margin: 10px 0px 20px;      }       .pricing_image {          margin: 40px auto 20px;      }       .half {          14px;      }       .tworow {          width: 100%;      }       .hpLoginBlocks {          min-width: initial;      }       #cont {          margin-top: 30px;      }  }   /* ------------------------LOGOS---------------------------- */  .logo_svg_maintain:hover svg {      fill: #0044ff;  }   .logo_svg_order:hover svg {      fill: #ff4400;  }   /* ------------------------LOGOS END------------------------ */  /* ------------------------PRODUCTS MENU-------------------- */  #products_menu {      position: absolute;      right: -100px;      top: 35px;      width: 346px;      background: white;      border-radius: 3px;      border: 1px solid #ccc;      display: none;      box-shadow: 0 2px 10px rgba(0, 0, 0, .2);      box-sizing: border-box;      font-size: 15px;      color: #222;  }   #products_menu>div {      padding: 30px 30px 30px 30px;      box-sizing: border-box;  }   #products_menu>div>a {      display: inline-block;      width: 90px;      height: 90px;      border: 1px solid transparent;      vertical-align: top;      text-align: center;      cursor: pointer;      border-radius: 3px;      box-sizing: border-box;      text-decoration: none;      color: #222;  }   #products_menu>div>a:hover {      border: 1px solid #e6e6e6;  }   #products_menu>a>button {      width: 100%;      background: #eee;      height: 40px;      border: none;  }   #products_menu>a>button:hover {      width: 100%;      background: #e7e7e7;      height: 40px;      border: none;  }   /* ------------------------PRODUCTS MENU END----------------- */  /* ------------------------SUPPORT MENU---------------------- */  .collapseDiv {      width: 100%;      display: none;      padding: 15px 0px;      box-sizing: border-box;      background: #333;  }   .collapseDiv>a {      display: block;      text-decoration: none;      width: 100%;      background: #333;      padding: 5px 30px 5px 40px;      box-sizing: border-box;      cursor: pointer;      color: #fff;  }   .collapseDiv>a:hover {      background: #222;  }   .plusM {      float: right;      margin-right: 10px;  }   .supMen {      width: 100%;      background: #eee;      padding: 10px 20px;      box-sizing: border-box;      cursor: pointer;      border-top: 1px solid #ccc;  }   .supMen:hover {      background: #ddd;  }   .supMenAct {      width: 100%;      background: #c5c5c5;      padding: 10px 20px;      box-sizing: border-box;      cursor: pointer;      border-top: 1px solid #ccc;  }   .supMenAct:hover {      background: #bbb;  }   @media screen and (max-width: 400px) {      .plusM {          visibility: hidden;      }  }   .artImg {      width: 100%;  }   .supArtMenIt {      width: 100%;      padding: 10px 0px;  }   .supArtMenIt>a {      display: block;      text-decoration: none;      width: 100%;      cursor: pointer;      padding: 10px 10px;      font-size: 14px;      box-sizing: border-box;      color: #444;      text-align: left;  }   .supArtMenIt>a:hover {      background: #eee;  }   .supArtMenItAct {      color: blue;      border-left: 3px solid blue;      font-weight: 600;  }   .supMenArt {      vertical-align: top;      display: inline-block;      max-width: 280px;      min-width: 250px;      margin: 80px auto;      box-shadow: -10px 5px 20px -5px #ccc;      border-left: 1px solid #ccc;      box-sizing: border-box;      float: right;      color: #222;  }   @media screen and (max-width: 1070px) {      .supMenArt {          display: block;          float: none;          max-width: 600px;          min-width: 0px;          box-shadow: -4px 7px 50px -5px #ccc;      }  }   /* ------------------------SUPPORT MENU END------------------ */  /* ------------------------SUPPORT ARTICLE------------------- */  .artS {      max-width: 700px;      text-align: left;      margin-top: 68px;      color: #222;      font-size: 15px;      line-height: 31px;      display: inline-block;  }   .artS h1,  .artS h2 {      text-align: left;      font-weight: 400;  }   .artS h1 {      font-size: 40px;      line-height: 60px;  }   .artS img {      width: 100%;      height: auto;  }   .artS .emb {      width: 100%;      text-align: center;  }   .artS .emb div {      font-size: 27px;      margin: 43px auto;      color: #999;  }   .artS .emb img {      width: 90%;      margin: auto;  }   .artS .emb p {      text-align: left;  }   .artS .emb textarea {      width: 90%;      font-size: 15px;      height: 100px;  }   .artS .artImg {      width: 100%;      max-width: 120px;      float: right;      margin: 18px 10px 10px 40px;  }   .artS .clearD {      width: 100%;      height: 40px;      visibility: hidden;      clear: both;  }   .artS ol {      margin: 0px;      font-style: normal;      font-weight: inherit;  }   .artS a {      color: #4184f1;      text-decoration: none;  }   .artS a:hover {      text-decoration: underline;  }   .artS .aNewT:after {      content: '';      background: no-repeat url(http://www.logision.com/img/newBlank.png);      display: inline-block;      height: 10px;      margin: 0 3px 0 5px;      width: 10px;  }   /* ------------------------SUPPORT ARTICLE END--------------- */</style>`\n\nconst Blog = props => {\n    console.log(props.history.location.pathname)\n    const [state, setState] = useState('')\n    const [title, setTitle] = useState('')\n    useEffect(() => {\n        const url = 'https://websiter.dev' + props.history.location.pathname\n        console.log(url)\n        axios\n            .post('/api/blog', { url })\n            .then(res => {\n                setState(\n                    styles +\n                        res.data.body\n                            .replace(\n                                /\\/images\\/blog/gi,\n                                'https://websiter.dev/images/blog'\n                            )\n                            .replace(\n                                /href=\"https:\\/\\/websiter.dev/gi,\n                                'href=\"https://addspire.com'\n                            )\n                )\n                setTitle(res.data.title)\n            })\n            .catch(err => {})\n    }, [props.history.location.pathname])\n\n    return (\n        <div>\n            {title && (\n                <Helmet>\n                    <title>{title}</title>\n                </Helmet>\n            )}\n            <div dangerouslySetInnerHTML={{ __html: state }} />\n        </div>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Blog)\n)\n","import React from 'react'\n\nimport * as wsActions from '../websocketActions'\nimport Menu from 'antd/es/menu'\nimport Dropdown from 'antd/es/dropdown'\nimport { DownOutlined } from '@ant-design/icons'\nimport Button from 'antd/es/button'\nimport MoreIcon from './UI/MoreIcon'\n\nconst FriendActionButton = props => {\n    const { invitingFriends, invitedFriends, realFriends, _id, account } = props\n    const accountId = account ? account._id : ''\n    if (!accountId) return []\n\n    if (accountId === _id) return [props.additionalButton]\n\n    const menu = (\n        <Menu onClick={({ domEvent }) => domEvent.stopPropagation()}>\n            {props.additionalButtons &&\n                props.additionalButtons.map((button, index) => (\n                    <Menu.Item key={index + 100} onClick={button.onClick}>\n                        {button.title}\n                    </Menu.Item>\n                ))}\n            {invitingFriends.find(item => item.friend === _id) ? (\n                <Menu.Item\n                    key=\"2\"\n                    onClick={() => wsActions.unfriend(accountId, _id)}\n                    danger={true}\n                >\n                    Decline\n                </Menu.Item>\n            ) : invitedFriends.find(item => item.friend === _id) ? (\n                <Menu.Item\n                    key=\"3\"\n                    onClick={() => wsActions.unfriend(accountId, _id)}\n                    danger={true}\n                >\n                    Cancel invitation\n                </Menu.Item>\n            ) : realFriends.find(item => item.friend === _id) ? (\n                <Menu.Item\n                    key=\"4\"\n                    onClick={() => wsActions.unfriend(accountId, _id)}\n                    danger={true}\n                >\n                    Unfriend\n                </Menu.Item>\n            ) : null}\n            {props.noFollow ? null : account.followAccounts.includes(_id) ? (\n                <Menu.Item\n                    key=\"5\"\n                    onClick={() => wsActions.unfollowAccount(accountId, _id)}\n                    danger={true}\n                >\n                    Unfollow\n                </Menu.Item>\n            ) : (\n                <Menu.Item\n                    key=\"6\"\n                    onClick={() => wsActions.followAccount(accountId, _id)}\n                >\n                    Follow\n                </Menu.Item>\n            )}\n        </Menu>\n    )\n    return invitingFriends.find(item => item.friend === _id) ? (\n        <Dropdown.Button\n            type=\"primary\"\n            overlay={menu}\n            trigger={['click', 'hover']}\n            onClick={e => {\n                e.preventDefault()\n                e.stopPropagation()\n                wsActions.acceptFriend(accountId, _id)\n            }}\n        >\n            Accept friendship\n        </Dropdown.Button>\n    ) : ![...realFriends, ...invitingFriends, ...invitedFriends].find(\n          item => item.friend === _id\n      ) ? (\n        <Dropdown.Button\n            type=\"primary\"\n            overlay={menu}\n            trigger={['click', 'hover']}\n            onClick={e => {\n                e.preventDefault()\n                e.stopPropagation()\n                wsActions.addFriend(accountId, _id)\n            }}\n        >\n            Become friends\n        </Dropdown.Button>\n    ) : (\n        <Dropdown overlay={menu} trigger={['click']}>\n            <a\n                // className=\"ant-dropdown-link\"\n                onClick={e => {\n                    e.preventDefault()\n                    e.stopPropagation()\n                }}\n            >\n                <Button type={props.asText ? 'primary' : 'link'}>\n                    {props.asText ? (\n                        <>\n                            Actions <DownOutlined />\n                        </>\n                    ) : (\n                        <MoreIcon />\n                    )}\n                </Button>\n            </a>\n        </Dropdown>\n    )\n}\n\nexport default FriendActionButton\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport * as actions from '../store/actions'\nimport { withRouter } from 'react-router-dom'\n\nimport friendActionButton from './FriendActionButton'\nimport UserButton from './UserButton/UserButton'\nimport MasonryCard from './MasonryCard'\n\nconst FriendCard = props => {\n    const friendActions = friendActionButton({\n        account: props.account,\n        realFriends: props.realFriends,\n        invitedFriends: props.invitedFriends,\n        invitingFriends: props.invitingFriends,\n        _id: props.friend._id,\n        asIcons: true,\n\n        additionalButtons: [\n            {\n                title: 'See profile',\n                onClick: () =>\n                    props.history.push('/profile/' + props.friend._id),\n            },\n        ],\n    })\n\n    return (\n        <MasonryCard\n            actions={friendActions}\n            body={<UserButton span={true} id={props.friend._id} size={50} />}\n            noLink={true}\n        />\n    )\n}\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n        isAuthed: state.isAuthed,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: (data, pulledFrom) =>\n            dispatch(actions.setData(data, pulledFrom)),\n        tryAuth: (props, forceAuth) =>\n            dispatch(actions.tryAuth(props, forceAuth)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(FriendCard)\n)\n","import React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport * as wsActions from '../../websocketActions'\nimport Card from 'antd/es/card'\nimport Button from 'antd/es/button'\nimport Modal from 'antd/es/modal'\n\nimport Input from 'antd/es/input'\nimport Form from 'antd/es/form'\n\nimport FriendCard from '../../components/FriendCard'\nimport { nicknameRules } from '../../constants/fieldRules'\n\nconst AddFriends = props => {\n    useEffect(() => {\n        props.setFriendSearchResult({})\n    }, [props.addFriendOpen])\n\n    const {\n        addFriendOpen,\n        setAddFriendOpen,\n        searchResult,\n        realFriends,\n        invitedFriends,\n        invitingFriends,\n    } = props\n    const layout = {\n        labelCol: { span: 8 },\n        wrapperCol: { span: 16 },\n    }\n    const tailLayout = {\n        wrapperCol: { offset: 8, span: 16 },\n    }\n\n    return (\n        <Modal\n            title=\"Add friend\"\n            visible={addFriendOpen}\n            maskClosable\n            closable\n            onCancel={() => setAddFriendOpen(false)}\n            footer={\n                <Button key=\"back\" onClick={() => setAddFriendOpen(false)}>\n                    Return\n                </Button>\n            }\n            destroyOnClose={true}\n        >\n            <p>\n                To find a friend you need to enter your friend's name or\n                nickname.\n            </p>\n            <Form\n                name=\"dynamic_form_nest_item\"\n                onFinish={value => wsActions.searchFriends(value.search)}\n                autoComplete=\"off\"\n                {...layout}\n            >\n                <Form.Item label=\"Search\" name=\"search\" rules={nicknameRules}>\n                    <Input placeholder=\"Must be more than 2 characters long\" />\n                </Form.Item>\n\n                <Form.Item {...tailLayout}>\n                    <Button type=\"primary\" htmlType=\"submit\" size=\"large\">\n                        Search\n                    </Button>\n                </Form.Item>\n            </Form>\n            {searchResult._id && (\n                <Card title=\"Search result\">\n                    <FriendCard\n                        {...props}\n                        friend={searchResult}\n                        realFriends={realFriends}\n                        invitingFriends={invitingFriends}\n                        invitedFriends={invitedFriends}\n                    />\n                </Card>\n            )}\n        </Modal>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        searchResult: state.friendSearchResult,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setFriendSearchResult: data =>\n            dispatch(actions.setFriendSearchResult(data)),\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(AddFriends)\n","import React from 'react'\nimport { withRouter } from 'react-router-dom'\nimport Masonry from 'react-masonry-css'\nimport { friendsBreakPoints } from '../../utils/masonryBreakPoints'\n\nimport FriendCard from '../../components/FriendCard'\nimport MasonryGrid from '../../components/MasonryGrid'\n\nconst pendingFriends = props => {\n    const { realFriends, invitedFriends, invitingFriends } = props\n    return (\n        <>\n            {invitingFriends.length > 0 && (\n                <>\n                    <h2>People invited me to be friends</h2>\n                    <MasonryGrid friends={true}>\n                        {invitingFriends.map(friend => (\n                            <FriendCard\n                                key={friend._id}\n                                {...props}\n                                friend={friend}\n                                realFriends={realFriends}\n                                invitingFriends={invitingFriends}\n                                invitedFriends={invitedFriends}\n                            />\n                        ))}\n                    </MasonryGrid>\n                </>\n            )}\n\n            {invitedFriends.length > 0 && (\n                <>\n                    <h2>I invited these people</h2>\n                    <MasonryGrid friends={true}>\n                        {invitedFriends.map(friend => (\n                            <FriendCard\n                                key={friend._id}\n                                {...props}\n                                friend={friend}\n                                realFriends={realFriends}\n                                invitingFriends={invitingFriends}\n                                invitedFriends={invitedFriends}\n                            />\n                        ))}\n                    </MasonryGrid>\n                </>\n            )}\n        </>\n    )\n}\n\nexport default withRouter(pendingFriends)\n","import React, { useState, useEffect } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\n\nimport FriendCard from '../../components/FriendCard'\nimport AddCard from '../../components/AddCard/AddCard'\nimport AddFriends from './AddFriends'\nimport PendingFriends from './PendingFriends'\nimport Tabs from 'antd/es/tabs'\nimport Empty from 'antd/es/empty'\nimport Badge from 'antd/es/badge'\nimport Masonry from 'react-masonry-css'\nimport { friendsBreakPoints } from '../../utils/masonryBreakPoints'\nimport MasonryGrid from '../../components/MasonryGrid'\n\nconst Friends = props => {\n    const [addFriendOpen, setAddFriendOpen] = useState()\n\n    useEffect(() => {\n        props.setPageTitle({ main: 'Friends', sub: '' })\n    }, [])\n\n    const { account, friendData } = props\n    if (!account._id) return null\n    const realFriends = [],\n        invitedFriends = [],\n        invitingFriends = []\n\n    if (account.friends) {\n        for (let friend of account.friends) {\n            const fullFriend = { ...friendData[friend.friend], ...friend }\n            if (fullFriend) {\n                if (fullFriend.status === 'friend') realFriends.push(fullFriend)\n                else if (fullFriend.status === 'invited')\n                    invitedFriends.push(fullFriend)\n                else if (fullFriend.status === 'inviting')\n                    invitingFriends.push(fullFriend)\n            }\n        }\n    }\n\n    const confirmedFriends =\n        realFriends.length > 0 ? (\n            <MasonryGrid friends={true}>\n                {realFriends.map(friend => (\n                    <FriendCard\n                        {...props}\n                        key={friend.friend}\n                        friend={friend}\n                        realFriends={realFriends}\n                        invitingFriends={invitingFriends}\n                        invitedFriends={invitedFriends}\n                    />\n                ))}\n            </MasonryGrid>\n        ) : (\n            <Empty\n                image=\"https://websiter.s3.us-east-2.amazonaws.com/image+4.jpg\"\n                imageStyle={{ height: '250px', marginTop: '50px' }}\n                description={false}\n            />\n        )\n    return (\n        <div>\n            <AddCard\n                title=\"Add friend\"\n                sub=\"Find by nickname\"\n                action={() => setAddFriendOpen(true)}\n            />\n            {invitedFriends.length > 0 || invitingFriends.length > 0 ? (\n                <Tabs>\n                    <Tabs.TabPane key=\"confirmed\" tab=\"Confrmed\">\n                        {confirmedFriends}\n                    </Tabs.TabPane>\n\n                    <Tabs.TabPane\n                        tab={\n                            <Badge\n                                count={invitingFriends.length}\n                                offset={[10, 0]}\n                            >\n                                Pending\n                            </Badge>\n                        }\n                        key=\"pending\"\n                    >\n                        <PendingFriends\n                            realFriends={realFriends}\n                            invitedFriends={invitedFriends}\n                            invitingFriends={invitingFriends}\n                        />\n                    </Tabs.TabPane>\n                </Tabs>\n            ) : (\n                confirmedFriends\n            )}\n            <AddFriends\n                addFriendOpen={addFriendOpen}\n                setAddFriendOpen={setAddFriendOpen}\n                realFriends={realFriends}\n                invitedFriends={invitedFriends}\n                invitingFriends={invitingFriends}\n                account={account}\n            />\n        </div>\n    )\n}\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n        friendData: state.friendData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Friends)\n)\n","import React, { useEffect, useState } from 'react'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport Form from 'antd/es/form'\nimport Input from 'antd/es/input'\n\nimport { withRouter } from 'react-router-dom'\nimport Card from 'antd/es/card'\nimport Upload from 'antd/es/upload'\nimport * as classes from './Settings.module.css'\n\nimport LoadingOutlined from '@ant-design/icons/LoadingOutlined'\nimport PlusOutlined from '@ant-design/icons/PlusOutlined'\n\nimport { uploadFile } from '../../utils/uploadFile'\nimport Avatar from 'antd/es/avatar'\nimport getAvatar from '../../utils/getAvatar'\nimport Modal from 'antd/es/modal'\nimport { accountNameRules } from '../../constants/fieldRules'\nimport * as wsActions from '../../websocketActions'\nimport message from 'antd/es/message'\nimport Dropdown from 'antd/es/dropdown'\nimport Menu from 'antd/es/menu'\n\nconst Settings = props => {\n    const [deleteVisible, setDeleteVisible] = useState()\n    const [deleteField, setDeleteField] = useState('')\n    const { account } = props\n\n    useEffect(() => {\n        props.setPageTitle({ main: 'Settings', sub: '' })\n    }, [])\n\n    const loading = false\n\n    const layout = {\n        labelCol: { span: 8 },\n        wrapperCol: { span: 16 },\n    }\n    const tailLayout = {\n        wrapperCol: { offset: 8, span: 0 },\n    }\n    return account && account.name ? (\n        <div className=\"contentDiv\">\n            <Helmet>\n                <title>Account settings Addspire</title>\n                <meta\n                    name=\"description\"\n                    content=\"Addspire is a social network where you can inspire and motivate yourself or the people you care.\"\n                />\n            </Helmet>\n            <Card>\n                <Upload\n                    name=\"avatar\"\n                    listType=\"picture-card\"\n                    className={classes.Avatar}\n                    showUploadList={false}\n                    customRequest={({ file }) => {\n                        uploadFile(file, 800, 'avatar', () => {\n                            props.increaseAvatarV()\n                        })\n                    }}\n                >\n                    {account.image ? (\n                        <Avatar\n                            src={getAvatar(account._id, account.image)}\n                            size={150}\n                            style={{ margin: '25px' }}\n                        />\n                    ) : (\n                        <div>\n                            {loading ? <LoadingOutlined /> : <PlusOutlined />}\n                            <div className=\"ant-upload-text\">Upload</div>\n                        </div>\n                    )}\n                </Upload>\n                <Form\n                    name=\"dynamic_form_nest_item\"\n                    onFinish={value =>\n                        wsActions.editAccount(value, account._id)\n                    }\n                    autoComplete=\"off\"\n                    {...layout}\n                    initialValues={{\n                        name: account.name,\n                        nickname: account._id,\n                    }}\n                >\n                    <Form.Item\n                        label=\"Name\"\n                        name=\"name\"\n                        rules={accountNameRules}\n                    >\n                        <Input placeholder=\"Must be more than 1 character long\" />\n                    </Form.Item>\n                    <Form.Item label=\"Nickname\" name=\"nickname\">\n                        <Input disabled={true} />\n                    </Form.Item>\n                    <Form.Item\n                        {...tailLayout}\n                        style={{\n                            flex: 'none',\n                            maxWidth: ' 100%',\n                            overflow: 'hidden',\n                        }}\n                    >\n                        <Dropdown.Button\n                            type=\"primary\"\n                            htmlType=\"submit\"\n                            size=\"large\"\n                            overlay={\n                                <Menu>\n                                    <Menu.Item\n                                        danger={true}\n                                        onClick={() => setDeleteVisible(true)}\n                                    >\n                                        Delete account\n                                    </Menu.Item>\n                                </Menu>\n                            }\n                        >\n                            Save\n                        </Dropdown.Button>\n                    </Form.Item>\n                </Form>\n                <Modal\n                    title=\"Delete account\"\n                    visible={deleteVisible}\n                    onOk={() => {\n                        if (deleteField !== account._id) {\n                            message.warning('The nickmanme is not correct.')\n                        } else {\n                            wsActions.deleteAccount(account._id)\n                        }\n                    }}\n                    onCancel={() => {\n                        setDeleteVisible(false)\n                        setDeleteField('')\n                    }}\n                >\n                    <p>\n                        Please enter your nickname and press Ok to delete your\n                        account.\n                    </p>\n                    <Input onChange={e => setDeleteField(e.target.value)} />\n                </Modal>\n            </Card>\n        </div>\n    ) : null\n}\n\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n        increaseAvatarV: () => dispatch(actions.increaseAvatarV()),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Settings)\n)\n","import React from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\n\nimport Avatar from 'antd/es/avatar'\n\nconst ProgressButton = props => {\n    const { id } = props\n    const userName = id => props.progressData[id].goal.name\n    const userAvatar = id => (\n        <span\n            onClick={() => {\n                handleClick(id)\n            }}\n        >\n            <Avatar\n                src={\n                    props.progressData[id].goal.images.length > 0 &&\n                    props.progressData[id].goal.images[0]\n                }\n                size={props.size || (props.noClick ? 20 : 40)}\n                style={props.group ? {} : { margin: ' 0 5px' }}\n            />\n        </span>\n    )\n\n    const handleClick = id =>\n        props.history.push('/inspirations/' + (id || props.id))\n    return (\n        <span\n            style={{ cursor: 'pointer', fontWeight: 'bold', ...props.style }}\n            onClick={e => {\n                e.stopPropagation()\n                handleClick()\n            }}\n        >\n            {userAvatar(id)}\n            {userName(id)}\n        </span>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        progressData: state.progressData,\n    }\n}\n\nexport default withRouter(connect(mapStateToProps)(ProgressButton))\n","import React, { useEffect, useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport Avatar from 'antd/es/avatar'\nimport Card from 'antd/es/card'\n\nimport friendActionButton from '../../components/FriendActionButton'\nimport FriendCard from '../../components/FriendCard'\nimport Tabs from 'antd/es/tabs'\nimport Progresses from '../Progresses/Progresses'\nimport Wallet from '../Shop/Wallet'\nimport PerkCard from '../Shop/PerkCard'\nimport getAvatar from '../../utils/getAvatar'\nimport pullData from '../../utils/pullData'\nimport UserButton from '../../components/UserButton/UserButton'\nimport MasonryGrid from '../../components/MasonryGrid'\nimport Button from 'antd/es/button'\nimport Modal from 'antd/es/modal/Modal'\nimport MasonryCard from '../../components/MasonryCard'\nimport ProgressButton from '../../components/ProgressButton'\nimport FollowButton from '../../components/FollowButton'\nimport Tag from 'antd/es/tag'\nimport * as wsActions from '../../websocketActions'\n\nconst Profile = props => {\n    const [data, setData] = useState({})\n    const [followersVisible, setFollowersVisible] = useState(false)\n    const [followingVisible, setFollowingVisible] = useState(false)\n    const { profile, friendData, account } = props.isAuthed ? props : data\n\n    useEffect(() => {\n        const pathParts = props.history.location.pathname.split('/')\n        if (pathParts.length > 2) {\n            const profileId = pathParts[2]\n            if (props.isAuthed) {\n                props.setData({ currentProfile: profileId })\n            } else {\n                pullData(props, data, setData, { forceAuth: false }, data => {\n                    const friendData = {}\n                    for (let friend of data.friendData)\n                        friendData[friend._id] = friend\n                    const progressData = {}\n                    for (let progress of data.progressData)\n                        progressData[progress._id] = progress\n                    const groupData = {}\n                    for (let group of data.groupData)\n                        groupData[group._id] = group\n\n                    props.setData({\n                        // profile: data.profile,\n                        friendData,\n                        progressData,\n                        groupData,\n                        account: {},\n                    })\n                })\n            }\n        } else {\n            if (props.isAuthed) {\n                props.setData({ currentProfile: account._id })\n            }\n        }\n    }, [props.isAuthed, props.history.location.pathname, props.account._id])\n\n    if (!profile || !profile._id) return null\n    props.setPageTitle({ main: profile.name, sub: '' })\n\n    const realFriends = [],\n        invitedFriends = [],\n        invitingFriends = []\n    if (profile && profile.friends && account && account._id) {\n        for (let friend of account.friends) {\n            if (friend.status === 'friend') realFriends.push(friend)\n            else if (friend.status === 'invited') invitedFriends.push(friend)\n            else if (friend.status === 'inviting') invitingFriends.push(friend)\n        }\n    }\n    const friendActions = friendActionButton({\n        account,\n        realFriends: realFriends,\n        invitedFriends: invitedFriends,\n        invitingFriends: invitingFriends,\n        _id: profile._id,\n        additionalButton: null,\n        asText: true,\n    })\n\n    return (\n        <>\n            <div>\n                <Card>\n                    <div style={{ textAlign: 'center', marginBottom: '50px' }}>\n                        <Avatar\n                            src={getAvatar(profile._id, profile.image)}\n                            size={200}\n                        />\n                        <h1 style={{ margin: 0 }}>{profile.name}</h1>\n                        <h3>({profile._id})</h3>\n                        <Button\n                            type=\"text\"\n                            onClick={() => setFollowersVisible(true)}\n                        >\n                            {profile.followingAccounts.length} Followers\n                        </Button>\n                        <Button\n                            type=\"text\"\n                            onClick={() => setFollowingVisible(true)}\n                        >\n                            {profile.followProgresses.length +\n                                profile.followAccounts.length}{' '}\n                            Following\n                        </Button>\n                        <div>\n                            {account && account._id !== profile._id && (\n                                <span style={{ marginRight: '10px' }}>\n                                    {realFriends.find(\n                                        item => item.friend === profile._id\n                                    ) ? (\n                                        <Tag color=\"green\">Friends</Tag>\n                                    ) : null}\n                                    {account.followAccounts.includes(\n                                        profile._id\n                                    ) ? (\n                                        <Tag\n                                            style={{ marginRight: '10px' }}\n                                            color=\"purple\"\n                                        >\n                                            Following\n                                        </Tag>\n                                    ) : (\n                                        <Button\n                                            type=\"primary\"\n                                            onClick={() =>\n                                                wsActions.followAccount(\n                                                    account._id,\n                                                    profile._id\n                                                )\n                                            }\n                                        >\n                                            Follow\n                                        </Button>\n                                    )}\n                                </span>\n                            )}\n                            {friendActions}\n                        </div>\n                    </div>\n                    <Tabs>\n                        <Tabs.TabPane tab=\"Progresses\" key={0}>\n                            <Progresses fromProfile={true} />\n                        </Tabs.TabPane>\n\n                        <Tabs.TabPane tab=\"Friends\" key={1}>\n                            <MasonryGrid friends={true}>\n                                {profile.friends\n                                    .filter(\n                                        friend => friend.status === 'friend'\n                                    )\n                                    .map(friend => {\n                                        const oneFriendData = {\n                                            ...friendData[friend.friend],\n                                            _id: friend.friend,\n                                        }\n                                        return (\n                                            <FriendCard\n                                                key={oneFriendData._id}\n                                                {...props}\n                                                account={account}\n                                                friend={oneFriendData}\n                                                realFriends={realFriends}\n                                                invitingFriends={\n                                                    invitingFriends\n                                                }\n                                                invitedFriends={invitedFriends}\n                                            />\n                                        )\n                                    })}\n                            </MasonryGrid>\n                        </Tabs.TabPane>\n\n                        <Tabs.TabPane tab=\"Shop\" key={4}>\n                            <MasonryGrid>\n                                {profile.perks &&\n                                    profile.perks.map((perk, index) => (\n                                        <PerkCard\n                                            key={index}\n                                            perk={perk}\n                                            perkId={perk.perkId}\n                                            owner={profile}\n                                            account={account || {}}\n                                            onlyBuy={true}\n                                            mode=\"shop\"\n                                        />\n                                    ))}\n                            </MasonryGrid>\n                        </Tabs.TabPane>\n                        <Tabs.TabPane tab=\"Wallet\" key={5}>\n                            <Wallet pulledProfile={profile} account={profile} />\n                        </Tabs.TabPane>\n                        <Tabs.TabPane tab=\"Wishlist\" key={6}>\n                            <MasonryGrid>\n                                {profile.wishlist.map((item, index) => (\n                                    <PerkCard\n                                        key={index}\n                                        perk={item}\n                                        perkId={item.itemId}\n                                        owner={profile}\n                                        account={account || {}}\n                                        setEditedPerk={() => {}}\n                                        setEditPerkOpen={() => {}}\n                                        onlyBuy={true}\n                                        mode=\"wishlist\"\n                                    />\n                                ))}\n                            </MasonryGrid>\n                        </Tabs.TabPane>\n                    </Tabs>\n                </Card>\n            </div>\n            <Modal\n                title=\"Followers\"\n                visible={followersVisible}\n                footer={null}\n                onCancel={() => setFollowersVisible(false)}\n            >\n                {profile.followingAccounts.map(item => (\n                    <MasonryCard\n                        noLink={true}\n                        key={item}\n                        actions={<FollowButton account={account} id={item} />}\n                        body={<UserButton span={true} id={item} size={50} />}\n                    />\n                ))}\n            </Modal>\n            <Modal\n                title=\"Following\"\n                visible={followingVisible}\n                footer={null}\n                onCancel={() => setFollowingVisible(false)}\n            >\n                <Tabs>\n                    <Tabs.TabPane tab=\"People\" key=\"1\">\n                        {profile.followAccounts.map(item => (\n                            <MasonryCard\n                                noLink={true}\n                                key={item}\n                                actions={\n                                    <FollowButton account={account} id={item} />\n                                }\n                                body={\n                                    <UserButton\n                                        span={true}\n                                        id={item}\n                                        size={50}\n                                    />\n                                }\n                            />\n                        ))}\n                    </Tabs.TabPane>\n                    <Tabs.TabPane tab=\"Inspirations\" key={2}>\n                        {profile.followProgresses.map(item => (\n                            <MasonryCard\n                                noLink={true}\n                                key={item}\n                                actions={\n                                    <FollowButton\n                                        type=\"progress\"\n                                        account={account}\n                                        id={item}\n                                    />\n                                }\n                                body={\n                                    <ProgressButton\n                                        span={true}\n                                        id={item}\n                                        size={50}\n                                    />\n                                }\n                            />\n                        ))}\n                    </Tabs.TabPane>\n                </Tabs>\n            </Modal>\n        </>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n        profile: state.profile,\n        isAuthed: state.isAuthed,\n        friendData: state.friendData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: data => dispatch(actions.setData(data)),\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n        tryAuth: (props, forceAuth) =>\n            dispatch(actions.tryAuth(props, forceAuth)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Profile)\n)\n","import React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\n\nimport Button from 'antd/es/button'\nimport message from 'antd/es/message'\n\nimport Input from 'antd/es/input'\nimport PageHeader from 'antd/es/page-header'\nimport Form from 'antd/es/form'\nimport { withRouter } from 'react-router-dom'\nimport axios from 'axios'\nimport { nicknameRules, accountNameRules } from '../../constants/fieldRules'\nimport * as actions from '../../store/actions'\n\nconst ActivateAccount = props => {\n    if (!props.isAuthed) props.history.push('/logout')\n    useEffect(() => {\n        if (!props.accountNotActive) props.history.push('/settings')\n    }, [props.accountNotActive])\n    const onFinish = value => {\n        axios\n            .post('/api/activate-account', {\n                ...value,\n            })\n            .then(res => {\n                if (res.data.success) {\n                    message.success('Your account has been activated!')\n                    props.setAccountActivated(false)\n                } else {\n                    if (res.data.nicknameNotUnique) {\n                        message.warning(\n                            'The nickname is taken. Choose another nickname please.'\n                        )\n                    }\n                    if (res.data.errorCode) {\n                        message.error(\n                            'Something is wrong with the data. Please try one more time with new data.'\n                        )\n                    }\n                }\n            })\n            .catch(err => {})\n    }\n\n    const layout = {\n        labelCol: { span: 8 },\n        wrapperCol: { span: 16 },\n    }\n    const tailLayout = {\n        wrapperCol: { offset: 8, span: 16 },\n    }\n\n    return (\n        <>\n            <PageHeader\n                className=\"site-page-header\"\n                title=\"Activate your account\"\n                backIcon={false}\n            />\n            <Form\n                name=\"dynamic_form_nest_item\"\n                onFinish={onFinish}\n                autoComplete=\"off\"\n                {...layout}\n            >\n                <Form.Item label=\"Name\" name=\"name\" rules={accountNameRules}>\n                    <Input placeholder=\"Must be more than 1 character long\" />\n                </Form.Item>\n                <Form.Item\n                    label=\"Nickname\"\n                    name=\"nickname\"\n                    rules={nicknameRules}\n                >\n                    <Input placeholder=\"Must be more than 1 character long\" />\n                </Form.Item>\n                <Form.Item {...tailLayout}>\n                    <Button type=\"primary\" htmlType=\"submit\" size=\"large\">\n                        Save\n                    </Button>\n                </Form.Item>\n            </Form>\n        </>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        user: state.user,\n        account: state.account,\n        accountNotActive: state.accountNotActive,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n        setAccountActivated: value =>\n            dispatch(actions.setAccountActivated(value)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(ActivateAccount)\n)\n","import React, { useEffect, useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport Card from 'antd/es/card'\nimport pullData from '../../utils/pullData'\nimport Descriptions from 'antd/es/descriptions'\nimport Post from '../../components/Post/Post'\nimport UserButton from '../../components/UserButton/UserButton'\nimport ImageCarousel from '../../components/UI/ImageCarousel/ImageCarousel'\nimport Helmet from 'react-helmet'\n\nconst { Item } = Descriptions\n\nconst Perk = props => {\n    const [data, setData] = useState({})\n    const { account } = props\n    useEffect(() => {\n        const pathParts = props.history.location.pathname.split('/')\n        if (pathParts.length > 3) {\n            const accountId = pathParts[2]\n            if (props.isAuthed && account._id === accountId) {\n                const perk = account.perks.find(\n                    item => item.perkId === pathParts[3]\n                )\n                setData({ profile: account, perk })\n            } else {\n                pullData(props, data, setData, { forceAuth: false }, data => {\n                    const friendData = {}\n                    for (let friend of data.friendData)\n                        friendData[friend._id] = friend\n\n                    props.setData({\n                        post: { [data.post._id]: data.post },\n                        friendData,\n                    })\n                })\n            }\n        }\n    }, [props.isAuthed])\n    if (!data.perk) return null\n    const { perk, profile } = data\n    props.setData({ currentPosts: perk.post })\n    if (perk) {\n        props.setPageTitle({ main: perk.name, sub: profile._id })\n    }\n\n    const getAccounts = items => {\n        if (profile && props.friendData) {\n            return items.map(item => <UserButton id={item} />)\n        } else return items\n    }\n\n    return perk ? (\n        <div className=\"contentDiv\">\n            <Helmet>\n                <title>\n                    {perk.name} by {profile.id}\n                </title>\n                <meta name=\"description\" content={perk.description} />\n            </Helmet>\n            <Card\n                title={\n                    <span>\n                        Item from <UserButton id={profile._id} /> shop\n                    </span>\n                }\n                bordered={false}\n            >\n                <ImageCarousel images={perk.images} />\n\n                <h1>{perk.name}</h1>\n                <p style={{ whiteSpace: 'pre-wrap' }}>{perk.description}</p>\n\n                <Descriptions\n                    title=\"Goal description\"\n                    bordered\n                    column={{ xxl: 4, xl: 3, lg: 3, md: 3, sm: 2, xs: 1 }}\n                >\n                    <Item label=\"Available for\">{getAccounts(perk.users)}</Item>\n                    <Item label=\"Price\">{perk.price}</Item>\n                </Descriptions>\n                <Post\n                    noStartMessage={true}\n                    post={props.post[perk.post]}\n                    account={props.account}\n                    friendData={props.friendData}\n                    showReplies={true}\n                />\n            </Card>\n        </div>\n    ) : null\n}\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        account: state.account,\n        post: state.post,\n        friendData: state.friendData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: data => {\n            dispatch(actions.setData(data))\n        },\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Perk)\n)\n","import React, { useEffect, useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport Card from 'antd/es/card'\nimport pullData from '../../utils/pullData'\nimport Post from '../../components/Post/Post'\nimport ImageCarousel from '../../components/UI/ImageCarousel/ImageCarousel'\nimport UserButton from '../../components/UserButton/UserButton'\n\nconst WishlistItem = props => {\n    const [data, setData] = useState({})\n    const { account } = props\n    useEffect(() => {\n        const pathParts = props.history.location.pathname.split('/')\n        if (pathParts.length > 3) {\n            const accountId = pathParts[2]\n            if (props.isAuthed && account._id === accountId) {\n                const wishlistItem = account.wishlist.find(\n                    item => item.itemId === pathParts[3]\n                )\n                setData({ profile: account, wishlistItem })\n            } else {\n                pullData(props, data, setData, { forceAuth: false }, data => {\n                    const friendData = {}\n                    for (let friend of data.friendData)\n                        friendData[friend._id] = friend\n\n                    props.setData({\n                        post: { [data.post._id]: data.post },\n                        friendData,\n                    })\n                })\n            }\n        }\n    }, [props.isAuthed])\n    if (!data.wishlistItem) return null\n    const { wishlistItem, profile } = data\n    props.setData({ currentPosts: wishlistItem.post })\n    if (wishlistItem) {\n        props.setPageTitle({ main: wishlistItem.name, sub: profile._id })\n    }\n    return wishlistItem ? (\n        <div className=\"contentDiv\">\n            <Helmet>\n                <title>\n                    {wishlistItem.name} by {profile.id}\n                </title>\n                <meta name=\"description\" content={perk.description} />\n            </Helmet>\n            <Card\n                title={\n                    <span>\n                        <UserButton id={profile._id} /> wishlist\n                    </span>\n                }\n                bordered={false}\n            >\n                <ImageCarousel images={wishlistItem.images} />\n\n                <h1>{wishlistItem.name}</h1>\n                <p style={{ whiteSpace: 'pre-wrap' }}>\n                    {wishlistItem.description}\n                </p>\n                <Post\n                    noStartMessage={true}\n                    post={props.post[wishlistItem.post]}\n                    account={props.account}\n                    friendData={props.friendData}\n                    showReplies={true}\n                />\n            </Card>\n        </div>\n    ) : null\n}\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        account: state.account,\n        post: state.post,\n        friendData: state.friendData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: data => {\n            dispatch(actions.setData(data))\n        },\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(WishlistItem)\n)\n","import React, { useEffect } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport WishlistAndPerks from '../Shop/WishlistAndPerks'\nimport Helmet from 'react-helmet'\n\nconst Wishlist = props => {\n    useEffect(() => {\n        props.setPageTitle({ main: 'Wishlist', sub: '' })\n    }, [])\n\n    return (\n        <div>\n            <Helmet>\n                <title>Addspire - reward and motivate for great changes!</title>\n                <meta\n                    name=\"description\"\n                    content=\"Addspire is a social network where you can inspire and motivate yourself or the people you care.\"\n                />\n            </Helmet>\n            {props.account._id ? (\n                <WishlistAndPerks mode=\"wishlist\" account={props.account} />\n            ) : (\n                <span />\n            )}\n        </div>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Wishlist)\n)\n","import React from 'react'\nimport { withRouter } from 'react-router-dom'\n\nimport Card from 'antd/es/card'\nimport UserButton from '../../components/UserButton/UserButton'\nimport ImageCarousel from '../../components/UI/ImageCarousel/ImageCarousel'\n\nconst ProgressCard = props => {\n    const { progress } = props\n    const { goal } = progress\n    return (\n        <Card\n            type=\"inner\"\n            style={{ width: '100%', cursor: 'pointer' }}\n            bordered={false}\n            title={\n                <div\n                    onClick={() =>\n                        props.history.push('/inspirations/' + progress._id)\n                    }\n                    style={{\n                        display: 'flex',\n                        alignItems: 'center',\n                    }}\n                >\n                    {goal.images.length > 0 && (\n                        <div style={{ width: '50px', marginRight: '20px' }}>\n                            <ImageCarousel images={goal.images} size={50} />\n                        </div>\n                    )}\n                    {goal.name} -{' '}\n                    <UserButton id={progress.owner} noName={true} /> in\n                    <UserButton ids={progress.goal.users} group={true} />\n                </div>\n            }\n        />\n    )\n}\n\nexport default withRouter(ProgressCard)\n","import React, { useEffect, useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\n\nimport Modal from 'antd/es/modal'\nimport Button from 'antd/es/button'\nimport Card from 'antd/es/card'\nimport Post from '../../components/Post/Post'\nimport AddPost from '../../components/Post/AddPost'\nimport Tabs from 'antd/es/tabs'\nimport AddCard from '../../components/AddCard/AddCard'\nimport ProgressCard from '../Progresses/ProgressCard'\nimport AddProgress from '../Progresses/AddProgress'\n\nconst Group = props => {\n    const [state, setState] = useState({})\n    const [startProgressVisible, setStartProgressVisible] = useState(false)\n\n    const groupId = props.history.location.pathname.split('/')[2]\n    useEffect(() => {\n        props.setData({ currentGroup: groupId })\n    }, [props.isAuthed])\n\n    const { group, account, friendData, posts, progressData } = props\n\n    if (!group._id) return null\n    props.setData({ currentPosts: group.posts })\n\n    props.setPageTitle({ main: group.name, sub: group.worker })\n\n    const loadedProgresses = group.progresses\n        .filter(item => progressData[item])\n        .map(item => progressData[item])\n\n    const editGoal = (\n        <Modal\n            title=\"Add goal\"\n            visible={startProgressVisible}\n            maskClosable\n            closable\n            onCancel={() => setStartProgressVisible(false)}\n            width=\"100%\"\n            style={{ maxWidth: '1000px' }}\n            footer={\n                <Button\n                    key=\"back\"\n                    onClick={() => setStartProgressVisible(false)}\n                >\n                    Close\n                </Button>\n            }\n            destroyOnClose={true}\n        >\n            <AddProgress\n                setStartProgressVisible={setStartProgressVisible}\n                account={account}\n                friendData={props.friendData}\n                inGroup={group._id}\n            />\n        </Modal>\n    )\n    return friendData ? (\n        <>\n            <Tabs>\n                <Tabs.TabPane tab=\"Posts\" key=\"posts\">\n                    <AddPost\n                        parent={groupId}\n                        account={account}\n                        parentType=\"progress\"\n                        // onSend={() => setEditingMessage('')}\n                    />\n                    {group.posts.map(postId => {\n                        if (posts[postId]) {\n                            const post = posts[postId]\n                            return (\n                                <Card>\n                                    <Post\n                                        friendData={friendData}\n                                        account={account}\n                                        post={post}\n                                    />\n                                </Card>\n                            )\n                        } else return null\n                    })}\n                </Tabs.TabPane>\n                <Tabs.TabPane tab=\"Progresses\" key=\"progresses\">\n                    <AddCard\n                        title=\"Start a new progress\"\n                        sub=\"Rich your goals or help others!\"\n                        action={() => {\n                            setStartProgressVisible(true)\n                        }}\n                    />\n                    {loadedProgresses.map((progress, index) => (\n                        <ProgressCard key={index} progress={progress} />\n                    ))}\n                    {editGoal}\n                </Tabs.TabPane>\n            </Tabs>\n\n            <Modal\n                visible={state.previewImage}\n                footer={null}\n                onCancel={() => setState({ ...state, previewImage: '' })}\n            >\n                <img\n                    alt=\"example\"\n                    style={{ width: '100%' }}\n                    src={state.previewImage}\n                />\n            </Modal>\n        </>\n    ) : null\n}\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        account: state.account,\n        posts: state.post,\n        group: state.group,\n        friendData: state.friendData,\n        progressData: state.progressData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: data => {\n            dispatch(actions.setData(data))\n        },\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Group)\n)\n","import React from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport isEqual from 'lodash.isequal'\nconst NotificationsTracker = props => {\n    const { account, friendData, progressData, groupData } = props\n\n    const sortNotifiacations = (a, b) =>\n        new Date(a.date).getTime() < new Date(b.date).getTime() ? 1 : -1\n\n    if (!account._id) return null\n\n    let lastNotifications = []\n    for (let progress of account.followProgresses) {\n        if (progressData[progress])\n            lastNotifications = [\n                ...lastNotifications,\n                ...progressData[progress].notifications,\n            ]\n    }\n\n    for (let group of account.groups) {\n        if (groupData[group])\n            lastNotifications = [\n                ...lastNotifications,\n                ...groupData[group].notifications,\n            ]\n    }\n\n    for (let friend of account.friends) {\n        if (\n            friendData[friend.friend] &&\n            friend.status === 'friend' &&\n            friendData[friend.friend].notifications\n        )\n            lastNotifications = [\n                ...lastNotifications,\n                ...friendData[friend.friend].notifications,\n            ]\n    }\n    const filterSameNot = (res, not, index, arr) => {\n        if (!res.find(item => item.notId === not.notId)) {\n            res.push(not)\n        }\n        return res\n    }\n    lastNotifications = lastNotifications.reduce(filterSameNot, [])\n\n    lastNotifications = lastNotifications.sort(sortNotifiacations).slice(0, 100)\n\n    lastNotifications = [\n        ...lastNotifications,\n        ...account.myNotifications,\n    ].filter(item => item.code !== 'add post')\n\n    lastNotifications = lastNotifications.reduce(filterSameNot, [])\n    lastNotifications = lastNotifications.sort(sortNotifiacations)\n    if (!isEqual(lastNotifications, props.lastNotifications)) {\n        props.setData({ lastNotifications })\n    }\n\n    return <span />\n}\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        account: state.account,\n        statePosts: state.post,\n        progress: state.progress,\n        friendData: state.friendData,\n        progressData: state.progressData,\n        groupData: state.groupData,\n        lastNotifications: state.lastNotifications,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: data => {\n            dispatch(actions.setData(data))\n        },\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(NotificationsTracker)\n)\n","import React, { useEffect } from 'react'\nimport { Route, Switch, withRouter, Redirect } from 'react-router-dom'\n\nimport Auth from './containers/Auth/Auth'\nimport AuthTest from './containers/Auth/AuthTest'\nimport './components/UI/loadStyles'\nimport AccountLayout from './components/Layout/Layout'\nimport Goals from './containers/Goals/Goals'\nimport Goal from './containers/Goals/Goal'\nimport Progresses from './containers/Progresses/Progresses'\nimport Progress from './containers/Progress/Progress'\nimport Shop from './containers/Shop/Shop'\nimport Dashboard from './containers/Dashboard/Dashboard'\nimport Explore from './containers/Explore/Explore'\nimport Blog from './containers/Blog/Blog'\n\nimport Friends from './containers/Friends/Friends'\nimport Settings from './containers/Settings/Settings'\nimport Profile from './containers/Profile/Profile'\n\nimport ActivateAccount from './containers/ActivateAccount/ActivateAccount'\nimport Cookies from 'universal-cookie'\nimport Perk from './containers/Shop/Perk'\n\nimport WishlistItem from './containers/Wishlist/WishlistItem'\nimport Wishlist from './containers/Wishlist/Wishlist'\nimport { connect } from 'react-redux'\nimport * as actions from './store/actions'\nimport ConnectWebsocket from './containers/ConnectWebsocket/ConnectWebsocket'\nimport Group from './containers/Group/Group'\nimport NotificationsTracker from './containers/Dashboard/NotificationsTracker'\n\nconst cookies = new Cookies()\n\nconst App = props => {\n    const { isAuthed } = props\n    useEffect(() => {\n        props.tryAuth(props)\n    }, [])\n\n    const redirectTo = cookies.get('redirectto')\n\n    if (redirectTo) {\n        cookies.remove('redirectto', {\n            path: '/',\n        })\n    }\n\n    const Logout = () => {\n        props.logout()\n        return <Redirect to=\"/explore\" />\n    }\n\n    let routes = (\n        <Switch>\n            <Route path=\"/\" exact component={Explore} />\n            <Route path=\"/goals\" exact component={Goals} />\n            <Route path=\"/goals\" component={Goal} />\n\n            <Route path=\"/inspirations\" exact component={Progresses} />\n            <Route path=\"/inspirations\" component={Progress} />\n            <Route path=\"/groups\" component={Group} />\n\n            <Route path=\"/profile\" component={Profile} />\n\n            <Route path=\"/friends\" exact component={Friends} />\n\n            <Route path=\"/settings\" exact component={Settings} />\n            <Route path=\"/account\" exact component={Profile} />\n            <Route path=\"/dashboard\" exact component={Dashboard} />\n\n            <Route path=\"/shop\" exact component={Shop} />\n            <Route path=\"/shop\" component={Perk} />\n            <Route path=\"/wishlist\" exact component={Wishlist} />\n            <Route path=\"/wishlist\" component={WishlistItem} />\n            {/* {!isAuthed && <Route path=\"/login\" exact component={Auth} />} */}\n            <Route path=\"/logout\" exact component={Logout} />\n            <Route path=\"/ru\" component={Blog} />\n            <Route path=\"/blog\" component={Blog} />\n\n            <Route path=\"/activate-account\" exact component={ActivateAccount} />\n\n            {process.env.NODE_ENV === 'development' && !isAuthed && (\n                <Route path=\"/logintest\" exact component={AuthTest} />\n            )}\n            <Redirect to=\"/\" />\n        </Switch>\n    )\n\n    if (props.accountNotActive) {\n        routes = (\n            <Switch>\n                {!isAuthed && <Route path=\"/login\" exact component={Auth} />}\n                <Route path=\"/logout\" exact component={Logout} />\n\n                <Route\n                    path=\"/activate-account\"\n                    exact\n                    component={ActivateAccount}\n                />\n\n                {process.env.NODE_ENV === 'development' && !isAuthed && (\n                    <Route path=\"/logintest\" exact component={AuthTest} />\n                )}\n                {isAuthed ? (\n                    <Redirect to=\"/activate-account\" />\n                ) : (\n                    <Redirect to=\"/login\" />\n                )}\n            </Switch>\n        )\n    }\n\n    return redirectTo ? (\n        <Redirect to={redirectTo} />\n    ) : (\n        <>\n            <div style={{ height: '100%' }}>\n                <AccountLayout>{routes}</AccountLayout>\n                {isAuthed && <ConnectWebsocket />}\n                {isAuthed && <NotificationsTracker />}\n            </div>\n            {/* {this.props.loading && <Spinner cover />} */}\n        </>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        user: state.user,\n        account: state.account,\n        accountNotActive: state.accountNotActive,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        tryAuth: (props, forceAuth) =>\n            dispatch(actions.tryAuth(props, forceAuth)),\n        logout: () => dispatch(actions.logout()),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(App)\n)\n","import { createReducer } from '@reduxjs/toolkit'\n\nexport const initialState = {\n    isAuthed: false,\n    user: null,\n    currentAccount: '',\n    account: {},\n    friendData: {},\n    transactionData: {},\n    progressData: {},\n    currentProfile: '',\n    profile: {},\n    currentProgress: '',\n    currentGroup: '',\n    currentPosts: [],\n    progress: {},\n    post: {},\n    postData: {},\n    group: {},\n    groupData: {},\n    pageTitle: {},\n    lastUrl: '',\n    friendSearchResult: {},\n    accountNotActive: false,\n    lastNotifications: [],\n    isConnectingWS: false,\n}\n\nconst reducer = createReducer(initialState, {\n    SET_DATA: (state: Object, action: Object) => {\n        if (action.data) {\n            for (let key of [\n                'user',\n                'account',\n                'isAuthed',\n                'currentAccount',\n                'currentProfile',\n                'currentPosts',\n                'currentGroup',\n                'profile',\n                'group',\n                'currentProgress',\n                'progress',\n                'lastNotifications',\n            ]) {\n                if (typeof action.data[key] !== 'undefined') {\n                    state[key] = action.data[key]\n                }\n            }\n            for (let key of [\n                'friendData',\n                'progressData',\n                'post',\n                'postData',\n                'groupData',\n                'transactionData',\n            ]) {\n                if (typeof action.data[key] !== 'undefined') {\n                    for (let attr in action.data[key]) {\n                        if (action.data[key][attr]) {\n                            state[key][attr] = action.data[key][attr]\n                        }\n                    }\n                }\n            }\n        }\n        if (state.user) {\n            if (state.user.currentAccount) {\n                state.currentAccount = state.user.currentAccount\n                state.accountNotActive = false\n            } else if (state.user.myAccount) {\n                state.currentAccount = state.user.myAccount\n                state.accountNotActive = false\n            } else {\n                state.accountNotActive = true\n            }\n        }\n    },\n    REMOVE_DATA: (state: Object, action: Object) => {\n        if (action.data) {\n            for (let key of [\n                'user',\n                'account',\n                'profile',\n                'progress',\n                'group',\n            ]) {\n                for (let item of action.data[key]) {\n                    if (state[key]._id === item) {\n                        state[key] = {}\n                    }\n                }\n            }\n            for (let key of [\n                'post',\n                'friendData',\n                'progressData',\n                'postData',\n                'groupData',\n                'transactionData',\n            ]) {\n                for (let item of action.data[key]) {\n                    delete state[key][item]\n                }\n            }\n        }\n    },\n    SET_FRIEND_SEARCH_RESULT: (state: Object, action: Object) => {\n        state.friendSearchResult = action.data\n    },\n\n    SET_FRIENDS_DATA: (state: Object, action: Object) => {\n        if (action.data) {\n            state.account.friendsData = action.data\n        }\n        if (action.data.perk) state.perk = action.data.perk\n    },\n    SET_AVATAR_V: (state: Object, action: Object) => {\n        state.account.image = action.v\n    },\n    INCREASE_AVATAR_V: (state: Object) => {\n        state.account.image = state.account.image + 1\n    },\n    SET_IS_AUTHED: (state: Object, action: Object) => {\n        state.isAuthed = action.id\n    },\n    SET_PAGE_TITLE: (state: Object, action: Object) => {\n        state.pageTitle = action.title\n    },\n    SAVE_LAST_URL: (state: Object, action: Object) => {\n        if (action.url !== '/login' && action.url !== '/logout')\n            state.lastUrl = action.url\n    },\n    SET_ACCOUNT_ACTIVATED: (state: Object, action: Object) => {\n        state.accountNotActive = action.value\n    },\n    SET_CONNECTING_WS: (state: Object, action: Object) => {\n        state.isConnectingWS = action.data\n    },\n})\n\nexport default reducer\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter } from 'react-router-dom'\nimport axios from 'axios'\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly'\n\nimport './index.css'\nimport App from './App'\nimport reducer from './store/reducer/reducer'\n//import * as serviceWorker from './serviceWorker';\n\nif (process.env.NODE_ENV === 'development') {\n    axios.defaults.baseURL = 'http://my.websiter.test:5000'\n} else {\n    axios.defaults.baseURL = 'https://addspire.com'\n}\n// axios.defaults.withCredentials = true\n\nexport const store = createStore(\n    reducer,\n    composeWithDevTools(applyMiddleware(thunk))\n)\n\nconst app = (\n    <Provider store={store}>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </Provider>\n)\n\nconst root = document.getElementById('root')\n\nReactDOM.render(app, root)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}