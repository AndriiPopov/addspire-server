{"version":3,"sources":["components/Layout/Layout.module.css","components/UI/ImageCarousel/imageCarousel.module.css","containers/Account/Account.module.css","containers/Auth/Auth.tsx","containers/Auth/AuthTest.tsx","components/Layout/LoginModal.tsx","components/Layout/Layout.tsx","utils/processRes.js","store/actions/auth.tsx","containers/ConnectWebsocket/methods/getListOfNeededResources.js","containers/ConnectWebsocket/methods/compareVersionsAndRerequest.js","containers/ConnectWebsocket/methods/getResourcesToMonitor.js","containers/ConnectWebsocket/ConnectWebsocket.tsx","store/actions/saveResources.tsx","containers/ConnectWebsocket/methods/requestResource.tsx","store/actions/updateResource.tsx","utils/uploadFile.js","constants/fieldLength.js","constants/fieldRules.js","utils/getAvatar.js","containers/Shop/AddPerkForm.tsx","websocketActions/posts.tsx","websocketActions/wishlistAndPerks.tsx","websocketActions/friends.tsx","containers/Shop/AddPerk.tsx","components/MasonryCard.tsx","components/UI/MoreIcon.js","containers/Shop/PerkCard.tsx","components/AddCard/AddCard.tsx","utils/masonryBreakPoints.js","components/MasonryGrid.tsx","containers/Shop/WishlistAndPerks.tsx","containers/Goals/Goals.tsx","utils/pullData.js","components/Post/AddMessage.tsx","components/UI/ImageCarousel/ImageCarousel.tsx","components/UserButton/UserButton.tsx","components/Post/Message.tsx","components/Post/Post.tsx","containers/Goals/Goal.tsx","components/EditGoalAndProgressForm/connectionsSelect.tsx","components/Rewards/Rewards.tsx","websocketActions/progresses.tsx","components/EditGoalAndProgressForm/EditGoalAndProgressForm.tsx","containers/Progresses/AddProgress.tsx","containers/Progresses/GroupCard.tsx","containers/Progresses/Progresses.tsx","containers/Progress/ActivityTable.tsx","containers/Progress/EditProgress.tsx","containers/Progress/Activity.tsx","components/Post/AddPost.tsx","containers/Progress/Progress.tsx","containers/Shop/Wallet.tsx","containers/Shop/Transactions.tsx","containers/Shop/Shop.tsx","containers/Dashboard/DashboardPosts.tsx","containers/Dashboard/DashboardEvents.tsx","containers/Dashboard/Dashboard.tsx","websocketActions/dashboard.tsx","containers/Explore/Explore.tsx","components/FriendActionButton.tsx","components/FriendCard.tsx","containers/Friends/AddFriends.tsx","containers/Friends/PendingFriends.tsx","containers/Friends/Friends.tsx","containers/Account/Account.tsx","websocketActions/account.tsx","containers/Profile/Profile.tsx","containers/ActivateAccount/ActivateAccount.tsx","containers/Shop/Perk.tsx","containers/Wishlist/WishlistItem.tsx","containers/Wishlist/Wishlist.tsx","containers/Progresses/ProgressCard.tsx","containers/Group/Group.tsx","containers/Dashboard/NotificationsTracker.tsx","App.tsx","store/reducer/reducer.tsx","index.tsx","containers/Auth/Auth.module.css"],"names":["module","exports","Layout","Header","Footer","HideHeader","FooterButton","TopHeader","BottomHeader","Main","Button","MenuButtonContiner","QuickButtonContiner","PageTitle","Dots","Avatar","cookies","Cookies","withRouter","connect","state","lastUrl","props","_useState","useState","_useState2","Object","slicedToArray","setState","_useState3","_useState4","cookieConsent","setCookieConsent","useEffect","checkCookieConsent","remeberMeParam","get","basicURL","react_default","a","createElement","className","classes","Container","socialButtons","dist","onClick","window","location","concat","es_checkbox","checked","onChange","Background","modal","title","visible","onOk","set","path","maxAge","onCancel","open","destroyOnClose","maskClosable","loginVisible","setLoginVisible","footer","width","style","maxWidth","marginBottom","account","pageTitle","isAuthed","lastNotifications","isConnectingWS","lastScrollY","setLastScrollY","_useState5","_useState6","setHeaderVisible","_useState7","_useState8","handleScroll","currentScrollY","scrollY","removeEventListener","addEventListener","history","pathname","split","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","not","value","parseInt","notId","lastSeenNot","err","return","_id","Fragment","children","Layout_LoginModal","processRes","res","data","logout","push","success","errorCode","message","warning","error","successCode","status","tryAuth","forceLogin","dispatch","sessionStorage","setItem","token","rememberMe","remove","userId","jwt","decode","axios","defaults","headers","post","put","delete","common","Accept","setIsAuthed","saveLastUrl","pathParts","length","includes","url","type","id","setData","setPageTitle","setFriendSearchResult","getListOfNeededResources","store","requestedResources","user","progress","group","progressData","friendData","postData","groupData","transactionData","neededResources","currentAccount","progresses","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","groups","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","followPosts","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","myPosts","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","transactions","transaction","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","friends","friend","currentProfile","profile","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","currentGroup","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","users","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_iterator11","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_step12","_iterator12","posts","currentProgress","participants","owner","worker","toConsumableArray","experts","supporters","_iteratorNormalCompletion13","_didIteratorError13","_iteratorError13","_step13","_iterator13","_iteratorNormalCompletion14","_didIteratorError14","_iteratorError14","_step14","_iterator14","currentPosts","_iteratorNormalCompletion15","_didIteratorError15","_iteratorError15","_step15","_iterator15","postEl","_iteratorNormalCompletion16","_didIteratorError16","_iteratorError16","_step16","_iterator16","parent","parentType","parentId","reduce","obj","attr","Array","from","Set","notNeededExist","notNeededResources","check1","key","mode","check2","removeData","compareVersionsAndRerequest","versions","webSocket","checkData","requestResource","check","__v","getResourcesToMonitor","resources","addData","item","require","create","propertyFilter","name","context","ConnectWebsocket","start","pingTimeout","WebSocket","heartbeat","_this","clearTimeout","setTimeout","close","send","JSON","stringify","messageCode","onopen","event","resourcesToMonitor","initializeRequestResources","onmessage","news","parse","messageText","setFriendsData","friendsData","saveResource","updateResource","code","update","text","onclose","checkInterval","readyState","clearInterval","setInterval","reRequestResourcesInterval","reRequestResources","_i","_arr","ids","nextProps","newRequestedResources","_loop","_arr2","_i2","filter","this","setConnectingToWS","Component","pulledFrom","actions","getState","myAccount","find","notRequestedIds","applyDelta","source","delta","watchFields","result","cloneDeep","del","applyWithDot","keys","shift","applyUpdateToPart","updatedFields","applyDeleteToPart","splice","removedFields","field","indexOf","parState","element","defineProperty","updateData","uploadFile","file","size","filename","callback","alert","reader","FileReader","onload","_ref","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","resizeImageToSpecificSize","height","urltoFile","then","getSignedRequest","stop","_x","apply","arguments","readAsArrayBuffer","mimeType","match","fetch","arrayBuffer","buf","File","cb","resizeImageFromSrcToSpecificSize","target","readAsDataURL","src","img","Image","widthCoef","heightCoef","oc","document","octx","getContext","drawImage","toDataURL","fileName","response","doUploadFile","catch","signedRequest","Content-Type","console","log","fieldLength","nicknameRules","required","whitespace","min","max","pattern","nameRules","accountNameRules","descriptionRules","messageRules","priceRules","getAvatar","nickname","version","AddPerkForm","previewImage","setPreviewImage","connections","perkId","perk","deletePerk","onFinish","images","setImages","uploadImage","connectionsSelect","es_select","placeholder","getPopupContainer","trigger","parentNode","map","Option","avatar","image","marginRight","_Form$useForm","Form","useForm","form","es_form","assign","autoComplete","initialValues","labelCol","span","wrapperCol","Item","label","valuePropName","getValueFromEvent","e","isArray","fileList","upload","listType","index","objectSpread","uid","onPreview","customRequest","_ref2","PlusOutlined_default","rules","input","TextArea","input_number","offset","es_button","htmlType","popconfirm","onConfirm","okText","cancelText","danger","alt","changeLikesMessage","messageId","accountId","postId","buyPerk","buyer","seller","unfriend","friendId","setPerk","wishlist","itemId","goals","goalId","perks","Shop_AddPerkForm","wsActions","setEditPerkOpen","processedValue","onClickLink","cursor","borderRadius","padding","wordBreak","body","MoreIcon","viewBox","transform","d","setEditedPerk","MasonryCard","card","extra","stopPropagation","onlyBuy","dropdown","overlay","es_menu","fontWeight","price","bordered","AddCard","action","shape","icon","icons_PlusOutlined","friendsBreakPoints","default","1600","1100","600","cardBreakPoints","700","350","MasonryGrid","marginTop","react_masonry_css_es5_default","breakpointCols","columnClassName","WishlistAndPerks","editedPerk","editPerkOpen","editPerk","closable","Shop_AddPerk","components_AddCard_AddCard","sub","listKey","Shop_PerkCard","main","Shop_WishlistAndPerks","pullData","options","imageLoading","setImageLoading","content","replyToUser","setMessageText","background","replyTo","bottom","left","comment","margin","autoSize","minRows","maxRows","rows","messageValue","replyToMessage","editedMessage","editingMessage","onSend","SendOutlined_default","showUploadList","_ref3","LoadingOutlined_default","PictureFilled_default","cancel","CloseCircleFilled_default","Modal","ImageCarousel","carousel","dots","backgroundImage","backgroundSize","backgroundPosition","backgroundRepeat","friendSearchResult","friendDataExp","getUserData","userName","userAvatar","noClick","handleClick","Group","noAva","noName","Message","replies","isStart","replyVisible","setReplyVisible","setReplyToUser","setEditingMessage","showReplies","setShowReplies","commentProps","timeago_react","datetime","date","live","tooltip","likes","LikeFilled_default","LikeOutlined_default","paddingLeft","author","Math","floor","random","messageType","details","display","components_UserButton_UserButton","UI_ImageCarousel_ImageCarousel","color","fontSize","goal","startMessage","Post_AddMessage","isTop","reply","postOpen","setPostOpen","noStartMessage","Post_Message","divider","textAlign","position","justifyContent","icons_LikeFilled","icons_LikeOutlined","messages","getNumberOfMessages","whiteSpace","description","components_Post_Post","EditGoalAndProgressForm_connectionsSelect","onSelect","previewReward","setPreviewReward","editedReward","setEditedReward","editedRewardIndex","setEditedRewardIndex","readOnly","rewardsGI","rewards","findIndex","rewardKey","setRewards","RewardButton","simple","money","itemName","onlyButton","for","marginLeft","progressId","rewardId","confirm","newRewards","indexIn","reward","rewardToSave","itemImages","_ref4","itemDescription","_ref5","hoverable","cover","descriptions","column","xxl","xl","lg","md","sm","xs","EditGoalAndProgressForm","milestones","setMilestones","withMilestones","setWithMilestones","_useState9","newTabIndex","_useState10","setNewTabIndex","_useState11","rewardsGroups","_useState12","addMilestone","milestone","newPanes","newKey","indexOfMile","mile","setFieldsValue","MilestoneControls","dropdown_dropdown","domEvent","finish","newMilestones","Divider","pane","preventDefault","milestonesValues","onValuesChange","changedValues","collapse","expandIconPosition","accordion","Panel","header","getFieldValue","components_Rewards_Rewards","AddProgress","components_EditGoalAndProgressForm_EditGoalAndProgressForm","setStartProgressVisible","inGroup","Meta","Card","TabPane","Tabs","forceAuth","loadedProgresses","loadedGroups","fromProfile","startProgressVisible","active","editGoal","Progresses_AddProgress","tab","Progresses_GroupCard","empty","imageStyle","ActivityTable","renderCheckbox","milestoneId","disabled","getCheckboxStatus","stage","approvedBy","destroyInactivePanel","stages","expert","badge","typography","Paragraph","ellipsis","expandable","symbol","paid","EditProgress","editProgressOpen","Descriptions","orientation","Progress_ActivityTable","toString","Progress_EditProgress","zIndex","icons_PictureFilled","icons_CloseCircleFilled","tabs","Progress_Activity","Post_AddPost","paddingTop","pulledProfile","wallet","amount","tableData","sorted","sort","b","Date","getTime","types","to","alignItems","layout","tag","es_tag","toUpperCase","format","cancelTransaction","record","confirmTransaction","boxShadow","Shop_Wallet","Shop_Transactions","statePosts","setPosts","startTime","sortPosts","aN","notifications","bN","newPosts","newUnseenPosts","newOldPosts","oldPosts","oldPostIndex","_loop2","_newOldPosts","resultPosts","slice","neededPosts","isEqual","nots","getRewardText","as","progressName","addedAccounts","ac","droppedAccounts","numberOfUnseenNots","activeTab","last","Dashboard_DashboardPosts","count","Dashboard_DashboardEvents","isSearching","setIsSearching","foundProgresses","setFoundProgresses","setProgresses","noMore","setNoMore","noMorePopular","setNoMorePopular","searchValue","setSearchValue","_useState13","_useState14","setFriendData","onSearch","noNoMore","skip","newFriendData","Search","enterButton","allowClear","react_infinite_scroller_default","pageStart","loadMore","hasMore","loader","FriendActionButton","invitingFriends","invitedFriends","realFriends","additionalButton","menu","additionalButtons","button","asText","DownOutlined","friendActions","friendActionButton","asIcons","searchResult","addFriendOpen","setAddFriendOpen","search","components_FriendCard","fullFriend","confirmedFriends","PendingFriends","Friends_AddFriends","increaseAvatarV","deleteVisible","setDeleteVisible","deleteField","setDeleteField","flex","overflow","profileId","containers_Progresses_Progresses","oneFriendData","setAccountActivated","page_header","backIcon","nicknameNotUnique","items","Perk_Item","wishlistItem","groupId","Progresses_ProgressCard","sortNotifiacations","filterSameNot","arr","myNotifications","accountNotActive","redirectTo","Logout","react_router","routes","exact","component","Goals","Goal","Progresses","Progress","Profile","Friends","Account","Dashboard","Explore","Shop","Perk","Wishlist","WishlistItem","ActivateAccount","process","Auth","containers_ConnectWebsocket_ConnectWebsocket","Dashboard_NotificationsTracker","reducer","createReducer","SET_DATA","REMOVE_DATA","_i3","_arr3","_i4","_arr4","SET_FRIEND_SEARCH_RESULT","SET_FRIENDS_DATA","SET_AVATAR_V","v","INCREASE_AVATAR_V","SET_IS_AUTHED","SET_PAGE_TITLE","SAVE_LAST_URL","SET_ACCOUNT_ACTIVATED","SET_CONNECTING_WS","__webpack_require__","__webpack_exports__","src_store","baseURL","createStore","composeWithDevTools","applyMiddleware","thunk","app","es","react_router_dom","src_App","root","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.48e0b6d8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Layout\":\"Layout_Layout__3t6t4\",\"Header\":\"Layout_Header__3lh1Y\",\"Footer\":\"Layout_Footer__1Dfqu\",\"HideHeader\":\"Layout_HideHeader__2WRsh\",\"FooterButton\":\"Layout_FooterButton__1lZv2\",\"TopHeader\":\"Layout_TopHeader__3_LuK\",\"BottomHeader\":\"Layout_BottomHeader__3DOBo\",\"Main\":\"Layout_Main__3usmk\",\"Button\":\"Layout_Button__1O5Hm\",\"MenuButtonContiner\":\"Layout_MenuButtonContiner__PpulB\",\"QuickButtonContiner\":\"Layout_QuickButtonContiner__4d4Lg\",\"PageTitle\":\"Layout_PageTitle__368dw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Dots\":\"imageCarousel_Dots__2JZGt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Avatar\":\"Account_Avatar__l4shx\"};","import React, { useState, useEffect } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport Checkbox from 'antd/es/checkbox'\nimport Cookies from 'universal-cookie'\nimport classes from './Auth.module.css'\nimport Modal from 'antd/es/modal'\nimport {\n    FacebookLoginButton,\n    GithubLoginButton,\n    GoogleLoginButton,\n} from 'react-social-login-buttons'\n\nconst cookies = new Cookies()\n\nconst Auth = props => {\n    const [state, setState] = useState(false)\n    const [cookieConsent, setCookieConsent] = useState(false)\n\n    useEffect(() => {\n        checkCookieConsent()\n    })\n\n    let remeberMeParam = '?rememberme=false'\n    if (state) {\n        remeberMeParam = '?rememberme=true'\n    }\n\n    let redirectParam = '&redirect=/login'\n    if (props.lastUrl) {\n        redirectParam = '&redirect=' + props.lastUrl\n    }\n\n    const checkCookieConsent = () => {\n        const cookiesConsent = cookies.get('cookies_consent')\n        if (cookiesConsent) {\n            setCookieConsent(true)\n        }\n    }\n\n    const agreeWithCookies = () => {\n        cookies.set('cookies_consent', 'true', {\n            path: '/',\n            maxAge: 31530000,\n        })\n        checkCookieConsent()\n    }\n    const basicURL =\n        process.env.NODE_ENV !== 'development'\n            ? 'https://addspiration.com/api/auth/'\n            : 'http://my.websiter.test:5000/api/auth/'\n    return !cookieConsent ? (\n        <Modal\n            title=\"Cookies consent\"\n            visible={!cookieConsent}\n            onOk={agreeWithCookies}\n            onCancel={() => {\n                window.open('https://websiter.dev', '_self')\n            }}\n            destroyOnClose={true}\n            maskClosable={false}\n        >\n            <p>We use cookies only for login purposes. </p>\n            <p>\n                In order to proceed you need to agree with the use of cookies.\n            </p>\n        </Modal>\n    ) : (\n        <div className=\"contentDiv\">\n            <div className={classes.Container}>\n                <h1>Welcome to Websiter!</h1>\n                <h2>This is where great progresses live.</h2>\n                <h1>Continue with:</h1>\n                <div className={classes.socialButtons}>\n                    <FacebookLoginButton\n                        onClick={() =>\n                            (window.location =\n                                basicURL + `facebook/start${remeberMeParam}`)\n                        }\n                    />\n                    <GoogleLoginButton\n                        onClick={() =>\n                            (window.location =\n                                basicURL + `google/start${remeberMeParam}`)\n                        }\n                    />\n                    <GithubLoginButton\n                        onClick={() =>\n                            (window.location =\n                                basicURL + `github/start${remeberMeParam}`)\n                        }\n                    />\n                </div>\n                <Checkbox checked={state} onChange={() => setState(!state)}>\n                    Remember me\n                </Checkbox>\n            </div>\n            <div className={classes.Background} />\n        </div>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        lastUrl: state.lastUrl,\n    }\n}\n\nexport default withRouter(connect(mapStateToProps)(Auth))\n","import React from 'react'\n\nimport Form from 'antd/es/form'\nimport Input from 'antd/es/input'\nimport Button from 'antd/es/button'\nimport axios from 'axios'\nimport Cookies from 'universal-cookie'\n\nconst cookies = new Cookies()\n\nconst Auth = props => {\n    const layout = {\n        labelCol: { span: 8 },\n        wrapperCol: { span: 16 },\n    }\n    const tailLayout = {\n        wrapperCol: { offset: 8, span: 16 },\n    }\n    const onFinish = value => {\n        axios\n            .post('/api/authtest/' + value.id)\n            .then(res => {\n                cookies.set('auth_token', res.data.cookie)\n                props.onTryAutoSignup()\n            })\n            .catch(err => {})\n    }\n    return (\n        <Form\n            name=\"dynamic_form_nest_item\"\n            onFinish={onFinish}\n            autoComplete=\"off\"\n            {...layout}\n        >\n            <Form.Item\n                label=\"Id\"\n                name=\"id\"\n                rules={[\n                    { required: true, message: 'Please input the goal name.' },\n                ]}\n            >\n                <Input />\n            </Form.Item>\n            <Form.Item {...tailLayout}>\n                <Button type=\"primary\" htmlType=\"submit\" size=\"large\">\n                    Save\n                </Button>\n            </Form.Item>\n        </Form>\n    )\n}\n\nexport default Auth\n","import React, { useState, useEffect } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport Checkbox from 'antd/es/checkbox'\nimport Cookies from 'universal-cookie'\nimport classes from '../../containers/Auth/Auth.module.css'\nimport Modal from 'antd/es/modal'\nimport {\n    FacebookLoginButton,\n    GithubLoginButton,\n    GoogleLoginButton,\n} from 'react-social-login-buttons'\n\nconst cookies = new Cookies()\n\nconst LoginModal = props => {\n    const [state, setState] = useState(false)\n    const [cookieConsent, setCookieConsent] = useState(false)\n\n    useEffect(() => {\n        checkCookieConsent()\n    })\n\n    let remeberMeParam = '?rememberme=false'\n    if (state) {\n        remeberMeParam = '?rememberme=true'\n    }\n\n    let redirectParam = '&redirect=/login'\n    if (props.lastUrl) {\n        redirectParam = '&redirect=' + props.lastUrl\n    }\n\n    const checkCookieConsent = () => {\n        const cookiesConsent = cookies.get('cookies_consent')\n        if (cookiesConsent) {\n            setCookieConsent(true)\n        }\n    }\n\n    const agreeWithCookies = () => {\n        cookies.set('cookies_consent', 'true', {\n            path: '/',\n            maxAge: 31530000,\n        })\n        checkCookieConsent()\n    }\n    const basicURL =\n        process.env.NODE_ENV !== 'development'\n            ? 'https://addspiration.com/api/auth/'\n            : 'http://my.websiter.test:5000/api/auth/'\n    return (\n        <Modal\n            visible={props.loginVisible}\n            onOk={() => {}}\n            onCancel={() => props.setLoginVisible(false)}\n            destroyOnClose={true}\n            maskClosable={false}\n            footer={[]}\n            width=\"100%\"\n            style={{ maxWidth: '600px' }}\n        >\n            {!cookieConsent ? (\n                <Modal\n                    title=\"Cookies consent\"\n                    visible={!cookieConsent}\n                    onOk={agreeWithCookies}\n                    onCancel={() => {\n                        window.open('https://websiter.dev', '_self')\n                    }}\n                    destroyOnClose={true}\n                    maskClosable={false}\n                >\n                    <p>We use cookies only for login purposes. </p>\n                    <p>\n                        In order to proceed you need to agree with the use of\n                        cookies.\n                    </p>\n                </Modal>\n            ) : (\n                <div className=\"contentDiv\">\n                    <div className={classes.Container}>\n                        <h1>Welcome to Addspiration!</h1>\n                        <h2>This is where great inspiration lives.</h2>\n                        <h1>Continue with:</h1>\n                        <div\n                            className={classes.socialButtons}\n                            style={{ marginBottom: '30px' }}\n                        >\n                            <FacebookLoginButton\n                                onClick={() =>\n                                    (window.location =\n                                        basicURL +\n                                        `facebook/start${remeberMeParam}`)\n                                }\n                            />\n                            <GoogleLoginButton\n                                onClick={() =>\n                                    (window.location =\n                                        basicURL +\n                                        `google/start${remeberMeParam}`)\n                                }\n                            />\n                            <GithubLoginButton\n                                onClick={() =>\n                                    (window.location =\n                                        basicURL +\n                                        `github/start${remeberMeParam}`)\n                                }\n                            />\n                        </div>\n                        <Checkbox\n                            checked={state}\n                            onChange={() => setState(!state)}\n                        >\n                            Remember me\n                        </Checkbox>\n                    </div>\n                    <div className={classes.Background} />\n                </div>\n            )}\n        </Modal>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        lastUrl: state.lastUrl,\n    }\n}\n\nexport default withRouter(connect(mapStateToProps)(LoginModal))\n","import React, { useState, useEffect } from 'react'\nimport { withRouter } from 'react-router-dom'\n\nimport { connect } from 'react-redux'\nimport Menu from 'antd/es/menu'\nimport Avatar from 'antd/es/avatar'\nimport Drawer from 'antd/es/drawer'\nimport Button from 'antd/es/button'\nimport Badge from 'antd/es/badge'\nimport * as classes from './Layout.module.css'\nimport CoffeeOutlined from '@ant-design/icons/CoffeeOutlined'\nimport LogoutOutlined from '@ant-design/icons/LogoutOutlined'\nimport UserOutlined from '@ant-design/icons/UserOutlined'\nimport HeartFilled from '@ant-design/icons/HeartFilled'\nimport RocketFilled from '@ant-design/icons/RocketFilled'\nimport TeamOutlined from '@ant-design/icons/TeamOutlined'\nimport MenuOutlined from '@ant-design/icons/MenuOutlined'\nimport ShopFilled from '@ant-design/icons/ShopFilled'\nimport HomeFilled from '@ant-design/icons/HomeFilled'\nimport getAvatar from '../../utils/getAvatar'\nimport LoginModal from './LoginModal'\nimport Spin from 'antd/es/spin'\nimport LoadingOutlined from '@ant-design/icons/LoadingOutlined'\n\nconst AccountLayout = props => {\n    const { account } = props\n    const [menuVisible, setMenuVisible] = useState()\n    const [lastScrollY, setLastScrollY] = useState(0)\n    const [headerVisible, setHeaderVisible] = useState(true)\n    const [loginVisible, setLoginVisible] = useState(false)\n\n    useEffect(() => {\n        const handleScroll = () => {\n            const currentScrollY = window.scrollY\n\n            if (currentScrollY > lastScrollY) {\n                setHeaderVisible(false)\n            } else {\n                setHeaderVisible(true)\n            }\n            setLastScrollY(currentScrollY)\n        }\n        window.removeEventListener('scroll', handleScroll)\n        window.addEventListener('scroll', handleScroll)\n        return () => window.removeEventListener('scroll', handleScroll)\n    }, [lastScrollY])\n    const toggleMenu = () => {\n        setMenuVisible(!menuVisible)\n    }\n    const selectedKey =\n        props.history.location.pathname.split('/')[1] || undefined\n\n    const buttonProps = {\n        type: 'link',\n        // ghost: true,\n        size: 'large',\n\n        className: classes.Button,\n    }\n    const checkHighligh = url =>\n        selectedKey === url\n            ? {\n                  ghost: false,\n                  type: 'link',\n              }\n            : { type: 'text' }\n    const openLink = url => props.history.push('/' + url)\n\n    const isActivating = props.history.location.pathname === '/activate-account'\n\n    let numberOfUnseenNots = 0\n\n    for (let not of props.lastNotifications) {\n        if (parseInt(not.notId) > parseInt(account.lastSeenNot || 0))\n            numberOfUnseenNots++\n    }\n    const logedIn = props.isAuthed && account._id\n    //!['/login', '/logout'].includes(props.history.location.pathname) ? (\n    return (\n        <>\n            <div className={classes.Layout}>\n                {/* <header\n                    className={\n                        headerVisible\n                            ? classes.Header\n                            : [classes.Header, classes.HideHeader].join(' ')\n                    }\n                >\n                    <div className={classes.TopHeader}>\n                        <div className={classes.MenuButtonContiner}>\n                            {logedIn && (\n                                <>\n                                    {!isActivating && (\n                                        <Button\n                                            {...buttonProps}\n                                            icon={<MenuOutlined />}\n                                            onClick={toggleMenu}\n                                        />\n                                    )}\n                                    <div className={classes.PageTitle}>\n                                        {isActivating\n                                            ? 'Activate your account'\n                                            : props.pageTitle.main}\n                                    </div>\n                                </>\n                            )}\n                        </div>\n                        <div className={classes.QuickButtonContiner}>\n                            {logedIn ? (\n                                !isActivating ? (\n                                    <span\n                                        onClick={() => openLink('account')}\n                                        style={{\n                                            margin: '0px 10px',\n                                            cursor: 'pointer',\n                                        }}\n                                    >\n                                        <Avatar\n                                            style={{\n                                                border: '1px solid white',\n                                            }}\n                                            src={getAvatar(\n                                                account._id,\n                                                account.image\n                                            )}\n                                        />\n                                    </span>\n                                ) : (\n                                    <Button\n                                        {...buttonProps}\n                                        {...checkHighligh('friends')}\n                                        icon={<LogoutOutlined />}\n                                        onClick={() =>\n                                            props.history.push('/logout')\n                                        }\n                                    >\n                                        Logout\n                                    </Button>\n                                )\n                            ) : props.isConnectingWS ? (\n                                <>\n                                    <span style={{ marginRight: '30px' }}>\n                                        <Spin\n                                            indicator={\n                                                <LoadingOutlined\n                                                    style={{\n                                                        color: 'white',\n                                                        marginRight: '10px',\n                                                    }}\n                                                />\n                                            }\n                                        />{' '}\n                                        Trying to login\n                                    </span>\n                                    <Button\n                                        {...buttonProps}\n                                        {...checkHighligh('friends')}\n                                        icon={<LogoutOutlined />}\n                                        onClick={() =>\n                                            props.history.push('/logout')\n                                        }\n                                    >\n                                        Logout\n                                    </Button>\n                                </>\n                            ) : (\n                                <Button\n                                    {...buttonProps}\n                                    {...checkHighligh('friends')}\n                                    icon={<LogoutOutlined />}\n                                    onClick={() => setLoginVisible(true)}\n                                >\n                                    Sign in or Sign up\n                                </Button>\n                            )}\n                        </div>\n                    </div>\n                </header> */}\n                <main className={classes.Main}>{props.children}</main>\n                {/* {!isActivating && logedIn && (\n                    <footer className={classes.Footer}>\n                        <Button\n                            {...buttonProps}\n                            {...checkHighligh('dashboard')}\n                            onClick={() => openLink('dashboard')}\n                        >\n                            <Badge count={numberOfUnseenNots}>\n                                <HomeFilled />{' '}\n                                <div className={classes.FooterButton}>\n                                    Dashboard\n                                </div>\n                            </Badge>\n                        </Button>\n\n                        <Button\n                            {...buttonProps}\n                            {...checkHighligh('progresses')}\n                            onClick={() => openLink('progresses')}\n                        >\n                            <Badge count={0}>\n                                <RocketFilled />\n                                <div className={classes.FooterButton}>\n                                    Progresses\n                                </div>\n                            </Badge>\n                        </Button>\n\n                        <Button\n                            {...buttonProps}\n                            {...checkHighligh('shop')}\n                            onClick={() => openLink('shop')}\n                        >\n                            <Badge count={0}>\n                                <ShopFilled />\n                                <div className={classes.FooterButton}>Shop</div>\n                            </Badge>\n                        </Button>\n\n                        <Button\n                            {...buttonProps}\n                            {...checkHighligh('friends')}\n                            onClick={() => openLink('friends')}\n                        >\n                            <Badge\n                                count={\n                                    account.friends.filter(\n                                        item => item.status === 'inviting'\n                                    ).length\n                                }\n                            >\n                                <TeamOutlined />\n                                <div className={classes.FooterButton}>\n                                    Friends\n                                </div>\n                            </Badge>\n                        </Button>\n                    </footer>\n                )} */}\n                {/* {!isActivating && logedIn && (\n                    <Drawer\n                        title=\"Menu\"\n                        closable={true}\n                        onClose={toggleMenu}\n                        visible={menuVisible}\n                        placement=\"left\"\n                    >\n                        <Menu\n                            theme=\"light\"\n                            mode=\"vertical\"\n                            selectedKeys={[selectedKey]}\n                            onClick={({ key }) => {\n                                props.history.push('/' + key)\n                                toggleMenu()\n                            }}\n                            overflowedIndicator={<MenuOutlined />}\n                        >\n                            <Menu.Item key=\"explore\" icon={<CoffeeOutlined />}>\n                                Explore\n                            </Menu.Item>\n                            <Menu.Item key=\"dashboard\" icon={<HomeFilled />}>\n                                Dashboard\n                            </Menu.Item>\n                            <Menu.Item key=\"progresses\" icon={<RocketFilled />}>\n                                Progresses\n                            </Menu.Item>\n                            <Menu.Item key=\"shop\" icon={<ShopFilled />}>\n                                Shop\n                            </Menu.Item>\n                            <Menu.Item key=\"friends\" icon={<TeamOutlined />}>\n                                Friends\n                            </Menu.Item>\n                            \n                            <Menu.Item key=\"wishlist\" icon={<HeartFilled />}>\n                                Wishlist\n                            </Menu.Item>\n                            <Menu.Item key=\"account\" icon={<UserOutlined />}>\n                                Account\n                            </Menu.Item>\n                            <Menu.Item key=\"logout\" icon={<LogoutOutlined />}>\n                                Logout\n                            </Menu.Item>\n                        </Menu>\n                    </Drawer>\n                )} */}\n            </div>\n            <LoginModal\n                loginVisible={loginVisible}\n                setLoginVisible={setLoginVisible}\n            />\n        </>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n        pageTitle: state.pageTitle,\n        isAuthed: state.isAuthed,\n        lastNotifications: state.lastNotifications,\n        isConnectingWS: state.isConnectingWS,\n    }\n}\n\nexport default withRouter(connect(mapStateToProps)(AccountLayout))\n","import message from 'antd/es/message'\n\nexport default (res, props) => {\n    if (res.data.logout) props.history.push('/logout')\n    if (res.data.success === false) {\n        if (res.data.errorCode) {\n            switch (res.data.errorCode) {\n                case 'no account':\n                    message.warning('Account is not found. Please login.')\n                    break\n                case 'bad data':\n                    message.error(\n                        'Error. Please try one more time with correct data.'\n                    )\n                    break\n                case 'progress exist':\n                    message.warning('This progress already exists.')\n                    break\n                default:\n                    message.warning(\n                        'Something wrong has happened... Try again!'\n                    )\n                    break\n            }\n        } else {\n            message.error('Something failed')\n        }\n    } else {\n        if (res.data.successCode) {\n            switch (res.data.successCode) {\n                case 'avatar saved':\n                    message.success('The avatar image has been updated.')\n                    break\n                case 'success':\n                    message.success('Success!')\n                    break\n                case 'item saved':\n                    message.success('Item is saved')\n                    break\n                case 'prgress created':\n                    message.success('Progress has started!')\n                    break\n                default:\n                    message.success('Success!')\n                    break\n            }\n        }\n    }\n    if (res.data.status && res.data.status === 'no account')\n        props.history.push('/activate-account')\n}\n","import axios from 'axios'\n\nimport Cookies from 'universal-cookie'\nimport jwt from 'jsonwebtoken'\nimport processRes from '../../utils/processRes'\n\nconst cookies = new Cookies()\n\nexport const tryAuth = (props, forceLogin) => (dispatch: Object) => {\n    sessionStorage.setItem('systemRefresh', '0')\n    const token = cookies.get('auth_token')\n    const rememberMe = cookies.get('rememberme')\n    if (rememberMe) {\n        cookies.remove('rememberme', {\n            path: '/',\n        })\n        if (rememberMe === 'false') {\n            cookies.remove('auth_token', {\n                path: '/',\n            })\n        }\n    }\n    const userId = jwt.decode(token)\n    axios.defaults.headers.post['Content-Type'] = 'application/json'\n    axios.defaults.headers.put['Content-Type'] = 'application/json'\n    axios.defaults.headers.delete['Content-Type'] = 'application/json'\n    axios.defaults.headers.common.Accept = 'application/json'\n    if (token && userId) {\n        axios.defaults.headers.common['x-auth-token'] = token\n        axios.defaults.headers.post['x-auth-token'] = token\n        axios.defaults.headers.get['x-auth-token'] = token\n        axios.defaults.headers.delete['x-auth-token'] = token\n        axios.defaults.headers.put['x-auth-token'] = token\n        dispatch(setIsAuthed(userId._id))\n    } else {\n        dispatch(setIsAuthed(false))\n        dispatch(saveLastUrl(props.history.location.pathname))\n        const pathParts = props.history.location.pathname.split('/')\n        if (\n            pathParts.length === 2 &&\n            !['explore', 'login', 'logintest'].includes(pathParts[1])\n        )\n            props.history.push('/logout')\n\n        if (forceLogin) props.history.push('/logout')\n    }\n}\n\nconst saveLastUrl = url => ({\n    type: 'SAVE_LAST_URL',\n    url,\n})\n\nconst setIsAuthed = id => ({\n    type: 'SET_IS_AUTHED',\n    id,\n})\n\nexport const logout = () => dispatch => {\n    cookies.remove('rememberme', {\n        path: '/',\n    })\n    cookies.remove('auth_token', {\n        path: '/',\n    })\n    delete axios.defaults.headers.common['x-auth-token']\n    delete axios.defaults.headers.post['x-auth-token']\n    delete axios.defaults.headers.get['x-auth-token']\n    delete axios.defaults.headers.delete['x-auth-token']\n    delete axios.defaults.headers.put['x-auth-token']\n    dispatch(setIsAuthed(false))\n}\n\nexport const setData = data => ({\n    type: 'SET_DATA',\n    data,\n})\n\nexport const setConnectingToWS = data => ({\n    type: 'SET_CONNECTING_WS',\n    data,\n})\n\nexport const removeData = data => ({\n    type: 'REMOVE_DATA',\n    data,\n})\n\nexport const setFriendsData = data => ({\n    type: 'SET_FRIENDS_DATA',\n    data,\n})\n\nexport const setAvatarV = v => ({\n    type: 'SET_AVATAR_V',\n    v,\n})\n\nexport const increaseAvatarV = () => ({\n    type: 'INCREASE_AVATAR_V',\n})\n\nexport const setPageTitle = title => ({\n    type: 'SET_PAGE_TITLE',\n    title,\n})\n\nexport const buyPerk = (account, perk, owner, props) => dispatch => {\n    const currency = account.wallet.find(item => item.user === owner._id)\n    if (currency && currency.amount >= perk.price) {\n        axios\n            .post('/api/shop/buy', {\n                perkId: perk.perkId,\n                ownerId: owner._id,\n            })\n            .then(res => {\n                processRes(res)\n                if (res.data.success) {\n                    dispatch(setData(res.data, props.history.location.pathname))\n                }\n            })\n            .catch(err => {})\n    } else {\n        alert(\n            'You cannot buy this item as you do not have enough money from this user.'\n        )\n    }\n}\n\nexport const confirmTransaction = (transactionId, props) => dispatch => {\n    axios\n        .post('/api/shop/confirm', {\n            transactionId,\n        })\n        .then(res => {\n            processRes(res)\n            if (res.data.success) {\n                dispatch(setData(res.data, props.history.location.pathname))\n            }\n        })\n        .catch(err => {})\n}\n\nexport const cancelTransaction = (transactionId, props) => dispatch => {\n    axios\n        .post('/api/shop/cancel', {\n            transactionId,\n        })\n        .then(res => {\n            processRes(res)\n            if (res.data.success) {\n                dispatch(setData(res.data, props.history.location.pathname))\n            }\n        })\n        .catch(err => {})\n}\n\nexport const setFriendSearchResult = data => ({\n    type: 'SET_FRIEND_SEARCH_RESULT',\n    data,\n})\n\nexport const setAccountActivated = value => ({\n    type: 'SET_ACCOUNT_ACTIVATED',\n    value,\n})\n","export default props => {\n    const createEmptyObj = () => ({\n        user: [],\n        account: [],\n        progress: [],\n        post: [],\n        group: [],\n        progressData: [],\n        friendData: [],\n        postData: [],\n        groupData: [],\n        transactionData: [],\n    })\n    const { store } = props\n    const requestedResources = createEmptyObj()\n    const neededResources = createEmptyObj()\n    if (store.isAuthed) {\n        if (!store.user) {\n            requestedResources.user.push(store.isAuthed)\n        } else {\n            neededResources.user.push(store.user._id)\n            if (store.currentAccount) {\n                if (store.account._id !== store.currentAccount) {\n                    requestedResources.account.push(store.currentAccount)\n                } else {\n                    neededResources.account.push(store.account._id)\n                    for (let progress of store.account.progresses) {\n                        if (!store.progressData[progress]) {\n                            requestedResources.progressData.push(progress)\n                        }\n                        neededResources.progressData.push(progress)\n                    }\n                    for (let group of store.account.groups) {\n                        if (!store.groupData[group]) {\n                            requestedResources.groupData.push(group)\n                        }\n                        neededResources.groupData.push(group)\n                    }\n                    for (let post of store.account.followPosts) {\n                        if (!store.postData[post]) {\n                            requestedResources.postData.push(post)\n                        }\n                        neededResources.postData.push(post)\n                    }\n                    for (let post of store.account.myPosts) {\n                        if (!store.postData[post]) {\n                            requestedResources.postData.push(post)\n                        }\n                        neededResources.postData.push(post)\n                    }\n                    for (let transaction of store.account.transactions) {\n                        if (!store.transactionData[transaction]) {\n                            requestedResources.transactionData.push(transaction)\n                        }\n                        neededResources.transactionData.push(transaction)\n                    }\n                    for (let friend of store.account.friends) {\n                        if (!store.friendData[friend.friend]) {\n                            requestedResources.friendData.push(friend.friend)\n                        }\n                        neededResources.friendData.push(friend.friend)\n                    }\n                }\n            }\n            if (store.currentProfile) {\n                if (store.profile._id !== store.currentProfile) {\n                    requestedResources.account.push(store.currentProfile)\n                } else {\n                    neededResources.account.push(store.profile._id)\n                    for (let progress of store.profile.progresses) {\n                        if (!store.progressData[progress]) {\n                            requestedResources.progressData.push(progress)\n                        }\n                        neededResources.progressData.push(progress)\n                    }\n                    for (let group of store.profile.groups) {\n                        if (!store.groupData[group]) {\n                            requestedResources.groupData.push(group)\n                        }\n                        neededResources.groupData.push(group)\n                    }\n                    for (let friend of store.profile.friends) {\n                        if (!store.friendData[friend.friend]) {\n                            requestedResources.friendData.push(friend.friend)\n                        }\n                        neededResources.friendData.push(friend.friend)\n                    }\n                }\n            }\n            if (store.currentGroup) {\n                if (store.group._id !== store.currentGroup) {\n                    requestedResources.group.push(store.currentGroup)\n                } else {\n                    neededResources.group.push(store.group._id)\n                    for (let user of store.group.users) {\n                        if (!store.friendData[user]) {\n                            requestedResources.friendData.push(user)\n                        }\n                        neededResources.friendData.push(user)\n                    }\n                    for (let progress of store.group.progresses) {\n                        if (!store.progressData[progress]) {\n                            requestedResources.progressData.push(progress)\n                        }\n                        neededResources.progressData.push(progress)\n                    }\n                    for (let post of store.group.posts) {\n                        if (!store.postData[post]) {\n                            requestedResources.postData.push(post)\n                        }\n                        neededResources.postData.push(post)\n                    }\n                }\n            }\n            if (store.currentProgress) {\n                if (store.progress._id !== store.currentProgress) {\n                    requestedResources.progress.push(store.currentProgress)\n                } else {\n                    neededResources.progress.push(store.progress._id)\n                    let participants = []\n                    if (store.progress.owner)\n                        participants.push(store.progress.owner)\n                    if (store.progress.worker)\n                        participants.push(store.progress.worker)\n                    participants = [\n                        ...participants,\n                        ...(store.progress.experts || []),\n                        ...(store.progress.supporters || []),\n                    ]\n                    for (let friend of participants) {\n                        if (!store.friendData[friend]) {\n                            requestedResources.friendData.push(friend)\n                        }\n                        neededResources.friendData.push(friend)\n                    }\n                    for (let post of store.progress.posts) {\n                        if (!store.postData[post]) {\n                            requestedResources.postData.push(post)\n                        }\n                        neededResources.postData.push(post)\n                    }\n                }\n            }\n            if (store.currentPosts) {\n                for (let post of store.currentPosts) {\n                    const postEl = store.post[post]\n                    if (!postEl) {\n                        requestedResources.post.push(post)\n                    } else {\n                        neededResources.post.push(post)\n                        for (let friend of postEl.users) {\n                            if (!store.friendData[friend]) {\n                                requestedResources.friendData.push(friend)\n                            }\n                            neededResources.friendData.push(friend)\n                        }\n                        if (post.parent) {\n                            if (post.parent.parentType === 'progress')\n                                neededResources.progressData.push(\n                                    post.parent.parentId\n                                )\n                            else if (post.parent.parentType === 'group')\n                                neededResources.groupData.push(\n                                    post.parent.parentId\n                                )\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    const reduce = obj => {\n        for (let attr in obj) {\n            if (obj[attr]) {\n                obj[attr] = Array.from(new Set(obj[attr]))\n            }\n        }\n    }\n\n    reduce(neededResources)\n    const notNeededResources = createEmptyObj()\n    notNeededResources.profile = []\n    let notNeededExist\n    const check1 = (key, mode) => {\n        if (\n            store[mode]._id &&\n            !neededResources[key].includes(store[mode]._id)\n        ) {\n            notNeededResources[mode].push(store[mode]._id)\n            notNeededExist = true\n        }\n    }\n    const check2 = key => {\n        for (let attr in store[key]) {\n            if (!neededResources[key].includes(attr)) {\n                notNeededResources[key].push(attr)\n                notNeededExist = true\n            }\n        }\n    }\n    check1('account', 'account')\n    check1('account', 'profile')\n    check1('group', 'group')\n    check1('progress', 'progress')\n    check2('post')\n    check2('friendData')\n    check2('progressData')\n    check2('transactionData')\n    check2('postData')\n    check2('groupData')\n\n    if (notNeededExist) {\n        props.removeData(notNeededResources)\n    }\n\n    reduce(requestedResources)\n\n    return requestedResources\n}\n","import requestResource from './requestResource'\n\nexport default (versions, state, store, webSocket) => {\n    const notNeededResources = {\n        user: [],\n        account: [],\n        progress: [],\n        post: [],\n        group: [],\n        progressData: [],\n        friendData: [],\n        postData: [],\n        groupData: [],\n        transactionData: [],\n    }\n\n    const checkData = key => {\n        for (let attr in versions[key]) {\n            if (typeof versions[key][attr] !== 'undefined') {\n                if (store[key][attr]) {\n                    if (store[key][attr] !== versions[key][attr]) {\n                        requestResource(key, [attr], state)\n                    }\n                } else notNeededResources[key].push(attr)\n            }\n        }\n    }\n\n    const check = key => {\n        for (let attr in versions[key]) {\n            if (typeof versions[key][attr] !== 'undefined') {\n                if (store[key]._id === attr) {\n                    if (store[key].__v !== versions[key][attr]) {\n                        requestResource(key, [attr], state)\n                    }\n                    if (!store[key]._id) notNeededResources[key].push(attr)\n                } else notNeededResources[key].push(attr)\n            }\n        }\n    }\n\n    for (let attr in versions.user) {\n        if (typeof versions.user[attr] !== 'undefined') {\n            if (store.user._id === attr) {\n                if (store.user.__v !== versions.user[attr]) {\n                    requestResource('user', [attr], state)\n                }\n            } else notNeededResources.user.push(attr)\n        }\n    }\n\n    for (let attr in versions.account) {\n        if (typeof versions.account[attr] !== 'undefined') {\n            if (store.account._id === attr) {\n                if (store.account.__v !== versions.account[attr]) {\n                    requestResource('account', [attr], state)\n                }\n            }\n            if (store.profile._id === attr) {\n                if (store.profile.__v !== versions.account[attr]) {\n                    requestResource('account', [attr], state)\n                }\n                if (!store.account._id) notNeededResources.account.push(attr)\n            }\n        }\n        if (store.account._id !== attr && store.profile._id !== attr)\n            notNeededResources.account.push(attr)\n    }\n\n    check('progress')\n    check('group')\n\n    checkData('post')\n    checkData('friendData')\n    checkData('progressData')\n    checkData('postData')\n    checkData('groupData')\n    checkData('transactionData')\n\n    if (\n        notNeededResources.user.length > 0 ||\n        notNeededResources.account.length > 0 ||\n        notNeededResources.progress.length > 0 ||\n        notNeededResources.post.length > 0 ||\n        notNeededResources.group.length > 0 ||\n        notNeededResources.friendData.length > 0 ||\n        notNeededResources.progressData.length > 0 ||\n        notNeededResources.postData.length > 0 ||\n        notNeededResources.groupData.length > 0 ||\n        notNeededResources.transactionData.length > 0\n    ) {\n        return notNeededResources\n    }\n}\n","export default props => {\n    const { store } = props\n    const resources = {\n        user: {},\n        account: {},\n        progress: {},\n        post: {},\n        group: {},\n        transactionData: {},\n        friendData: {},\n        progressData: {},\n        groupData: {},\n        postData: {},\n    }\n\n    if (store.user && store.user._id) {\n        resources.user[store.user._id] = store.user.__v\n    }\n\n    if (store.account._id) {\n        resources.account[store.account._id] = store.account.__v\n    }\n    if (store.profile._id) {\n        resources.account[store.profile._id] = store.profile.__v\n    }\n    if (store.progress._id) {\n        resources.progress[store.progress._id] = store.progress.__v\n    }\n    if (store.group._id) {\n        resources.group[store.group._id] = store.group.__v\n    }\n\n    const addData = key => {\n        for (let item in store[key]) {\n            if (typeof store[key][item] !== 'undefined') {\n                if (store[key][item]._id) {\n                    resources[key][store[key][item]._id] = store[key][item].__v\n                }\n            }\n        }\n    }\n\n    addData('post')\n    addData('friendData')\n    addData('postData')\n    addData('groupData')\n    addData('progressData')\n    addData('TransactionData')\n\n    return resources\n}\n","import React, { Component } from 'react'\nimport axios from 'axios'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport message from 'antd/es/message'\nimport * as wsActions from '../../websocketActions'\nimport cloneDeep from 'lodash.clonedeep'\nimport getListOfNeededResources from './methods/getListOfNeededResources'\nimport compareVersionsAndRerequest from './methods/compareVersionsAndRerequest'\nimport getResourcesToMonitor from './methods/getResourcesToMonitor'\nconst diffpatcher = require('jsondiffpatch/dist/jsondiffpatch.umd.js').create({\n    propertyFilter: (name, context) => name !== 'patch',\n})\n\nexport let webSocket = false\n\nclass ConnectWebsocket extends Component {\n    state = {\n        user: [],\n        account: [],\n        progress: [],\n        post: [],\n        group: [],\n        friendData: [],\n        progressData: [],\n        postData: [],\n        groupData: [],\n        transactionData: [],\n    }\n    start = () => {\n        let url\n        if (process.env.NODE_ENV === 'development') {\n            url = 'ws://my.websiter.test:5000'\n        } else {\n            url = 'wss://addspiration.com'\n        }\n        let pingTimeout\n        webSocket = new WebSocket(url)\n\n        const heartbeat = versions => {\n            let notNeededResources\n            if (versions) {\n                notNeededResources = compareVersionsAndRerequest(\n                    versions,\n                    this.state,\n                    this.props.store,\n                    webSocket\n                )\n            }\n            clearTimeout(pingTimeout)\n\n            pingTimeout = setTimeout(() => {\n                webSocket.close()\n            }, 30000 + 1000)\n\n            webSocket.send(\n                JSON.stringify({\n                    messageCode: 'heartbeat',\n                    notNeededResources,\n                    //get back list of online friends\n                })\n            )\n        }\n\n        webSocket.onopen = event => {\n            const resourcesToMonitor = getResourcesToMonitor(this.props)\n            webSocket.send(\n                JSON.stringify({\n                    messageCode: 'auth',\n                    user: axios.defaults.headers.common['x-auth-token'],\n                    resourcesToMonitor,\n                    // progressId: this.props.progress._id,\n                })\n            )\n            this.initializeRequestResources(this.props)\n            heartbeat()\n        }\n\n        webSocket.onmessage = event => {\n            const news = JSON.parse(event.data)\n\n            switch (news.messageCode) {\n                case 'heartbeat':\n                    heartbeat(news.versions)\n                    break\n                case 'logout':\n                    this.props.logout()\n                    this.props.history.push('/logout')\n                    break\n\n                case 'successMessage':\n                    message.success(news.messageText)\n                    break\n                case 'errorMessage':\n                    message.error(news.messageText)\n                    break\n                case 'friendsData':\n                    this.props.setFriendsData(news.friendsData)\n                    break\n                case 'redirectToProgresses':\n                    this.props.history.push('/progresses')\n                    break\n                case 'addResource':\n                    this.props.saveResource(news.resources, news.type)\n                    break\n                case 'updateResource':\n                    this.props.updateResource(\n                        news.code,\n                        news.id,\n                        news.update,\n                        this.state\n                    )\n                    break\n                case 'friendSearchResult':\n                    this.props.setFriendSearchResult(news.data)\n                    break\n\n                // case 'update':\n                //     let newProgress\n                //     let oldProgress = cloneDeep(this.props.progress)\n                //     if (oldProgress.__v === news.progress.__v - 1) {\n                //         newProgress = diffpatcher.patch(\n                //             oldProgress,\n                //             news.progress.patch\n                //         )\n                //         newProgress.__v = news.progress.__v\n                //         this.props.setData(\n                //             {\n                //                 progress: newProgress,\n                //             },\n                //             this.props.history.location.pathname\n                //         )\n                //     }\n                //     wsActions.getFriendsData(\n                //         newProgress || this.props.progress,\n                //         this.props.account.friends\n                //     )\n                //     break\n                case 'error':\n                    message.error(news.text)\n                    break\n                // case 'notFoundResource':\n                //     this.markNotFoundResource(data)\n                //     break\n                default:\n                    break\n            }\n        }\n        webSocket.onclose = event => {\n            clearTimeout(pingTimeout)\n        }\n    }\n\n    // markNotFoundResource = data => {\n    //     const requestedResources = this.state.requestedResources.filter(\n    //         item => item.id.toString() === data._id.toString()\n    //     )\n    //     this.setState({ requestedResources })\n    // }\n\n    checkInterval = null\n\n    check = () => {\n        if (!webSocket || webSocket.readyState === 3) {\n            clearInterval(this.checkInterval)\n            this.checkInterval = setInterval(this.check, 5000)\n            this.start()\n        }\n    }\n    componentWillMount() {\n        this.checkInterval = setInterval(this.check, 50)\n    }\n\n    reRequestResourcesInterval = null\n    reRequestResources = () => {\n        for (let group of [\n            'user',\n            'account',\n            'progress',\n            'post',\n            'group',\n            'postData',\n            'groupData',\n            'progressData',\n            'friendData',\n            'transactionData',\n        ]) {\n            if (this.state[group].length > 0) {\n                if (webSocket && webSocket.readyState === 1) {\n                    webSocket.send(\n                        JSON.stringify({\n                            messageCode: 'requestResource',\n                            ids: this.state[group],\n                            type: group,\n                        })\n                    )\n                }\n            }\n        }\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.checkInterval)\n        if (webSocket) {\n            webSocket.close()\n        }\n        this.props.setConnectingToWS(false)\n    }\n    componentDidMount() {\n        this.props.setConnectingToWS(true)\n    }\n    componentWillReceiveProps(nextProps) {\n        this.initializeRequestResources(nextProps)\n    }\n\n    initializeRequestResources = nextProps => {\n        const newRequestedResources = getListOfNeededResources(nextProps)\n        for (let group of [\n            'user',\n            'account',\n            'progress',\n            'post',\n            'group',\n            'postData',\n            'groupData',\n            'progressData',\n            'friendData',\n            'transactionData',\n        ]) {\n            if (newRequestedResources[group].length > 0) {\n                if (webSocket && webSocket.readyState === 1) {\n                    webSocket.send(\n                        JSON.stringify({\n                            messageCode: 'requestResource',\n                            ids: newRequestedResources[group].filter(\n                                item => !this.state[group].includes(item)\n                            ),\n                            type: group,\n                        })\n                    )\n                }\n            }\n        }\n        this.setState(() => newRequestedResources)\n        clearInterval(this.reRequestResourcesInterval)\n        this.reRequestResourcesInterval = setInterval(\n            this.reRequestResources,\n            3000\n        )\n    }\n\n    render() {\n        return null\n    }\n}\nconst mapStateToProps = state => {\n    return {\n        store: state,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: (data, pulledFrom) =>\n            dispatch(actions.setData(data, pulledFrom)),\n        removeData: data => dispatch(actions.removeData(data)),\n        saveResource: (data, type) =>\n            dispatch(actions.saveResource(data, type)),\n        setFriendsData: data => dispatch(actions.setFriendsData(data)),\n\n        updateResource: (code, id, update, state) =>\n            dispatch(actions.updateResource(code, id, update, state)),\n        setFriendSearchResult: data =>\n            dispatch(actions.setFriendSearchResult(data)),\n        setConnectingToWS: data => dispatch(actions.setConnectingToWS(data)),\n\n        logout: () => dispatch(actions.logout()),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(ConnectWebsocket)\n)\n","import { setData } from './auth'\n\nexport const saveResource = (data, type) => (dispatch, getState) => {\n    if (data.length > 0) {\n        const state = getState()\n        switch (type) {\n            case 'user':\n                const user = data[0]\n                let currentAccount = user.currentAccount\n                if (!currentAccount) currentAccount = user.myAccount\n                // if(!currentAccount)\n                //activate-account\n                dispatch(setData({ user, currentAccount }))\n                break\n            case 'account':\n                const account = data.find(\n                    item => item._id === state.currentAccount\n                )\n                if (account) {\n                    dispatch(setData({ account }))\n                }\n\n                const profile = data.find(\n                    item => item._id === state.currentProfile\n                )\n                if (profile) {\n                    dispatch(setData({ profile }))\n                }\n\n                break\n            case 'progress':\n                const progress = data.find(\n                    item => item._id === state.currentProgress\n                )\n                if (progress) {\n                    dispatch(setData({ progress }))\n                }\n                break\n            case 'group':\n                const group = data.find(item => item._id === state.currentGroup)\n                if (group) {\n                    dispatch(setData({ group }))\n                }\n                break\n            case 'post':\n                let post = {}\n                for (let item of data) {\n                    post[item._id] = item\n                }\n                dispatch(setData({ post }))\n                break\n            case 'friendData':\n                let friendData = {}\n                for (let item of data) {\n                    friendData[item._id] = item\n                }\n                dispatch(setData({ friendData }))\n                break\n            case 'progressData':\n                let progressData = {}\n                for (let item of data) {\n                    progressData[item._id] = item\n                }\n                dispatch(setData({ progressData }))\n                break\n            case 'transactionData':\n                let transactionData = {}\n                for (let item of data) {\n                    transactionData[item._id] = item\n                }\n                dispatch(setData({ transactionData }))\n                break\n            case 'postData':\n                let postData = {}\n                for (let item of data) {\n                    postData[item._id] = item\n                }\n                dispatch(setData({ postData }))\n                break\n            case 'groupData':\n                let groupData = {}\n                for (let item of data) {\n                    groupData[item._id] = item\n                }\n                dispatch(setData({ groupData }))\n                break\n            default:\n                break\n        }\n    }\n}\n","import { webSocket } from '../ConnectWebsocket'\n\nexport default (type, ids, state) => {\n    const notRequestedIds = ids.filter(id => !state[type].includes(id))\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'requestResource',\n                ids: notRequestedIds,\n                type,\n            })\n        )\n    }\n}\n","import requestResource from '../../containers/ConnectWebsocket/methods/requestResource'\nimport * as actions from './index'\nimport cloneDeep from 'lodash.clonedeep'\n\nconst applyDelta = (source, delta, watchFields) => {\n    // console.log('---------------------------APLY DELTA------------------------')\n    // console.log('----------------source----------------')\n    // console.log(source)\n    // console.log('----------------delta-------------------')\n    // console.log(delta)\n    const result = cloneDeep(source)\n\n    const applyUpdateToPart = (res, del, watchFields) => {\n        const applyWithDot = (res, keys, del) => {\n            if (keys.length > 1) {\n                const key = keys.shift()\n                applyWithDot(res[key], keys, del)\n            } else {\n                if (typeof res === 'array') {\n                    res.push(del)\n                } else {\n                    res[keys[0]] = del\n                }\n            }\n        }\n        for (let attr in del) {\n            const keys = attr.split('.')\n            if (!watchFields || watchFields.includes(keys[0])) {\n                if (typeof del[attr] !== 'undefined') {\n                    applyWithDot(res, keys, del[attr])\n                }\n            }\n        }\n    }\n\n    applyUpdateToPart(result, delta.updatedFields, watchFields)\n\n    const applyDeleteToPart = (result, keys) => {\n        if (keys.length > 1) {\n            const key = keys.shift()\n            applyDeleteToPart(result[key], keys)\n        } else {\n            if (typeof result === 'object') {\n                delete result[keys[0]]\n            } else if (typeof result === 'array') {\n                result.splice(keys[0], 1)\n            }\n        }\n    }\n\n    for (let field of delta.removedFields) {\n        if (field.indexOf('.') > -1) {\n            const keys = field.split('.')\n            if (!watchFields || watchFields.includes(keys[0]))\n                applyDeleteToPart(result, keys)\n        } else {\n            delete result[field]\n        }\n    }\n    return result\n}\n\nexport const updateResource = (code, id, update, parState) => (\n    dispatch,\n    getState\n) => {\n    if (update && id && code) {\n        const state = getState()\n        const check = key => {\n            if (state[key]._id === id) {\n                if (state[key].__v === update.updatedFields.__v - 1) {\n                    const element = applyDelta(state[key], update)\n                    dispatch(actions.setData({ [key]: element }))\n                } else {\n                    if (state[key].id) requestResource(code, [id], parState)\n                }\n            }\n        }\n        const check2 = (key, watchFields) => {\n            let updateData = {\n                [key]: cloneDeep(state[key]),\n            }\n            const friend = updateData[key][id]\n            if (friend) {\n                if (friend.__v === update.updatedFields.__v - 1) {\n                    updateData[key][id] = applyDelta(\n                        friend,\n                        update,\n                        watchFields\n                    )\n                    dispatch(actions.setData(updateData))\n                } else {\n                    requestResource(code, [id], parState)\n                }\n            }\n        }\n        switch (code) {\n            case 'user':\n                check('user')\n                break\n            case 'account':\n                check('account')\n                check('profile')\n                break\n            case 'progress':\n                check('progress')\n                break\n            case 'group':\n                check('group')\n                break\n            case 'post':\n                dispatch(actions.setData(check2(code)))\n                break\n            case 'friendData':\n                dispatch(\n                    actions.setData(\n                        check2(code, ['name', 'image', 'notifications', '__v'])\n                    )\n                )\n                break\n            case 'progressData':\n                dispatch(\n                    actions.setData(\n                        check2(code, [\n                            'owner',\n                            'worker',\n                            'goal',\n                            'notifications',\n                            '__v',\n                        ])\n                    )\n                )\n                break\n            case 'postData':\n                dispatch(\n                    actions.setData(check2(code, ['notifications', '__v']))\n                )\n                break\n            case 'groupData':\n                dispatch(\n                    actions.setData(check2(code, ['notifications', '__v']))\n                )\n                break\n            case 'transactionData':\n                dispatch(actions.setData(check2(code)))\n                break\n            default:\n                break\n        }\n    }\n}\n","import axios from 'axios'\nimport message from 'antd/es/message'\n\nexport const uploadFile = (file, size, filename, callback) => {\n    if (file == null) {\n        return alert('No file selected.')\n    }\n\n    const reader = new FileReader()\n    reader.onload = async event => {\n        resizeImageToSpecificSize(file, { width: size, height: size }, data => {\n            urltoFile(data, '/120').then(function(file) {\n                getSignedRequest(file, filename, callback)\n            })\n        })\n    }\n\n    reader.readAsArrayBuffer(file)\n}\n\nconst urltoFile = (url, filename, mimeType) => {\n    mimeType = mimeType || (url.match(/^data:([^;]+);/) || '')[1]\n    return fetch(url)\n        .then(function(res) {\n            return res.arrayBuffer()\n        })\n        .then(function(buf) {\n            return new File([buf], filename, { type: mimeType })\n        })\n}\n\nconst resizeImageToSpecificSize = (file, size, cb) => {\n    if (file) {\n        var reader = new FileReader()\n        reader.onload = function(event) {\n            resizeImageFromSrcToSpecificSize(event.target.result, size, cb)\n        }\n        reader.readAsDataURL(file)\n    }\n}\n\nconst resizeImageFromSrcToSpecificSize = (src, size, cb) => {\n    var data\n    var img = new Image()\n    img.onload = function() {\n        const widthCoef = img.width / size.width\n        const heightCoef = img.height / size.height\n        var oc = document.createElement('canvas'),\n            octx = oc.getContext('2d')\n        oc.width = img.width\n        oc.height = img.height\n        octx.drawImage(img, 0, 0)\n        if (widthCoef > 1 || heightCoef > 1) {\n            if (img.width > img.height) {\n                oc.height = (img.height / img.width) * size.width\n                oc.width = size.width\n            } else {\n                oc.width = (img.width / img.height) * size.width\n                oc.height = size.width\n            }\n        }\n        octx.drawImage(oc, 0, 0, oc.width, oc.height)\n        octx.drawImage(img, 0, 0, oc.width, oc.height)\n        data = oc.toDataURL()\n        cb(data)\n    }\n    img.src = src\n}\n\nconst getSignedRequest = (file, fileName, callback) => {\n    return axios\n        .post('/api/sign-s3', {\n            fileName,\n        })\n        .then(response => {\n            doUploadFile(file, response.data, callback)\n        })\n        .catch(err => {})\n}\n\nconst doUploadFile = (file, data, callback) => {\n    return axios\n        .put(data.signedRequest, file, {\n            headers: {\n                'Content-Type': 'multipart/form-data',\n            },\n        })\n        .then(response => {\n            callback(data.url)\n            message.success('The image has been saved.')\n        })\n        .catch(err => {\n            console.log(err)\n        })\n}\n","export default {\n    name: 200,\n    description: 10000,\n    message: 10000,\n}\n","import fieldLength from './fieldLength'\n\nexport const nicknameRules = [\n    {\n        required: true,\n        message: 'Nickname is too short. Minimal length is 2.',\n        whitespace: true,\n        min: 2,\n    },\n    {\n        message: `Nickname is too long. Miximum length is ${fieldLength.name}.`,\n        whitespace: true,\n        max: fieldLength.name,\n    },\n    {\n        pattern: /^[a-zA-Z0-9_-]*$/,\n        message: \"Nickname should contain only letters, numbers, '-' and '_'.\",\n    },\n]\n\nexport const nameRules = [\n    {\n        required: true,\n        min: 1,\n        whitespace: true,\n        message: 'Name is too short. Minimal length is 1.',\n    },\n    {\n        max: fieldLength.name,\n        message: `Name is too long. Miximum length is ${fieldLength.name}.`,\n    },\n]\n\nexport const accountNameRules = [\n    {\n        required: true,\n        min: 2,\n        whitespace: true,\n        message: 'Name is too short. Minimal length is 2.',\n    },\n    {\n        max: fieldLength.name,\n        message: `Name is too long. Miximum length is ${fieldLength.name}.`,\n    },\n]\n\nexport const descriptionRules = [\n    {\n        max: fieldLength.description,\n        message: `Description is too long. Miximum length is ${\n            fieldLength.description\n        }.`,\n    },\n]\n\nexport const messageRules = [\n    {\n        min: 1,\n        whitespace: true,\n        message: 'Message is too short. Minimal length is 1.',\n    },\n    {\n        max: fieldLength.message,\n        message: `Message is too long. Miximum length is ${\n            fieldLength.message\n        }.`,\n    },\n]\n\nexport const priceRules = [\n    {\n        required: true,\n        message: 'Please input the item price.',\n    },\n]\n","export default (nickname, version) => {\n    if (!nickname) return ''\n    else {\n        return (\n            'https://websiter.s3.us-east-2.amazonaws.com/' +\n            nickname +\n            '/avatar?v=' +\n            (version || 0)\n        )\n    }\n}\n","import React, { useState } from 'react'\nimport Modal from 'antd/es/modal'\n\nimport Button from 'antd/es/button'\nimport Input from 'antd/es/input'\nimport InputNumber from 'antd/es/input-number'\nimport Form from 'antd/es/form'\nimport Select from 'antd/es/select'\nimport Upload from 'antd/es/upload'\nimport PlusOutlined from '@ant-design/icons/PlusOutlined'\n\nimport Avatar from 'antd/es/avatar'\nimport Popconfirm from 'antd/es/popconfirm'\nimport {\n    nameRules,\n    descriptionRules,\n    priceRules,\n} from '../../constants/fieldRules'\nimport getAvatar from '../../utils/getAvatar'\n\nconst AddPerkForm = props => {\n    const [previewImage, setPreviewImage] = useState('')\n    const {\n        connections,\n        perkId,\n        perk,\n        deletePerk,\n        onFinish,\n        images,\n        setImages,\n        uploadImage,\n    } = props\n\n    const layout = {\n        labelCol: { span: 8 },\n        wrapperCol: { span: 16 },\n    }\n    const tailLayout = {\n        wrapperCol: { offset: 8, span: 16 },\n    }\n\n    const connectionsSelect = (\n        <Select\n            mode=\"multiple\"\n            style={{ width: '100%' }}\n            placeholder=\"Please select\"\n            getPopupContainer={trigger => trigger.parentNode}\n        >\n            {connections.map(item => (\n                <Select.Option key={item._id}>\n                    <Avatar\n                        src={getAvatar(item._id, item.image)}\n                        size={20}\n                        style={{ marginRight: '10px' }}\n                    />\n                    {item.name} - ({item._id})\n                </Select.Option>\n            ))}\n        </Select>\n    )\n    const [form] = Form.useForm()\n\n    const normFile = e => {\n        if (Array.isArray(e)) {\n            return e\n        }\n        return e && e.fileList.map(image => image.url)\n    }\n\n    return !props.perkId || perk ? (\n        <>\n            <Form\n                form={form}\n                name=\"dynamic_form_nest_item\"\n                onFinish={onFinish}\n                autoComplete=\"off\"\n                initialValues={perk || {}}\n                {...layout}\n            >\n                <Form.Item\n                    name=\"images\"\n                    label=\"Images\"\n                    valuePropName=\"images\"\n                    getValueFromEvent={normFile}\n                >\n                    <Upload\n                        listType=\"picture-card\"\n                        fileList={images.map((image, index) => ({\n                            ...image,\n                            uid: index,\n                        }))}\n                        onPreview={file => {\n                            setPreviewImage(file.url)\n                        }}\n                        onChange={({ fileList }) => setImages(fileList)}\n                        customRequest={({ file }) => {\n                            uploadImage(file)\n                        }}\n                    >\n                        {images.length >= 8 ? null : (\n                            <div>\n                                <PlusOutlined />\n                                <div className=\"ant-upload-text\">Upload</div>\n                            </div>\n                        )}\n                    </Upload>\n                </Form.Item>\n                <Form.Item label=\"Name\" name=\"name\" rules={nameRules}>\n                    <Input placeholder=\"New item\" />\n                </Form.Item>\n                <Form.Item\n                    label=\"Description\"\n                    name=\"description\"\n                    rules={descriptionRules}\n                >\n                    <Input.TextArea placeholder=\"Write a few words about this item.\" />\n                </Form.Item>\n\n                {props.mode === 'shop' && (\n                    <Form.Item label=\"Available for\" name=\"users\">\n                        {connectionsSelect}\n                    </Form.Item>\n                )}\n\n                {props.mode === 'shop' && (\n                    <Form.Item label=\"Price\" name=\"price\" rules={priceRules}>\n                        <InputNumber />\n                    </Form.Item>\n                )}\n\n                <Form.Item {...tailLayout}>\n                    <Button type=\"primary\" htmlType=\"submit\" size=\"large\">\n                        Save\n                    </Button>\n\n                    {perkId && (\n                        <Popconfirm\n                            title=\"Are you sure you want to delete this item?\"\n                            onConfirm={deletePerk}\n                            onCancel={() => {}}\n                            okText=\"Confirm\"\n                            cancelText=\"Cancel\"\n                        >\n                            <Button type=\"link\" danger size=\"large\">\n                                Delete\n                            </Button>\n                        </Popconfirm>\n                    )}\n                </Form.Item>\n            </Form>\n            <Modal\n                visible={previewImage}\n                footer={null}\n                onCancel={() => setPreviewImage('')}\n            >\n                <img\n                    alt=\"example\"\n                    style={{ width: '100%' }}\n                    src={previewImage}\n                />\n            </Modal>\n        </>\n    ) : null\n}\n\nexport default AddPerkForm\n","import { webSocket } from '../containers/ConnectWebsocket/ConnectWebsocket'\n\nexport const sendMessage = (\n    accountId,\n    postId,\n    messageValue,\n    image,\n    replyToMessage,\n    editedMessage\n) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'sendMessage',\n                messageValue,\n                image,\n                postId,\n                accountId,\n                replyToMessage,\n                editedMessage,\n            })\n        )\n    }\n}\n\nexport const changeLikesMessage = (\n    messageCode,\n    messageId,\n    accountId,\n    postId\n) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode,\n                messageId,\n                accountId,\n                postId,\n            })\n        )\n    }\n}\n\nexport const addPost = (\n    accountId,\n    parentId,\n    parentType,\n    messageValue,\n    images\n) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'addPost',\n                accountId,\n                parentId,\n                parentType,\n                messageValue,\n                images,\n            })\n        )\n    }\n}\n","import { webSocket } from '../containers/ConnectWebsocket/ConnectWebsocket'\n\nexport const savePerk = (accountId, id, value, mode) => {\n    if (accountId && webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode:\n                    mode === 'wishlist'\n                        ? 'saveWishlistItem'\n                        : mode === 'goals'\n                        ? 'saveGoal'\n                        : 'savePerk',\n                id,\n                value,\n                accountId,\n            })\n        )\n    }\n}\n\nexport const deletePerk = (accountId, id, mode) => {\n    if (accountId && id && webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode:\n                    mode === 'wishlist'\n                        ? 'deleteWishlistItem'\n                        : mode === 'goals'\n                        ? 'deleteGoal'\n                        : 'deletePerk',\n                id,\n                accountId,\n            })\n        )\n    }\n}\n\nexport const buyPerk = (buyer, seller, perkId) => {\n    if (perkId && buyer && seller && webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'buyPerk',\n                perkId,\n                buyer,\n                seller,\n            })\n        )\n    }\n}\n","import { webSocket } from '../containers/ConnectWebsocket/ConnectWebsocket'\n\nexport const searchFriends = search => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'searchFriends',\n                search,\n            })\n        )\n    }\n}\n\nexport const addFriend = (accountId, friendId) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'addFriend',\n                accountId,\n                friendId,\n            })\n        )\n    }\n}\n\nexport const acceptFriend = (accountId, friendId) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'acceptFriend',\n                accountId,\n                friendId,\n            })\n        )\n    }\n}\n\nexport const unfriend = (accountId, friendId) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'unfriend',\n                accountId,\n                friendId,\n            })\n        )\n    }\n}\n","import React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { uploadFile } from '../../utils/uploadFile'\nimport AddPerkForm from './AddPerkForm'\nimport { withRouter } from 'react-router-dom'\nimport * as wsActions from '../../websocketActions'\n\nconst AddPerk = props => {\n    const [perk, setPerk] = useState()\n    const [images, setImages] = useState([])\n    const { account, mode } = props\n    const perkId = props.perkId || ''\n    useEffect(() => {\n        if (perkId) {\n            const perk =\n                mode === 'wishlist'\n                    ? account.wishlist.find(item => item.itemId === perkId)\n                    : mode === 'goals'\n                    ? account.goals.find(item => item.goalId === perkId)\n                    : account.perks.find(item => item.perkId === perkId)\n            if (perk) {\n                setPerk(perk)\n                setImages(\n                    perk.images.map((url, index) => ({\n                        url,\n                        uid: index,\n                    }))\n                )\n            }\n        }\n    }, [])\n\n    const connections = [\n        account,\n        ...account.friends\n            .filter(friend => friend.status === 'friend')\n            .map(friend => props.friendData[friend.friend]),\n    ]\n\n    const uploadImage = file => {\n        uploadFile(file, 800, undefined, url => {\n            setImages(\n                [...images, { url }].map((image, index) => ({\n                    ...image,\n                    uid: index,\n                }))\n            )\n        })\n    }\n\n    return !props.perkId || perk ? (\n        <AddPerkForm\n            connections={connections}\n            perkId={perkId}\n            perk={perk}\n            deletePerk={() => {\n                wsActions.deletePerk(account._id, perkId, mode)\n                props.setEditPerkOpen(false)\n            }}\n            onFinish={value => {\n                const processedValue = {\n                    ...value,\n                    images: images.map(image => image.url),\n                }\n                wsActions.savePerk(account._id, perkId, processedValue, mode)\n                props.setEditPerkOpen(false)\n            }}\n            images={images}\n            setImages={setImages}\n            uploadImage={uploadImage}\n            mode={props.mode}\n        />\n    ) : null\n}\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n        friendData: state.friendData,\n    }\n}\nexport default withRouter(connect(mapStateToProps)(AddPerk))\n","import React from 'react'\nimport { withRouter } from 'react-router-dom'\n\nexport default withRouter(props => (\n    <div\n        onClick={() => props.history.push(props.onClickLink)}\n        style={{ cursor: 'pointer' }}\n    >\n        <img\n            style={{\n                width: '100%',\n                borderRadius: '15px',\n            }}\n            src={props.images.length > 0 ? props.images[0] : ''}\n        />\n        <div style={{ padding: '5px 0px', wordBreak: 'break-all' }}>\n            {props.body}\n        </div>\n    </div>\n))\n","import React from 'react'\n\nexport default props => (\n    <svg\n        viewBox=\"0 0 24 24\"\n        width=\"24\"\n        height=\"24\"\n        style={{ transform: 'rotate(90deg)' }}\n    >\n        <path d=\"M2 10h4v4H2v-4zm8 4h4v-4h-4v4zm8-4v4h4v-4h-4z\" />\n    </svg>\n)\n","import React from 'react'\nimport { withRouter } from 'react-router-dom'\n\nimport * as wsActions from '../../websocketActions'\nimport Dropdown from 'antd/es/dropdown'\nimport Menu from 'antd/es/menu'\nimport Button from 'antd/es/button'\nimport MasonryCard from '../../components/MasonryCard'\nimport EditFilled from '@ant-design/icons/EditFilled'\nimport Card from 'antd/es/card'\nimport MoreIcon from '../../components/UI/MoreIcon'\n\nconst PerkCard = props => {\n    const {\n        perk,\n        perkId,\n        owner,\n        account,\n        setEditedPerk,\n        setEditPerkOpen,\n        mode,\n    } = props\n\n    return (\n        <MasonryCard\n            onClickLink={`/${mode || 'shop'}/${owner._id}/${perkId}`}\n            images={perk.images}\n            body={\n                <Card\n                    extra={\n                        <span onClick={e => e.stopPropagation()}>\n                            {owner._id === account._id &&\n                            !props.onlyBuy &&\n                            props.mode === 'shop' ? (\n                                <Dropdown.Button\n                                    type=\"primary\"\n                                    key=\"1\"\n                                    onClick={() =>\n                                        wsActions.buyPerk(\n                                            account._id,\n                                            owner._id,\n                                            perkId\n                                        )\n                                    }\n                                    overlay={\n                                        <Menu>\n                                            <Menu.Item\n                                                key=\"0\"\n                                                onClick={() => {\n                                                    setEditedPerk(perkId)\n                                                    setEditPerkOpen(true)\n                                                }}\n                                            >\n                                                Edit\n                                            </Menu.Item>\n                                        </Menu>\n                                    }\n                                >\n                                    Buy\n                                </Dropdown.Button>\n                            ) : props.mode === 'shop' ? (\n                                <Button\n                                    type=\"primary\"\n                                    onClick={() =>\n                                        wsActions.buyPerk(\n                                            account._id,\n                                            owner._id,\n                                            perkId\n                                        )\n                                    }\n                                >\n                                    Buy\n                                </Button>\n                            ) : owner._id === account._id && !props.onlyBuy ? (\n                                <Dropdown\n                                    trigger={['click', 'hover']}\n                                    overlay={\n                                        <Menu>\n                                            <Menu.Item\n                                                key=\"0\"\n                                                onClick={() => {\n                                                    setEditedPerk(perkId)\n                                                    setEditPerkOpen(true)\n                                                }}\n                                            >\n                                                Edit\n                                            </Menu.Item>\n                                        </Menu>\n                                    }\n                                >\n                                    <Button type=\"link\">\n                                        <MoreIcon />\n                                    </Button>\n                                </Dropdown>\n                            ) : null}\n                        </span>\n                    }\n                    title={\n                        <span style={{ fontWeight: 'bold' }}>\n                            {perk.name}\n                            {mode === 'shop' && ` ($${perk.price})`}\n                        </span>\n                    }\n                    style={{ width: '100%' }}\n                    type=\"inner\"\n                    bordered={false}\n                />\n            }\n        />\n    )\n}\n\nexport default withRouter(PerkCard)\n","import React from 'react'\nimport Button from 'antd/es/button'\nimport { PlusOutlined } from '@ant-design/icons'\n\nconst AddCard = props => (\n    <Button\n        onClick={props.action}\n        type=\"primary\"\n        shape=\"round\"\n        icon={<PlusOutlined />}\n        size=\"large\"\n    >\n        {props.title}\n    </Button>\n)\n\nexport default AddCard\n","export const friendsBreakPoints = {\n    default: 4,\n    1600: 3,\n    1100: 2,\n    600: 1,\n}\n\nexport const cardBreakPoints = {\n    default: 4,\n    1100: 3,\n    700: 2,\n    350: 1,\n}\n","import React from 'react'\nimport Masonry from 'react-masonry-css'\nimport {\n    cardBreakPoints,\n    friendsBreakPoints,\n} from '../utils/masonryBreakPoints'\n\nexport default props => (\n    <div style={{ marginTop: '40px', ...props.style }}>\n        <Masonry\n            breakpointCols={3}\n            className=\"my-masonry-grid\"\n            columnClassName=\"my-masonry-grid_column\"\n            breakpointCols={\n                props.friends ? friendsBreakPoints : cardBreakPoints\n            }\n        >\n            {props.children}\n        </Masonry>\n    </div>\n)\n","import React, { useState } from 'react'\nimport Modal from 'antd/es/modal'\nimport Button from 'antd/es/button'\nimport AddPerk from './AddPerk'\nimport PerkCard from './PerkCard'\nimport AddCard from '../../components/AddCard/AddCard'\nimport { cardBreakPoints } from '../../utils/masonryBreakPoints'\nimport Masonry from 'react-masonry-css'\nimport MasonryGrid from '../../components/MasonryGrid'\nimport MasonryCard from '../../components/MasonryCard'\n\nconst WishlistAndPerks = props => {\n    const [editedPerk, setEditedPerk] = useState('')\n    const [editPerkOpen, setEditPerkOpen] = useState()\n\n    const { account } = props\n\n    const editPerk = (\n        <Modal\n            title=\"Add item\"\n            visible={editPerkOpen}\n            maskClosable\n            closable\n            onCancel={() => setEditPerkOpen(false)}\n            width=\"90%\"\n            footer={\n                <Button key=\"back\" onClick={() => setEditPerkOpen(false)}>\n                    Close\n                </Button>\n            }\n            destroyOnClose={true}\n        >\n            <AddPerk\n                setEditPerkOpen={setEditPerkOpen}\n                perkId={editedPerk}\n                mode={props.mode}\n            />\n        </Modal>\n    )\n\n    return account._id ? (\n        <>\n            <AddCard\n                action={() => {\n                    setEditedPerk('')\n                    setEditPerkOpen(true)\n                }}\n                title=\"Add item\"\n                sub={props.mode === 'shop' && 'Set price'}\n            />\n            <MasonryGrid>\n                {account[props.listKey || props.mode] &&\n                    account[props.listKey || props.mode].map((perk, index) => (\n                        <PerkCard\n                            key={index}\n                            perk={perk}\n                            perkId={\n                                props.mode === 'wishlist' ||\n                                props.mode === 'goals'\n                                    ? perk.itemId\n                                    : perk.perkId\n                            }\n                            owner={account}\n                            account={account}\n                            setEditedPerk={setEditedPerk}\n                            setEditPerkOpen={setEditPerkOpen}\n                            mode={props.mode}\n                            style={{ cursor: 'pointer' }}\n                        />\n                    ))}\n            </MasonryGrid>\n\n            {editPerk}\n        </>\n    ) : null\n}\n\nexport default WishlistAndPerks\n","import React, { useEffect } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport WishlistAndPerks from '../Shop/WishlistAndPerks'\n\nconst Goals = props => {\n    useEffect(() => {\n        props.setPageTitle({ main: 'Goals', sub: '' })\n    }, [])\n\n    return props.account._id ? (\n        <WishlistAndPerks mode=\"goals\" account={props.account} />\n    ) : (\n        <span />\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Goals)\n)\n","import axios from 'axios'\nimport processRes from './processRes'\nexport default (props, data, setData, options, callback) => {\n    // if (typeof props.isAuthed === 'undefined') return\n    // options = {\n    //     forceAuth: true,\n    //     forceActivate: true,\n    //     pullData: true,\n    //     ...(options || {}),\n    // }\n\n    // if (!props.isAuthed) {\n    //     props.tryAuth(props, options.forceAuth)\n    // }\n\n    // if (options.pullData) {\n    axios\n        .get('/api' + props.history.location.pathname)\n        .then(res => {\n            processRes(res, props)\n            // if (options.forceActivate) {\n            //     if (props.isAuthed && res.data.status === 'no account') {\n            //         props.history.push('/activate-account')\n            //     }\n            // }\n\n            setData(res.data)\n            callback(res.data)\n        })\n        .catch(err => {})\n    // }\n}\n","import React, { useState, useEffect } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport Button from 'antd/es/button'\nimport Comment from 'antd/es/comment'\nimport Avatar from 'antd/es/avatar'\nimport Input from 'antd/es/input'\nimport Form from 'antd/es/form'\nimport Upload from 'antd/es/upload'\nimport PictureFilled from '@ant-design/icons/PictureFilled'\nimport LoadingOutlined from '@ant-design/icons/LoadingOutlined'\nimport CloseCircleFilled from '@ant-design/icons/CloseCircleFilled'\nimport SendOutlined from '@ant-design/icons/SendOutlined'\nimport { uploadFile } from '../../utils/uploadFile'\nimport * as wsActions from '../../websocketActions'\nimport getAvatar from '../../utils/getAvatar'\nimport { messageRules } from '../../constants/fieldRules'\nimport { PlusOutlined } from '@ant-design/icons'\nimport message from 'antd/es/message'\nimport Modal from 'antd/es/modal/Modal'\n\nconst AddMessage = props => {\n    const [previewImage, setPreviewImage] = useState('')\n    const [imageLoading, setImageLoading] = useState(false)\n    const [images, setImages] = useState(props.images || [])\n    const { post, account } = props\n\n    const [messageText, setMessageText] = useState(\n        props.content ||\n            (props.replyToUser ? '@' + props.replyToUser + ' ' : '')\n    )\n\n    useEffect(() => {\n        setMessageText(\n            props.content ||\n                (props.replyToUser ? '@' + props.replyToUser + ' ' : '')\n        )\n    }, [props.replyToUser, props.content])\n\n    const uploadImage = file => {\n        uploadFile(file, 800, undefined, url => {\n            setImages([...images, url])\n        })\n    }\n\n    return post && account._id ? (\n        <div\n            style={{\n                background: '#fff',\n\n                ...(props.replyTo\n                    ? {}\n                    : {\n                          width: '100%',\n                          bottom: '-200px',\n                          left: '0px',\n                          //   position: 'absolute',\n                      }),\n            }}\n        >\n            <Comment\n                avatar={<Avatar src={getAvatar(account._id, account.image)} />}\n                content={\n                    <>\n                        <Form.Item rules={messageRules} style={{ margin: 0 }}>\n                            <Input.TextArea\n                                autoSize={{\n                                    minRows: 1,\n                                    maxRows: 3,\n                                }}\n                                rows={1}\n                                onChange={e => setMessageText(e.target.value)}\n                                value={messageText}\n                                placeholder=\"Write a comment\"\n                            />\n                        </Form.Item>\n                        {images.length > 0 && (\n                            <Form.Item style={{ margin: 0 }}>\n                                <Upload\n                                    listType=\"picture-card\"\n                                    fileList={images.map((image, index) => ({\n                                        url: image,\n                                        uid: index,\n                                    }))}\n                                    onPreview={file => {\n                                        setPreviewImage(file.url)\n                                    }}\n                                    onChange={({ fileList }) =>\n                                        setImages(\n                                            fileList.map(image => image.url)\n                                        )\n                                    }\n                                    customRequest={({ file }) => {\n                                        uploadImage(file)\n                                    }}\n                                >\n                                    {images.length >= 8 ? null : (\n                                        <div>\n                                            <PlusOutlined />\n                                            <div className=\"ant-upload-text\">\n                                                Upload\n                                            </div>\n                                        </div>\n                                    )}\n                                </Upload>\n                            </Form.Item>\n                        )}\n                        <Form.Item style={{ margin: 0 }}>\n                            <Button\n                                htmlType=\"submit\"\n                                onClick={() => {\n                                    wsActions.sendMessage(\n                                        account._id,\n                                        post._id,\n                                        messageText,\n                                        images,\n                                        props.replyTo,\n                                        props.editingMessage\n                                    )\n                                    setMessageText('')\n                                    setImages([])\n                                    if (props.onSend) props.onSend()\n                                }}\n                                icon={<SendOutlined />}\n                                type=\"text\"\n                            >\n                                Send\n                            </Button>\n                            <Upload\n                                showUploadList={false}\n                                customRequest={({ file }) => {\n                                    if (images.length > 8) {\n                                        message.warning(\n                                            'You can not attach more than 8 images.'\n                                        )\n                                        return\n                                    }\n                                    setImageLoading(true)\n                                    uploadFile(file, 800, undefined, url => {\n                                        setImageLoading(false)\n                                        setImages([...images, url])\n                                    })\n                                }}\n                            >\n                                <Button\n                                    type=\"text\"\n                                    icon={\n                                        imageLoading ? (\n                                            <LoadingOutlined />\n                                        ) : (\n                                            <PictureFilled />\n                                        )\n                                    }\n                                >\n                                    Image\n                                </Button>\n                            </Upload>\n                            {props.cancel && (\n                                <Button\n                                    onClick={props.cancel}\n                                    icon={<CloseCircleFilled />}\n                                    type=\"text\"\n                                >\n                                    Cancel\n                                </Button>\n                            )}\n                        </Form.Item>\n                    </>\n                }\n            />\n            <Modal\n                visible={previewImage}\n                footer={null}\n                onCancel={() => setPreviewImage('')}\n            >\n                <img\n                    alt=\"example\"\n                    style={{ width: '100%' }}\n                    src={previewImage}\n                />\n            </Modal>\n        </div>\n    ) : null\n}\n\nexport default withRouter(AddMessage)\n","import React from 'react'\nimport Carousel from 'antd/es/carousel'\nimport classes from './imageCarousel.module.css'\n\nconst ImageCarousel = props =>\n    props.images && props.images.length > 0 ? (\n        <Carousel\n            style={{ width: props.size || 'auto' }}\n            dots={{ className: classes.Dots }}\n        >\n            {props.images.map(\n                (image, index) =>\n                    image && (\n                        <div key={index}>\n                            <div\n                                style={{\n                                    backgroundImage: 'url(\"' + image + '\")',\n                                    backgroundSize: props.type || 'contain',\n                                    backgroundPosition: 'center',\n                                    width: props.size || '100%',\n                                    height:\n                                        props.height || props.size || '300px',\n                                    backgroundRepeat: 'no-repeat',\n                                }}\n                            />\n                        </div>\n                    )\n            )}\n        </Carousel>\n    ) : null\n\nexport default ImageCarousel\n","import React from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\n\nimport Button from 'antd/es/button'\nimport Avatar from 'antd/es/avatar'\nimport getAvatar from '../../utils/getAvatar'\nimport Typography from 'antd/es/typography'\n\nconst UserButton = props => {\n    const { account, profile, id, friendSearchResult } = props\n    const friendData = props.friendDataExp || props.friendData\n    const getUserData = id =>\n        id === account._id\n            ? account\n            : id === profile._id\n            ? profile\n            : id === friendSearchResult._id\n            ? friendSearchResult\n            : friendData[id]\n    const userName = id => (getUserData(id) ? getUserData(id).name : id)\n    const userAvatar = id =>\n        getUserData(id) ? (\n            <span\n                key={id}\n                onClick={() => {\n                    if (!props.noClick) handleClick(id)\n                }}\n            >\n                <Avatar\n                    src={getAvatar(id, getUserData(id).image)}\n                    size={props.size || (props.noClick ? 20 : 40)}\n                    style={props.group ? {} : { margin: ' 0 5px' }}\n                />\n            </span>\n        ) : null\n\n    const handleClick = id => props.history.push('/profile/' + (id || props.id))\n    return props.group ? (\n        <span onClick={e => e.stopPropagation()}>\n            <Avatar.Group style={{ margin: ' 0 5px' }}>\n                {props.ids.map(id => userAvatar(id))}\n            </Avatar.Group>\n        </span>\n    ) : props.noClick ? (\n        <>\n            {!props.noAva && userAvatar(id)}\n            {!props.noName && userName(id)}\n        </>\n    ) : props.span ? (\n        <span\n            style={{ cursor: 'pointer', fontWeight: 'bold', ...props.style }}\n            onClick={e => {\n                e.stopPropagation()\n                handleClick()\n            }}\n        >\n            {!props.noAva && userAvatar(id)}\n            {!props.noName && userName(id)}\n        </span>\n    ) : (\n        <Button\n            type=\"link\"\n            style={{ padding: '0px 5px', height: 'auto', ...props.style }}\n            onClick={e => {\n                e.stopPropagation()\n                handleClick()\n            }}\n        >\n            {!props.noAva && userAvatar(id)}\n\n            {!props.noName && userName(id)}\n        </Button>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        account: state.account,\n        profile: state.profile,\n        friendData: state.friendData,\n        friendSearchResult: state.friendSearchResult,\n    }\n}\n\nexport default withRouter(connect(mapStateToProps)(UserButton))\n","import React, { useState } from 'react'\nimport { withRouter } from 'react-router-dom'\n\nimport Comment from 'antd/es/comment'\n\nimport Tooltip from 'antd/es/tooltip'\nimport Avatar from 'antd/es/avatar'\nimport TimeAgo from 'timeago-react'\n\nimport * as wsActions from '../../websocketActions'\nimport LikeFilled from '@ant-design/icons/LikeFilled'\nimport LikeOutlined from '@ant-design/icons/LikeOutlined'\nimport Card from 'antd/es/card'\nimport Carousel from 'antd/es/carousel'\nimport AddMessage from './AddMessage'\nimport getAvatar from '../../utils/getAvatar'\nimport Button from 'antd/es/button'\nimport ImageCarousel from '../UI/ImageCarousel/ImageCarousel'\nimport UserButton from '../UserButton/UserButton'\n\nconst Message = props => {\n    const {\n        account,\n        state,\n        setState,\n        message,\n        friendData,\n        progressData,\n        groupData,\n        post,\n        replies,\n        isStart,\n    } = props\n    const [replyVisible, setReplyVisible] = useState(false)\n    const [replyToUser, setReplyToUser] = useState('')\n    const [editingMessage, setEditingMessage] = useState('')\n    const [showReplies, setShowReplies] = useState(false)\n    const commentProps = {\n        actions: !props.isStart && [\n            <span>\n                <TimeAgo datetime={message.date} live />\n            </span>,\n            <span key=\"comment-basic-like\">\n                <Tooltip title=\"Like\">\n                    {message.likes.includes(account._id) ? (\n                        <LikeFilled\n                            onClick={() =>\n                                wsActions.changeLikesMessage(\n                                    'dislikeMessage',\n                                    message.messageId,\n                                    account._id,\n                                    post._id\n                                )\n                            }\n                        />\n                    ) : (\n                        <LikeOutlined\n                            onClick={() =>\n                                wsActions.changeLikesMessage(\n                                    'likeMessage',\n                                    message.messageId,\n                                    account._id,\n                                    post._id\n                                )\n                            }\n                        />\n                    )}\n                </Tooltip>\n                <span style={{ paddingLeft: '8px' }}>\n                    {message.likes.length}\n                </span>\n            </span>,\n\n            message.author !== account._id && (\n                <span\n                    key=\"comment-basic-reply-to\"\n                    onClick={() => {\n                        if (props.setReplyVisible) {\n                            props.setReplyVisible(true)\n                            props.setReplyToUser(props.message.author)\n                        } else {\n                            setReplyVisible(true)\n                            setReplyToUser('')\n                        }\n                        setShowReplies(true)\n                    }}\n                >\n                    Reply\n                </span>\n            ),\n            message.author === account._id && (\n                <span\n                    key=\"comment-basic-reply-to\"\n                    onClick={() => setEditingMessage(message.messageId)}\n                >\n                    Edit\n                </span>\n            ),\n        ],\n        avatar: (\n            <Avatar\n                src={getAvatar(\n                    message.author,\n                    friendData[message.author]\n                        ? friendData[message.author].image\n                        : Math.floor(Math.random() * 1000000)\n                )}\n            />\n        ),\n        content: isStart ? (\n            <>\n                {message.messageType === 'wishlist' && (\n                    <>\n                        {' '}\n                        <span\n                            style={{\n                                fontWeight: 'bold',\n                                cursor: 'pointer',\n                                margin: '10px 0px 0px ',\n                            }}\n                            onClick={() =>\n                                props.history.push(\n                                    `/wishlist/${message.details.owner}/${\n                                        message.details.itemId\n                                    }`\n                                )\n                            }\n                        >\n                            {message.details.name}\n                        </span>\n                    </>\n                )}\n                {message.text && <p>{message.text}</p>}\n            </>\n        ) : (\n            <>\n                <div\n                    style={{\n                        background: '#eee',\n                        borderRadius: '5px',\n                        padding: '3px 10px',\n                        display:\n                            message.image && message.image.length > 0\n                                ? 'block'\n                                : 'inline-block',\n                    }}\n                >\n                    <UserButton\n                        id={message.author}\n                        span={true}\n                        noAva={true}\n                        style={{ fontWeight: 'bold' }}\n                    />\n\n                    {message.image && message.image.length > 0 && (\n                        <ImageCarousel\n                            images={message.image}\n                            height=\"60vmin\"\n                            type=\"contain\"\n                        />\n                    )}\n\n                    {message.text && <p>{message.text}</p>}\n                </div>\n                <div />\n            </>\n        ),\n        author: isStart && (\n            <span\n                style={{ color: '#333', fontWeight: 'bold', fontSize: '14px' }}\n            >\n                <UserButton id={message.author} span={true} noAva={true} />{' '}\n                &rArr;{' '}\n                {post.parent &&\n                    progressData &&\n                    progressData[post.parent.parentId] && (\n                        <span\n                            style={{ cursor: 'pointer' }}\n                            onClick={() =>\n                                props.history.push(\n                                    '/progresses/' + post.parent.parentId\n                                )\n                            }\n                        >\n                            {progressData[post.parent.parentId].goal.name}\n                        </span>\n                    )}\n                {post.startMessage &&\n                    ['wishlist', 'perk', 'goal'].includes(\n                        post.startMessage.messageType\n                    ) && (\n                        <span\n                            style={{ cursor: 'pointer' }}\n                            onClick={() =>\n                                props.history.push('/profile/' + message.author)\n                            }\n                        >\n                            {post.startMessage.messageType === 'wishlist'\n                                ? 'Wishlist'\n                                : post.startMessage.messageType === 'goals'\n                                ? 'Goals'\n                                : 'Shop'}\n                        </span>\n                    )}\n            </span>\n        ),\n        datetime: isStart && (\n            <span style={{ color: '#333' }}>\n                <TimeAgo datetime={message.date} live />\n            </span>\n        ),\n    }\n    return account && friendData ? (\n        account._id !== message.author || !editingMessage ? (\n            <Comment {...commentProps}>\n                {props.isTop && replies && replies.length > 0 ? (\n                    showReplies ? (\n                        replies.map((reply, index) => (\n                            <Message\n                                key={index}\n                                message={reply}\n                                post={post}\n                                account={account}\n                                friendData={friendData}\n                                setReplyVisible={setReplyVisible}\n                                setReplyToUser={setReplyToUser}\n                            />\n                        ))\n                    ) : (\n                        <Button\n                            type=\"text\"\n                            onClick={() => setShowReplies(true)}\n                        >\n                            Show {replies.length} replies\n                        </Button>\n                    )\n                ) : null}\n\n                {props.isTop && replyVisible ? (\n                    <AddMessage\n                        post={post}\n                        account={account}\n                        replyTo={message.messageId}\n                        replyToUser={replyToUser}\n                        cancel={() => setReplyVisible(false)}\n                    />\n                ) : null}\n            </Comment>\n        ) : (\n            <AddMessage\n                post={post}\n                account={account}\n                replyTo={message.messageId}\n                editingMessage={editingMessage}\n                content={message.text}\n                images={message.image}\n                onSend={() => setEditingMessage('')}\n                cancel={() => setEditingMessage('')}\n            />\n        )\n    ) : null\n}\n\nexport default withRouter(Message)\n","import React, { useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport * as wsActions from '../../websocketActions'\nimport Message from './Message'\nimport { LikeOutlined, LikeFilled } from '@ant-design/icons'\nimport AddMessage from './AddMessage'\nimport Divider from 'antd/es/divider'\nimport Button from 'antd/es/button'\nimport ImageCarousel from '../UI/ImageCarousel/ImageCarousel'\n\nconst Post = props => {\n    const { post, account, friendData, progressData, groupData } = props\n    const [postOpen, setPostOpen] = useState(props.showReplies)\n    const getNumberOfMessages = messages => {\n        let result = 0\n        for (let item of messages) {\n            result = result + 1 + item.replies.length\n        }\n        return result\n    }\n    return post ? (\n        <>\n            {!props.noStartMessage && (\n                <>\n                    <Message\n                        message={post.startMessage}\n                        post={post}\n                        account={account}\n                        friendData={friendData}\n                        progressData={progressData}\n                        groupData={groupData}\n                        replies={[]}\n                        isStart={true}\n                    />\n                    {post.startMessage.image &&\n                        post.startMessage.image.length > 0 && (\n                            <ImageCarousel\n                                images={post.startMessage.image}\n                                height=\"60vmin\"\n                                type=\"contain\"\n                            />\n                        )}\n                </>\n            )}\n            <Divider type=\"horizontal\" style={{ margin: '5px 0' }} />\n\n            <div\n                style={{\n                    textAlign: 'left',\n                    // marginBottom: '200px',\n                    position: 'relative',\n                }}\n            >\n                <div\n                    style={{ display: 'flex', justifyContent: 'space-around' }}\n                >\n                    <span key=\"comment-basic-like\">\n                        <Button type=\"text\">\n                            {post.startMessage.likes.includes(account._id) ? (\n                                <LikeFilled\n                                    onClick={() =>\n                                        wsActions.changeLikesMessage(\n                                            'dislikeMessage',\n                                            post.startMessage.messageId,\n                                            account._id,\n                                            post._id\n                                        )\n                                    }\n                                />\n                            ) : (\n                                <LikeOutlined\n                                    onClick={() =>\n                                        wsActions.changeLikesMessage(\n                                            'likeMessage',\n                                            post.startMessage.messageId,\n                                            account._id,\n                                            post._id\n                                        )\n                                    }\n                                />\n                            )}\n\n                            <span style={{ paddingLeft: '8px' }}>\n                                {post.startMessage.likes.length}\n                            </span>\n                        </Button>\n                    </span>\n                    <span>\n                        <Button onClick={() => setPostOpen(true)} type=\"text\">\n                            Comment\n                            <span style={{ paddingLeft: '8px' }}>\n                                {getNumberOfMessages(post.messages)}\n                            </span>\n                        </Button>\n                    </span>\n                </div>\n                <Divider type=\"horizontal\" style={{ margin: '5px 0' }} />\n                {postOpen ? (\n                    <>\n                        <AddMessage post={post} account={account} />\n                        {post.messages && post.messages.length\n                            ? post.messages.map((message, index) => (\n                                  <Message\n                                      key={index}\n                                      message={message}\n                                      post={post}\n                                      account={account}\n                                      friendData={friendData}\n                                      replies={message.replies}\n                                      isTop={true}\n                                  />\n                              ))\n                            : null}\n                    </>\n                ) : (\n                    <Button onClick={() => setPostOpen(true)} type=\"text\">\n                        Show replies and comment\n                    </Button>\n                )}\n            </div>\n        </>\n    ) : null\n}\n\nexport default withRouter(Post)\n","import React, { useEffect, useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport Card from 'antd/es/card'\nimport pullData from '../../utils/pullData'\nimport Post from '../../components/Post/Post'\nimport UserButton from '../../components/UserButton/UserButton'\nimport ImageCarousel from '../../components/UI/ImageCarousel/ImageCarousel'\n\nconst Goal = props => {\n    const [data, setData] = useState({})\n    const { account } = props\n    useEffect(() => {\n        const pathParts = props.history.location.pathname.split('/')\n        if (pathParts.length > 3) {\n            const accountId = pathParts[2]\n            if (props.isAuthed && account._id === accountId) {\n                const goal = account.goals.find(\n                    item => item.itemId === pathParts[3]\n                )\n                setData({ profile: account, goal })\n            } else {\n                pullData(props, data, setData, { forceAuth: false }, data => {\n                    const friendData = {}\n                    for (let friend of data.friendData)\n                        friendData[friend._id] = friend\n\n                    props.setData({\n                        post: { [data.post._id]: data.post },\n                        friendData,\n                    })\n                })\n            }\n        }\n    }, [props.isAuthed])\n    if (!data.goal) return null\n    const { goal, profile } = data\n    props.setData({ currentPosts: goal.post })\n    if (goal) {\n        props.setPageTitle({ main: goal.name, sub: profile._id })\n    }\n    return goal ? (\n        <Card\n            title={\n                <span>\n                    Goal from <UserButton id={profile._id} /> goals\n                </span>\n            }\n            bordered={false}\n        >\n            <ImageCarousel images={goal.images} />\n\n            <h1>{goal.name}</h1>\n            <p style={{ whiteSpace: 'pre-wrap' }}>{goal.description}</p>\n            <Post\n                noStartMessage={true}\n                post={props.post[goal.post]}\n                account={props.account}\n                friendData={props.friendData}\n                showReplies={true}\n            />\n        </Card>\n    ) : null\n}\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        account: state.account,\n        post: state.post,\n        friendData: state.friendData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: data => {\n            dispatch(actions.setData(data))\n        },\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Goal)\n)\n","import React from 'react'\n\nimport Select from 'antd/es/select'\nimport UserButton from '../UserButton/UserButton'\n\nexport default (account, friendData, value?, onSelect?) => (\n    <Select\n        mode=\"multiple\"\n        style={{ width: '100%' }}\n        placeholder=\"Please select\"\n        value={value}\n        onChange={onSelect}\n        getPopupContainer={trigger => trigger.parentNode}\n    >\n        {[\n            account,\n            ...account.friends\n                .filter(friend => friend.status === 'friend')\n                .map(friend => friendData[friend.friend]),\n        ].map(item => (\n            <Select.Option key={item._id}>\n                <UserButton id={item._id} noClick={true} />\n            </Select.Option>\n        ))}\n    </Select>\n)\n","import React, { useState } from 'react'\nimport Modal from 'antd/es/modal'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as wsActions from '../../websocketActions'\nimport Button from 'antd/es/button'\nimport Input from 'antd/es/input'\nimport InputNumber from 'antd/es/input-number'\nimport Form from 'antd/es/form'\nimport Select from 'antd/es/select'\n\nimport Upload from 'antd/es/upload'\nimport Divider from 'antd/es/divider'\nimport PlusOutlined from '@ant-design/icons/PlusOutlined'\n\nimport { uploadFile } from '../../utils/uploadFile'\nimport {\n    descriptionRules,\n    nameRules,\n    priceRules,\n} from '../../constants/fieldRules'\nimport connectionsSelect from '../EditGoalAndProgressForm/connectionsSelect'\nimport Descriptions from 'antd/es/descriptions'\nimport UserButton from '../UserButton/UserButton'\nimport Dropdown from 'antd/es/dropdown'\nimport Menu from 'antd/es/menu'\nimport Card from 'antd/es/card'\nimport MoreIcon from '../UI/MoreIcon'\n\nconst Rewards = props => {\n    const [previewImage, setPreviewImage] = useState('')\n    const [previewReward, setPreviewReward] = useState()\n    const [editedReward, setEditedReward] = useState()\n    const [editedRewardIndex, setEditedRewardIndex] = useState()\n    const { account, friendData, readOnly, progress } = props\n    const rewardsGI = props.rewards.findIndex(\n        item => item.key === props.rewardKey\n    )\n\n    if (rewardsGI === -1 && props.setRewards)\n        props.setRewards([\n            ...props.rewards,\n            {\n                key: props.rewardKey,\n                rewards: [],\n            },\n        ])\n    const RewardButton = props => (\n        <Button type=\"link\" onClick={() => setPreviewReward(props.item)}>\n            {props.item.mode === 'simple'\n                ? props.item.simple\n                : props.item.mode === 'money'\n                ? props.item.money + ' (money)'\n                : props.item.mode === 'item'\n                ? props.item.itemName\n                : ''}\n        </Button>\n    )\n\n    return rewardsGI >= 0 ? (\n        <div>\n            {props.onlyButton ? (\n                props.rewards[rewardsGI].rewards.map((item, index) => (\n                    <RewardButton item={item} />\n                ))\n            ) : (\n                <Form.Item label={props.label} key={props.rewardKey}>\n                    <ol>\n                        {props.rewards[rewardsGI].rewards.map((item, index) => {\n                            return (\n                                <li key={index}>\n                                    <RewardButton item={item} />\n                                    <UserButton\n                                        id={item.owner}\n                                        noName={true}\n                                    />{' '}\n                                    =&gt;\n                                    {item.for && item.for.length > 0 ? (\n                                        <UserButton\n                                            id={item.for}\n                                            noName={true}\n                                        />\n                                    ) : (\n                                        <span\n                                            style={{\n                                                fontWeight: 'bold',\n                                                marginLeft: '5px',\n                                            }}\n                                        >\n                                            All\n                                        </span>\n                                    )}\n                                    {item.owner === account._id && !readOnly && (\n                                        <>\n                                            <Dropdown\n                                                overlay={\n                                                    <Menu>\n                                                        <Menu.Item\n                                                            onClick={() => {\n                                                                setEditedRewardIndex(\n                                                                    index\n                                                                )\n                                                                setEditedReward(\n                                                                    item\n                                                                )\n                                                            }}\n                                                        >\n                                                            Edit\n                                                        </Menu.Item>\n\n                                                        <Menu.Item\n                                                            onClick={() => {\n                                                                if (\n                                                                    !window.confirm(\n                                                                        'Are you sure you want to delete this item?'\n                                                                    )\n                                                                )\n                                                                    return\n                                                                if (\n                                                                    props.setRewards\n                                                                ) {\n                                                                    const newRewards = [\n                                                                        ...props.rewards,\n                                                                    ]\n                                                                    newRewards[\n                                                                        rewardsGI\n                                                                    ] = {\n                                                                        ...newRewards[\n                                                                            rewardsGI\n                                                                        ],\n                                                                        rewards: newRewards[\n                                                                            rewardsGI\n                                                                        ].rewards.filter(\n                                                                            (\n                                                                                item,\n                                                                                indexIn\n                                                                            ) =>\n                                                                                indexIn !==\n                                                                                index\n                                                                        ),\n                                                                    }\n                                                                    props.setRewards(\n                                                                        newRewards\n                                                                    )\n                                                                } else {\n                                                                    wsActions.deleteReward(\n                                                                        account._id,\n                                                                        progress._id,\n                                                                        props.rewardKey,\n                                                                        item.rewardId\n                                                                    )\n                                                                }\n                                                            }}\n                                                        >\n                                                            Delete\n                                                        </Menu.Item>\n                                                    </Menu>\n                                                }\n                                            >\n                                                <Button type=\"link\">\n                                                    <MoreIcon />\n                                                </Button>\n                                            </Dropdown>\n                                        </>\n                                    )}\n                                </li>\n                            )\n                        })}\n                    </ol>\n\n                    {!readOnly && (\n                        <Button\n                            type=\"link\"\n                            onClick={() => {\n                                setEditedRewardIndex('new')\n                                setEditedReward({ mode: 'simple' })\n                            }}\n                        >\n                            <PlusOutlined />\n                            Add rewards\n                        </Button>\n                    )}\n                </Form.Item>\n            )}\n            <Modal\n                visible={editedReward}\n                title={\n                    editedReward === 'new' ? 'Add new reward' : 'Edit reward'\n                }\n                closable={true}\n                onCancel={() => setEditedReward()}\n                onOk={() => {\n                    let rewardToSave = {}\n                    if (editedReward.mode === 'money') {\n                        rewardToSave.money = editedReward.money\n                        rewardToSave.mode = editedReward.mode\n                        rewardToSave.for = editedReward.for\n                        rewardToSave.rewardId = editedReward.rewardId\n                    } else {\n                        rewardToSave = { ...editedReward, money: undefined }\n                    }\n                    rewardToSave.owner = account._id\n\n                    if (props.setRewards) {\n                        const newRewards = [...props.rewards]\n\n                        if (editedRewardIndex === 'new')\n                            newRewards[rewardsGI] = {\n                                ...newRewards[rewardsGI],\n                                rewards: [\n                                    ...newRewards[rewardsGI].rewards,\n                                    rewardToSave,\n                                ],\n                            }\n                        else\n                            newRewards[rewardsGI] = {\n                                ...newRewards[rewardsGI],\n                                rewards: newRewards[rewardsGI].rewards.map(\n                                    (item, index) => {\n                                        if (index === editedRewardIndex)\n                                            return rewardToSave\n                                        else return item\n                                    }\n                                ),\n                            }\n                        props.setRewards(newRewards)\n                        setEditedReward()\n                        setEditedRewardIndex()\n                    } else {\n                        wsActions.saveReward(\n                            account._id,\n                            progress._id,\n                            props.rewardKey,\n                            rewardToSave\n                        )\n                        setEditedReward()\n                        setEditedRewardIndex()\n                    }\n                }}\n                destroyOnClose={true}\n                okText=\"Save\"\n            >\n                {editedReward && (\n                    <>\n                        <Form.Item label=\"Reward type\">\n                            <Select\n                                placeholder=\"Type\"\n                                value={editedReward.mode}\n                                onSelect={value => {\n                                    setEditedReward({\n                                        ...editedReward,\n                                        mode: value,\n                                    })\n                                }}\n                                style={{ width: '100%' }}\n                                getPopupContainer={trigger =>\n                                    trigger.parentNode\n                                }\n                            >\n                                <Select.Option key=\"simple\" value=\"simple\">\n                                    Simple reward\n                                </Select.Option>\n                                <Select.Option key=\"item\" value=\"item\">\n                                    Item reward\n                                </Select.Option>\n                                <Select.Option key=\"money\" value=\"money\">\n                                    Money reward\n                                </Select.Option>\n                            </Select>\n                        </Form.Item>\n                        <Form.Item label=\"Reward for\">\n                            {connectionsSelect(\n                                account,\n                                friendData,\n                                editedReward.for,\n                                value => {\n                                    setEditedReward({\n                                        ...editedReward,\n                                        for: value,\n                                    })\n                                }\n                            )}\n                            <p>(leave blank for all)</p>\n                        </Form.Item>\n                        <Divider type=\"horizontal\" />\n                        {editedReward.mode === 'simple' ? (\n                            <Form.Item\n                                label=\"Description\"\n                                rules={[\n                                    ...descriptionRules,\n                                    {\n                                        required: true,\n                                        min: 1,\n                                        whitespace: true,\n                                        message:\n                                            'Desription is too short. Minimal length is 1.',\n                                    },\n                                ]}\n                            >\n                                <Input.TextArea\n                                    value={editedReward.simple}\n                                    onChange={({ target: { value } }) =>\n                                        setEditedReward({\n                                            ...editedReward,\n                                            simple: value,\n                                        })\n                                    }\n                                    placeholder=\"Explain how you will reward\"\n                                />\n                            </Form.Item>\n                        ) : editedReward.mode === 'money' ? (\n                            <Form.Item label=\"Amount\" rules={priceRules}>\n                                <InputNumber\n                                    value={editedReward.money}\n                                    onChange={value => {\n                                        setEditedReward({\n                                            ...editedReward,\n                                            money: value,\n                                        })\n                                    }}\n                                />\n                            </Form.Item>\n                        ) : (\n                            <>\n                                <Form.Item label=\"Images\">\n                                    <Upload\n                                        listType=\"picture-card\"\n                                        fileList={(\n                                            editedReward.itemImages || []\n                                        ).map((url, index) => ({\n                                            url,\n                                            uid: index,\n                                        }))}\n                                        onPreview={file => {\n                                            setPreviewImage(file.url)\n                                        }}\n                                        onChange={({ fileList }) => {\n                                            setEditedReward({\n                                                ...editedReward,\n                                                itemImages: fileList.map(\n                                                    image => image.url\n                                                ),\n                                            })\n                                        }}\n                                        customRequest={({ file }) => {\n                                            uploadFile(\n                                                file,\n                                                800,\n                                                undefined,\n                                                url => {\n                                                    setEditedReward({\n                                                        ...editedReward,\n                                                        itemImages: [\n                                                            ...(editedReward.itemImages ||\n                                                                []),\n                                                            url,\n                                                        ],\n                                                    })\n                                                }\n                                            )\n                                        }}\n                                    >\n                                        {(editedReward.itemImages || [])\n                                            .length >= 8 ? null : (\n                                            <div>\n                                                <PlusOutlined />\n                                                <div className=\"ant-upload-text\">\n                                                    Upload\n                                                </div>\n                                            </div>\n                                        )}\n                                    </Upload>\n                                </Form.Item>\n                                <Form.Item label=\"Name\" rules={nameRules}>\n                                    <Input\n                                        value={editedReward.itemName}\n                                        onChange={({ target: { value } }) =>\n                                            setEditedReward({\n                                                ...editedReward,\n                                                itemName: value,\n                                            })\n                                        }\n                                    />\n                                </Form.Item>\n                                <Form.Item\n                                    label=\"Description\"\n                                    rules={descriptionRules}\n                                >\n                                    <Input.TextArea\n                                        value={editedReward.itemDescription}\n                                        onChange={({ target: { value } }) =>\n                                            setEditedReward({\n                                                ...editedReward,\n                                                itemDescription: value,\n                                            })\n                                        }\n                                    />\n                                </Form.Item>\n                            </>\n                        )}\n                    </>\n                )}\n            </Modal>\n            <Modal\n                visible={previewImage}\n                footer={null}\n                onCancel={() => setPreviewImage('')}\n            >\n                <img\n                    alt=\"example\"\n                    style={{ width: '100%' }}\n                    src={previewImage}\n                />\n            </Modal>\n            <Modal\n                visible={previewReward}\n                footer={null}\n                onCancel={() => setPreviewReward()}\n                title=\"Reward details\"\n            >\n                {previewReward ? (\n                    <>\n                        {previewReward.itemImages &&\n                            previewReward.itemImages.map((image, index) => (\n                                <span\n                                    key={index}\n                                    onClick={() => setPreviewImage(image)}\n                                >\n                                    <Card\n                                        type=\"inner\"\n                                        style={{\n                                            width: 200,\n                                            display: 'inline-block',\n                                        }}\n                                        hoverable\n                                        cover={\n                                            <div\n                                                style={{\n                                                    backgroundImage:\n                                                        'url(' + image + ')',\n                                                    height: 200,\n                                                    width: 200,\n                                                    backgroundSize: 'cover',\n                                                }}\n                                            />\n                                        }\n                                    />\n                                </span>\n                            ))}\n\n                        <Descriptions\n                            title=\"Reward description\"\n                            bordered\n                            column={{\n                                xxl: 4,\n                                xl: 3,\n                                lg: 3,\n                                md: 3,\n                                sm: 2,\n                                xs: 1,\n                            }}\n                        >\n                            {previewReward.mode === 'item' && (\n                                <Descriptions.Item label=\"Name\">\n                                    {previewReward.itemName}\n                                </Descriptions.Item>\n                            )}\n                            {previewReward.mode === 'item' && (\n                                <Descriptions.Item label=\"Description\">\n                                    <p style={{ whiteSpace: 'pre-wrap' }}>\n                                        {previewReward.itemDescription}\n                                    </p>\n                                </Descriptions.Item>\n                            )}\n                            {previewReward.mode === 'simple' && (\n                                <Descriptions.Item label=\"Description\">\n                                    <p style={{ whiteSpace: 'pre-wrap' }}>\n                                        {previewReward.simple}\n                                    </p>\n                                </Descriptions.Item>\n                            )}\n                            {previewReward.mode === 'money' && (\n                                <Descriptions.Item label=\"Money\">\n                                    {previewReward.money}\n                                </Descriptions.Item>\n                            )}\n                        </Descriptions>\n                    </>\n                ) : null}\n            </Modal>\n        </div>\n    ) : null\n}\n\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        account: state.account,\n        friendData: state.friendData,\n        progress: state.progress,\n    }\n}\n\nexport default withRouter(connect(mapStateToProps)(Rewards))\n","import { webSocket } from '../containers/ConnectWebsocket/ConnectWebsocket'\n\nexport const changeStage = (data, value, milestoneId) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'changeStage',\n                milestoneId,\n                value,\n                progressId: data.progress._id,\n                accountId: data.account._id,\n            })\n        )\n    }\n}\n\nexport const leaveProgress = data => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'leaveProgress',\n                progressId: data.progress._id,\n                accountId: data.account._id,\n            })\n        )\n    }\n}\n\nexport const createGroup = (accountId, progressId) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'createGroup',\n                progressId,\n                accountId,\n            })\n        )\n    }\n}\n\nexport const getFriendsData = (progress, accountFriends) => {\n    if (webSocket && webSocket.readyState === 1) {\n        if (progress) {\n            let accountIds = [\n                progress.owner,\n                progress.worker,\n                ...progress.goal.supporters,\n                ...progress.goal.experts,\n                ...accountFriends,\n            ]\n\n            accountIds = [...new Set(accountIds)]\n\n            webSocket.send(\n                JSON.stringify({\n                    messageCode: 'getFriendsData',\n                    accountIds,\n                })\n            )\n        }\n    }\n}\n\nexport const editGoalInProgress = (data, value) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'editGoalInProgress',\n                progressId: data.progress._id,\n                accountId: data.account._id,\n                value,\n            })\n        )\n    }\n}\n\nexport const startProgress = (accountId, value, inGroup) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'startProgress',\n                accountId,\n                value,\n                inGroup,\n            })\n        )\n    }\n}\n\nexport const deleteReward = (accountId, progressId, rewardKey, rewardId) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'deleteReward',\n                accountId,\n                progressId,\n                rewardKey,\n                rewardId,\n            })\n        )\n    }\n}\n\nexport const saveReward = (accountId, progressId, rewardKey, reward) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'saveReward',\n                accountId,\n                progressId,\n                rewardKey,\n                reward,\n            })\n        )\n    }\n}\n","import React, { useState } from 'react'\nimport Modal from 'antd/es/modal'\n\nimport Button from 'antd/es/button'\nimport Input from 'antd/es/input'\nimport Form from 'antd/es/form'\nimport Collapse from 'antd/es/collapse'\nimport Divider from 'antd/es/divider'\nimport Upload from 'antd/es/upload'\nimport PlusOutlined from '@ant-design/icons/PlusOutlined'\n\nimport { uploadFile } from '../../utils/uploadFile'\nimport Rewards from '../Rewards/Rewards'\nimport { nameRules, descriptionRules } from '../../constants/fieldRules'\nimport connectionsSelect from './connectionsSelect'\nimport Dropdown from 'antd/es/dropdown/dropdown'\nimport { sisOutlined } from '@ant-design/icons'\nimport Menu from 'antd/es/menu'\nimport MoreIcon from '../UI/MoreIcon'\n\nconst EditGoalAndProgressForm = props => {\n    const { goal, account, friendData } = props\n\n    const [milestones, setMilestones] = useState(\n        (goal && goal.milestones) || [\n            { name: 'Start', key: 'start' },\n            { name: 'Finish', key: 'finish' },\n        ]\n    )\n\n    const [images, setImages] = useState(\n        (goal &&\n            goal.images.map((url, index) => ({\n                url,\n                uid: index,\n            }))) ||\n            []\n    )\n    const [withMilestones, setWithMilestones] = useState(\n        goal && goal.withMilestones\n    )\n    const [previewImage, setPreviewImage] = useState('')\n    const [newTabIndex, setNewTabIndex] = useState(\n        (goal && goal.newTabIndex) || 2\n    )\n\n    const [rewards, setRewards] = useState((goal && goal.rewardsGroups) || [])\n\n    const onFinish = value => {\n        const milestonesValues = []\n        for (let milestone of milestones) {\n            milestonesValues.push({\n                ...value[milestone.key],\n                key: milestone.key,\n                name: milestone.name,\n            })\n        }\n\n        props.onFinish({\n            ...value,\n            images: images.map(image => image.url),\n            milestones,\n            milestonesValues,\n            newTabIndex,\n            rewardsGroups: rewards,\n        })\n    }\n\n    const addMilestone = milestone => {\n        const newPanes = [...milestones]\n        const newKey = `mile${newTabIndex}`\n        if (typeof milestone !== 'undefined') {\n            const indexOfMile = milestones.findIndex(\n                mile => mile.key === milestone\n            )\n            if (indexOfMile < 0) return\n            newPanes.splice(indexOfMile + 1, 0, {\n                key: newKey,\n                name: 'New milestone',\n            })\n        } else {\n            if (newPanes.find(item => item.key === 'finish'))\n                newPanes.splice(newPanes.length - 1, 0, {\n                    key: newKey,\n                    name: 'New milestone',\n                })\n            else\n                newPanes.push({\n                    key: newKey,\n                    name: 'New milestone',\n                })\n        }\n        setMilestones(newPanes)\n        setNewTabIndex(newTabIndex + 1)\n        form.setFieldsValue({\n            [newKey]: { key: newKey, name: 'New milestone' },\n        })\n    }\n\n    const layout = {\n        labelCol: { span: 8 },\n        wrapperCol: { span: 16 },\n    }\n    const tailLayout = {\n        wrapperCol: { offset: 8, span: 16 },\n    }\n\n    const [form] = Form.useForm()\n\n    const normFile = e => {\n        if (Array.isArray(e)) {\n            return e\n        }\n        return e && e.fileList.map(image => image.url)\n    }\n\n    const connections = connectionsSelect(account, friendData)\n\n    const MilestoneControls = props => {\n        const moveMilestoneUp = () => {\n            const indexOfMile = milestones.findIndex(\n                mile => mile.key === props.milestone\n            )\n            if (indexOfMile <= 0) return\n            const newMilestones = [...milestones]\n            newMilestones.splice(\n                indexOfMile - 1,\n                0,\n                newMilestones.splice(indexOfMile, 1)[0]\n            )\n            setMilestones(newMilestones)\n        }\n\n        const moveMilestoneDown = () => {\n            const indexOfMile = milestones.findIndex(\n                mile => mile.key === props.milestone\n            )\n            if (indexOfMile < 0 || indexOfMile >= milestones.length - 1) return\n            const newMilestones = [...milestones]\n            newMilestones.splice(\n                indexOfMile + 1,\n                0,\n                newMilestones.splice(indexOfMile, 1)[0]\n            )\n            setMilestones(newMilestones)\n        }\n\n        const addMilestoneBelow = () => {\n            addMilestone(props.milestone)\n        }\n\n        const deleteMilestone = () => {\n            const newPanes = milestones.filter(\n                pane => pane.key !== props.milestone\n            )\n            setMilestones(newPanes)\n        }\n\n        return (\n            <Dropdown\n                overlay={\n                    <Menu\n                        onClick={({ domEvent }) => domEvent.stopPropagation()}\n                    >\n                        {!props.finish && (\n                            <Menu.Item key=\"0\" onClick={addMilestoneBelow}>\n                                Add a milestone below\n                            </Menu.Item>\n                        )}\n                        {!props.finish && !props.start && (\n                            <Menu.Item key=\"1\" onClick={moveMilestoneUp}>\n                                Move up\n                            </Menu.Item>\n                        )}\n                        {!props.finish && !props.start && (\n                            <Menu.Item key=\"2\" onClick={moveMilestoneDown}>\n                                Move down\n                            </Menu.Item>\n                        )}\n                        <Menu.Divider />\n                        <Menu.Item\n                            key=\"3\"\n                            danger={true}\n                            onClick={deleteMilestone}\n                        >\n                            Delete\n                        </Menu.Item>\n                    </Menu>\n                }\n                trigger={['click', 'hover']}\n            >\n                <a\n                    className=\"ant-dropdown-link\"\n                    onClick={e => {\n                        e.preventDefault()\n                        e.stopPropagation()\n                    }}\n                >\n                    <MoreIcon />\n                </a>\n            </Dropdown>\n        )\n    }\n    return !props.goalId || goal ? (\n        <>\n            <Form\n                form={form}\n                name=\"dynamic_form_nest_item\"\n                onFinish={onFinish}\n                autoComplete=\"off\"\n                initialValues={\n                    goal || {\n                        name: 'New achievement',\n                        start: {\n                            name: 'Start',\n                            key: 'start',\n                            description: 'This is the start of the progress.',\n                        },\n                        finish: {\n                            name: 'Finish',\n                            key: 'finish',\n                            description: 'This is the finish of the progress.',\n                        },\n                    }\n                }\n                {...layout}\n                onValuesChange={changedValues => {\n                    for (let attr in changedValues) {\n                        const index = milestones.findIndex(\n                            item => item.key === attr\n                        )\n\n                        if (index > -1) {\n                            if (changedValues[attr].name) {\n                                const newMilestones = [...milestones]\n                                newMilestones[index] = {\n                                    ...newMilestones[index],\n                                    name: changedValues[attr].name,\n                                }\n                                setMilestones(newMilestones)\n                            }\n                        }\n                        if (attr === 'withMilestones') {\n                            setWithMilestones(changedValues[attr])\n                        }\n                    }\n                }}\n            >\n                <Form.Item\n                    name=\"images\"\n                    label=\"Images\"\n                    valuePropName=\"images\"\n                    getValueFromEvent={normFile}\n                >\n                    <Upload\n                        listType=\"picture-card\"\n                        fileList={images.map((image, index) => ({\n                            ...image,\n                            uid: index,\n                        }))}\n                        onPreview={file => {\n                            setPreviewImage(file.url)\n                        }}\n                        onChange={({ fileList }) => setImages(fileList)}\n                        customRequest={({ file }) => {\n                            uploadFile(file, 800, undefined, url => {\n                                setImages(\n                                    [...images, { url }].map(\n                                        (image, index) => ({\n                                            ...image,\n                                            uid: index,\n                                        })\n                                    )\n                                )\n                            })\n                        }}\n                    >\n                        {images.length >= 8 ? null : (\n                            <div>\n                                <PlusOutlined />\n                                <div className=\"ant-upload-text\">Upload</div>\n                            </div>\n                        )}\n                    </Upload>\n                </Form.Item>\n                <Form.Item label=\"Name\" name=\"name\" rules={nameRules}>\n                    <Input />\n                </Form.Item>\n                <Form.Item\n                    label=\"Description\"\n                    name=\"description\"\n                    rules={descriptionRules}\n                >\n                    <Input.TextArea\n                        autoSize={{ minRows: 4, maxRows: 20 }}\n                        placeholder=\"Write a few words about why this goal is important and how to achieve it.\"\n                    />\n                </Form.Item>\n\n                <Form.Item label=\"Achievers\" name=\"users\">\n                    {connections}\n                </Form.Item>\n\n                <Form.Item label=\"Experts\" name=\"experts\">\n                    {connections}\n                </Form.Item>\n                <Form.Item label=\"Supporters\" name=\"supporters\">\n                    {connections}\n                </Form.Item>\n\n                <Divider>Milestones</Divider>\n                <Collapse expandIconPosition=\"right\" accordion>\n                    {[\n                        ...(milestones.find(item => item.key === 'start')\n                            ? [milestones.find(item => item.key === 'start')]\n                            : []),\n                        ...milestones.filter(\n                            item =>\n                                item.key !== 'start' && item.key !== 'finish'\n                        ),\n                        ...(milestones.find(item => item.key === 'finish')\n                            ? [milestones.find(item => item.key === 'finish')]\n                            : []),\n                    ].map(milestone => {\n                        return (\n                            <Collapse.Panel\n                                header={\n                                    form.getFieldValue([\n                                        milestone.key,\n                                        'name',\n                                    ]) || milestone.name\n                                }\n                                key={milestone.key}\n                                extra={\n                                    <MilestoneControls\n                                        milestone={milestone.key}\n                                        start={milestone.key === 'start'}\n                                        finish={milestone.key === 'finish'}\n                                    />\n                                }\n                            >\n                                <Form.Item\n                                    label=\"Name\"\n                                    name={[milestone.key, 'name']}\n                                    rules={nameRules}\n                                >\n                                    <Input />\n                                </Form.Item>\n                                <Form.Item\n                                    label=\"Description\"\n                                    name={[milestone.key, 'description']}\n                                    rules={descriptionRules}\n                                >\n                                    <Input.TextArea placeholder=\"Write a few words about why this milestone is important and how to achieve it.\" />\n                                </Form.Item>\n                                <Rewards\n                                    rewardKey={milestone.key}\n                                    label=\"Rewards\"\n                                    rewards={rewards}\n                                    setRewards={setRewards}\n                                />\n                            </Collapse.Panel>\n                        )\n                    })}\n                </Collapse>\n                <Button type=\"link\" onClick={() => addMilestone()}>\n                    <PlusOutlined /> Add a new milestone\n                </Button>\n\n                <Form.Item {...tailLayout}>\n                    <Button type=\"primary\" htmlType=\"submit\" size=\"large\">\n                        Save\n                    </Button>\n                </Form.Item>\n            </Form>\n            <Modal\n                visible={previewImage}\n                footer={null}\n                onCancel={() => setPreviewImage('')}\n            >\n                <img\n                    alt=\"example\"\n                    style={{ width: '100%' }}\n                    src={previewImage}\n                />\n            </Modal>\n        </>\n    ) : null\n}\n\nexport default EditGoalAndProgressForm\n","import React from 'react'\nimport * as wsActions from '../../websocketActions'\n\nimport EditGoalAndProgressForm from '../../components/EditGoalAndProgressForm/EditGoalAndProgressForm'\n\nconst AddProgress = props =>\n    props.account._id ? (\n        <EditGoalAndProgressForm\n            onFinish={value => {\n                props.setStartProgressVisible(false)\n                wsActions.startProgress(props.account._id, value, props.inGroup)\n            }}\n            account={props.account}\n            friendData={props.friendData}\n        />\n    ) : null\n\nexport default AddProgress\n","import React from 'react'\nimport { withRouter } from 'react-router-dom'\n\nimport Card from 'antd/es/card'\n\nconst { Meta } = Card\n\nconst GroupCard = props => {\n    const { group } = props\n\n    return (\n        <div\n            style={{\n                display: 'inline-block',\n                margin: '4px 8px',\n            }}\n            onClick={() => props.history.push('/groups/' + group._id)}\n        >\n            <Card\n                type=\"inner\"\n                style={{\n                    width: 200,\n                }}\n                hoverable\n                cover={\n                    <div\n                        onClick={() =>\n                            props.history.push('/groups/' + group._id)\n                        }\n                        style={{\n                            backgroundImage:\n                                'url(' +\n                                (group.images &&\n                                    group.images.length > 0 &&\n                                    group.images[0]) +\n                                ')',\n                            height: 200,\n                            width: 200,\n                            backgroundSize: 'cover',\n                        }}\n                    />\n                }\n            >\n                <Meta title={group.name} />\n            </Card>\n        </div>\n    )\n}\n\nexport default withRouter(GroupCard)\n","import React, { useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport Tabs from 'antd/es/tabs'\nimport Button from 'antd/es/button'\nimport Empty from 'antd/es/empty'\nimport ProgressCard from './ProgressCard'\nimport AddCard from '../../components/AddCard/AddCard'\nimport Modal from 'antd/es/modal/Modal'\nimport AddProgress from './AddProgress'\nimport GroupCard from './GroupCard'\nimport Masonry from 'react-masonry-css'\nimport { cardBreakPoints } from '../../utils/masonryBreakPoints'\nimport MasonryGrid from '../../components/MasonryGrid'\nimport MasonryCard from '../../components/MasonryCard'\nimport UserButton from '../../components/UserButton/UserButton'\n\nconst { TabPane } = Tabs\n\nconst Progresses = props => {\n    const { fromProfile, progressData, account, groupData, profile } = props\n\n    const { progresses, groups } = fromProfile ? profile : account\n    const [startProgressVisible, setStartProgressVisible] = useState(false)\n    if (!fromProfile) props.setPageTitle({ main: 'Progresses', sub: '' })\n    let loadedProgresses, loadedGroups\n    if (progresses) {\n        loadedProgresses = progresses\n            .filter(item => progressData[item])\n            .map(item => progressData[item])\n        loadedGroups = groups\n            .filter(item => groupData[item] && groupData[item].active)\n            .map(item => groupData[item])\n    }\n\n    const editGoal = fromProfile ? null : loadedProgresses && loadedGroups ? (\n        <Modal\n            title=\"Add progress\"\n            visible={startProgressVisible}\n            maskClosable\n            closable\n            onCancel={() => setStartProgressVisible(false)}\n            width=\"100%\"\n            style={{ maxWidth: '1000px' }}\n            footer={\n                <Button\n                    key=\"back\"\n                    onClick={() => setStartProgressVisible(false)}\n                >\n                    Close\n                </Button>\n            }\n            destroyOnClose={true}\n        >\n            <AddProgress\n                setStartProgressVisible={setStartProgressVisible}\n                account={account}\n                friendData={props.friendData}\n            />\n        </Modal>\n    ) : null\n\n    const innerTabs =\n        loadedProgresses && loadedGroups ? (\n            <>\n                <TabPane tab=\"Progresses\" key=\"progresses\">\n                    {!fromProfile && (\n                        <>\n                            <AddCard\n                                title=\"Start a new progress\"\n                                sub=\"Rich your goals or help others!\"\n                                action={() => {\n                                    setStartProgressVisible(true)\n                                }}\n                            />\n                            {editGoal}\n                        </>\n                    )}\n                    <MasonryGrid>\n                        {loadedProgresses.map((item, index) => (\n                            <MasonryCard\n                                key={index}\n                                onClickLink={'/progresses/' + item._id}\n                                images={item.goal.images}\n                                body={\n                                    <>\n                                        <UserButton\n                                            ids={item.goal.users}\n                                            group={true}\n                                        />\n                                        <span style={{ fontWeight: 'bold' }}>\n                                            {item.name}\n                                        </span>\n                                    </>\n                                }\n                            />\n                        ))}\n                    </MasonryGrid>\n                </TabPane>\n                <TabPane tab=\"Groups\" key=\"groups\">\n                    {loadedGroups.length > 0 ? (\n                        loadedGroups.map((group, index) => (\n                            <GroupCard key={index} group={group} />\n                        ))\n                    ) : (\n                        <Empty\n                            imageStyle={{\n                                height: 160,\n                            }}\n                            description={\n                                <span>\n                                    Here you will find your groups. Groups can\n                                    be created in existing progresses.\n                                </span>\n                            }\n                        />\n                    )}\n                </TabPane>\n            </>\n        ) : null\n\n    return loadedProgresses && loadedGroups ? (\n        // <Tabs\n        //     style={{\n        //         background: 'transparent',\n        //         boxShadow: 'none',\n        //         margin: '0',\n        //         marginTop: '-15px',\n        //     }}\n        // >\n        //     {innerTabs}\n        // </Tabs>\n        <div>\n            {!fromProfile && (\n                <>\n                    <AddCard\n                        title=\"Start a new progress\"\n                        sub=\"Rich your goals or help others!\"\n                        action={() => {\n                            setStartProgressVisible(true)\n                        }}\n                    />\n                    {editGoal}\n                </>\n            )}\n            <MasonryGrid style={{ marginTop: '40px' }}>\n                {loadedProgresses.map((item, index) => (\n                    <MasonryCard\n                        key={index}\n                        onClickLink={'/progresses/' + item._id}\n                        images={item.goal.images}\n                        body={\n                            <>\n                                <UserButton\n                                    ids={item.goal.users}\n                                    group={true}\n                                />\n                                <span style={{ fontWeight: 'bold' }}>\n                                    {item.name}\n                                </span>\n                            </>\n                        }\n                    />\n                ))}\n            </MasonryGrid>\n        </div>\n    ) : null\n\n    // ) : (\n    //     <Empty\n    //         imageStyle={{\n    //             height: 160,\n    //         }}\n    //         description={\n    //             <span>\n    //                 This user has no progresses. You can create a goal and\n    //                 invite this user.\n    //             </span>\n    //         }\n    //     />\n    // )\n}\n\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n        profile: state.profile,\n        isAuthed: state.isAuthed,\n        progressData: state.progressData,\n        groupData: state.groupData,\n        friendData: state.friendData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: (data, pulledFrom) =>\n            dispatch(actions.setData(data, pulledFrom)),\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n        tryAuth: (props, forceAuth) =>\n            dispatch(actions.tryAuth(props, forceAuth)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Progresses)\n)\n","import React from 'react'\nimport Checkbox from 'antd/es/checkbox'\nimport Descriptions from 'antd/es/descriptions'\n\nimport * as wsActions from '../../websocketActions'\nimport Rewards from '../../components/Rewards/Rewards'\nimport UserButton from '../../components/UserButton/UserButton'\nimport Collapse from 'antd/es/collapse'\nimport Badge from 'antd/es/badge'\nimport Typography from 'antd/es/typography'\nimport Divider from 'antd/es/divider'\n\nconst ActivityTable = props => {\n    const { progress, account } = props\n    const { goal } = progress\n    const { rewardsGroups } = goal\n\n    const renderCheckbox = ({ checked, milestoneId, disabled }) => (\n        <Checkbox\n            checked={checked}\n            onChange={e =>\n                wsActions.changeStage(props, e.target.checked, milestoneId)\n            }\n            disabled={disabled}\n        />\n    )\n\n    const getCheckboxStatus = (id, stage, milestone) => {\n        return {\n            checked: stage.approvedBy.find(item => item.accountId === id),\n            milestoneId: milestone.key,\n            disabled: id !== account._id,\n        }\n    }\n\n    return (\n        <Collapse\n            expandIconPosition=\"right\"\n            style={{ marginBottom: '50px' }}\n            destroyInactivePanel={true}\n            accordion\n        >\n            {goal.milestonesValues.map(milestone => {\n                const stage = progress.stages.find(\n                    stage => stage.milestoneId === milestone.key\n                ) || { approvedBy: [] }\n\n                const experts = goal.experts.map(expert => (\n                    <Descriptions.Item\n                        key={expert}\n                        label={\n                            <>\n                                <UserButton\n                                    id={expert}\n                                    noAva={true}\n                                    span={true}\n                                />{' '}\n                                {' (expert)'}\n                            </>\n                        }\n                    >\n                        {renderCheckbox(\n                            getCheckboxStatus(expert, stage, milestone)\n                        )}\n                    </Descriptions.Item>\n                ))\n\n                const users = goal.users.map(user => (\n                    <Descriptions.Item\n                        key={user}\n                        label={\n                            <>\n                                <UserButton\n                                    id={user}\n                                    noAva={true}\n                                    span={true}\n                                />{' '}\n                                {' (achiever)'}\n                            </>\n                        }\n                    >\n                        {renderCheckbox(\n                            getCheckboxStatus(user, stage, milestone)\n                        )}\n                    </Descriptions.Item>\n                ))\n\n                const owner = [\n                    <Descriptions.Item\n                        key={progress.owner}\n                        label={\n                            <>\n                                <UserButton\n                                    id={progress.owner}\n                                    noAva={true}\n                                    span={true}\n                                />{' '}\n                                {' (owner)'}\n                            </>\n                        }\n                    >\n                        {renderCheckbox(\n                            getCheckboxStatus(progress.owner, stage, milestone)\n                        )}\n                    </Descriptions.Item>,\n                ]\n                return (\n                    <Collapse.Panel\n                        header={\n                            <Badge\n                                color={stage.status ? 'green' : 'blue'}\n                                text={milestone.name}\n                            />\n                        }\n                        key={milestone.key}\n\n                        // extra={}\n                    >\n                        <Divider style={{ marginTop: '0px', fontSize: '15px' }}>\n                            Status\n                        </Divider>\n\n                        <Descriptions\n                            bordered\n                            column={{\n                                xxl: 4,\n                                xl: 3,\n                                lg: 3,\n                                md: 3,\n                                sm: 2,\n                                xs: 1,\n                            }}\n                        >\n                            <Descriptions.Item label=\"Current status\">\n                                {stage.status ? (\n                                    <Badge\n                                        status=\"success\"\n                                        text=\"Is complete\"\n                                    />\n                                ) : (\n                                    <Badge\n                                        status=\"processing\"\n                                        text=\"In process\"\n                                    />\n                                )}\n                            </Descriptions.Item>\n                            {users}\n                            {owner}\n                            {experts}\n                        </Descriptions>\n                        {milestone.description && (\n                            <>\n                                <Divider style={{ fontSize: '15px' }}>\n                                    Description\n                                </Divider>\n                                <Typography.Paragraph\n                                    ellipsis={{\n                                        rows: 3,\n                                        expandable: true,\n                                        symbol: 'more',\n                                    }}\n                                    style={{ whiteSpace: 'pre-wrap' }}\n                                >\n                                    {milestone.description}\n                                </Typography.Paragraph>\n                            </>\n                        )}\n\n                        {stage.status && (\n                            <>\n                                <Divider style={{ fontSize: '15px' }}>\n                                    Paid rewards\n                                </Divider>\n\n                                <Rewards\n                                    rewardKey={1}\n                                    rewards={[{ rewards: stage.paid, key: 1 }]}\n                                    readOnly={true}\n                                />\n                            </>\n                        )}\n                        <Divider style={{ fontSize: '15px' }}>Rewards</Divider>\n                        <Rewards\n                            rewardKey={milestone.key}\n                            rewards={rewardsGroups}\n                        />\n                    </Collapse.Panel>\n                )\n            })}\n        </Collapse>\n    )\n}\nexport default ActivityTable\n","import React from 'react'\n\nimport * as wsActions from '../../websocketActions'\nimport EditGoalAndProgressForm from '../../components/EditGoalAndProgressForm/EditGoalAndProgressForm'\n\nconst EditProgress = props => {\n    const { progress, account, state, setState, friendData } = props\n\n    const milestonesValues = {}\n    for (let milestone of progress.goal.milestonesValues) {\n        milestonesValues[milestone.key] = milestone\n    }\n    const goal = { ...progress.goal, ...milestonesValues }\n\n    const onFinish = value => {\n        wsActions.editGoalInProgress(props, value)\n        setState({ ...state, editProgressOpen: false })\n    }\n\n    return goal ? (\n        <EditGoalAndProgressForm\n            goal={goal}\n            onFinish={onFinish}\n            account={account}\n            friendData={friendData}\n        />\n    ) : null\n}\n\nexport default EditProgress\n","import React from 'react'\nimport { withRouter } from 'react-router-dom'\nimport Button from 'antd/es/button'\nimport Divider from 'antd/es/divider'\nimport Modal from 'antd/es/modal'\n\nimport Descriptions from 'antd/es/descriptions'\n\nconst { Item } = Descriptions\n\nimport * as wsActions from '../../websocketActions'\nimport ActivityTable from './ActivityTable'\nimport EditProgress from './EditProgress'\nimport Popconfirm from 'antd/es/popconfirm'\nimport Typography from 'antd/es/typography'\nimport UserButton from '../../components/UserButton/UserButton'\nimport ImageCarousel from '../../components/UI/ImageCarousel/ImageCarousel'\n\nconst Activity = props => {\n    const { account, progress, state, setState, friendData } = props\n    const { goal } = progress\n    return goal ? (\n        <>\n            {goal.images.length > 0 && <ImageCarousel images={goal.images} />}\n\n            <h1>{goal.name}</h1>\n            <Typography.Paragraph\n                ellipsis={{\n                    rows: 3,\n                    expandable: true,\n                    symbol: 'more',\n                }}\n                style={{ whiteSpace: 'pre-wrap' }}\n            >\n                {goal.description}\n            </Typography.Paragraph>\n\n            <Descriptions\n                bordered\n                column={{ xxl: 4, xl: 3, lg: 3, md: 3, sm: 2, xs: 1 }}\n            >\n                <Item label=\"Status\">{progress.status}</Item>\n                <Item label=\"Worker\">\n                    {goal.users && <UserButton ids={goal.users} group={true} />}\n                </Item>\n                <Item label=\"Owner\">\n                    <UserButton id={progress.owner} noName={true} />\n                </Item>\n                <Item label=\"Supporters\">\n                    {goal.supporters && (\n                        <UserButton ids={goal.supporters} group={true} />\n                    )}\n                </Item>\n                <Item label=\"Experts\">\n                    {goal.experts && (\n                        <UserButton ids={goal.experts} group={true} />\n                    )}\n                </Item>\n            </Descriptions>\n            <Divider orientation=\"center\" type=\"horizontal\">\n                Milestones\n            </Divider>\n            <ActivityTable\n                progress={progress}\n                account={account}\n                state={state}\n                setState={setState}\n            />\n            {account._id === progress.owner && (\n                <Button\n                    style={{ margin: '0px 20px 50px 0px' }}\n                    type=\"primary\"\n                    onClick={() => {\n                        setState({ ...state, editProgressOpen: true })\n                    }}\n                >\n                    Edit progress\n                </Button>\n            )}\n            {account._id === progress.owner && (\n                <Popconfirm\n                    title=\"Create a group if you want to have more similar prgresses with the same people.\"\n                    onConfirm={() =>\n                        wsActions.createGroup(account._id, progress._id)\n                    }\n                >\n                    <Button\n                        style={{ margin: '0px 20px 50px 0px' }}\n                        type=\"primary\"\n                    >\n                        Create a group\n                    </Button>\n                </Popconfirm>\n            )}\n            {account.progresses &&\n                account.progresses.includes(progress._id.toString()) && (\n                    <Button\n                        danger={true}\n                        onClick={() => {\n                            wsActions.leaveProgress(props)\n                        }}\n                    >\n                        Leave the progress\n                    </Button>\n                )}\n\n            <Modal\n                visible={state.editProgressOpen}\n                footer={null}\n                onCancel={() => setState({ ...state, editProgressOpen: false })}\n                closable={true}\n                destroyOnClose={true}\n                width=\"100%\"\n                style={{ maxWidth: '1000px' }}\n            >\n                <EditProgress\n                    progress={progress}\n                    account={account}\n                    state={state}\n                    setState={setState}\n                    friendData={friendData}\n                />\n            </Modal>\n        </>\n    ) : null\n}\n\nexport default withRouter(Activity)\n","import React, { useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport Button from 'antd/es/button'\nimport Comment from 'antd/es/comment'\nimport Avatar from 'antd/es/avatar'\nimport Input from 'antd/es/input'\nimport Form from 'antd/es/form'\nimport Upload from 'antd/es/upload'\nimport PictureOutlined from '@ant-design/icons/PictureOutlined'\nimport LoadingOutlined from '@ant-design/icons/LoadingOutlined'\nimport SendOutlined from '@ant-design/icons/SendOutlined'\nimport { uploadFile } from '../../utils/uploadFile'\nimport * as wsActions from '../../websocketActions'\nimport getAvatar from '../../utils/getAvatar'\nimport { messageRules } from '../../constants/fieldRules'\nimport {\n    PlusOutlined,\n    CloseCircleFilled,\n    PictureFilled,\n} from '@ant-design/icons'\nimport Modal from 'antd/es/modal/Modal'\n\nconst AddPost = props => {\n    const [previewImage, setPreviewImage] = useState('')\n    const [imageLoading, setImageLoading] = useState(false)\n    const [images, setImages] = useState([])\n\n    const { parent, account, parentType } = props\n\n    const [messageText, setMessageText] = useState(\n        props.content ||\n            (props.replyToUser ? '@' + props.replyToUser + ' ' : '')\n    )\n\n    const uploadImage = file => {\n        uploadFile(file, 800, undefined, url => {\n            setImages([...images, url])\n        })\n    }\n    return account._id ? (\n        <div\n            style={{\n                background: '#fff',\n                padding: '0px 10px',\n                bottom: '0px',\n                left: '0px',\n                zIndex: 1000,\n            }}\n        >\n            <h2>Post something new</h2>\n            <Comment\n                avatar={<Avatar src={getAvatar(account._id, account.image)} />}\n                content={\n                    <>\n                        <Form.Item rules={messageRules}>\n                            <Input.TextArea\n                                autoSize={{\n                                    minRows: 1,\n                                    maxRows: 3,\n                                }}\n                                rows={1}\n                                onChange={e => setMessageText(e.target.value)}\n                                value={messageText}\n                            />\n                        </Form.Item>\n                        {images.length > 0 && (\n                            <Form.Item style={{ margin: 0 }}>\n                                <Upload\n                                    listType=\"picture-card\"\n                                    fileList={images.map((image, index) => ({\n                                        url: image,\n                                        uid: index,\n                                    }))}\n                                    onPreview={file => {\n                                        setPreviewImage(file.url)\n                                    }}\n                                    onChange={({ fileList }) =>\n                                        setImages(\n                                            fileList.map(image => image.url)\n                                        )\n                                    }\n                                    customRequest={({ file }) => {\n                                        uploadImage(file)\n                                    }}\n                                >\n                                    {images.length >= 8 ? null : (\n                                        <div>\n                                            <PlusOutlined />\n                                            <div className=\"ant-upload-text\">\n                                                Upload\n                                            </div>\n                                        </div>\n                                    )}\n                                </Upload>\n                            </Form.Item>\n                        )}\n                        <Form.Item>\n                            <Button\n                                htmlType=\"submit\"\n                                onClick={() => {\n                                    wsActions.addPost(\n                                        account._id,\n                                        parent,\n                                        parentType,\n                                        messageText,\n                                        images\n                                    )\n                                    setMessageText('')\n                                    setImages([])\n                                    if (props.onSend) props.onSend()\n                                }}\n                                icon={<SendOutlined />}\n                                type=\"text\"\n                            >\n                                Send\n                            </Button>\n                            <Upload\n                                showUploadList={false}\n                                customRequest={({ file }) => {\n                                    if (images.length > 8) {\n                                        message.warning(\n                                            'You can not attach more than 8 images.'\n                                        )\n                                        return\n                                    }\n                                    setImageLoading(true)\n                                    uploadFile(file, 800, undefined, url => {\n                                        setImageLoading(false)\n                                        setImages([...images, url])\n                                    })\n                                }}\n                            >\n                                <Button\n                                    type=\"text\"\n                                    icon={\n                                        imageLoading ? (\n                                            <LoadingOutlined />\n                                        ) : (\n                                            <PictureFilled />\n                                        )\n                                    }\n                                >\n                                    Image\n                                </Button>\n                            </Upload>\n                            {messageText || images.length ? (\n                                <Button\n                                    onClick={() => {\n                                        setMessageText('')\n                                        setImages([])\n                                    }}\n                                    icon={<CloseCircleFilled />}\n                                    type=\"text\"\n                                >\n                                    Cancel\n                                </Button>\n                            ) : null}\n                        </Form.Item>\n                    </>\n                }\n            />\n            <Modal\n                visible={previewImage}\n                footer={null}\n                onCancel={() => setPreviewImage('')}\n            >\n                <img\n                    alt=\"example\"\n                    style={{ width: '100%' }}\n                    src={previewImage}\n                />\n            </Modal>\n        </div>\n    ) : null\n}\n\nexport default withRouter(AddPost)\n","import React, { useEffect, useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\n\nimport Modal from 'antd/es/modal'\nimport Activity from './Activity'\nimport Card from 'antd/es/card'\nimport Post from '../../components/Post/Post'\nimport AddPost from '../../components/Post/AddPost'\nimport Tabs from 'antd/es/tabs'\nimport pullData from '../../utils/pullData'\n\nconst Progress = props => {\n    const [state, setState] = useState({})\n\n    const [data, setData] = useState({})\n    const pathParts = props.history.location.pathname.split('/')\n    const progressId = pathParts.length > 2 ? pathParts[2] : ''\n    if (!progressId) return null\n    useEffect(() => {\n        if (props.isAuthed) {\n            props.setData({ currentProgress: progressId })\n        } else {\n            pullData(props, data, setData, { forceAuth: false }, data => {\n                const friendData = {}\n                for (let friend of data.friendData)\n                    friendData[friend._id] = friend\n                const post = {}\n                for (let item of data.post) post[item._id] = item\n\n                props.setData({\n                    friendData,\n                    posts: post,\n                    account: {},\n                    progress: data.progress,\n                })\n            })\n        }\n    }, [props.isAuthed, props.history.location.pathname])\n\n    const { progress, account, friendData, posts } = props.isAuthed\n        ? props\n        : { ...data, account: {} }\n\n    if (!progress || !progress._id) return null\n    props.setData({ currentPosts: progress.posts })\n\n    const { goal } = progress\n    if (goal) props.setPageTitle({ main: goal.name, sub: progress.worker })\n    return goal && friendData ? (\n        <div className=\"contentDiv\">\n            <Tabs>\n                <Tabs.TabPane tab=\"Details\" key=\"details\">\n                    <Activity\n                        state={state}\n                        setState={setState}\n                        progress={progress}\n                        account={account}\n                        friendData={friendData}\n                    />\n                </Tabs.TabPane>\n                <Tabs.TabPane tab=\"Posts\" key=\"posts\">\n                    {account._id && (\n                        <AddPost\n                            parent={progressId}\n                            account={account}\n                            parentType=\"progress\"\n                            // onSend={() => setEditingMessage('')}\n                        />\n                    )}\n                    {progress.posts.map(postId => {\n                        if (posts[postId]) {\n                            const post = posts[postId]\n                            return (\n                                <div key={postId}>\n                                    <div\n                                        style={{\n                                            height: '5px',\n                                            background: '#ddd',\n                                            width: 'calc(100% + 8px)',\n                                            position: 'absolute',\n                                            left: '-8px',\n                                        }}\n                                    />\n                                    <div style={{ paddingTop: '10px' }}>\n                                        <Post\n                                            friendData={friendData}\n                                            account={account}\n                                            post={post}\n                                        />\n                                    </div>\n                                </div>\n                            )\n                        } else return null\n                    })}\n                </Tabs.TabPane>\n            </Tabs>\n            <Modal\n                visible={state.previewImage}\n                footer={null}\n                onCancel={() => setState({ ...state, previewImage: '' })}\n            >\n                <img\n                    alt=\"example\"\n                    style={{ width: '100%' }}\n                    src={state.previewImage}\n                />\n            </Modal>\n        </div>\n    ) : null\n}\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        account: state.account,\n        posts: state.post,\n        progress: state.progress,\n        friendData: state.friendData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: data => {\n            dispatch(actions.setData(data))\n        },\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Progress)\n)\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { withRouter } from 'react-router-dom'\nimport Card from 'antd/es/card'\nimport Button from 'antd/es/button'\nimport UserButton from '../../components/UserButton/UserButton'\nimport MasonryGrid from '../../components/MasonryGrid'\n\nconst Wallet = props => {\n    const account = props.pulledProfile || props.account\n    return account.wallet ? (\n        <div>\n            <MasonryGrid>\n                {account.wallet.map((money, index) => (\n                    <div\n                        onClick={() =>\n                            props.history.push('/profile/' + money.user)\n                        }\n                        key={index}\n                    >\n                        <Card\n                            type=\"inner\"\n                            style={{ width: '100%' }}\n                            bordered={false}\n                            extra={<Button type=\"primary\">Visit shop</Button>}\n                            title={\n                                <div>\n                                    <span style={{ fontWeight: 'bold' }}>\n                                        ${money.amount}\n                                    </span>\n                                    <UserButton id={money.user} />\n                                </div>\n                            }\n                        />\n                    </div>\n                ))}\n            </MasonryGrid>\n        </div>\n    ) : null\n}\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n        isAuthed: state.isAuthed,\n    }\n}\n\nexport default withRouter(connect(mapStateToProps)(Wallet))\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { withRouter } from 'react-router-dom'\nimport * as actions from '../../store/actions'\nimport Button from 'antd/es/button'\nimport Tag from 'antd/es/tag'\nimport TimeAgo from 'timeago-react'\nimport Avatar from 'antd/es/avatar'\nimport getAvatar from '../../utils/getAvatar'\nimport Rewards from '../../components/Rewards/Rewards'\nimport Collapse from 'antd/es/collapse'\nimport Badge from 'antd/es/badge'\nimport UserButton from '../../components/UserButton/UserButton'\nimport Descriptions from 'antd/es/descriptions'\nimport date from 'date-and-time'\nimport Typography from 'antd/es/typography'\n\nconst Transactions = props => {\n    props.setPageTitle({ main: 'Shop', sub: 'Transactions' })\n\n    const { account, transactionData, friendData } = props\n    if (!account || !account._id) return null\n\n    const transactions = account.transactions\n        .filter(item => transactionData[item])\n        .map(item => transactionData[item])\n\n    const columns = [\n        {\n            title: 'Type',\n            dataIndex: 'types',\n            key: 'types',\n            render: types => (\n                <>\n                    {types.map(tag => {\n                        let color = tag.length > 5 ? 'geekblue' : 'green'\n                        if (tag === 'loser') {\n                            color = 'volcano'\n                        }\n                        return (\n                            <Tag color={color} key={tag}>\n                                {tag.toUpperCase()}\n                            </Tag>\n                        )\n                    })}\n                </>\n            ),\n        },\n        {\n            title: 'With',\n            dataIndex: 'user',\n            key: 'user',\n            render: user => {\n                const friend = friendData[user]\n                return friend ? (\n                    <Button\n                        type=\"link\"\n                        style={{ padding: 0 }}\n                        onClick={() => props.history.push('/profile/' + user)}\n                    >\n                        <Avatar\n                            src={getAvatar(user, friend.image)}\n                            style={{ marginRight: '5px' }}\n                        />\n                        {friend.name + ' (' + friend._id + ')'}\n                    </Button>\n                ) : (\n                    user\n                )\n            },\n        },\n        {\n            title: 'Item',\n            dataIndex: 'perk',\n            key: 'perk',\n            render: perk =>\n                perk.simple || (\n                    <Rewards\n                        rewardKey={1}\n                        label=\"Rewards\"\n                        rewards={[{ rewards: [perk], key: 1 }]}\n                        readOnly={true}\n                    />\n                ),\n        },\n        {\n            title: 'Amount',\n            dataIndex: 'amount',\n            key: 'amount',\n            render: amount => (amount > 0 ? amount : ''),\n        },\n        {\n            title: 'Date',\n            dataIndex: 'date',\n            key: 'date',\n            render: date => <TimeAgo datetime={date} live />,\n        },\n        {\n            title: 'Progress',\n            dataIndex: 'progress',\n            key: 'progress',\n            render: progress => (\n                <Button\n                    type=\"link\"\n                    onClick={() =>\n                        props.history.push('/progresses/' + progress)\n                    }\n                >\n                    {progress}\n                </Button>\n            ),\n        },\n        {\n            title: 'Status',\n            key: 'status',\n            dataIndex: 'status',\n            render: (status, record) => {\n                if (status === 'Not confirmed') {\n                    return (\n                        <>\n                            <Button\n                                danger={true}\n                                type=\"link\"\n                                onClick={() =>\n                                    wsActions.cancelTransaction(\n                                        account._id,\n                                        record.transaction._id\n                                    )\n                                }\n                            >\n                                Cancel\n                            </Button>\n                            {record.transaction.from === account._id && (\n                                <Button\n                                    type=\"link\"\n                                    onClick={() =>\n                                        wsActions.confirmTransaction(\n                                            account._id,\n                                            record.transaction._id\n                                        )\n                                    }\n                                >\n                                    Confirm\n                                </Button>\n                            )}\n                        </>\n                    )\n                }\n                return status\n            },\n        },\n    ]\n\n    const tableData = []\n    let sorted = [...transactions]\n    sorted = sorted.sort((a, b) =>\n        new Date(a.date).getTime() < new Date(b.date).getTime() ? 1 : -1\n    )\n    for (let transaction of sorted) {\n        const types = []\n        if (transaction.from === account._id && transaction.to === account.id) {\n            types.push('internal')\n        }\n        if (transaction.to === account._id) {\n            if (transaction.progress) {\n                types.push('earn')\n                if (!transaction.amount) types.push('item')\n                else types.push('money')\n            } else {\n                if (transaction.item && transaction.amount) {\n                    types.push('buy')\n                    types.push('item')\n                } else {\n                    types.push('recieve gift')\n                    if (!transaction.amount) types.push('item')\n                    else types.push('money')\n                }\n            }\n        } else if (transaction.from === account._id) {\n            if (transaction.progress) {\n                types.push('pay')\n                if (!transaction.amount) types.push('item')\n                else types.push('money')\n            } else {\n                if (transaction.item && transaction.amount) {\n                    types.push('sell')\n                    types.push('item')\n                } else {\n                    types.push('send gift')\n                    if (!transaction.amount) types.push('item')\n                    else types.push('money')\n                }\n            }\n        }\n\n        const user =\n            transaction.to !== account._id ? transaction.to : transaction.from\n\n        tableData.push({\n            key: tableData.length,\n            types,\n            user,\n            perk: transaction.item,\n            amount: transaction.amount,\n            date: transaction.date,\n            progress: transaction.progress,\n            status: transaction.status,\n            transaction,\n        })\n    }\n    return (\n        <Collapse\n            expandIconPosition=\"right\"\n            style={{ marginBottom: '50px' }}\n            destroyInactivePanel={true}\n            accordion\n        >\n            {sorted.map((transaction, index) => {\n                const types = []\n                if (\n                    transaction.from === account._id &&\n                    transaction.to === account.id\n                ) {\n                    types.push('internal')\n                }\n                if (transaction.to === account._id) {\n                    if (transaction.progress) {\n                        types.push('earn')\n                        if (!transaction.amount) types.push('item')\n                        else types.push('money')\n                    } else {\n                        if (transaction.item && transaction.amount) {\n                            types.push('buy')\n                            types.push('item')\n                        } else {\n                            types.push('recieve gift')\n                            if (!transaction.amount) types.push('item')\n                            else types.push('money')\n                        }\n                    }\n                } else if (transaction.from === account._id) {\n                    if (transaction.progress) {\n                        types.push('pay')\n                        if (!transaction.amount) types.push('item')\n                        else types.push('money')\n                    } else {\n                        if (transaction.item && transaction.amount) {\n                            types.push('sell')\n                            types.push('item')\n                        } else {\n                            types.push('send gift')\n                            if (!transaction.amount) types.push('item')\n                            else types.push('money')\n                        }\n                    }\n                }\n\n                const user =\n                    transaction.to !== account._id\n                        ? transaction.to\n                        : transaction.from\n\n                tableData.push({\n                    key: tableData.length,\n                    types,\n                    user,\n                    perk: transaction.item,\n                    amount: transaction.amount,\n                    date: transaction.date,\n                    progress: transaction.progress,\n                    status: transaction.status,\n                    transaction,\n                })\n                const { item: reward } = transaction\n                return (\n                    <Collapse.Panel\n                        style={{ padding: 0 }}\n                        header={\n                            <>\n                                <div\n                                    style={{\n                                        display: 'flex',\n                                        alignItems: 'center',\n                                    }}\n                                >\n                                    <Badge\n                                        color={\n                                            transaction.status ===\n                                            'Not confirmed'\n                                                ? 'blue'\n                                                : transaction.status ===\n                                                  'Cancelled'\n                                                ? 'red'\n                                                : 'green'\n                                        }\n                                    />\n                                    <Typography.Paragraph\n                                        ellipsis={{ rows: 1 }}\n                                        style={{ display: 'inline', margin: 0 }}\n                                    >\n                                        {reward.mode === 'simple'\n                                            ? reward.simple\n                                            : reward.mode === 'money'\n                                            ? reward.money + ' (money)'\n                                            : reward.mode === 'item'\n                                            ? reward.itemName\n                                            : ''}\n                                    </Typography.Paragraph>\n                                    <UserButton\n                                        noName={true}\n                                        id={\n                                            transaction.to !== account._id\n                                                ? transaction.to\n                                                : transaction.from\n                                        }\n                                    />\n                                </div>\n                                <div>\n                                    <TimeAgo datetime={transaction.date} live />\n                                </div>\n                            </>\n                        }\n                        key={index}\n\n                        // extra={}\n                    >\n                        <Descriptions\n                            layout=\"vertical\"\n                            size=\"small\"\n                            bordered\n                            column={{\n                                xxl: 4,\n                                xl: 3,\n                                lg: 3,\n                                md: 3,\n                                sm: 2,\n                                xs: 1,\n                            }}\n                        >\n                            <Descriptions.Item label=\"Type\">\n                                {types.map(tag => {\n                                    let color =\n                                        tag.length > 5 ? 'geekblue' : 'green'\n                                    if (tag === 'loser') {\n                                        color = 'volcano'\n                                    }\n                                    return (\n                                        <Tag color={color} key={tag}>\n                                            {tag.toUpperCase()}\n                                        </Tag>\n                                    )\n                                })}\n                            </Descriptions.Item>\n                            <Descriptions.Item label=\"Transaction with\">\n                                <UserButton\n                                    id={\n                                        transaction.to !== account._id\n                                            ? transaction.to\n                                            : transaction.from\n                                    }\n                                />\n                            </Descriptions.Item>\n\n                            <Descriptions.Item label=\"Item\">\n                                {\n                                    <Rewards\n                                        onlyButton={true}\n                                        rewardKey={1}\n                                        label=\"Rewards\"\n                                        rewards={[\n                                            {\n                                                rewards: [transaction.item],\n                                                key: 1,\n                                            },\n                                        ]}\n                                        readOnly={true}\n                                    />\n                                }\n                            </Descriptions.Item>\n\n                            {transaction.amount && (\n                                <Descriptions.Item label=\"Amount\">\n                                    {transaction.amount}\n                                </Descriptions.Item>\n                            )}\n                            <Descriptions.Item label=\"Date\">\n                                {date.format(\n                                    new Date(transaction.date),\n                                    'YYYY/MM/DD HH:mm:ss'\n                                )}\n                            </Descriptions.Item>\n\n                            {transaction.progress && transaction.progressId && (\n                                <Descriptions.Item label=\"Progress\">\n                                    <Button\n                                        type=\"text\"\n                                        onClick={() =>\n                                            props.history.push(\n                                                '/progresses/' +\n                                                    transaction.progressId\n                                            )\n                                        }\n                                    >\n                                        {transaction.progress}\n                                    </Button>\n                                </Descriptions.Item>\n                            )}\n                            <Descriptions.Item label=\"Status\">\n                                {status === 'Not confirmed' ? (\n                                    <>\n                                        <Button\n                                            danger={true}\n                                            type=\"link\"\n                                            onClick={() =>\n                                                wsActions.cancelTransaction(\n                                                    account._id,\n                                                    record.transaction._id\n                                                )\n                                            }\n                                        >\n                                            Cancel\n                                        </Button>\n                                        {record.transaction.from ===\n                                            account._id && (\n                                            <Button\n                                                type=\"link\"\n                                                onClick={() =>\n                                                    wsActions.confirmTransaction(\n                                                        account._id,\n                                                        record.transaction._id\n                                                    )\n                                                }\n                                            >\n                                                Confirm\n                                            </Button>\n                                        )}\n                                    </>\n                                ) : (\n                                    status || 'Confirmed'\n                                )}\n                            </Descriptions.Item>\n                        </Descriptions>\n                    </Collapse.Panel>\n                )\n            })}\n        </Collapse>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n        transactionData: state.transactionData,\n        friendData: state.friendData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Transactions)\n)\n","import React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport Tabs from 'antd/es/tabs'\nimport Wallet from './Wallet'\nimport Transactions from './Transactions'\nimport WishlistAndPerks from './WishlistAndPerks'\n\nconst Shop = props => {\n    useEffect(() => {\n        props.setPageTitle({ main: 'Shop', sub: 'My items' })\n    }, [])\n\n    return props.account._id ? (\n        <div>\n            <Tabs\n                style={{\n                    background: 'transparent',\n                    boxShadow: 'none',\n                    margin: '0',\n                    marginTop: '-15px',\n                }}\n            >\n                <Tabs.TabPane tab=\"My shop\" key={1}>\n                    <WishlistAndPerks\n                        mode=\"shop\"\n                        listKey=\"perks\"\n                        account={props.account}\n                    />\n                </Tabs.TabPane>\n                <Tabs.TabPane tab=\"Wallet\" key={3}>\n                    <Wallet />\n                </Tabs.TabPane>\n                <Tabs.TabPane tab=\"Transactions\" key={4}>\n                    <Transactions />\n                </Tabs.TabPane>\n            </Tabs>\n        </div>\n    ) : (\n        <span />\n    )\n}\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Shop)\n","import React, { useEffect, useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport isEqual from 'lodash.isequal'\n\nimport Post from '../../components/Post/Post'\n\nimport UserButton from '../../components/UserButton/UserButton'\nimport Divider from 'antd/es/divider'\n\nconst DashboardPosts = props => {\n    const {\n        account,\n        friendData,\n        statePosts,\n        progressData,\n        groupData,\n        currentPosts,\n    } = props\n\n    const [posts, setPosts] = useState([])\n    const [startTime] = useState(new Date().getTime())\n\n    const sortPosts = (a, b) => {\n        const aN = a.notifications.filter(item => item.user !== account._id)\n        const bN = b.notifications.filter(item => item.user !== account._id)\n        if (aN.length === 0 && bN.length > 0) return 1\n        else if (aN.length > 0 && bN.length === 0) return -1\n        else if (aN.length === 0 && bN.length === 0) return 0\n        else\n            return new Date(aN[0].date).getTime() <\n                new Date(bN[0].date).getTime()\n                ? 1\n                : -1\n    }\n\n    const sortNotifications = (a, b) =>\n        new Date(a.date).getTime() < new Date(b.date).getTime() ? 1 : -1\n\n    useEffect(() => {\n        if (currentPosts) {\n            const newPosts = currentPosts\n                .filter(item => statePosts[item])\n                .map(item => statePosts[item])\n\n            const newUnseenPosts = []\n            const newOldPosts = []\n            let oldPosts = [...posts]\n            for (let post of newPosts) {\n                let oldPostIndex = oldPosts.findIndex(item => {\n                    return item._id.toString() === post._id.toString()\n                })\n                if (oldPostIndex === -1) {\n                    if (\n                        post.notifications &&\n                        post.notifications.length > 0 &&\n                        new Date(post.notifications[0].date).getTime() >\n                            startTime\n                    ) {\n                        newUnseenPosts.push(post)\n                    } else {\n                        newOldPosts.push(post)\n                    }\n                } else {\n                    oldPosts[oldPostIndex] = post\n                }\n            }\n\n            for (let post of newOldPosts) {\n                const index = oldPosts.findIndex(item => {\n                    if (\n                        item &&\n                        item.notifications &&\n                        item.notifications.length > 0\n                    ) {\n                        return (\n                            new Date(item.notifications[0]).getTime() >\n                            new Date(post.notifications[0]).getTime()\n                        )\n                    } else return false\n                })\n                if (index === -1) {\n                    oldPosts.push(post)\n                } else {\n                    oldPosts.splice(index, 0, post)\n                }\n            }\n\n            let resultPosts = [...newUnseenPosts, ...oldPosts]\n            if (posts.length === 0) {\n                resultPosts = resultPosts.sort(sortPosts)\n            }\n            setPosts(resultPosts)\n        }\n    }, [currentPosts, statePosts])\n    if (!account._id) return null\n\n    let lastNotifications = []\n    for (let progress of account.progresses) {\n        if (progressData[progress])\n            lastNotifications = [\n                ...lastNotifications,\n                ...progressData[progress].notifications.filter(\n                    item =>\n                        item.code === 'add post' && item.user !== account._id\n                ),\n            ]\n    }\n\n    for (let group of account.groups) {\n        if (groupData[group])\n            lastNotifications = [\n                ...lastNotifications,\n                ...groupData[group].notifications.filter(\n                    item =>\n                        item.code === 'add post' && item.user !== account._id\n                ),\n            ]\n    }\n\n    lastNotifications = lastNotifications\n        .sort(sortNotifications)\n        .map(item => item.details.postId)\n        .slice(0, 10)\n\n    const neededPosts = [\n        ...new Set([\n            ...account.followPosts,\n            ...account.myPosts,\n            ...posts.map(post => post._id),\n            ...lastNotifications,\n        ]),\n    ]\n    if (!isEqual(currentPosts, neededPosts))\n        props.setData({ currentPosts: neededPosts })\n\n    props.setPageTitle({ main: 'Dashboard', sub: '' })\n\n    return posts.map(item => {\n        let text = null\n        const nots = item.notifications.filter(not => not.user !== account._id)\n        const not = nots.length > 0 ? nots[0] : null\n        if (not) {\n            switch (not.code) {\n                case 'edit wishlist item':\n                    text = 'edited item in wishlist.'\n\n                    break\n                case 'edit goal':\n                    text = 'edited goal.'\n\n                    break\n                case 'edit perk':\n                    text = 'edited item in shop.'\n\n                    break\n\n                case 'comment':\n                    text = 'added a comment.'\n\n                    break\n                case 'edit comment':\n                    text = 'edited a comment.'\n\n                    break\n                case 'like':\n                    text = 'added a like.'\n\n                    break\n                case 'dislike':\n                    text = 'removed a like.'\n\n                    break\n                default:\n                    text = null\n                    break\n            }\n        }\n        return (\n            <>\n                <div\n                    style={{\n                        height: '5px',\n                        background: '#ddd',\n                        width: 'calc(100% + 8px)',\n                        position: 'absolute',\n                        left: '-8px',\n                    }}\n                />\n                <div style={{ paddingTop: '10px' }}>\n                    {text && (\n                        <>\n                            <span>\n                                <UserButton\n                                    id={not.user}\n                                    noAva={true}\n                                    span={true}\n                                    style={{ fontWeight: 'bold' }}\n                                />{' '}\n                                {text}\n                            </span>\n                            <Divider\n                                type=\"horizontal\"\n                                style={{ margin: '5px 0' }}\n                            />\n                        </>\n                    )}\n                    <Post\n                        friendData={friendData}\n                        account={account}\n                        post={item}\n                        progressData={progressData}\n                        groupData={groupData}\n                    />\n                </div>\n            </>\n        )\n    })\n}\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        account: state.account,\n        statePosts: state.post,\n        progress: state.progress,\n        friendData: state.friendData,\n        progressData: state.progressData,\n        groupData: state.groupData,\n        currentPosts: state.currentPosts,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: data => {\n            dispatch(actions.setData(data))\n        },\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(DashboardPosts)\n)\n","import React from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\n\nimport Card from 'antd/es/card'\nimport Button from 'antd/es/button'\nimport UserButton from '../../components/UserButton/UserButton'\n\nconst DashboardEvents = props => {\n    const { lastNotifications } = props\n    const getRewardText = item =>\n        item.details.reward.money\n            ? '$' + item.details.reward.money\n            : item.details.reward.simple || item.details.reward.itemName\n    return lastNotifications.map(item => {\n        let text = null\n\n        switch (item.code) {\n            case 'change name':\n                text = (\n                    <span>\n                        {' '}\n                        <UserButton id={item.user} /> changed name.\n                    </span>\n                )\n                break\n            case 'delete account':\n                text = (\n                    <span>\n                        {item.user}\n                        deleted account.\n                    </span>\n                )\n                break\n            case 'friend request':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> wants to become friends\n                        with you.\n                    </span>\n                )\n                break\n            case 'friend add':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> and{' '}\n                        <UserButton id={item.details.friend} /> became friends.\n                    </span>\n                )\n                break\n            case 'unfriend':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> and{' '}\n                        <UserButton id={item.details.friend} /> stopped being\n                        friends.\n                    </span>\n                )\n                break\n            case 'add wishlist item':\n            case 'edit wishlist item':\n                text = (\n                    <span>\n                        <UserButton id={item.user} />{' '}\n                        {item.code === 'add wishlist item'\n                            ? 'added to wishlist a new item'\n                            : 'edited in wishlist'}{' '}\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/wishlist/${item.user}/${\n                                        item.details.itemId\n                                    }`\n                                )\n                            }\n                        >\n                            {item.details.itemName}\n                        </Button>{' '}\n                        .\n                    </span>\n                )\n                break\n            case 'delete wishlist item':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> deleted{' '}\n                        {item.details.itemName} from wishlist.\n                    </span>\n                )\n                break\n            case 'add goal':\n            case 'edit goal':\n                text = (\n                    <span>\n                        <UserButton id={item.user} />{' '}\n                        {item.code === 'add goal'\n                            ? 'added a new goal'\n                            : 'edited goal'}{' '}\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/goals/${item.user}/${item.details.itemId}`\n                                )\n                            }\n                        >\n                            {item.details.itemName}\n                        </Button>{' '}\n                        .\n                    </span>\n                )\n                break\n            case 'delete goal':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> deleted{' '}\n                        {item.details.itemName} from goals.\n                    </span>\n                )\n                break\n            case 'add perk':\n            case 'edit perk':\n                text = (\n                    <span>\n                        <UserButton id={item.user} />{' '}\n                        {item.code === 'add perk'\n                            ? 'added to shop a new item'\n                            : 'edited in shop'}{' '}\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/shop/${item.user}/${item.details.itemId}`\n                                )\n                            }\n                        >\n                            {item.details.itemName}\n                        </Button>{' '}\n                        .\n                    </span>\n                )\n                break\n            case 'delete perk':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> deleted{' '}\n                        {item.details.itemName} from shop.\n                    </span>\n                )\n                break\n            case 'buy perk':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> bought\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/shop/${item.user}/${item.details.itemId}`\n                                )\n                            }\n                        >\n                            {item.details.itemName} (${item.details.price})\n                        </Button>{' '}\n                        from <UserButton id={item.details.owner} /> .\n                    </span>\n                )\n                break\n            case 'cancel transaction':\n            case 'confirm transaction':\n                text = (\n                    <span>\n                        <UserButton id={item.user} />{' '}\n                        {item.code === 'cancel transaction'\n                            ? 'cancelled'\n                            : 'confirmed'}\n                        purchase of\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/shop/${item.user}/${item.details.itemId}`\n                                )\n                            }\n                        >\n                            {item.details.itemName} (${item.details.price})\n                        </Button>{' '}\n                        by <UserButton id={item.details.buyer} /> .\n                    </span>\n                )\n                break\n            case 'start progress':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> started participating in\n                        progress\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/progresses/${item.details.itemId}`\n                                )\n                            }\n                        >\n                            {item.details.itemName}\n                        </Button>{' '}\n                        as {item.details.as}.\n                    </span>\n                )\n                break\n            case 'approve milestone':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> approved milestone{' '}\n                        {item.details.itemName} in\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/progresses/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </Button>\n                        .\n                    </span>\n                )\n                break\n            case 'disapprove milestone':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> disapproved milestone{' '}\n                        {item.details.itemName} in\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/progresses/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </Button>\n                        .\n                    </span>\n                )\n                break\n            case 'finish progress':\n                text = (\n                    <span>\n                        Progress{' '}\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/progresses/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </Button>\n                        was approved and finished.\n                    </span>\n                )\n                break\n            case 'milestone finish':\n                text = (\n                    <span>\n                        Milestone {item.details.itemName} in progress{' '}\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/progresses/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </Button>\n                        was approved and finished.\n                    </span>\n                )\n                break\n            case 'get reward':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> recieved{' '}\n                        {getRewardText(item)} as a reward from{' '}\n                        <UserButton id={item.details.from} /> in progress\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/progresses/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </Button>\n                        .\n                    </span>\n                )\n                break\n            case 'leave progress':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> left progress{' '}\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/progresses/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </Button>\n                        .\n                    </span>\n                )\n                break\n            case 'edit progress':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> edited progress{' '}\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/progresses/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </Button>\n                        {item.details.addedAccounts.length > 0 ? (\n                            <>\n                                {' '}\n                                and added{' '}\n                                {item.details.addedAccounts.map(ac => (\n                                    <UserButton id={ac} />\n                                ))}{' '}\n                            </>\n                        ) : (\n                            ''\n                        )}\n                        {item.details.droppedAccounts.length > 0 ? (\n                            <>\n                                {' '}\n                                and removed{' '}\n                                {item.details.droppedAccounts.map(ac => (\n                                    <UserButton id={ac} />\n                                ))}{' '}\n                            </>\n                        ) : (\n                            ''\n                        )}\n                        .\n                    </span>\n                )\n                break\n            case 'remove from progress':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> removed{' '}\n                        <UserButton id={item.details.account} /> from progress\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/progresses/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </Button>\n                        .\n                    </span>\n                )\n                break\n            case 'add to progress':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> added{' '}\n                        <UserButton id={item.details.account} /> to progress\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/progresses/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </Button>\n                        .\n                    </span>\n                )\n                break\n            case 'add reward':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> added{' '}\n                        {getRewardText(item)} as a reward for\n                        {!item.details.for || item.details.for.length === 0\n                            ? 'all '\n                            : item.details.for.map(account => (\n                                  <>\n                                      <UserButton id={account} />,\n                                  </>\n                              ))}\n                        in progress\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/progresses/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </Button>\n                        .\n                    </span>\n                )\n                break\n            case 'delete reward':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> removed{' '}\n                        {getRewardText(item)} as a reward for{' '}\n                        {!item.details.for || item.details.for.length === 0\n                            ? 'all '\n                            : item.details.for.map(account => (\n                                  <>\n                                      <UserButton id={account} />,\n                                  </>\n                              ))}\n                        in progress\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/progresses/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </Button>\n                        .\n                    </span>\n                )\n                break\n            default:\n                console.log(item)\n                text = 'New event'\n                break\n        }\n        return <Card>{text}</Card>\n    })\n}\nconst mapStateToProps = state => {\n    return {\n        lastNotifications: state.lastNotifications,\n    }\n}\n\nexport default withRouter(connect(mapStateToProps)(DashboardEvents))\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport * as wsActions from '../../websocketActions'\n\nimport Tabs from 'antd/es/tabs'\nimport DashboardPosts from './DashboardPosts'\nimport DashboardEvents from './DashboardEvents'\nimport Badge from 'antd/es/badge'\n\nconst Progress = props => {\n    const { account, lastNotifications } = props\n\n    if (!account._id) return null\n\n    props.setPageTitle({ main: 'Dashboard', sub: '' })\n\n    let numberOfUnseenNots = 0\n    for (let not of lastNotifications) {\n        if (parseInt(not.notId) > parseInt(account.lastSeenNot || 0))\n            numberOfUnseenNots++\n    }\n\n    return (\n        <div className=\"contentDiv\">\n            <Tabs\n                onChange={activeTab => {\n                    if (activeTab === 'events') {\n                        const last = parseInt(\n                            lastNotifications.reduce((res, not) => {\n                                return parseInt(not.notId) > parseInt(res)\n                                    ? not.notId\n                                    : res\n                            }, 0)\n                        )\n                        if (\n                            lastNotifications.length > 0 &&\n                            parseInt(account.lastSeenNot) !== last\n                        ) {\n                            wsActions.setLastSeenNot(account._id, last)\n                        }\n                    }\n                }}\n            >\n                <Tabs.TabPane tab=\"Posts\" key=\"posts\">\n                    <DashboardPosts />\n                </Tabs.TabPane>\n\n                <Tabs.TabPane\n                    tab={\n                        <Badge count={numberOfUnseenNots} offset={[10, 0]}>\n                            Events\n                        </Badge>\n                    }\n                    key=\"events\"\n                >\n                    <DashboardEvents />\n                </Tabs.TabPane>\n            </Tabs>\n        </div>\n    )\n}\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n        lastNotifications: state.lastNotifications,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Progress)\n","import { webSocket } from '../containers/ConnectWebsocket/ConnectWebsocket'\n\nexport const setLastSeenNot = (accountId, notId) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'setLastSeenNot',\n                accountId,\n                notId,\n            })\n        )\n    }\n}\n","import React, { useState } from 'react'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport axios from 'axios'\nimport InfiniteScroll from 'react-infinite-scroller'\nimport message from 'antd/es/message'\n\nimport Input from 'antd/es/input'\nimport UserButton from '../../components/UserButton/UserButton'\nimport MasonryGrid from '../../components/MasonryGrid'\nimport MasonryCard from '../../components/MasonryCard'\n\nconst Explore = props => {\n    const [isSearching, setIsSearching] = useState(false)\n    const [foundProgresses, setFoundProgresses] = useState([])\n    const [progresses, setProgresses] = useState([])\n    const [noMore, setNoMore] = useState(false)\n    const [noMorePopular, setNoMorePopular] = useState(false)\n    const [searchValue, setSearchValue] = useState('')\n    const [friendData, setFriendData] = useState({})\n\n    const onSearch = (value, noNoMore) => {\n        if (!noMore || noNoMore) {\n            setNoMore(true)\n            axios\n                .post('/api/explore/search', {\n                    value: value || searchValue,\n                    skip: noNoMore ? 0 : foundProgresses.length,\n                })\n                .then(res => {\n                    if (res.data.success) {\n                        setNoMore(res.data.noMore)\n                        setFoundProgresses(res.data.progresses)\n                        if (res.data.progresses.length === 0)\n                            message.warning('There are no progresses found.')\n                        const newFriendData = {}\n                        for (let friend of res.data.friends) {\n                            newFriendData[friend._id] = friend\n                        }\n                        setFriendData(newFriendData)\n                    } else {\n                        if (res.data.errorCode) {\n                            message.error(\n                                'Something is wrong with the data. Please try one more time with new data.'\n                            )\n                        }\n                    }\n                })\n                .catch(err => {})\n        }\n    }\n\n    const onGetPopular = () => {\n        console.log('lets get more')\n        console.log(noMorePopular)\n        if (!noMorePopular) {\n            setNoMorePopular(true)\n            axios\n                .post('/api/explore/popular', {\n                    skip: progresses.length,\n                })\n                .then(res => {\n                    if (res.data.success) {\n                        setNoMorePopular(res.data.noMore)\n                        setProgresses([...progresses, ...res.data.progresses])\n                        const newFriendData = {}\n                        for (let friend of res.data.friends) {\n                            newFriendData[friend._id] = friend\n                        }\n                        setFriendData(newFriendData)\n                    } else {\n                        if (res.data.errorCode) {\n                            message.error(\n                                'Something is wrong with the data. Please try one more time with new data.'\n                            )\n                        }\n                    }\n                })\n                .catch(err => {})\n        }\n    }\n\n    props.setPageTitle({ main: 'Explore', sub: '' })\n    console.log('we are here')\n    console.log(noMorePopular)\n    return (\n        <div>\n            <Input.Search\n                placeholder=\"Find great progresses!\"\n                onSearch={value => {\n                    if (value) {\n                        setIsSearching(true)\n                        if (value !== searchValue) {\n                            setNoMore(false)\n                            setFoundProgresses([])\n                            setSearchValue(value)\n                            onSearch(value, true)\n                        }\n                    } else {\n                        setNoMore(false)\n                        setSearchValue(value)\n                        setIsSearching(false)\n                    }\n                }}\n                onChange={e => {\n                    if (!e.target.value) {\n                        setNoMore(false)\n                        setFoundProgresses([])\n                        setIsSearching(false)\n                        setSearchValue('')\n                    }\n                }}\n                enterButton\n                allowClear\n                style={{ maxWidth: '500px' }}\n            />\n            {isSearching ? (\n                foundProgresses.length > 0 ? (\n                    <InfiniteScroll\n                        pageStart={0}\n                        loadMore={onSearch(searchValue)}\n                        hasMore={!noMore}\n                        loader={\n                            <div className=\"loader\" key={0}>\n                                Loading ...\n                            </div>\n                        }\n                    >\n                        <MasonryGrid>\n                            {foundProgresses.map((item, index) => (\n                                <MasonryCard\n                                    key={index}\n                                    onClickLink={'/progresses/' + item._id}\n                                    images={item.goal.images}\n                                    body={\n                                        <>\n                                            <UserButton\n                                                noName={true}\n                                                id={item.owner}\n                                                friendDataExp={friendData}\n                                            />\n                                            <span\n                                                style={{ fontWeight: 'bold' }}\n                                            >\n                                                {item.name}\n                                            </span>\n                                        </>\n                                    }\n                                />\n                            ))}\n                        </MasonryGrid>\n                    </InfiniteScroll>\n                ) : null\n            ) : (\n                <InfiniteScroll\n                    pageStart={0}\n                    loadMore={onGetPopular}\n                    hasMore={!noMorePopular}\n                    loader={\n                        <div className=\"loader\" key={0}>\n                            Loading ...\n                        </div>\n                    }\n                >\n                    <MasonryGrid>\n                        {progresses.map((item, index) => (\n                            <MasonryCard\n                                key={index}\n                                onClickLink={'/progresses/' + item._id}\n                                images={item.goal.images}\n                                body={\n                                    <>\n                                        <UserButton\n                                            noName={true}\n                                            id={item.owner}\n                                            friendDataExp={friendData}\n                                        />\n                                        <span style={{ fontWeight: 'bold' }}>\n                                            {item.name}\n                                        </span>\n                                    </>\n                                }\n                            />\n                        ))}\n                    </MasonryGrid>\n                </InfiniteScroll>\n            )}\n        </div>\n    )\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n        setData: data => dispatch(actions.setData(data)),\n    }\n}\n\nexport default connect(\n    null,\n    mapDispatchToProps\n)(Explore)\n","import React from 'react'\n\nimport * as wsActions from '../websocketActions'\nimport Menu from 'antd/es/menu'\nimport Dropdown from 'antd/es/dropdown'\nimport { DownOutlined } from '@ant-design/icons'\nimport Button from 'antd/es/button'\nimport MoreIcon from './UI/MoreIcon'\n\nconst FriendActionButton = props => {\n    const {\n        invitingFriends,\n        invitedFriends,\n        realFriends,\n        _id,\n        accountId,\n    } = props\n    if (!accountId) return []\n\n    if (accountId === _id) return [props.additionalButton]\n\n    const menu = (\n        <Menu onClick={({ domEvent }) => domEvent.stopPropagation()}>\n            {props.additionalButtons &&\n                props.additionalButtons.map((button, index) => (\n                    <Menu.Item key={index + 100} onClick={button.onClick}>\n                        {button.title}\n                    </Menu.Item>\n                ))}\n            {invitingFriends.find(item => item.friend === _id) ? (\n                <Menu.Item\n                    key=\"2\"\n                    onClick={() => wsActions.unfriend(accountId, _id)}\n                    danger={true}\n                >\n                    Decline\n                </Menu.Item>\n            ) : invitedFriends.find(item => item.friend === _id) ? (\n                <Menu.Item\n                    key=\"3\"\n                    onClick={() => wsActions.unfriend(accountId, _id)}\n                    danger={true}\n                >\n                    Cancel invitation\n                </Menu.Item>\n            ) : realFriends.find(item => item.friend === _id) ? (\n                <Menu.Item\n                    key=\"4\"\n                    onClick={() => wsActions.unfriend(accountId, _id)}\n                    danger={true}\n                >\n                    Unfriend\n                </Menu.Item>\n            ) : null}\n        </Menu>\n    )\n    return invitingFriends.find(item => item.friend === _id) ? (\n        <Dropdown.Button\n            type=\"primary\"\n            overlay={menu}\n            trigger={['click', 'hover']}\n            onClick={e => {\n                e.preventDefault()\n                e.stopPropagation()\n                wsActions.acceptFriend(accountId, _id)\n            }}\n        >\n            Accept\n        </Dropdown.Button>\n    ) : ![...realFriends, ...invitingFriends, ...invitedFriends].find(\n          item => item.friend === _id\n      ) ? (\n        <Dropdown.Button\n            type=\"primary\"\n            overlay={menu}\n            trigger={['click', 'hover']}\n            onClick={e => {\n                e.preventDefault()\n                e.stopPropagation()\n                wsActions.addFriend(accountId, _id)\n            }}\n        >\n            Add\n        </Dropdown.Button>\n    ) : (\n        <Dropdown overlay={menu} trigger={['click']}>\n            <a\n                // className=\"ant-dropdown-link\"\n                onClick={e => {\n                    e.preventDefault()\n                    e.stopPropagation()\n                }}\n            >\n                <Button type={props.asText ? 'primary' : 'link'}>\n                    {props.asText ? (\n                        <>\n                            Actions <DownOutlined />\n                        </>\n                    ) : (\n                        <MoreIcon />\n                    )}\n                </Button>\n            </a>\n        </Dropdown>\n    )\n}\n\nexport default FriendActionButton\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport * as actions from '../store/actions'\nimport { withRouter } from 'react-router-dom'\n\nimport Card from 'antd/es/card'\nimport friendActionButton from './FriendActionButton'\nimport UserButton from './UserButton/UserButton'\n\nconst FriendCard = props => {\n    const friendActions = friendActionButton({\n        accountId: props.account ? props.account._id : '',\n        realFriends: props.realFriends,\n        invitedFriends: props.invitedFriends,\n        invitingFriends: props.invitingFriends,\n        _id: props.friend._id,\n        asIcons: true,\n\n        additionalButtons: [\n            {\n                title: 'See profile',\n                onClick: () =>\n                    props.history.push('/profile/' + props.friend._id),\n            },\n        ],\n    })\n\n    return (\n        <Card\n            style={{ width: '100%' }}\n            type=\"inner\"\n            bordered={false}\n            extra={friendActions}\n            title={<UserButton id={props.friend._id} size={50} />}\n        />\n    )\n}\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n        isAuthed: state.isAuthed,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: (data, pulledFrom) =>\n            dispatch(actions.setData(data, pulledFrom)),\n        tryAuth: (props, forceAuth) =>\n            dispatch(actions.tryAuth(props, forceAuth)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(FriendCard)\n)\n","import React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport * as wsActions from '../../websocketActions'\nimport Card from 'antd/es/card'\nimport Button from 'antd/es/button'\nimport Modal from 'antd/es/modal'\n\nimport Input from 'antd/es/input'\nimport Form from 'antd/es/form'\n\nimport FriendCard from '../../components/FriendCard'\nimport { nicknameRules } from '../../constants/fieldRules'\n\nconst AddFriends = props => {\n    useEffect(() => {\n        props.setFriendSearchResult({})\n    }, [props.addFriendOpen])\n\n    const {\n        addFriendOpen,\n        setAddFriendOpen,\n        searchResult,\n        realFriends,\n        invitedFriends,\n        invitingFriends,\n    } = props\n    const layout = {\n        labelCol: { span: 8 },\n        wrapperCol: { span: 16 },\n    }\n    const tailLayout = {\n        wrapperCol: { offset: 8, span: 16 },\n    }\n\n    return (\n        <Modal\n            title=\"Add friend\"\n            visible={addFriendOpen}\n            maskClosable\n            closable\n            onCancel={() => setAddFriendOpen(false)}\n            footer={\n                <Button key=\"back\" onClick={() => setAddFriendOpen(false)}>\n                    Return\n                </Button>\n            }\n            destroyOnClose={true}\n        >\n            <p>To find a friend you need to enter your friend's nickname.</p>\n            <Form\n                name=\"dynamic_form_nest_item\"\n                onFinish={value => wsActions.searchFriends(value.search)}\n                autoComplete=\"off\"\n                {...layout}\n            >\n                <Form.Item label=\"Search\" name=\"search\" rules={nicknameRules}>\n                    <Input placeholder=\"Must be more than 2 characters long\" />\n                </Form.Item>\n\n                <Form.Item {...tailLayout}>\n                    <Button type=\"primary\" htmlType=\"submit\" size=\"large\">\n                        Search\n                    </Button>\n                </Form.Item>\n            </Form>\n            {searchResult._id && (\n                <Card title=\"Search result\">\n                    <FriendCard\n                        {...props}\n                        friend={searchResult}\n                        realFriends={realFriends}\n                        invitingFriends={invitingFriends}\n                        invitedFriends={invitedFriends}\n                    />\n                </Card>\n            )}\n        </Modal>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        searchResult: state.friendSearchResult,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setFriendSearchResult: data =>\n            dispatch(actions.setFriendSearchResult(data)),\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(AddFriends)\n","import React from 'react'\nimport { withRouter } from 'react-router-dom'\nimport Masonry from 'react-masonry-css'\nimport { friendsBreakPoints } from '../../utils/masonryBreakPoints'\n\nimport FriendCard from '../../components/FriendCard'\nimport MasonryGrid from '../../components/MasonryGrid'\n\nconst pendingFriends = props => {\n    const { realFriends, invitedFriends, invitingFriends } = props\n    return (\n        <>\n            {invitingFriends.length > 0 && (\n                <>\n                    <h2>People invited me to be friends</h2>\n                    <MasonryGrid friends={true}>\n                        {invitingFriends.map(friend => (\n                            <FriendCard\n                                key={friend._id}\n                                {...props}\n                                friend={friend}\n                                realFriends={realFriends}\n                                invitingFriends={invitingFriends}\n                                invitedFriends={invitedFriends}\n                            />\n                        ))}\n                    </MasonryGrid>\n                </>\n            )}\n\n            {invitedFriends.length > 0 && (\n                <>\n                    <h2>I invited these people</h2>\n                    <MasonryGrid friends={true}>\n                        {invitedFriends.map(friend => (\n                            <FriendCard\n                                key={friend._id}\n                                {...props}\n                                friend={friend}\n                                realFriends={realFriends}\n                                invitingFriends={invitingFriends}\n                                invitedFriends={invitedFriends}\n                            />\n                        ))}\n                    </MasonryGrid>\n                </>\n            )}\n        </>\n    )\n}\n\nexport default withRouter(pendingFriends)\n","import React, { useState, useEffect } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\n\nimport FriendCard from '../../components/FriendCard'\nimport AddCard from '../../components/AddCard/AddCard'\nimport AddFriends from './AddFriends'\nimport PendingFriends from './PendingFriends'\nimport Tabs from 'antd/es/tabs'\nimport Empty from 'antd/es/empty'\nimport Badge from 'antd/es/badge'\nimport Masonry from 'react-masonry-css'\nimport { friendsBreakPoints } from '../../utils/masonryBreakPoints'\nimport MasonryGrid from '../../components/MasonryGrid'\n\nconst Friends = props => {\n    const [addFriendOpen, setAddFriendOpen] = useState()\n\n    useEffect(() => {\n        props.setPageTitle({ main: 'Friends', sub: '' })\n    }, [])\n\n    const { account, friendData } = props\n    if (!account._id) return null\n    const realFriends = [],\n        invitedFriends = [],\n        invitingFriends = []\n\n    if (account.friends) {\n        for (let friend of account.friends) {\n            const fullFriend = { ...friendData[friend.friend], ...friend }\n            if (fullFriend) {\n                if (fullFriend.status === 'friend') realFriends.push(fullFriend)\n                else if (fullFriend.status === 'invited')\n                    invitedFriends.push(fullFriend)\n                else if (fullFriend.status === 'inviting')\n                    invitingFriends.push(fullFriend)\n            }\n        }\n    }\n\n    const confirmedFriends =\n        realFriends.length > 0 ? (\n            <MasonryGrid friends={true}>\n                {realFriends.map(friend => (\n                    <FriendCard\n                        key={friend._id}\n                        {...props}\n                        friend={friend}\n                        realFriends={realFriends}\n                        invitingFriends={invitingFriends}\n                        invitedFriends={invitedFriends}\n                    />\n                ))}\n            </MasonryGrid>\n        ) : (\n            <Empty\n                image=\"https://websiter.s3.us-east-2.amazonaws.com/image+4.jpg\"\n                imageStyle={{ height: '250px', marginTop: '50px' }}\n                description={false}\n            />\n        )\n    return (\n        <div>\n            <AddCard\n                title=\"Add friend\"\n                sub=\"Find by nickname\"\n                action={() => setAddFriendOpen(true)}\n            />\n            {invitedFriends.length > 0 || invitingFriends.length > 0 ? (\n                <Tabs>\n                    <Tabs.TabPane key=\"confirmed\" tab=\"Confrmed\">\n                        {confirmedFriends}\n                    </Tabs.TabPane>\n\n                    <Tabs.TabPane\n                        tab={\n                            <Badge\n                                count={invitingFriends.length}\n                                offset={[10, 0]}\n                            >\n                                Pending\n                            </Badge>\n                        }\n                        key=\"pending\"\n                    >\n                        <PendingFriends\n                            realFriends={realFriends}\n                            invitedFriends={invitedFriends}\n                            invitingFriends={invitingFriends}\n                        />\n                    </Tabs.TabPane>\n                </Tabs>\n            ) : (\n                confirmedFriends\n            )}\n            <AddFriends\n                addFriendOpen={addFriendOpen}\n                setAddFriendOpen={setAddFriendOpen}\n                realFriends={realFriends}\n                invitedFriends={invitedFriends}\n                invitingFriends={invitingFriends}\n                account={account}\n            />\n        </div>\n    )\n}\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n        friendData: state.friendData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Friends)\n)\n","import React, { useEffect, useState } from 'react'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport PageHeader from 'antd/es/page-header'\nimport Form from 'antd/es/form'\nimport Button from 'antd/es/button'\nimport Input from 'antd/es/input'\n\nimport { withRouter } from 'react-router-dom'\nimport Card from 'antd/es/card'\nimport Upload from 'antd/es/upload'\nimport * as classes from './Account.module.css'\n\nimport LoadingOutlined from '@ant-design/icons/LoadingOutlined'\nimport PlusOutlined from '@ant-design/icons/PlusOutlined'\n\nimport { uploadFile } from '../../utils/uploadFile'\nimport Avatar from 'antd/es/avatar'\nimport getAvatar from '../../utils/getAvatar'\nimport Modal from 'antd/es/modal'\nimport { accountNameRules } from '../../constants/fieldRules'\nimport * as wsActions from '../../websocketActions'\nimport message from 'antd/es/message'\nimport Dropdown from 'antd/es/dropdown'\nimport Menu from 'antd/es/menu'\n\nconst Account = props => {\n    const [deleteVisible, setDeleteVisible] = useState()\n    const [deleteField, setDeleteField] = useState('')\n    const { account } = props\n\n    useEffect(() => {\n        props.setPageTitle({ main: 'Account', sub: '' })\n    }, [])\n\n    const loading = false\n\n    const layout = {\n        labelCol: { span: 8 },\n        wrapperCol: { span: 16 },\n    }\n    const tailLayout = {\n        wrapperCol: { offset: 8, span: 0 },\n    }\n    return account && account.name ? (\n        <div className=\"contentDiv\">\n            <Card>\n                <Upload\n                    name=\"avatar\"\n                    listType=\"picture-card\"\n                    className={classes.Avatar}\n                    showUploadList={false}\n                    customRequest={({ file }) => {\n                        uploadFile(file, 800, 'avatar', () => {\n                            props.increaseAvatarV()\n                        })\n                    }}\n                >\n                    {account.image ? (\n                        <Avatar\n                            src={getAvatar(account._id, account.image)}\n                            size={150}\n                            style={{ margin: '25px' }}\n                        />\n                    ) : (\n                        <div>\n                            {loading ? <LoadingOutlined /> : <PlusOutlined />}\n                            <div className=\"ant-upload-text\">Upload</div>\n                        </div>\n                    )}\n                </Upload>\n                <Form\n                    name=\"dynamic_form_nest_item\"\n                    onFinish={value =>\n                        wsActions.editAccount(value, account._id)\n                    }\n                    autoComplete=\"off\"\n                    {...layout}\n                    initialValues={{\n                        name: account.name,\n                        nickname: account._id,\n                    }}\n                >\n                    <Form.Item\n                        label=\"Name\"\n                        name=\"name\"\n                        rules={accountNameRules}\n                    >\n                        <Input placeholder=\"Must be more than 1 character long\" />\n                    </Form.Item>\n                    <Form.Item label=\"Nickname\" name=\"nickname\">\n                        <Input disabled={true} />\n                    </Form.Item>\n                    <Form.Item\n                        {...tailLayout}\n                        style={{\n                            flex: 'none',\n                            maxWidth: ' 100%',\n                            overflow: 'hidden',\n                        }}\n                    >\n                        <Dropdown.Button\n                            type=\"primary\"\n                            htmlType=\"submit\"\n                            size=\"large\"\n                            overlay={\n                                <Menu>\n                                    <Menu.Item\n                                        danger={true}\n                                        onClick={() => setDeleteVisible(true)}\n                                    >\n                                        Delete account\n                                    </Menu.Item>\n                                </Menu>\n                            }\n                        >\n                            Save\n                        </Dropdown.Button>\n                    </Form.Item>\n                </Form>\n                <Modal\n                    title=\"Delete account\"\n                    visible={deleteVisible}\n                    onOk={() => {\n                        if (deleteField !== account._id) {\n                            message.warning('The nickmanme is not correct.')\n                        } else {\n                            wsActions.deleteAccount(account._id)\n                        }\n                    }}\n                    onCancel={() => {\n                        setDeleteVisible(false)\n                        setDeleteField('')\n                    }}\n                >\n                    <p>\n                        Please enter your nickname and press Ok to delete your\n                        account.\n                    </p>\n                    <Input onChange={e => setDeleteField(e.target.value)} />\n                </Modal>\n            </Card>\n        </div>\n    ) : null\n}\n\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n        increaseAvatarV: () => dispatch(actions.increaseAvatarV()),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Account)\n)\n","import { webSocket } from '../containers/ConnectWebsocket/ConnectWebsocket'\n\nexport const deleteAccount = id => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'deleteAccount',\n                accountId: id,\n            })\n        )\n    }\n}\n\nexport const editAccount = (value, id) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'editAccount',\n                name: value.name,\n                accountId: id,\n            })\n        )\n    }\n}\n","import React, { useEffect, useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport Avatar from 'antd/es/avatar'\nimport Card from 'antd/es/card'\n\nimport friendActionButton from '../../components/FriendActionButton'\nimport FriendCard from '../../components/FriendCard'\nimport Tabs from 'antd/es/tabs'\nimport Progresses from '../Progresses/Progresses'\nimport Wallet from '../Shop/Wallet'\nimport PerkCard from '../Shop/PerkCard'\nimport getAvatar from '../../utils/getAvatar'\nimport pullData from '../../utils/pullData'\nimport UserButton from '../../components/UserButton/UserButton'\nimport MasonryGrid from '../../components/MasonryGrid'\n\nconst Profile = props => {\n    const [data, setData] = useState({})\n    const { profile, friendData, account } = props.isAuthed ? props : data\n\n    useEffect(() => {\n        const pathParts = props.history.location.pathname.split('/')\n        if (pathParts.length > 2) {\n            const profileId = pathParts[2]\n            if (props.isAuthed) {\n                props.setData({ currentProfile: profileId })\n            } else {\n                pullData(props, data, setData, { forceAuth: false }, data => {\n                    const friendData = {}\n                    for (let friend of data.friendData)\n                        friendData[friend._id] = friend\n                    const progressData = {}\n                    for (let progress of data.progressData)\n                        progressData[progress._id] = progress\n                    const groupData = {}\n                    for (let group of data.groupData)\n                        groupData[group._id] = group\n\n                    props.setData({\n                        // profile: data.profile,\n                        friendData,\n                        progressData,\n                        groupData,\n                        account: {},\n                    })\n                })\n            }\n        }\n    }, [props.isAuthed, props.history.location.pathname])\n\n    if (!profile || !profile._id) return null\n    props.setPageTitle({ main: profile.name, sub: '' })\n\n    const realFriends = [],\n        invitedFriends = [],\n        invitingFriends = []\n    if (profile && profile.friends && account && account._id) {\n        for (let friend of account.friends) {\n            if (friend.status === 'friend') realFriends.push(friend)\n            else if (friend.status === 'invited') invitedFriends.push(friend)\n            else if (friend.status === 'inviting') invitingFriends.push(friend)\n        }\n    }\n    const friendActions = friendActionButton({\n        accountId: account ? account._id : '',\n        realFriends: realFriends,\n        invitedFriends: invitedFriends,\n        invitingFriends: invitingFriends,\n        _id: profile._id,\n        additionalButton: null,\n        asText: true,\n    })\n    return (\n        <div>\n            <Card>\n                <div style={{ textAlign: 'center', marginBottom: '50px' }}>\n                    <Avatar\n                        src={getAvatar(profile._id, profile.image)}\n                        size={200}\n                    />\n                    <h1>{profile.name}</h1>\n                    <h3>({profile._id})</h3>\n                    {friendActions}\n                </div>\n                <Tabs>\n                    <Tabs.TabPane tab=\"Progresses\" key={0}>\n                        <Progresses fromProfile={true} />\n                    </Tabs.TabPane>\n\n                    <Tabs.TabPane tab=\"Friends\" key={1}>\n                        <MasonryGrid friends={true}>\n                            {profile.friends\n                                .filter(friend => friend.status === 'friend')\n                                .map(friend => {\n                                    const oneFriendData = {\n                                        ...friendData[friend.friend],\n                                        ...friend.friend,\n                                    }\n\n                                    return (\n                                        <FriendCard\n                                            key={oneFriendData._id}\n                                            {...props}\n                                            account={account}\n                                            friend={oneFriendData}\n                                            realFriends={realFriends}\n                                            invitingFriends={invitingFriends}\n                                            invitedFriends={invitedFriends}\n                                        />\n                                    )\n                                })}\n                        </MasonryGrid>\n                    </Tabs.TabPane>\n                    {/* <Tabs.TabPane tab=\"Goals\" key={3}>\n                        {profile.goals.map((goal, index) => (\n                            <PerkCard\n                                key={index}\n                                perk={goal}\n                                perkId={goal.itemId}\n                                owner={profile}\n                                account={account || {}}\n                                setEditedPerk={() => {}}\n                                setEditPerkOpen={() => {}}\n                                onlyBuy={true}\n                                mode=\"goals\"\n                            />\n                        ))}\n                    </Tabs.TabPane> */}\n                    <Tabs.TabPane tab=\"Shop\" key={4}>\n                        <MasonryGrid>\n                            {profile.perks &&\n                                profile.perks.map((perk, index) => (\n                                    <PerkCard\n                                        key={index}\n                                        perk={perk}\n                                        perkId={perk.perkId}\n                                        owner={profile}\n                                        account={account || {}}\n                                        onlyBuy={true}\n                                        mode=\"shop\"\n                                    />\n                                ))}\n                        </MasonryGrid>\n                    </Tabs.TabPane>\n                    <Tabs.TabPane tab=\"Wallet\" key={5}>\n                        <Wallet pulledProfile={profile} account={profile} />\n                    </Tabs.TabPane>\n                    <Tabs.TabPane tab=\"Wishlist\" key={6}>\n                        <MasonryGrid>\n                            {profile.wishlist.map((item, index) => (\n                                <PerkCard\n                                    key={index}\n                                    perk={item}\n                                    perkId={item.itemId}\n                                    owner={profile}\n                                    account={account || {}}\n                                    setEditedPerk={() => {}}\n                                    setEditPerkOpen={() => {}}\n                                    onlyBuy={true}\n                                    mode=\"wishlist\"\n                                />\n                            ))}\n                        </MasonryGrid>\n                    </Tabs.TabPane>\n                </Tabs>\n            </Card>\n        </div>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n        profile: state.profile,\n        isAuthed: state.isAuthed,\n        friendData: state.friendData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: data => dispatch(actions.setData(data)),\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n        tryAuth: (props, forceAuth) =>\n            dispatch(actions.tryAuth(props, forceAuth)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Profile)\n)\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport Button from 'antd/es/button'\nimport message from 'antd/es/message'\n\nimport Input from 'antd/es/input'\nimport PageHeader from 'antd/es/page-header'\nimport Form from 'antd/es/form'\nimport { withRouter } from 'react-router-dom'\nimport axios from 'axios'\nimport { nicknameRules, accountNameRules } from '../../constants/fieldRules'\nimport * as actions from '../../store/actions'\n\nconst ActivateAccount = props => {\n    if (!props.isAuthed) props.history.push('/logout')\n    const onFinish = value => {\n        axios\n            .post('/api/activate-account', {\n                ...value,\n            })\n            .then(res => {\n                if (res.data.success) {\n                    message.success('Your account has been activated!')\n                    props.setAccountActivated(false)\n                    props.history.push('/account')\n                } else {\n                    if (res.data.nicknameNotUnique) {\n                        message.warning(\n                            'The nickname is taken. Choose another nickname please.'\n                        )\n                    }\n                    if (res.data.errorCode) {\n                        message.error(\n                            'Something is wrong with the data. Please try one more time with new data.'\n                        )\n                    }\n                }\n            })\n            .catch(err => {})\n    }\n\n    const layout = {\n        labelCol: { span: 8 },\n        wrapperCol: { span: 16 },\n    }\n    const tailLayout = {\n        wrapperCol: { offset: 8, span: 16 },\n    }\n\n    return (\n        <>\n            <PageHeader\n                className=\"site-page-header\"\n                title=\"Activate your account\"\n                backIcon={false}\n            />\n            <Form\n                name=\"dynamic_form_nest_item\"\n                onFinish={onFinish}\n                autoComplete=\"off\"\n                {...layout}\n            >\n                <Form.Item label=\"Name\" name=\"name\" rules={accountNameRules}>\n                    <Input placeholder=\"Must be more than 1 character long\" />\n                </Form.Item>\n                <Form.Item\n                    label=\"Nickname\"\n                    name=\"nickname\"\n                    rules={nicknameRules}\n                >\n                    <Input placeholder=\"Must be more than 1 character long\" />\n                </Form.Item>\n                <Form.Item {...tailLayout}>\n                    <Button type=\"primary\" htmlType=\"submit\" size=\"large\">\n                        Save\n                    </Button>\n                </Form.Item>\n            </Form>\n        </>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        user: state.user,\n        account: state.account,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n        setAccountActivated: value =>\n            dispatch(actions.setAccountActivated(value)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(ActivateAccount)\n)\n","import React, { useEffect, useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport Card from 'antd/es/card'\nimport pullData from '../../utils/pullData'\nimport Descriptions from 'antd/es/descriptions'\nimport Post from '../../components/Post/Post'\nimport UserButton from '../../components/UserButton/UserButton'\nimport ImageCarousel from '../../components/UI/ImageCarousel/ImageCarousel'\n\nconst { Item } = Descriptions\n\nconst Perk = props => {\n    const [data, setData] = useState({})\n    const { account } = props\n    useEffect(() => {\n        const pathParts = props.history.location.pathname.split('/')\n        if (pathParts.length > 3) {\n            const accountId = pathParts[2]\n            if (props.isAuthed && account._id === accountId) {\n                const perk = account.perks.find(\n                    item => item.perkId === pathParts[3]\n                )\n                setData({ profile: account, perk })\n            } else {\n                pullData(props, data, setData, { forceAuth: false }, data => {\n                    const friendData = {}\n                    for (let friend of data.friendData)\n                        friendData[friend._id] = friend\n\n                    props.setData({\n                        post: { [data.post._id]: data.post },\n                        friendData,\n                    })\n                })\n            }\n        }\n    }, [props.isAuthed])\n    if (!data.perk) return null\n    const { perk, profile } = data\n    props.setData({ currentPosts: perk.post })\n    if (perk) {\n        props.setPageTitle({ main: perk.name, sub: profile._id })\n    }\n\n    const getAccounts = items => {\n        if (profile && props.friendData) {\n            return items.map(item => <UserButton id={item} />)\n        } else return items\n    }\n\n    return perk ? (\n        <div className=\"contentDiv\">\n            <Card\n                title={\n                    <span>\n                        Item from <UserButton id={profile._id} /> shop\n                    </span>\n                }\n                bordered={false}\n            >\n                <ImageCarousel images={perk.images} />\n\n                <h1>{perk.name}</h1>\n                <p style={{ whiteSpace: 'pre-wrap' }}>{perk.description}</p>\n\n                <Descriptions\n                    title=\"Goal description\"\n                    bordered\n                    column={{ xxl: 4, xl: 3, lg: 3, md: 3, sm: 2, xs: 1 }}\n                >\n                    <Item label=\"Available for\">{getAccounts(perk.users)}</Item>\n                    <Item label=\"Price\">{perk.price}</Item>\n                </Descriptions>\n                <Post\n                    noStartMessage={true}\n                    post={props.post[perk.post]}\n                    account={props.account}\n                    friendData={props.friendData}\n                    showReplies={true}\n                />\n            </Card>\n        </div>\n    ) : null\n}\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        account: state.account,\n        post: state.post,\n        friendData: state.friendData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: data => {\n            dispatch(actions.setData(data))\n        },\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Perk)\n)\n","import React, { useEffect, useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport Card from 'antd/es/card'\nimport pullData from '../../utils/pullData'\nimport Post from '../../components/Post/Post'\nimport ImageCarousel from '../../components/UI/ImageCarousel/ImageCarousel'\nimport UserButton from '../../components/UserButton/UserButton'\n\nconst WishlistItem = props => {\n    const [data, setData] = useState({})\n    const { account } = props\n    useEffect(() => {\n        const pathParts = props.history.location.pathname.split('/')\n        if (pathParts.length > 3) {\n            const accountId = pathParts[2]\n            if (props.isAuthed && account._id === accountId) {\n                const wishlistItem = account.wishlist.find(\n                    item => item.itemId === pathParts[3]\n                )\n                setData({ profile: account, wishlistItem })\n            } else {\n                pullData(props, data, setData, { forceAuth: false }, data => {\n                    const friendData = {}\n                    for (let friend of data.friendData)\n                        friendData[friend._id] = friend\n\n                    props.setData({\n                        post: { [data.post._id]: data.post },\n                        friendData,\n                    })\n                })\n            }\n        }\n    }, [props.isAuthed])\n    if (!data.wishlistItem) return null\n    const { wishlistItem, profile } = data\n    props.setData({ currentPosts: wishlistItem.post })\n    if (wishlistItem) {\n        props.setPageTitle({ main: wishlistItem.name, sub: profile._id })\n    }\n    return wishlistItem ? (\n        <div className=\"contentDiv\">\n            <Card\n                title={\n                    <span>\n                        <UserButton id={profile._id} /> wishlist\n                    </span>\n                }\n                bordered={false}\n            >\n                <ImageCarousel images={wishlistItem.images} />\n\n                <h1>{wishlistItem.name}</h1>\n                <p style={{ whiteSpace: 'pre-wrap' }}>\n                    {wishlistItem.description}\n                </p>\n                <Post\n                    noStartMessage={true}\n                    post={props.post[wishlistItem.post]}\n                    account={props.account}\n                    friendData={props.friendData}\n                    showReplies={true}\n                />\n            </Card>\n        </div>\n    ) : null\n}\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        account: state.account,\n        post: state.post,\n        friendData: state.friendData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: data => {\n            dispatch(actions.setData(data))\n        },\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(WishlistItem)\n)\n","import React, { useEffect } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport WishlistAndPerks from '../Shop/WishlistAndPerks'\n\nconst Wishlist = props => {\n    useEffect(() => {\n        props.setPageTitle({ main: 'Wishlist', sub: '' })\n    }, [])\n\n    return (\n        <div>\n            {props.account._id ? (\n                <WishlistAndPerks mode=\"wishlist\" account={props.account} />\n            ) : (\n                <span />\n            )}\n        </div>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Wishlist)\n)\n","import React from 'react'\nimport { withRouter } from 'react-router-dom'\n\nimport Card from 'antd/es/card'\nimport UserButton from '../../components/UserButton/UserButton'\nimport ImageCarousel from '../../components/UI/ImageCarousel/ImageCarousel'\n\nconst ProgressCard = props => {\n    const { progress } = props\n    const { goal } = progress\n    return (\n        <Card\n            type=\"inner\"\n            style={{ width: '100%', cursor: 'pointer' }}\n            bordered={false}\n            title={\n                <div\n                    onClick={() =>\n                        props.history.push('/progresses/' + progress._id)\n                    }\n                    style={{\n                        display: 'flex',\n                        alignItems: 'center',\n                    }}\n                >\n                    {goal.images.length > 0 && (\n                        <div style={{ width: '50px', marginRight: '20px' }}>\n                            <ImageCarousel images={goal.images} size={50} />\n                        </div>\n                    )}\n                    {goal.name} -{' '}\n                    <UserButton id={progress.owner} noName={true} /> =&gt;{' '}\n                    <UserButton ids={progress.goal.users} group={true} />\n                </div>\n            }\n        />\n    )\n}\n\nexport default withRouter(ProgressCard)\n","import React, { useEffect, useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\n\nimport Modal from 'antd/es/modal'\nimport Button from 'antd/es/button'\nimport Card from 'antd/es/card'\nimport Post from '../../components/Post/Post'\nimport AddPost from '../../components/Post/AddPost'\nimport Tabs from 'antd/es/tabs'\nimport AddCard from '../../components/AddCard/AddCard'\nimport ProgressCard from '../Progresses/ProgressCard'\nimport AddProgress from '../Progresses/AddProgress'\n\nconst Group = props => {\n    const [state, setState] = useState({})\n    const [startProgressVisible, setStartProgressVisible] = useState(false)\n\n    const groupId = props.history.location.pathname.split('/')[2]\n    useEffect(() => {\n        props.setData({ currentGroup: groupId })\n    }, [props.isAuthed])\n\n    const { group, account, friendData, posts, progressData } = props\n\n    if (!group._id) return null\n    props.setData({ currentPosts: group.posts })\n\n    props.setPageTitle({ main: group.name, sub: group.worker })\n\n    const loadedProgresses = group.progresses\n        .filter(item => progressData[item])\n        .map(item => progressData[item])\n\n    const editGoal = (\n        <Modal\n            title=\"Add goal\"\n            visible={startProgressVisible}\n            maskClosable\n            closable\n            onCancel={() => setStartProgressVisible(false)}\n            width=\"100%\"\n            style={{ maxWidth: '1000px' }}\n            footer={\n                <Button\n                    key=\"back\"\n                    onClick={() => setStartProgressVisible(false)}\n                >\n                    Close\n                </Button>\n            }\n            destroyOnClose={true}\n        >\n            <AddProgress\n                setStartProgressVisible={setStartProgressVisible}\n                account={account}\n                friendData={props.friendData}\n                inGroup={group._id}\n            />\n        </Modal>\n    )\n    return friendData ? (\n        <>\n            <Tabs>\n                <Tabs.TabPane tab=\"Posts\" key=\"posts\">\n                    <AddPost\n                        parent={groupId}\n                        account={account}\n                        parentType=\"progress\"\n                        // onSend={() => setEditingMessage('')}\n                    />\n                    {group.posts.map(postId => {\n                        if (posts[postId]) {\n                            const post = posts[postId]\n                            return (\n                                <Card>\n                                    <Post\n                                        friendData={friendData}\n                                        account={account}\n                                        post={post}\n                                    />\n                                </Card>\n                            )\n                        } else return null\n                    })}\n                </Tabs.TabPane>\n                <Tabs.TabPane tab=\"Progresses\" key=\"progresses\">\n                    <AddCard\n                        title=\"Start a new progress\"\n                        sub=\"Rich your goals or help others!\"\n                        action={() => {\n                            setStartProgressVisible(true)\n                        }}\n                    />\n                    {loadedProgresses.map((progress, index) => (\n                        <ProgressCard key={index} progress={progress} />\n                    ))}\n                    {editGoal}\n                </Tabs.TabPane>\n            </Tabs>\n\n            <Modal\n                visible={state.previewImage}\n                footer={null}\n                onCancel={() => setState({ ...state, previewImage: '' })}\n            >\n                <img\n                    alt=\"example\"\n                    style={{ width: '100%' }}\n                    src={state.previewImage}\n                />\n            </Modal>\n        </>\n    ) : null\n}\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        account: state.account,\n        posts: state.post,\n        group: state.group,\n        friendData: state.friendData,\n        progressData: state.progressData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: data => {\n            dispatch(actions.setData(data))\n        },\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Group)\n)\n","import React from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport isEqual from 'lodash.isequal'\nconst NotificationsTracker = props => {\n    const { account, friendData, progressData, groupData } = props\n\n    const sortNotifiacations = (a, b) =>\n        new Date(a.date).getTime() < new Date(b.date).getTime() ? 1 : -1\n\n    if (!account._id) return null\n\n    let lastNotifications = []\n    for (let progress of account.progresses) {\n        if (progressData[progress])\n            lastNotifications = [\n                ...lastNotifications,\n                ...progressData[progress].notifications,\n            ]\n    }\n\n    for (let group of account.groups) {\n        if (groupData[group])\n            lastNotifications = [\n                ...lastNotifications,\n                ...groupData[group].notifications,\n            ]\n    }\n\n    for (let friend of account.friends) {\n        if (\n            friendData[friend.friend] &&\n            friend.status === 'friend' &&\n            friendData[friend.friend].notifications\n        )\n            lastNotifications = [\n                ...lastNotifications,\n                ...friendData[friend.friend].notifications,\n            ]\n    }\n    const filterSameNot = (res, not, index, arr) => {\n        if (!res.find(item => item.notId === not.notId)) {\n            res.push(not)\n        }\n        return res\n    }\n    lastNotifications = lastNotifications.reduce(filterSameNot, [])\n\n    lastNotifications = lastNotifications.sort(sortNotifiacations).slice(0, 100)\n\n    lastNotifications = [\n        ...lastNotifications,\n        ...account.myNotifications,\n    ].filter(item => item.code !== 'add post')\n\n    lastNotifications = lastNotifications.reduce(filterSameNot, [])\n    lastNotifications = lastNotifications.sort(sortNotifiacations)\n    if (!isEqual(lastNotifications, props.lastNotifications)) {\n        props.setData({ lastNotifications })\n    }\n\n    return <span />\n}\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        account: state.account,\n        statePosts: state.post,\n        progress: state.progress,\n        friendData: state.friendData,\n        progressData: state.progressData,\n        groupData: state.groupData,\n        lastNotifications: state.lastNotifications,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: data => {\n            dispatch(actions.setData(data))\n        },\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(NotificationsTracker)\n)\n","import React, { useEffect } from 'react'\nimport { Route, Switch, withRouter, Redirect } from 'react-router-dom'\n\nimport Auth from './containers/Auth/Auth'\nimport AuthTest from './containers/Auth/AuthTest'\nimport './components/UI/loadStyles'\nimport AccountLayout from './components/Layout/Layout'\nimport Goals from './containers/Goals/Goals'\nimport Goal from './containers/Goals/Goal'\nimport Progresses from './containers/Progresses/Progresses'\nimport Progress from './containers/Progress/Progress'\nimport Shop from './containers/Shop/Shop'\nimport Dashboard from './containers/Dashboard/Dashboard'\nimport Explore from './containers/Explore/Explore'\n\nimport Friends from './containers/Friends/Friends'\nimport Account from './containers/Account/Account'\nimport Profile from './containers/Profile/Profile'\n\nimport ActivateAccount from './containers/ActivateAccount/ActivateAccount'\nimport Cookies from 'universal-cookie'\nimport Perk from './containers/Shop/Perk'\n\nimport WishlistItem from './containers/Wishlist/WishlistItem'\nimport Wishlist from './containers/Wishlist/Wishlist'\nimport { connect } from 'react-redux'\nimport * as actions from './store/actions'\nimport ConnectWebsocket from './containers/ConnectWebsocket/ConnectWebsocket'\nimport Group from './containers/Group/Group'\nimport NotificationsTracker from './containers/Dashboard/NotificationsTracker'\n\nconst cookies = new Cookies()\n\nconst App = props => {\n    const { isAuthed } = props\n    useEffect(() => {\n        props.tryAuth(props)\n    }, [])\n\n    const redirectTo = cookies.get('redirectto')\n\n    if (redirectTo) {\n        cookies.remove('redirectto', {\n            path: '/',\n        })\n    }\n\n    const Logout = () => {\n        props.logout()\n        return <Redirect to=\"/explore\" />\n    }\n\n    let routes = (\n        <Switch>\n            <Route path=\"/goals\" exact component={Goals} />\n            <Route path=\"/goals\" component={Goal} />\n\n            <Route path=\"/progresses\" exact component={Progresses} />\n            <Route path=\"/progresses\" component={Progress} />\n            <Route path=\"/groups\" component={Group} />\n\n            <Route path=\"/profile\" component={Profile} />\n\n            <Route path=\"/friends\" exact component={Friends} />\n\n            <Route path=\"/account\" exact component={Account} />\n            <Route path=\"/dashboard\" exact component={Dashboard} />\n            <Route path=\"/explore\" exact component={Explore} />\n\n            <Route path=\"/shop\" exact component={Shop} />\n            <Route path=\"/shop\" component={Perk} />\n            <Route path=\"/wishlist\" exact component={Wishlist} />\n            <Route path=\"/wishlist\" component={WishlistItem} />\n            {/* {!isAuthed && <Route path=\"/login\" exact component={Auth} />} */}\n            <Route path=\"/logout\" exact component={Logout} />\n\n            <Route path=\"/activate-account\" exact component={ActivateAccount} />\n\n            {process.env.NODE_ENV === 'development' && !isAuthed && (\n                <Route path=\"/logintest\" exact component={AuthTest} />\n            )}\n            <Redirect to=\"/explore\" />\n        </Switch>\n    )\n\n    if (props.accountNotActive) {\n        routes = (\n            <Switch>\n                {!isAuthed && <Route path=\"/login\" exact component={Auth} />}\n                <Route path=\"/logout\" exact component={Logout} />\n\n                <Route\n                    path=\"/activate-account\"\n                    exact\n                    component={ActivateAccount}\n                />\n\n                {process.env.NODE_ENV === 'development' && !isAuthed && (\n                    <Route path=\"/logintest\" exact component={AuthTest} />\n                )}\n                {isAuthed ? (\n                    <Redirect to=\"/activate-account\" />\n                ) : (\n                    <Redirect to=\"/login\" />\n                )}\n            </Switch>\n        )\n    }\n\n    return redirectTo ? (\n        <Redirect to={redirectTo} />\n    ) : (\n        <>\n            <div style={{ height: '100%' }}>\n                <AccountLayout>{routes}</AccountLayout>\n                {isAuthed && <ConnectWebsocket />}\n                {isAuthed && <NotificationsTracker />}\n            </div>\n            {/* {this.props.loading && <Spinner cover />} */}\n        </>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        user: state.user,\n        account: state.account,\n        accountNotActive: state.accountNotActive,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        tryAuth: (props, forceAuth) =>\n            dispatch(actions.tryAuth(props, forceAuth)),\n        logout: () => dispatch(actions.logout()),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(App)\n)\n","import { createReducer } from '@reduxjs/toolkit'\n\nexport const initialState = {\n    isAuthed: false,\n    user: null,\n    currentAccount: '',\n    account: {},\n    friendData: {},\n    transactionData: {},\n    progressData: {},\n    currentProfile: '',\n    profile: {},\n    currentProgress: '',\n    currentGroup: '',\n    currentPosts: [],\n    progress: {},\n    post: {},\n    postData: {},\n    group: {},\n    groupData: {},\n    pageTitle: {},\n    lastUrl: '',\n    friendSearchResult: {},\n    accountNotActive: false,\n    lastNotifications: [],\n    isConnectingWS: false,\n}\n\nconst reducer = createReducer(initialState, {\n    SET_DATA: (state: Object, action: Object) => {\n        if (action.data) {\n            for (let key of [\n                'user',\n                'account',\n                'isAuthed',\n                'currentAccount',\n                'currentProfile',\n                'currentPosts',\n                'currentGroup',\n                'profile',\n                'group',\n                'currentProgress',\n                'progress',\n                'lastNotifications',\n            ]) {\n                if (typeof action.data[key] !== 'undefined') {\n                    state[key] = action.data[key]\n                }\n            }\n            for (let key of [\n                'friendData',\n                'progressData',\n                'post',\n                'postData',\n                'groupData',\n                'transactionData',\n            ]) {\n                if (typeof action.data[key] !== 'undefined') {\n                    for (let attr in action.data[key]) {\n                        if (action.data[key][attr]) {\n                            state[key][attr] = action.data[key][attr]\n                        }\n                    }\n                }\n            }\n        }\n        if (state.user) {\n            if (state.user.currentAccount) {\n                state.currentAccount = state.user.currentAccount\n                state.accountNotActive = false\n            } else if (state.user.myAccount) {\n                state.currentAccount = state.user.myAccount\n                state.accountNotActive = false\n            } else {\n                state.accountNotActive = true\n            }\n        }\n    },\n    REMOVE_DATA: (state: Object, action: Object) => {\n        if (action.data) {\n            for (let key of [\n                'user',\n                'account',\n                'profile',\n                'progress',\n                'group',\n            ]) {\n                for (let item of action.data[key]) {\n                    if (state[key]._id === item) {\n                        state[key] = {}\n                    }\n                }\n            }\n            for (let key of [\n                'post',\n                'friendData',\n                'progressData',\n                'postData',\n                'groupData',\n                'transactionData',\n            ]) {\n                for (let item of action.data[key]) {\n                    delete state[key][item]\n                }\n            }\n        }\n    },\n    SET_FRIEND_SEARCH_RESULT: (state: Object, action: Object) => {\n        state.friendSearchResult = action.data\n    },\n\n    SET_FRIENDS_DATA: (state: Object, action: Object) => {\n        if (action.data) {\n            state.account.friendsData = action.data\n        }\n        if (action.data.perk) state.perk = action.data.perk\n    },\n    SET_AVATAR_V: (state: Object, action: Object) => {\n        state.account.image = action.v\n    },\n    INCREASE_AVATAR_V: (state: Object) => {\n        state.account.image = state.account.image + 1\n    },\n    SET_IS_AUTHED: (state: Object, action: Object) => {\n        state.isAuthed = action.id\n    },\n    SET_PAGE_TITLE: (state: Object, action: Object) => {\n        state.pageTitle = action.title\n    },\n    SAVE_LAST_URL: (state: Object, action: Object) => {\n        if (action.url !== '/login' && action.url !== '/logout')\n            state.lastUrl = action.url\n    },\n    SET_ACCOUNT_ACTIVATED: (state: Object, action: Object) => {\n        state.accountNotActive = action.value\n    },\n    SET_CONNECTING_WS: (state: Object, action: Object) => {\n        state.isConnectingWS = action.data\n    },\n})\n\nexport default reducer\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter } from 'react-router-dom'\nimport axios from 'axios'\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly'\n\nimport './index.css'\nimport App from './App'\nimport reducer from './store/reducer/reducer'\n//import * as serviceWorker from './serviceWorker';\n\nif (process.env.NODE_ENV === 'development') {\n    axios.defaults.baseURL = 'http://my.websiter.test:5000'\n} else {\n    axios.defaults.baseURL = 'https://addspiration.com'\n}\n// axios.defaults.withCredentials = true\n\nexport const store = createStore(\n    reducer,\n    composeWithDevTools(applyMiddleware(thunk))\n)\n\nconst app = (\n    <Provider store={store}>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </Provider>\n)\n\nconst root = document.getElementById('root')\n\nReactDOM.render(app, root)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Auth_Container__1KNy7\",\"socialButtons\":\"Auth_socialButtons__2wwH9\",\"Background\":\"Auth_Background__39m_a\"};"],"sourceRoot":""}