{"version":3,"sources":["components/UI/ImageCarousel/imageCarousel.module.css","containers/Account/Account.module.css","components/Layout/Layout.module.css","containers/Auth/Auth.tsx","containers/Auth/AuthTest.tsx","utils/getAvatar.js","components/Layout/LoginModal.tsx","components/Layout/Layout.tsx","utils/processRes.js","store/actions/auth.tsx","containers/ConnectWebsocket/methods/getListOfNeededResources.js","containers/ConnectWebsocket/methods/compareVersionsAndRerequest.js","containers/ConnectWebsocket/methods/getResourcesToMonitor.js","containers/ConnectWebsocket/ConnectWebsocket.tsx","store/actions/saveResources.tsx","containers/ConnectWebsocket/methods/requestResource.tsx","store/actions/updateResource.tsx","utils/uploadFile.js","constants/fieldLength.js","constants/fieldRules.js","containers/Shop/AddPerkForm.tsx","websocketActions/posts.tsx","websocketActions/wishlistAndPerks.tsx","websocketActions/friends.tsx","containers/Shop/AddPerk.tsx","components/MasonryCard.tsx","components/UI/MoreIcon.js","containers/Shop/PerkCard.tsx","components/AddCard/AddCard.tsx","utils/masonryBreakPoints.js","components/MasonryGrid.tsx","containers/Shop/WishlistAndPerks.tsx","containers/Goals/Goals.tsx","utils/pullData.js","components/Post/AddMessage.tsx","components/UI/ImageCarousel/ImageCarousel.tsx","components/UserButton/UserButton.tsx","components/Post/Message.tsx","components/Post/Post.tsx","containers/Goals/Goal.tsx","components/EditGoalAndProgressForm/connectionsSelect.tsx","components/Rewards/Rewards.tsx","websocketActions/progresses.tsx","components/EditGoalAndProgressForm/EditGoalAndProgressForm.tsx","containers/Progresses/AddProgress.tsx","containers/Progresses/GroupCard.tsx","containers/Progresses/Progresses.tsx","containers/Progress/ActivityTable.tsx","containers/Progress/EditProgress.tsx","containers/Progress/Activity.tsx","components/Post/AddPost.tsx","containers/Progress/Progress.tsx","containers/Shop/Wallet.tsx","containers/Shop/Transactions.tsx","containers/Shop/Shop.tsx","containers/Dashboard/DashboardPosts.tsx","containers/Dashboard/DashboardEvents.tsx","containers/Dashboard/Dashboard.tsx","websocketActions/dashboard.tsx","containers/Explore/Explore.tsx","components/FriendActionButton.tsx","components/FriendCard.tsx","containers/Friends/AddFriends.tsx","containers/Friends/PendingFriends.tsx","containers/Friends/Friends.tsx","containers/Account/Account.tsx","websocketActions/account.tsx","containers/Profile/Profile.tsx","containers/ActivateAccount/ActivateAccount.tsx","containers/Shop/Perk.tsx","containers/Wishlist/WishlistItem.tsx","containers/Wishlist/Wishlist.tsx","containers/Progresses/ProgressCard.tsx","containers/Group/Group.tsx","containers/Dashboard/NotificationsTracker.tsx","App.tsx","store/reducer/reducer.tsx","index.tsx","containers/Auth/Auth.module.css"],"names":["module","exports","Dots","Avatar","Layout","Header","Footer","HideHeader","FooterButton","TopHeader","BottomHeader","Main","Button","MenuButtonContiner","QuickButtonContiner","PageTitle","cookies","Cookies","withRouter","connect","state","lastUrl","props","_useState","useState","_useState2","Object","slicedToArray","setState","_useState3","_useState4","cookieConsent","setCookieConsent","useEffect","checkCookieConsent","remeberMeParam","get","basicURL","react_default","a","createElement","className","classes","Container","socialButtons","dist","onClick","window","location","concat","es_checkbox","checked","onChange","Background","modal","title","visible","onOk","set","path","maxAge","onCancel","open","destroyOnClose","maskClosable","getAvatar","nickname","version","loginVisible","setLoginVisible","footer","width","style","maxWidth","marginBottom","account","pageTitle","isAuthed","lastNotifications","isConnectingWS","menuVisible","setMenuVisible","lastScrollY","setLastScrollY","_useState5","_useState6","headerVisible","setHeaderVisible","_useState7","_useState8","handleScroll","currentScrollY","scrollY","removeEventListener","addEventListener","toggleMenu","selectedKey","history","pathname","split","undefined","buttonProps","type","size","checkHighligh","url","ghost","openLink","push","isActivating","numberOfUnseenNots","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","not","value","parseInt","notId","lastSeenNot","err","return","logedIn","_id","Fragment","join","es_button","assign","icon","MenuOutlined_default","main","LogoutOutlined_default","margin","cursor","avatar","border","src","image","marginRight","spin","indicator","LoadingOutlined_default","color","children","badge","count","HomeFilled_default","RocketFilled_default","ShopFilled_default","friends","filter","item","status","length","TeamOutlined_default","drawer","closable","onClose","placement","es_menu","theme","mode","selectedKeys","_ref","key","overflowedIndicator","Item","CoffeeOutlined_default","HeartFilled_default","UserOutlined_default","Layout_LoginModal","processRes","res","data","logout","success","errorCode","message","warning","error","successCode","tryAuth","forceLogin","dispatch","sessionStorage","setItem","token","rememberMe","remove","userId","jwt","decode","axios","defaults","headers","post","put","delete","common","Accept","setIsAuthed","saveLastUrl","pathParts","includes","id","setData","setPageTitle","setFriendSearchResult","getListOfNeededResources","store","requestedResources","user","progress","group","progressData","friendData","postData","groupData","transactionData","neededResources","currentAccount","progresses","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","groups","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","followPosts","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","myPosts","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","transactions","transaction","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","friend","currentProfile","profile","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","currentGroup","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","users","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_iterator11","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_step12","_iterator12","posts","currentProgress","participants","owner","worker","toConsumableArray","experts","supporters","_iteratorNormalCompletion13","_didIteratorError13","_iteratorError13","_step13","_iterator13","_iteratorNormalCompletion14","_didIteratorError14","_iteratorError14","_step14","_iterator14","currentPosts","_iteratorNormalCompletion15","_didIteratorError15","_iteratorError15","_step15","_iterator15","postEl","_iteratorNormalCompletion16","_didIteratorError16","_iteratorError16","_step16","_iterator16","parent","parentType","parentId","reduce","obj","attr","Array","from","Set","notNeededExist","notNeededResources","check1","check2","removeData","compareVersionsAndRerequest","versions","webSocket","checkData","requestResource","check","__v","getResourcesToMonitor","resources","addData","require","create","propertyFilter","name","context","ConnectWebsocket","start","pingTimeout","WebSocket","heartbeat","_this","clearTimeout","setTimeout","close","send","JSON","stringify","messageCode","onopen","event","resourcesToMonitor","initializeRequestResources","onmessage","news","parse","messageText","setFriendsData","friendsData","saveResource","updateResource","code","update","text","onclose","checkInterval","readyState","clearInterval","setInterval","reRequestResourcesInterval","reRequestResources","_i","_arr","ids","nextProps","newRequestedResources","_loop","_arr2","_i2","this","setConnectingToWS","Component","pulledFrom","actions","getState","myAccount","find","notRequestedIds","applyDelta","source","delta","watchFields","result","cloneDeep","del","applyWithDot","keys","shift","applyUpdateToPart","updatedFields","applyDeleteToPart","splice","removedFields","field","indexOf","parState","element","defineProperty","updateData","uploadFile","file","filename","callback","alert","reader","FileReader","onload","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","resizeImageToSpecificSize","height","urltoFile","then","getSignedRequest","stop","_x","apply","arguments","readAsArrayBuffer","mimeType","match","fetch","arrayBuffer","buf","File","cb","resizeImageFromSrcToSpecificSize","target","readAsDataURL","img","Image","widthCoef","heightCoef","oc","document","octx","getContext","drawImage","toDataURL","fileName","response","doUploadFile","catch","signedRequest","Content-Type","console","log","fieldLength","nicknameRules","required","whitespace","min","max","pattern","nameRules","accountNameRules","descriptionRules","messageRules","priceRules","AddPerkForm","previewImage","setPreviewImage","connections","perkId","perk","deletePerk","onFinish","images","setImages","uploadImage","connectionsSelect","es_select","placeholder","getPopupContainer","trigger","parentNode","map","Option","_Form$useForm","Form","useForm","form","es_form","autoComplete","initialValues","labelCol","span","wrapperCol","label","valuePropName","getValueFromEvent","e","isArray","fileList","upload","listType","index","objectSpread","uid","onPreview","customRequest","_ref2","PlusOutlined_default","rules","input","TextArea","input_number","offset","htmlType","popconfirm","onConfirm","okText","cancelText","danger","alt","changeLikesMessage","messageId","accountId","postId","buyPerk","buyer","seller","unfriend","friendId","setPerk","wishlist","itemId","goals","goalId","perks","Shop_AddPerkForm","wsActions","setEditPerkOpen","processedValue","onClickLink","borderRadius","padding","wordBreak","body","MoreIcon","viewBox","transform","d","setEditedPerk","MasonryCard","card","extra","stopPropagation","onlyBuy","dropdown","overlay","fontWeight","price","bordered","AddCard","action","shape","icons_PlusOutlined","friendsBreakPoints","default","1600","1100","600","cardBreakPoints","700","350","MasonryGrid","marginTop","react_masonry_css_es5_default","breakpointCols","columnClassName","WishlistAndPerks","editedPerk","editPerkOpen","editPerk","Shop_AddPerk","components_AddCard_AddCard","sub","listKey","Shop_PerkCard","Shop_WishlistAndPerks","pullData","options","imageLoading","setImageLoading","content","replyToUser","setMessageText","background","replyTo","bottom","left","comment","autoSize","minRows","maxRows","rows","messageValue","replyToMessage","editedMessage","editingMessage","onSend","SendOutlined_default","showUploadList","_ref3","PictureFilled_default","cancel","CloseCircleFilled_default","Modal","ImageCarousel","carousel","dots","backgroundImage","backgroundSize","backgroundPosition","backgroundRepeat","friendSearchResult","friendDataExp","getUserData","userName","userAvatar","noClick","handleClick","Group","noAva","noName","Message","replies","isStart","replyVisible","setReplyVisible","setReplyToUser","setEditingMessage","showReplies","setShowReplies","commentProps","timeago_react","datetime","date","live","tooltip","likes","LikeFilled_default","LikeOutlined_default","paddingLeft","author","Math","floor","random","messageType","details","display","components_UserButton_UserButton","UI_ImageCarousel_ImageCarousel","fontSize","goal","startMessage","Post_AddMessage","isTop","reply","postOpen","setPostOpen","noStartMessage","Post_Message","divider","textAlign","position","justifyContent","icons_LikeFilled","icons_LikeOutlined","messages","getNumberOfMessages","whiteSpace","description","components_Post_Post","EditGoalAndProgressForm_connectionsSelect","onSelect","previewReward","setPreviewReward","editedReward","setEditedReward","editedRewardIndex","setEditedRewardIndex","readOnly","rewardsGI","rewards","findIndex","rewardKey","setRewards","RewardButton","simple","money","itemName","onlyButton","for","marginLeft","progressId","rewardId","confirm","newRewards","indexIn","reward","rewardToSave","itemImages","_ref4","itemDescription","_ref5","hoverable","cover","descriptions","column","xxl","xl","lg","md","sm","xs","EditGoalAndProgressForm","milestones","setMilestones","withMilestones","setWithMilestones","_useState9","newTabIndex","_useState10","setNewTabIndex","_useState11","rewardsGroups","_useState12","addMilestone","milestone","newPanes","newKey","indexOfMile","mile","setFieldsValue","MilestoneControls","dropdown_dropdown","domEvent","finish","newMilestones","Divider","pane","preventDefault","milestonesValues","onValuesChange","changedValues","collapse","expandIconPosition","accordion","Panel","header","getFieldValue","components_Rewards_Rewards","AddProgress","components_EditGoalAndProgressForm_EditGoalAndProgressForm","setStartProgressVisible","inGroup","Meta","Card","TabPane","Tabs","forceAuth","loadedProgresses","loadedGroups","fromProfile","startProgressVisible","active","editGoal","Progresses_AddProgress","tab","Progresses_GroupCard","empty","imageStyle","ActivityTable","renderCheckbox","milestoneId","disabled","getCheckboxStatus","stage","approvedBy","destroyInactivePanel","stages","expert","typography","Paragraph","ellipsis","expandable","symbol","paid","EditProgress","editProgressOpen","Descriptions","orientation","Progress_ActivityTable","toString","Progress_EditProgress","zIndex","icons_PictureFilled","icons_CloseCircleFilled","tabs","Progress_Activity","Post_AddPost","paddingTop","pulledProfile","wallet","amount","tableData","sorted","sort","b","Date","getTime","types","to","alignItems","layout","tag","es_tag","toUpperCase","format","cancelTransaction","record","confirmTransaction","boxShadow","Shop_Wallet","Shop_Transactions","statePosts","setPosts","startTime","sortPosts","aN","notifications","bN","newPosts","newUnseenPosts","newOldPosts","oldPosts","oldPostIndex","_loop2","_newOldPosts","resultPosts","slice","neededPosts","isEqual","nots","getRewardText","as","progressName","addedAccounts","ac","droppedAccounts","activeTab","last","Dashboard_DashboardPosts","Dashboard_DashboardEvents","isSearching","setIsSearching","foundProgresses","setFoundProgresses","setProgresses","noMore","setNoMore","noMorePopular","setNoMorePopular","searchValue","setSearchValue","_useState13","_useState14","setFriendData","onSearch","noNoMore","skip","newFriendData","Search","enterButton","allowClear","react_infinite_scroller_default","pageStart","loadMore","hasMore","loader","FriendActionButton","invitingFriends","invitedFriends","realFriends","additionalButton","menu","additionalButtons","button","asText","DownOutlined","friendActions","friendActionButton","asIcons","searchResult","addFriendOpen","setAddFriendOpen","search","components_FriendCard","fullFriend","confirmedFriends","PendingFriends","Friends_AddFriends","increaseAvatarV","deleteVisible","setDeleteVisible","deleteField","setDeleteField","flex","overflow","profileId","containers_Progresses_Progresses","oneFriendData","setAccountActivated","page_header","backIcon","nicknameNotUnique","items","Perk_Item","wishlistItem","groupId","Progresses_ProgressCard","sortNotifiacations","filterSameNot","arr","myNotifications","accountNotActive","redirectTo","Logout","react_router","routes","exact","component","Goals","Goal","Progresses","Progress","Profile","Friends","Account","Dashboard","Explore","Shop","Perk","Wishlist","WishlistItem","ActivateAccount","process","Auth","containers_ConnectWebsocket_ConnectWebsocket","Dashboard_NotificationsTracker","reducer","createReducer","SET_DATA","REMOVE_DATA","_i3","_arr3","_i4","_arr4","SET_FRIEND_SEARCH_RESULT","SET_FRIENDS_DATA","SET_AVATAR_V","v","INCREASE_AVATAR_V","SET_IS_AUTHED","SET_PAGE_TITLE","SAVE_LAST_URL","SET_ACCOUNT_ACTIVATED","SET_CONNECTING_WS","__webpack_require__","__webpack_exports__","src_store","baseURL","createStore","composeWithDevTools","applyMiddleware","thunk","app","es","react_router_dom","src_App","root","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.3dd6f028.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Dots\":\"imageCarousel_Dots__2JZGt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Avatar\":\"Account_Avatar__l4shx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Layout\":\"Layout_Layout__3t6t4\",\"Header\":\"Layout_Header__3lh1Y\",\"Footer\":\"Layout_Footer__1Dfqu\",\"HideHeader\":\"Layout_HideHeader__2WRsh\",\"FooterButton\":\"Layout_FooterButton__1lZv2\",\"TopHeader\":\"Layout_TopHeader__3_LuK\",\"BottomHeader\":\"Layout_BottomHeader__3DOBo\",\"Main\":\"Layout_Main__3usmk\",\"Button\":\"Layout_Button__1O5Hm\",\"MenuButtonContiner\":\"Layout_MenuButtonContiner__PpulB\",\"QuickButtonContiner\":\"Layout_QuickButtonContiner__4d4Lg\",\"PageTitle\":\"Layout_PageTitle__368dw\"};","import React, { useState, useEffect } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport Checkbox from 'antd/es/checkbox'\nimport Cookies from 'universal-cookie'\nimport classes from './Auth.module.css'\nimport Modal from 'antd/es/modal'\nimport {\n    FacebookLoginButton,\n    GithubLoginButton,\n    GoogleLoginButton,\n} from 'react-social-login-buttons'\n\nconst cookies = new Cookies()\n\nconst Auth = props => {\n    const [state, setState] = useState(false)\n    const [cookieConsent, setCookieConsent] = useState(false)\n\n    useEffect(() => {\n        checkCookieConsent()\n    })\n\n    let remeberMeParam = '?rememberme=false'\n    if (state) {\n        remeberMeParam = '?rememberme=true'\n    }\n\n    let redirectParam = '&redirect=/login'\n    if (props.lastUrl) {\n        redirectParam = '&redirect=' + props.lastUrl\n    }\n\n    const checkCookieConsent = () => {\n        const cookiesConsent = cookies.get('cookies_consent')\n        if (cookiesConsent) {\n            setCookieConsent(true)\n        }\n    }\n\n    const agreeWithCookies = () => {\n        cookies.set('cookies_consent', 'true', {\n            path: '/',\n            maxAge: 31530000,\n        })\n        checkCookieConsent()\n    }\n    const basicURL =\n        process.env.NODE_ENV !== 'development'\n            ? 'https://addspiration.com/api/auth/'\n            : 'http://my.websiter.test:5000/api/auth/'\n    return !cookieConsent ? (\n        <Modal\n            title=\"Cookies consent\"\n            visible={!cookieConsent}\n            onOk={agreeWithCookies}\n            onCancel={() => {\n                window.open('https://websiter.dev', '_self')\n            }}\n            destroyOnClose={true}\n            maskClosable={false}\n        >\n            <p>We use cookies only for login purposes. </p>\n            <p>\n                In order to proceed you need to agree with the use of cookies.\n            </p>\n        </Modal>\n    ) : (\n        <div className=\"contentDiv\">\n            <div className={classes.Container}>\n                <h1>Welcome to Websiter!</h1>\n                <h2>This is where great progresses live.</h2>\n                <h1>Continue with:</h1>\n                <div className={classes.socialButtons}>\n                    <FacebookLoginButton\n                        onClick={() =>\n                            (window.location =\n                                basicURL + `facebook/start${remeberMeParam}`)\n                        }\n                    />\n                    <GoogleLoginButton\n                        onClick={() =>\n                            (window.location =\n                                basicURL + `google/start${remeberMeParam}`)\n                        }\n                    />\n                    <GithubLoginButton\n                        onClick={() =>\n                            (window.location =\n                                basicURL + `github/start${remeberMeParam}`)\n                        }\n                    />\n                </div>\n                <Checkbox checked={state} onChange={() => setState(!state)}>\n                    Remember me\n                </Checkbox>\n            </div>\n            <div className={classes.Background} />\n        </div>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        lastUrl: state.lastUrl,\n    }\n}\n\nexport default withRouter(connect(mapStateToProps)(Auth))\n","import React from 'react'\n\nimport Form from 'antd/es/form'\nimport Input from 'antd/es/input'\nimport Button from 'antd/es/button'\nimport axios from 'axios'\nimport Cookies from 'universal-cookie'\n\nconst cookies = new Cookies()\n\nconst Auth = props => {\n    const layout = {\n        labelCol: { span: 8 },\n        wrapperCol: { span: 16 },\n    }\n    const tailLayout = {\n        wrapperCol: { offset: 8, span: 16 },\n    }\n    const onFinish = value => {\n        axios\n            .post('/api/authtest/' + value.id)\n            .then(res => {\n                cookies.set('auth_token', res.data.cookie)\n                props.onTryAutoSignup()\n            })\n            .catch(err => {})\n    }\n    return (\n        <Form\n            name=\"dynamic_form_nest_item\"\n            onFinish={onFinish}\n            autoComplete=\"off\"\n            {...layout}\n        >\n            <Form.Item\n                label=\"Id\"\n                name=\"id\"\n                rules={[\n                    { required: true, message: 'Please input the goal name.' },\n                ]}\n            >\n                <Input />\n            </Form.Item>\n            <Form.Item {...tailLayout}>\n                <Button type=\"primary\" htmlType=\"submit\" size=\"large\">\n                    Save\n                </Button>\n            </Form.Item>\n        </Form>\n    )\n}\n\nexport default Auth\n","export default (nickname, version) => {\n    if (!nickname) return ''\n    else {\n        return (\n            'https://websiter.s3.us-east-2.amazonaws.com/' +\n            nickname +\n            '/avatar?v=' +\n            (version || 0)\n        )\n    }\n}\n","import React, { useState, useEffect } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport Checkbox from 'antd/es/checkbox'\nimport Cookies from 'universal-cookie'\nimport classes from '../../containers/Auth/Auth.module.css'\nimport Modal from 'antd/es/modal'\nimport {\n    FacebookLoginButton,\n    GithubLoginButton,\n    GoogleLoginButton,\n} from 'react-social-login-buttons'\n\nconst cookies = new Cookies()\n\nconst LoginModal = props => {\n    const [state, setState] = useState(false)\n    const [cookieConsent, setCookieConsent] = useState(false)\n\n    useEffect(() => {\n        checkCookieConsent()\n    })\n\n    let remeberMeParam = '?rememberme=false'\n    if (state) {\n        remeberMeParam = '?rememberme=true'\n    }\n\n    let redirectParam = '&redirect=/login'\n    if (props.lastUrl) {\n        redirectParam = '&redirect=' + props.lastUrl\n    }\n\n    const checkCookieConsent = () => {\n        const cookiesConsent = cookies.get('cookies_consent')\n        if (cookiesConsent) {\n            setCookieConsent(true)\n        }\n    }\n\n    const agreeWithCookies = () => {\n        cookies.set('cookies_consent', 'true', {\n            path: '/',\n            maxAge: 31530000,\n        })\n        checkCookieConsent()\n    }\n    const basicURL =\n        process.env.NODE_ENV !== 'development'\n            ? 'https://addspiration.com/api/auth/'\n            : 'http://my.websiter.test:5000/api/auth/'\n    return (\n        <Modal\n            visible={props.loginVisible}\n            onOk={() => {}}\n            onCancel={() => props.setLoginVisible(false)}\n            destroyOnClose={true}\n            maskClosable={false}\n            footer={[]}\n            width=\"100%\"\n            style={{ maxWidth: '600px' }}\n        >\n            {!cookieConsent ? (\n                <Modal\n                    title=\"Cookies consent\"\n                    visible={!cookieConsent}\n                    onOk={agreeWithCookies}\n                    onCancel={() => {\n                        window.open('https://websiter.dev', '_self')\n                    }}\n                    destroyOnClose={true}\n                    maskClosable={false}\n                >\n                    <p>We use cookies only for login purposes. </p>\n                    <p>\n                        In order to proceed you need to agree with the use of\n                        cookies.\n                    </p>\n                </Modal>\n            ) : (\n                <div className=\"contentDiv\">\n                    <div className={classes.Container}>\n                        <h1>Welcome to Addspiration!</h1>\n                        <h2>This is where great inspiration lives.</h2>\n                        <h1>Continue with:</h1>\n                        <div\n                            className={classes.socialButtons}\n                            style={{ marginBottom: '30px' }}\n                        >\n                            <FacebookLoginButton\n                                onClick={() =>\n                                    (window.location =\n                                        basicURL +\n                                        `facebook/start${remeberMeParam}`)\n                                }\n                            />\n                            <GoogleLoginButton\n                                onClick={() =>\n                                    (window.location =\n                                        basicURL +\n                                        `google/start${remeberMeParam}`)\n                                }\n                            />\n                            <GithubLoginButton\n                                onClick={() =>\n                                    (window.location =\n                                        basicURL +\n                                        `github/start${remeberMeParam}`)\n                                }\n                            />\n                        </div>\n                        <Checkbox\n                            checked={state}\n                            onChange={() => setState(!state)}\n                        >\n                            Remember me\n                        </Checkbox>\n                    </div>\n                    <div className={classes.Background} />\n                </div>\n            )}\n        </Modal>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        lastUrl: state.lastUrl,\n    }\n}\n\nexport default withRouter(connect(mapStateToProps)(LoginModal))\n","import React, { useState, useEffect } from 'react'\nimport { withRouter } from 'react-router-dom'\n\nimport { connect } from 'react-redux'\nimport Menu from 'antd/es/menu'\nimport Avatar from 'antd/es/avatar'\nimport Drawer from 'antd/es/drawer'\nimport Button from 'antd/es/button'\nimport Badge from 'antd/es/badge'\nimport * as classes from './Layout.module.css'\nimport CoffeeOutlined from '@ant-design/icons/CoffeeOutlined'\nimport LogoutOutlined from '@ant-design/icons/LogoutOutlined'\nimport UserOutlined from '@ant-design/icons/UserOutlined'\nimport HeartFilled from '@ant-design/icons/HeartFilled'\nimport RocketFilled from '@ant-design/icons/RocketFilled'\nimport TeamOutlined from '@ant-design/icons/TeamOutlined'\nimport MenuOutlined from '@ant-design/icons/MenuOutlined'\nimport ShopFilled from '@ant-design/icons/ShopFilled'\nimport HomeFilled from '@ant-design/icons/HomeFilled'\nimport getAvatar from '../../utils/getAvatar'\nimport LoginModal from './LoginModal'\nimport Spin from 'antd/es/spin'\nimport LoadingOutlined from '@ant-design/icons/LoadingOutlined'\n\nconst AccountLayout = props => {\n    const { account } = props\n    const [menuVisible, setMenuVisible] = useState()\n    const [lastScrollY, setLastScrollY] = useState(0)\n    const [headerVisible, setHeaderVisible] = useState(true)\n    const [loginVisible, setLoginVisible] = useState(false)\n\n    useEffect(() => {\n        const handleScroll = () => {\n            const currentScrollY = window.scrollY\n\n            if (currentScrollY > lastScrollY) {\n                setHeaderVisible(false)\n            } else {\n                setHeaderVisible(true)\n            }\n            setLastScrollY(currentScrollY)\n        }\n        window.removeEventListener('scroll', handleScroll)\n        window.addEventListener('scroll', handleScroll)\n        return () => window.removeEventListener('scroll', handleScroll)\n    }, [lastScrollY])\n    const toggleMenu = () => {\n        setMenuVisible(!menuVisible)\n    }\n    const selectedKey =\n        props.history.location.pathname.split('/')[1] || undefined\n\n    const buttonProps = {\n        type: 'link',\n        // ghost: true,\n        size: 'large',\n\n        className: classes.Button,\n    }\n    const checkHighligh = url =>\n        selectedKey === url\n            ? {\n                  ghost: false,\n                  type: 'link',\n              }\n            : { type: 'text' }\n    const openLink = url => props.history.push('/' + url)\n\n    const isActivating = props.history.location.pathname === '/activate-account'\n\n    let numberOfUnseenNots = 0\n\n    for (let not of props.lastNotifications) {\n        if (parseInt(not.notId) > parseInt(account.lastSeenNot || 0))\n            numberOfUnseenNots++\n    }\n    const logedIn = props.isAuthed && account._id\n    //!['/login', '/logout'].includes(props.history.location.pathname) ? (\n    return (\n        <>\n            <div className={classes.Layout}>\n                <header\n                    className={\n                        headerVisible\n                            ? classes.Header\n                            : [classes.Header, classes.HideHeader].join(' ')\n                    }\n                >\n                    <div className={classes.TopHeader}>\n                        <div className={classes.MenuButtonContiner}>\n                            {logedIn && (\n                                <>\n                                    {!isActivating && (\n                                        <Button\n                                            {...buttonProps}\n                                            icon={<MenuOutlined />}\n                                            onClick={toggleMenu}\n                                        />\n                                    )}\n                                    <div className={classes.PageTitle}>\n                                        {isActivating\n                                            ? 'Activate your account'\n                                            : props.pageTitle.main}\n                                    </div>\n                                </>\n                            )}\n                        </div>\n                        <div className={classes.QuickButtonContiner}>\n                            {logedIn ? (\n                                !isActivating ? (\n                                    <span\n                                        onClick={() => openLink('account')}\n                                        style={{\n                                            margin: '0px 10px',\n                                            cursor: 'pointer',\n                                        }}\n                                    >\n                                        <Avatar\n                                            style={{\n                                                border: '1px solid white',\n                                            }}\n                                            src={getAvatar(\n                                                account._id,\n                                                account.image\n                                            )}\n                                        />\n                                    </span>\n                                ) : (\n                                    <Button\n                                        {...buttonProps}\n                                        {...checkHighligh('friends')}\n                                        icon={<LogoutOutlined />}\n                                        onClick={() =>\n                                            props.history.push('/logout')\n                                        }\n                                    >\n                                        Logout\n                                    </Button>\n                                )\n                            ) : props.isConnectingWS ? (\n                                <>\n                                    <span style={{ marginRight: '30px' }}>\n                                        <Spin\n                                            indicator={\n                                                <LoadingOutlined\n                                                    style={{\n                                                        color: 'white',\n                                                        marginRight: '10px',\n                                                    }}\n                                                />\n                                            }\n                                        />{' '}\n                                        Trying to login\n                                    </span>\n                                    <Button\n                                        {...buttonProps}\n                                        {...checkHighligh('friends')}\n                                        icon={<LogoutOutlined />}\n                                        onClick={() =>\n                                            props.history.push('/logout')\n                                        }\n                                    >\n                                        Logout\n                                    </Button>\n                                </>\n                            ) : (\n                                <Button\n                                    {...buttonProps}\n                                    {...checkHighligh('friends')}\n                                    icon={<LogoutOutlined />}\n                                    onClick={() => setLoginVisible(true)}\n                                >\n                                    Sign in or Sign up\n                                </Button>\n                            )}\n                        </div>\n                    </div>\n                </header>\n                <main className={classes.Main}>{props.children}</main>\n                {!isActivating && logedIn && (\n                    <footer className={classes.Footer}>\n                        <Button\n                            {...buttonProps}\n                            {...checkHighligh('dashboard')}\n                            onClick={() => openLink('dashboard')}\n                        >\n                            <Badge count={numberOfUnseenNots}>\n                                <HomeFilled />{' '}\n                                <div className={classes.FooterButton}>\n                                    Dashboard\n                                </div>\n                            </Badge>\n                        </Button>\n\n                        <Button\n                            {...buttonProps}\n                            {...checkHighligh('progresses')}\n                            onClick={() => openLink('progresses')}\n                        >\n                            <Badge count={0}>\n                                <RocketFilled />\n                                <div className={classes.FooterButton}>\n                                    Progresses\n                                </div>\n                            </Badge>\n                        </Button>\n\n                        <Button\n                            {...buttonProps}\n                            {...checkHighligh('shop')}\n                            onClick={() => openLink('shop')}\n                        >\n                            <Badge count={0}>\n                                <ShopFilled />\n                                <div className={classes.FooterButton}>Shop</div>\n                            </Badge>\n                        </Button>\n\n                        <Button\n                            {...buttonProps}\n                            {...checkHighligh('friends')}\n                            onClick={() => openLink('friends')}\n                        >\n                            <Badge\n                                count={\n                                    account.friends.filter(\n                                        item => item.status === 'inviting'\n                                    ).length\n                                }\n                            >\n                                <TeamOutlined />\n                                <div className={classes.FooterButton}>\n                                    Friends\n                                </div>\n                            </Badge>\n                        </Button>\n                    </footer>\n                )}\n                {!isActivating && logedIn && (\n                    <Drawer\n                        title=\"Menu\"\n                        closable={true}\n                        onClose={toggleMenu}\n                        visible={menuVisible}\n                        placement=\"left\"\n                    >\n                        <Menu\n                            theme=\"light\"\n                            mode=\"vertical\"\n                            selectedKeys={[selectedKey]}\n                            onClick={({ key }) => {\n                                props.history.push('/' + key)\n                                toggleMenu()\n                            }}\n                            overflowedIndicator={<MenuOutlined />}\n                        >\n                            <Menu.Item key=\"explore\" icon={<CoffeeOutlined />}>\n                                Explore\n                            </Menu.Item>\n                            <Menu.Item key=\"dashboard\" icon={<HomeFilled />}>\n                                Dashboard\n                            </Menu.Item>\n                            <Menu.Item key=\"progresses\" icon={<RocketFilled />}>\n                                Progresses\n                            </Menu.Item>\n                            <Menu.Item key=\"shop\" icon={<ShopFilled />}>\n                                Shop\n                            </Menu.Item>\n                            <Menu.Item key=\"friends\" icon={<TeamOutlined />}>\n                                Friends\n                            </Menu.Item>\n                            {/* <Menu.Item key=\"goals\" icon={<AimOutlined />}>\n                                Goals\n                            </Menu.Item> */}\n                            <Menu.Item key=\"wishlist\" icon={<HeartFilled />}>\n                                Wishlist\n                            </Menu.Item>\n                            <Menu.Item key=\"account\" icon={<UserOutlined />}>\n                                Account\n                            </Menu.Item>\n                            <Menu.Item key=\"logout\" icon={<LogoutOutlined />}>\n                                Logout\n                            </Menu.Item>\n                        </Menu>\n                    </Drawer>\n                )}\n            </div>\n            <LoginModal\n                loginVisible={loginVisible}\n                setLoginVisible={setLoginVisible}\n            />\n        </>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n        pageTitle: state.pageTitle,\n        isAuthed: state.isAuthed,\n        lastNotifications: state.lastNotifications,\n        isConnectingWS: state.isConnectingWS,\n    }\n}\n\nexport default withRouter(connect(mapStateToProps)(AccountLayout))\n","import message from 'antd/es/message'\n\nexport default (res, props) => {\n    if (res.data.logout) props.history.push('/logout')\n    if (res.data.success === false) {\n        if (res.data.errorCode) {\n            switch (res.data.errorCode) {\n                case 'no account':\n                    message.warning('Account is not found. Please login.')\n                    break\n                case 'bad data':\n                    message.error(\n                        'Error. Please try one more time with correct data.'\n                    )\n                    break\n                case 'progress exist':\n                    message.warning('This progress already exists.')\n                    break\n                default:\n                    message.warning(\n                        'Something wrong has happened... Try again!'\n                    )\n                    break\n            }\n        } else {\n            message.error('Something failed')\n        }\n    } else {\n        if (res.data.successCode) {\n            switch (res.data.successCode) {\n                case 'avatar saved':\n                    message.success('The avatar image has been updated.')\n                    break\n                case 'success':\n                    message.success('Success!')\n                    break\n                case 'item saved':\n                    message.success('Item is saved')\n                    break\n                case 'prgress created':\n                    message.success('Progress has started!')\n                    break\n                default:\n                    message.success('Success!')\n                    break\n            }\n        }\n    }\n    if (res.data.status && res.data.status === 'no account')\n        props.history.push('/activate-account')\n}\n","import axios from 'axios'\n\nimport Cookies from 'universal-cookie'\nimport jwt from 'jsonwebtoken'\nimport processRes from '../../utils/processRes'\n\nconst cookies = new Cookies()\n\nexport const tryAuth = (props, forceLogin) => (dispatch: Object) => {\n    sessionStorage.setItem('systemRefresh', '0')\n    const token = cookies.get('auth_token')\n    const rememberMe = cookies.get('rememberme')\n    if (rememberMe) {\n        cookies.remove('rememberme', {\n            path: '/',\n        })\n        if (rememberMe === 'false') {\n            cookies.remove('auth_token', {\n                path: '/',\n            })\n        }\n    }\n    const userId = jwt.decode(token)\n    axios.defaults.headers.post['Content-Type'] = 'application/json'\n    axios.defaults.headers.put['Content-Type'] = 'application/json'\n    axios.defaults.headers.delete['Content-Type'] = 'application/json'\n    axios.defaults.headers.common.Accept = 'application/json'\n    if (token && userId) {\n        axios.defaults.headers.common['x-auth-token'] = token\n        axios.defaults.headers.post['x-auth-token'] = token\n        axios.defaults.headers.get['x-auth-token'] = token\n        axios.defaults.headers.delete['x-auth-token'] = token\n        axios.defaults.headers.put['x-auth-token'] = token\n        dispatch(setIsAuthed(userId._id))\n    } else {\n        dispatch(setIsAuthed(false))\n        dispatch(saveLastUrl(props.history.location.pathname))\n        const pathParts = props.history.location.pathname.split('/')\n        if (\n            pathParts.length === 2 &&\n            !['explore', 'login', 'logintest'].includes(pathParts[1])\n        )\n            props.history.push('/logout')\n\n        if (forceLogin) props.history.push('/logout')\n    }\n}\n\nconst saveLastUrl = url => ({\n    type: 'SAVE_LAST_URL',\n    url,\n})\n\nconst setIsAuthed = id => ({\n    type: 'SET_IS_AUTHED',\n    id,\n})\n\nexport const logout = () => dispatch => {\n    cookies.remove('rememberme', {\n        path: '/',\n    })\n    cookies.remove('auth_token', {\n        path: '/',\n    })\n    delete axios.defaults.headers.common['x-auth-token']\n    delete axios.defaults.headers.post['x-auth-token']\n    delete axios.defaults.headers.get['x-auth-token']\n    delete axios.defaults.headers.delete['x-auth-token']\n    delete axios.defaults.headers.put['x-auth-token']\n    dispatch(setIsAuthed(false))\n}\n\nexport const setData = data => ({\n    type: 'SET_DATA',\n    data,\n})\n\nexport const setConnectingToWS = data => ({\n    type: 'SET_CONNECTING_WS',\n    data,\n})\n\nexport const removeData = data => ({\n    type: 'REMOVE_DATA',\n    data,\n})\n\nexport const setFriendsData = data => ({\n    type: 'SET_FRIENDS_DATA',\n    data,\n})\n\nexport const setAvatarV = v => ({\n    type: 'SET_AVATAR_V',\n    v,\n})\n\nexport const increaseAvatarV = () => ({\n    type: 'INCREASE_AVATAR_V',\n})\n\nexport const setPageTitle = title => ({\n    type: 'SET_PAGE_TITLE',\n    title,\n})\n\nexport const buyPerk = (account, perk, owner, props) => dispatch => {\n    const currency = account.wallet.find(item => item.user === owner._id)\n    if (currency && currency.amount >= perk.price) {\n        axios\n            .post('/api/shop/buy', {\n                perkId: perk.perkId,\n                ownerId: owner._id,\n            })\n            .then(res => {\n                processRes(res)\n                if (res.data.success) {\n                    dispatch(setData(res.data, props.history.location.pathname))\n                }\n            })\n            .catch(err => {})\n    } else {\n        alert(\n            'You cannot buy this item as you do not have enough money from this user.'\n        )\n    }\n}\n\nexport const confirmTransaction = (transactionId, props) => dispatch => {\n    axios\n        .post('/api/shop/confirm', {\n            transactionId,\n        })\n        .then(res => {\n            processRes(res)\n            if (res.data.success) {\n                dispatch(setData(res.data, props.history.location.pathname))\n            }\n        })\n        .catch(err => {})\n}\n\nexport const cancelTransaction = (transactionId, props) => dispatch => {\n    axios\n        .post('/api/shop/cancel', {\n            transactionId,\n        })\n        .then(res => {\n            processRes(res)\n            if (res.data.success) {\n                dispatch(setData(res.data, props.history.location.pathname))\n            }\n        })\n        .catch(err => {})\n}\n\nexport const setFriendSearchResult = data => ({\n    type: 'SET_FRIEND_SEARCH_RESULT',\n    data,\n})\n\nexport const setAccountActivated = value => ({\n    type: 'SET_ACCOUNT_ACTIVATED',\n    value,\n})\n","export default props => {\n    const createEmptyObj = () => ({\n        user: [],\n        account: [],\n        progress: [],\n        post: [],\n        group: [],\n        progressData: [],\n        friendData: [],\n        postData: [],\n        groupData: [],\n        transactionData: [],\n    })\n    const { store } = props\n    const requestedResources = createEmptyObj()\n    const neededResources = createEmptyObj()\n    if (store.isAuthed) {\n        if (!store.user) {\n            requestedResources.user.push(store.isAuthed)\n        } else {\n            neededResources.user.push(store.user._id)\n            if (store.currentAccount) {\n                if (store.account._id !== store.currentAccount) {\n                    requestedResources.account.push(store.currentAccount)\n                } else {\n                    neededResources.account.push(store.account._id)\n                    for (let progress of store.account.progresses) {\n                        if (!store.progressData[progress]) {\n                            requestedResources.progressData.push(progress)\n                        }\n                        neededResources.progressData.push(progress)\n                    }\n                    for (let group of store.account.groups) {\n                        if (!store.groupData[group]) {\n                            requestedResources.groupData.push(group)\n                        }\n                        neededResources.groupData.push(group)\n                    }\n                    for (let post of store.account.followPosts) {\n                        if (!store.postData[post]) {\n                            requestedResources.postData.push(post)\n                        }\n                        neededResources.postData.push(post)\n                    }\n                    for (let post of store.account.myPosts) {\n                        if (!store.postData[post]) {\n                            requestedResources.postData.push(post)\n                        }\n                        neededResources.postData.push(post)\n                    }\n                    for (let transaction of store.account.transactions) {\n                        if (!store.transactionData[transaction]) {\n                            requestedResources.transactionData.push(transaction)\n                        }\n                        neededResources.transactionData.push(transaction)\n                    }\n                    for (let friend of store.account.friends) {\n                        if (!store.friendData[friend.friend]) {\n                            requestedResources.friendData.push(friend.friend)\n                        }\n                        neededResources.friendData.push(friend.friend)\n                    }\n                }\n            }\n            if (store.currentProfile) {\n                if (store.profile._id !== store.currentProfile) {\n                    requestedResources.account.push(store.currentProfile)\n                } else {\n                    neededResources.account.push(store.profile._id)\n                    for (let progress of store.profile.progresses) {\n                        if (!store.progressData[progress]) {\n                            requestedResources.progressData.push(progress)\n                        }\n                        neededResources.progressData.push(progress)\n                    }\n                    for (let group of store.profile.groups) {\n                        if (!store.groupData[group]) {\n                            requestedResources.groupData.push(group)\n                        }\n                        neededResources.groupData.push(group)\n                    }\n                    for (let friend of store.profile.friends) {\n                        if (!store.friendData[friend.friend]) {\n                            requestedResources.friendData.push(friend.friend)\n                        }\n                        neededResources.friendData.push(friend.friend)\n                    }\n                }\n            }\n            if (store.currentGroup) {\n                if (store.group._id !== store.currentGroup) {\n                    requestedResources.group.push(store.currentGroup)\n                } else {\n                    neededResources.group.push(store.group._id)\n                    for (let user of store.group.users) {\n                        if (!store.friendData[user]) {\n                            requestedResources.friendData.push(user)\n                        }\n                        neededResources.friendData.push(user)\n                    }\n                    for (let progress of store.group.progresses) {\n                        if (!store.progressData[progress]) {\n                            requestedResources.progressData.push(progress)\n                        }\n                        neededResources.progressData.push(progress)\n                    }\n                    for (let post of store.group.posts) {\n                        if (!store.postData[post]) {\n                            requestedResources.postData.push(post)\n                        }\n                        neededResources.postData.push(post)\n                    }\n                }\n            }\n            if (store.currentProgress) {\n                if (store.progress._id !== store.currentProgress) {\n                    requestedResources.progress.push(store.currentProgress)\n                } else {\n                    neededResources.progress.push(store.progress._id)\n                    let participants = []\n                    if (store.progress.owner)\n                        participants.push(store.progress.owner)\n                    if (store.progress.worker)\n                        participants.push(store.progress.worker)\n                    participants = [\n                        ...participants,\n                        ...(store.progress.experts || []),\n                        ...(store.progress.supporters || []),\n                    ]\n                    for (let friend of participants) {\n                        if (!store.friendData[friend]) {\n                            requestedResources.friendData.push(friend)\n                        }\n                        neededResources.friendData.push(friend)\n                    }\n                    for (let post of store.progress.posts) {\n                        if (!store.postData[post]) {\n                            requestedResources.postData.push(post)\n                        }\n                        neededResources.postData.push(post)\n                    }\n                }\n            }\n            if (store.currentPosts) {\n                for (let post of store.currentPosts) {\n                    const postEl = store.post[post]\n                    if (!postEl) {\n                        requestedResources.post.push(post)\n                    } else {\n                        neededResources.post.push(post)\n                        for (let friend of postEl.users) {\n                            if (!store.friendData[friend]) {\n                                requestedResources.friendData.push(friend)\n                            }\n                            neededResources.friendData.push(friend)\n                        }\n                        if (post.parent) {\n                            if (post.parent.parentType === 'progress')\n                                neededResources.progressData.push(\n                                    post.parent.parentId\n                                )\n                            else if (post.parent.parentType === 'group')\n                                neededResources.groupData.push(\n                                    post.parent.parentId\n                                )\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    const reduce = obj => {\n        for (let attr in obj) {\n            if (obj[attr]) {\n                obj[attr] = Array.from(new Set(obj[attr]))\n            }\n        }\n    }\n\n    reduce(neededResources)\n    const notNeededResources = createEmptyObj()\n    notNeededResources.profile = []\n    let notNeededExist\n    const check1 = (key, mode) => {\n        if (\n            store[mode]._id &&\n            !neededResources[key].includes(store[mode]._id)\n        ) {\n            notNeededResources[mode].push(store[mode]._id)\n            notNeededExist = true\n        }\n    }\n    const check2 = key => {\n        for (let attr in store[key]) {\n            if (!neededResources[key].includes(attr)) {\n                notNeededResources[key].push(attr)\n                notNeededExist = true\n            }\n        }\n    }\n    check1('account', 'account')\n    check1('account', 'profile')\n    check1('group', 'group')\n    check1('progress', 'progress')\n    check2('post')\n    check2('friendData')\n    check2('progressData')\n    check2('transactionData')\n    check2('postData')\n    check2('groupData')\n\n    if (notNeededExist) {\n        props.removeData(notNeededResources)\n    }\n\n    reduce(requestedResources)\n\n    return requestedResources\n}\n","import requestResource from './requestResource'\n\nexport default (versions, state, store, webSocket) => {\n    const notNeededResources = {\n        user: [],\n        account: [],\n        progress: [],\n        post: [],\n        group: [],\n        progressData: [],\n        friendData: [],\n        postData: [],\n        groupData: [],\n        transactionData: [],\n    }\n\n    const checkData = key => {\n        for (let attr in versions[key]) {\n            if (typeof versions[key][attr] !== 'undefined') {\n                if (store[key][attr]) {\n                    if (store[key][attr] !== versions[key][attr]) {\n                        requestResource(key, [attr], state)\n                    }\n                } else notNeededResources[key].push(attr)\n            }\n        }\n    }\n\n    const check = key => {\n        for (let attr in versions[key]) {\n            if (typeof versions[key][attr] !== 'undefined') {\n                if (store[key]._id === attr) {\n                    if (store[key].__v !== versions[key][attr]) {\n                        requestResource(key, [attr], state)\n                    }\n                    if (!store[key]._id) notNeededResources[key].push(attr)\n                } else notNeededResources[key].push(attr)\n            }\n        }\n    }\n\n    for (let attr in versions.user) {\n        if (typeof versions.user[attr] !== 'undefined') {\n            if (store.user._id === attr) {\n                if (store.user.__v !== versions.user[attr]) {\n                    requestResource('user', [attr], state)\n                }\n            } else notNeededResources.user.push(attr)\n        }\n    }\n\n    for (let attr in versions.account) {\n        if (typeof versions.account[attr] !== 'undefined') {\n            if (store.account._id === attr) {\n                if (store.account.__v !== versions.account[attr]) {\n                    requestResource('account', [attr], state)\n                }\n            }\n            if (store.profile._id === attr) {\n                if (store.profile.__v !== versions.account[attr]) {\n                    requestResource('account', [attr], state)\n                }\n                if (!store.account._id) notNeededResources.account.push(attr)\n            }\n        }\n        if (store.account._id !== attr && store.profile._id !== attr)\n            notNeededResources.account.push(attr)\n    }\n\n    check('progress')\n    check('group')\n\n    checkData('post')\n    checkData('friendData')\n    checkData('progressData')\n    checkData('postData')\n    checkData('groupData')\n    checkData('transactionData')\n\n    if (\n        notNeededResources.user.length > 0 ||\n        notNeededResources.account.length > 0 ||\n        notNeededResources.progress.length > 0 ||\n        notNeededResources.post.length > 0 ||\n        notNeededResources.group.length > 0 ||\n        notNeededResources.friendData.length > 0 ||\n        notNeededResources.progressData.length > 0 ||\n        notNeededResources.postData.length > 0 ||\n        notNeededResources.groupData.length > 0 ||\n        notNeededResources.transactionData.length > 0\n    ) {\n        return notNeededResources\n    }\n}\n","export default props => {\n    const { store } = props\n    const resources = {\n        user: {},\n        account: {},\n        progress: {},\n        post: {},\n        group: {},\n        transactionData: {},\n        friendData: {},\n        progressData: {},\n        groupData: {},\n        postData: {},\n    }\n\n    if (store.user && store.user._id) {\n        resources.user[store.user._id] = store.user.__v\n    }\n\n    if (store.account._id) {\n        resources.account[store.account._id] = store.account.__v\n    }\n    if (store.profile._id) {\n        resources.account[store.profile._id] = store.profile.__v\n    }\n    if (store.progress._id) {\n        resources.progress[store.progress._id] = store.progress.__v\n    }\n    if (store.group._id) {\n        resources.group[store.group._id] = store.group.__v\n    }\n\n    const addData = key => {\n        for (let item in store[key]) {\n            if (typeof store[key][item] !== 'undefined') {\n                if (store[key][item]._id) {\n                    resources[key][store[key][item]._id] = store[key][item].__v\n                }\n            }\n        }\n    }\n\n    addData('post')\n    addData('friendData')\n    addData('postData')\n    addData('groupData')\n    addData('progressData')\n    addData('TransactionData')\n\n    return resources\n}\n","import React, { Component } from 'react'\nimport axios from 'axios'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport message from 'antd/es/message'\nimport * as wsActions from '../../websocketActions'\nimport cloneDeep from 'lodash.clonedeep'\nimport getListOfNeededResources from './methods/getListOfNeededResources'\nimport compareVersionsAndRerequest from './methods/compareVersionsAndRerequest'\nimport getResourcesToMonitor from './methods/getResourcesToMonitor'\nconst diffpatcher = require('jsondiffpatch/dist/jsondiffpatch.umd.js').create({\n    propertyFilter: (name, context) => name !== 'patch',\n})\n\nexport let webSocket = false\n\nclass ConnectWebsocket extends Component {\n    state = {\n        user: [],\n        account: [],\n        progress: [],\n        post: [],\n        group: [],\n        friendData: [],\n        progressData: [],\n        postData: [],\n        groupData: [],\n        transactionData: [],\n    }\n    start = () => {\n        let url\n        if (process.env.NODE_ENV === 'development') {\n            url = 'ws://my.websiter.test:5000'\n        } else {\n            url = 'wss://addspiration.com'\n        }\n        let pingTimeout\n        webSocket = new WebSocket(url)\n\n        const heartbeat = versions => {\n            let notNeededResources\n            if (versions) {\n                notNeededResources = compareVersionsAndRerequest(\n                    versions,\n                    this.state,\n                    this.props.store,\n                    webSocket\n                )\n            }\n            clearTimeout(pingTimeout)\n\n            pingTimeout = setTimeout(() => {\n                webSocket.close()\n            }, 30000 + 1000)\n\n            webSocket.send(\n                JSON.stringify({\n                    messageCode: 'heartbeat',\n                    notNeededResources,\n                    //get back list of online friends\n                })\n            )\n        }\n\n        webSocket.onopen = event => {\n            const resourcesToMonitor = getResourcesToMonitor(this.props)\n            webSocket.send(\n                JSON.stringify({\n                    messageCode: 'auth',\n                    user: axios.defaults.headers.common['x-auth-token'],\n                    resourcesToMonitor,\n                    // progressId: this.props.progress._id,\n                })\n            )\n            this.initializeRequestResources(this.props)\n            heartbeat()\n        }\n\n        webSocket.onmessage = event => {\n            const news = JSON.parse(event.data)\n\n            switch (news.messageCode) {\n                case 'heartbeat':\n                    heartbeat(news.versions)\n                    break\n                case 'logout':\n                    this.props.logout()\n                    this.props.history.push('/logout')\n                    break\n\n                case 'successMessage':\n                    message.success(news.messageText)\n                    break\n                case 'errorMessage':\n                    message.error(news.messageText)\n                    break\n                case 'friendsData':\n                    this.props.setFriendsData(news.friendsData)\n                    break\n                case 'redirectToProgresses':\n                    this.props.history.push('/progresses')\n                    break\n                case 'addResource':\n                    this.props.saveResource(news.resources, news.type)\n                    break\n                case 'updateResource':\n                    this.props.updateResource(\n                        news.code,\n                        news.id,\n                        news.update,\n                        this.state\n                    )\n                    break\n                case 'friendSearchResult':\n                    this.props.setFriendSearchResult(news.data)\n                    break\n\n                // case 'update':\n                //     let newProgress\n                //     let oldProgress = cloneDeep(this.props.progress)\n                //     if (oldProgress.__v === news.progress.__v - 1) {\n                //         newProgress = diffpatcher.patch(\n                //             oldProgress,\n                //             news.progress.patch\n                //         )\n                //         newProgress.__v = news.progress.__v\n                //         this.props.setData(\n                //             {\n                //                 progress: newProgress,\n                //             },\n                //             this.props.history.location.pathname\n                //         )\n                //     }\n                //     wsActions.getFriendsData(\n                //         newProgress || this.props.progress,\n                //         this.props.account.friends\n                //     )\n                //     break\n                case 'error':\n                    message.error(news.text)\n                    break\n                // case 'notFoundResource':\n                //     this.markNotFoundResource(data)\n                //     break\n                default:\n                    break\n            }\n        }\n        webSocket.onclose = event => {\n            clearTimeout(pingTimeout)\n        }\n    }\n\n    // markNotFoundResource = data => {\n    //     const requestedResources = this.state.requestedResources.filter(\n    //         item => item.id.toString() === data._id.toString()\n    //     )\n    //     this.setState({ requestedResources })\n    // }\n\n    checkInterval = null\n\n    check = () => {\n        if (!webSocket || webSocket.readyState === 3) {\n            clearInterval(this.checkInterval)\n            this.checkInterval = setInterval(this.check, 5000)\n            this.start()\n        }\n    }\n    componentWillMount() {\n        this.checkInterval = setInterval(this.check, 50)\n    }\n\n    reRequestResourcesInterval = null\n    reRequestResources = () => {\n        for (let group of [\n            'user',\n            'account',\n            'progress',\n            'post',\n            'group',\n            'postData',\n            'groupData',\n            'progressData',\n            'friendData',\n            'transactionData',\n        ]) {\n            if (this.state[group].length > 0) {\n                if (webSocket && webSocket.readyState === 1) {\n                    webSocket.send(\n                        JSON.stringify({\n                            messageCode: 'requestResource',\n                            ids: this.state[group],\n                            type: group,\n                        })\n                    )\n                }\n            }\n        }\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.checkInterval)\n        if (webSocket) {\n            webSocket.close()\n        }\n        this.props.setConnectingToWS(false)\n    }\n    componentDidMount() {\n        this.props.setConnectingToWS(true)\n    }\n    componentWillReceiveProps(nextProps) {\n        this.initializeRequestResources(nextProps)\n    }\n\n    initializeRequestResources = nextProps => {\n        const newRequestedResources = getListOfNeededResources(nextProps)\n        for (let group of [\n            'user',\n            'account',\n            'progress',\n            'post',\n            'group',\n            'postData',\n            'groupData',\n            'progressData',\n            'friendData',\n            'transactionData',\n        ]) {\n            if (newRequestedResources[group].length > 0) {\n                if (webSocket && webSocket.readyState === 1) {\n                    webSocket.send(\n                        JSON.stringify({\n                            messageCode: 'requestResource',\n                            ids: newRequestedResources[group].filter(\n                                item => !this.state[group].includes(item)\n                            ),\n                            type: group,\n                        })\n                    )\n                }\n            }\n        }\n        this.setState(() => newRequestedResources)\n        clearInterval(this.reRequestResourcesInterval)\n        this.reRequestResourcesInterval = setInterval(\n            this.reRequestResources,\n            3000\n        )\n    }\n\n    render() {\n        return null\n    }\n}\nconst mapStateToProps = state => {\n    return {\n        store: state,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: (data, pulledFrom) =>\n            dispatch(actions.setData(data, pulledFrom)),\n        removeData: data => dispatch(actions.removeData(data)),\n        saveResource: (data, type) =>\n            dispatch(actions.saveResource(data, type)),\n        setFriendsData: data => dispatch(actions.setFriendsData(data)),\n\n        updateResource: (code, id, update, state) =>\n            dispatch(actions.updateResource(code, id, update, state)),\n        setFriendSearchResult: data =>\n            dispatch(actions.setFriendSearchResult(data)),\n        setConnectingToWS: data => dispatch(actions.setConnectingToWS(data)),\n\n        logout: () => dispatch(actions.logout()),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(ConnectWebsocket)\n)\n","import { setData } from './auth'\n\nexport const saveResource = (data, type) => (dispatch, getState) => {\n    if (data.length > 0) {\n        const state = getState()\n        switch (type) {\n            case 'user':\n                const user = data[0]\n                let currentAccount = user.currentAccount\n                if (!currentAccount) currentAccount = user.myAccount\n                // if(!currentAccount)\n                //activate-account\n                dispatch(setData({ user, currentAccount }))\n                break\n            case 'account':\n                const account = data.find(\n                    item => item._id === state.currentAccount\n                )\n                if (account) {\n                    dispatch(setData({ account }))\n                }\n\n                const profile = data.find(\n                    item => item._id === state.currentProfile\n                )\n                if (profile) {\n                    dispatch(setData({ profile }))\n                }\n\n                break\n            case 'progress':\n                const progress = data.find(\n                    item => item._id === state.currentProgress\n                )\n                if (progress) {\n                    dispatch(setData({ progress }))\n                }\n                break\n            case 'group':\n                const group = data.find(item => item._id === state.currentGroup)\n                if (group) {\n                    dispatch(setData({ group }))\n                }\n                break\n            case 'post':\n                let post = {}\n                for (let item of data) {\n                    post[item._id] = item\n                }\n                dispatch(setData({ post }))\n                break\n            case 'friendData':\n                let friendData = {}\n                for (let item of data) {\n                    friendData[item._id] = item\n                }\n                dispatch(setData({ friendData }))\n                break\n            case 'progressData':\n                let progressData = {}\n                for (let item of data) {\n                    progressData[item._id] = item\n                }\n                dispatch(setData({ progressData }))\n                break\n            case 'transactionData':\n                let transactionData = {}\n                for (let item of data) {\n                    transactionData[item._id] = item\n                }\n                dispatch(setData({ transactionData }))\n                break\n            case 'postData':\n                let postData = {}\n                for (let item of data) {\n                    postData[item._id] = item\n                }\n                dispatch(setData({ postData }))\n                break\n            case 'groupData':\n                let groupData = {}\n                for (let item of data) {\n                    groupData[item._id] = item\n                }\n                dispatch(setData({ groupData }))\n                break\n            default:\n                break\n        }\n    }\n}\n","import { webSocket } from '../ConnectWebsocket'\n\nexport default (type, ids, state) => {\n    const notRequestedIds = ids.filter(id => !state[type].includes(id))\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'requestResource',\n                ids: notRequestedIds,\n                type,\n            })\n        )\n    }\n}\n","import requestResource from '../../containers/ConnectWebsocket/methods/requestResource'\nimport * as actions from './index'\nimport cloneDeep from 'lodash.clonedeep'\n\nconst applyDelta = (source, delta, watchFields) => {\n    // console.log('---------------------------APLY DELTA------------------------')\n    // console.log('----------------source----------------')\n    // console.log(source)\n    // console.log('----------------delta-------------------')\n    // console.log(delta)\n    const result = cloneDeep(source)\n\n    const applyUpdateToPart = (res, del, watchFields) => {\n        const applyWithDot = (res, keys, del) => {\n            if (keys.length > 1) {\n                const key = keys.shift()\n                applyWithDot(res[key], keys, del)\n            } else {\n                if (typeof res === 'array') {\n                    res.push(del)\n                } else {\n                    res[keys[0]] = del\n                }\n            }\n        }\n        for (let attr in del) {\n            const keys = attr.split('.')\n            if (!watchFields || watchFields.includes(keys[0])) {\n                if (typeof del[attr] !== 'undefined') {\n                    applyWithDot(res, keys, del[attr])\n                }\n            }\n        }\n    }\n\n    applyUpdateToPart(result, delta.updatedFields, watchFields)\n\n    const applyDeleteToPart = (result, keys) => {\n        if (keys.length > 1) {\n            const key = keys.shift()\n            applyDeleteToPart(result[key], keys)\n        } else {\n            if (typeof result === 'object') {\n                delete result[keys[0]]\n            } else if (typeof result === 'array') {\n                result.splice(keys[0], 1)\n            }\n        }\n    }\n\n    for (let field of delta.removedFields) {\n        if (field.indexOf('.') > -1) {\n            const keys = field.split('.')\n            if (!watchFields || watchFields.includes(keys[0]))\n                applyDeleteToPart(result, keys)\n        } else {\n            delete result[field]\n        }\n    }\n    return result\n}\n\nexport const updateResource = (code, id, update, parState) => (\n    dispatch,\n    getState\n) => {\n    if (update && id && code) {\n        const state = getState()\n        const check = key => {\n            if (state[key]._id === id) {\n                if (state[key].__v === update.updatedFields.__v - 1) {\n                    const element = applyDelta(state[key], update)\n                    dispatch(actions.setData({ [key]: element }))\n                } else {\n                    if (state[key].id) requestResource(code, [id], parState)\n                }\n            }\n        }\n        const check2 = (key, watchFields) => {\n            let updateData = {\n                [key]: cloneDeep(state[key]),\n            }\n            const friend = updateData[key][id]\n            if (friend) {\n                if (friend.__v === update.updatedFields.__v - 1) {\n                    updateData[key][id] = applyDelta(\n                        friend,\n                        update,\n                        watchFields\n                    )\n                    dispatch(actions.setData(updateData))\n                } else {\n                    requestResource(code, [id], parState)\n                }\n            }\n        }\n        switch (code) {\n            case 'user':\n                check('user')\n                break\n            case 'account':\n                check('account')\n                check('profile')\n                break\n            case 'progress':\n                check('progress')\n                break\n            case 'group':\n                check('group')\n                break\n            case 'post':\n                dispatch(actions.setData(check2(code)))\n                break\n            case 'friendData':\n                dispatch(\n                    actions.setData(\n                        check2(code, ['name', 'image', 'notifications', '__v'])\n                    )\n                )\n                break\n            case 'progressData':\n                dispatch(\n                    actions.setData(\n                        check2(code, [\n                            'owner',\n                            'worker',\n                            'goal',\n                            'notifications',\n                            '__v',\n                        ])\n                    )\n                )\n                break\n            case 'postData':\n                dispatch(\n                    actions.setData(check2(code, ['notifications', '__v']))\n                )\n                break\n            case 'groupData':\n                dispatch(\n                    actions.setData(check2(code, ['notifications', '__v']))\n                )\n                break\n            case 'transactionData':\n                dispatch(actions.setData(check2(code)))\n                break\n            default:\n                break\n        }\n    }\n}\n","import axios from 'axios'\nimport message from 'antd/es/message'\n\nexport const uploadFile = (file, size, filename, callback) => {\n    if (file == null) {\n        return alert('No file selected.')\n    }\n\n    const reader = new FileReader()\n    reader.onload = async event => {\n        resizeImageToSpecificSize(file, { width: size, height: size }, data => {\n            urltoFile(data, '/120').then(function(file) {\n                getSignedRequest(file, filename, callback)\n            })\n        })\n    }\n\n    reader.readAsArrayBuffer(file)\n}\n\nconst urltoFile = (url, filename, mimeType) => {\n    mimeType = mimeType || (url.match(/^data:([^;]+);/) || '')[1]\n    return fetch(url)\n        .then(function(res) {\n            return res.arrayBuffer()\n        })\n        .then(function(buf) {\n            return new File([buf], filename, { type: mimeType })\n        })\n}\n\nconst resizeImageToSpecificSize = (file, size, cb) => {\n    if (file) {\n        var reader = new FileReader()\n        reader.onload = function(event) {\n            resizeImageFromSrcToSpecificSize(event.target.result, size, cb)\n        }\n        reader.readAsDataURL(file)\n    }\n}\n\nconst resizeImageFromSrcToSpecificSize = (src, size, cb) => {\n    var data\n    var img = new Image()\n    img.onload = function() {\n        const widthCoef = img.width / size.width\n        const heightCoef = img.height / size.height\n        var oc = document.createElement('canvas'),\n            octx = oc.getContext('2d')\n        oc.width = img.width\n        oc.height = img.height\n        octx.drawImage(img, 0, 0)\n        if (widthCoef > 1 || heightCoef > 1) {\n            if (img.width > img.height) {\n                oc.height = (img.height / img.width) * size.width\n                oc.width = size.width\n            } else {\n                oc.width = (img.width / img.height) * size.width\n                oc.height = size.width\n            }\n        }\n        octx.drawImage(oc, 0, 0, oc.width, oc.height)\n        octx.drawImage(img, 0, 0, oc.width, oc.height)\n        data = oc.toDataURL()\n        cb(data)\n    }\n    img.src = src\n}\n\nconst getSignedRequest = (file, fileName, callback) => {\n    return axios\n        .post('/api/sign-s3', {\n            fileName,\n        })\n        .then(response => {\n            doUploadFile(file, response.data, callback)\n        })\n        .catch(err => {})\n}\n\nconst doUploadFile = (file, data, callback) => {\n    return axios\n        .put(data.signedRequest, file, {\n            headers: {\n                'Content-Type': 'multipart/form-data',\n            },\n        })\n        .then(response => {\n            callback(data.url)\n            message.success('The image has been saved.')\n        })\n        .catch(err => {\n            console.log(err)\n        })\n}\n","export default {\n    name: 200,\n    description: 10000,\n    message: 10000,\n}\n","import fieldLength from './fieldLength'\n\nexport const nicknameRules = [\n    {\n        required: true,\n        message: 'Nickname is too short. Minimal length is 2.',\n        whitespace: true,\n        min: 2,\n    },\n    {\n        message: `Nickname is too long. Miximum length is ${fieldLength.name}.`,\n        whitespace: true,\n        max: fieldLength.name,\n    },\n    {\n        pattern: /^[a-zA-Z0-9_-]*$/,\n        message: \"Nickname should contain only letters, numbers, '-' and '_'.\",\n    },\n]\n\nexport const nameRules = [\n    {\n        required: true,\n        min: 1,\n        whitespace: true,\n        message: 'Name is too short. Minimal length is 1.',\n    },\n    {\n        max: fieldLength.name,\n        message: `Name is too long. Miximum length is ${fieldLength.name}.`,\n    },\n]\n\nexport const accountNameRules = [\n    {\n        required: true,\n        min: 2,\n        whitespace: true,\n        message: 'Name is too short. Minimal length is 2.',\n    },\n    {\n        max: fieldLength.name,\n        message: `Name is too long. Miximum length is ${fieldLength.name}.`,\n    },\n]\n\nexport const descriptionRules = [\n    {\n        max: fieldLength.description,\n        message: `Description is too long. Miximum length is ${\n            fieldLength.description\n        }.`,\n    },\n]\n\nexport const messageRules = [\n    {\n        min: 1,\n        whitespace: true,\n        message: 'Message is too short. Minimal length is 1.',\n    },\n    {\n        max: fieldLength.message,\n        message: `Message is too long. Miximum length is ${\n            fieldLength.message\n        }.`,\n    },\n]\n\nexport const priceRules = [\n    {\n        required: true,\n        message: 'Please input the item price.',\n    },\n]\n","import React, { useState } from 'react'\nimport Modal from 'antd/es/modal'\n\nimport Button from 'antd/es/button'\nimport Input from 'antd/es/input'\nimport InputNumber from 'antd/es/input-number'\nimport Form from 'antd/es/form'\nimport Select from 'antd/es/select'\nimport Upload from 'antd/es/upload'\nimport PlusOutlined from '@ant-design/icons/PlusOutlined'\n\nimport Avatar from 'antd/es/avatar'\nimport Popconfirm from 'antd/es/popconfirm'\nimport {\n    nameRules,\n    descriptionRules,\n    priceRules,\n} from '../../constants/fieldRules'\nimport getAvatar from '../../utils/getAvatar'\n\nconst AddPerkForm = props => {\n    const [previewImage, setPreviewImage] = useState('')\n    const {\n        connections,\n        perkId,\n        perk,\n        deletePerk,\n        onFinish,\n        images,\n        setImages,\n        uploadImage,\n    } = props\n\n    const layout = {\n        labelCol: { span: 8 },\n        wrapperCol: { span: 16 },\n    }\n    const tailLayout = {\n        wrapperCol: { offset: 8, span: 16 },\n    }\n\n    const connectionsSelect = (\n        <Select\n            mode=\"multiple\"\n            style={{ width: '100%' }}\n            placeholder=\"Please select\"\n            getPopupContainer={trigger => trigger.parentNode}\n        >\n            {connections.map(item => (\n                <Select.Option key={item._id}>\n                    <Avatar\n                        src={getAvatar(item._id, item.image)}\n                        size={20}\n                        style={{ marginRight: '10px' }}\n                    />\n                    {item.name} - ({item._id})\n                </Select.Option>\n            ))}\n        </Select>\n    )\n    const [form] = Form.useForm()\n\n    const normFile = e => {\n        if (Array.isArray(e)) {\n            return e\n        }\n        return e && e.fileList.map(image => image.url)\n    }\n\n    return !props.perkId || perk ? (\n        <>\n            <Form\n                form={form}\n                name=\"dynamic_form_nest_item\"\n                onFinish={onFinish}\n                autoComplete=\"off\"\n                initialValues={perk || {}}\n                {...layout}\n            >\n                <Form.Item\n                    name=\"images\"\n                    label=\"Images\"\n                    valuePropName=\"images\"\n                    getValueFromEvent={normFile}\n                >\n                    <Upload\n                        listType=\"picture-card\"\n                        fileList={images.map((image, index) => ({\n                            ...image,\n                            uid: index,\n                        }))}\n                        onPreview={file => {\n                            setPreviewImage(file.url)\n                        }}\n                        onChange={({ fileList }) => setImages(fileList)}\n                        customRequest={({ file }) => {\n                            uploadImage(file)\n                        }}\n                    >\n                        {images.length >= 8 ? null : (\n                            <div>\n                                <PlusOutlined />\n                                <div className=\"ant-upload-text\">Upload</div>\n                            </div>\n                        )}\n                    </Upload>\n                </Form.Item>\n                <Form.Item label=\"Name\" name=\"name\" rules={nameRules}>\n                    <Input placeholder=\"New item\" />\n                </Form.Item>\n                <Form.Item\n                    label=\"Description\"\n                    name=\"description\"\n                    rules={descriptionRules}\n                >\n                    <Input.TextArea placeholder=\"Write a few words about this item.\" />\n                </Form.Item>\n\n                {props.mode === 'shop' && (\n                    <Form.Item label=\"Available for\" name=\"users\">\n                        {connectionsSelect}\n                    </Form.Item>\n                )}\n\n                {props.mode === 'shop' && (\n                    <Form.Item label=\"Price\" name=\"price\" rules={priceRules}>\n                        <InputNumber />\n                    </Form.Item>\n                )}\n\n                <Form.Item {...tailLayout}>\n                    <Button type=\"primary\" htmlType=\"submit\" size=\"large\">\n                        Save\n                    </Button>\n\n                    {perkId && (\n                        <Popconfirm\n                            title=\"Are you sure you want to delete this item?\"\n                            onConfirm={deletePerk}\n                            onCancel={() => {}}\n                            okText=\"Confirm\"\n                            cancelText=\"Cancel\"\n                        >\n                            <Button type=\"link\" danger size=\"large\">\n                                Delete\n                            </Button>\n                        </Popconfirm>\n                    )}\n                </Form.Item>\n            </Form>\n            <Modal\n                visible={previewImage}\n                footer={null}\n                onCancel={() => setPreviewImage('')}\n            >\n                <img\n                    alt=\"example\"\n                    style={{ width: '100%' }}\n                    src={previewImage}\n                />\n            </Modal>\n        </>\n    ) : null\n}\n\nexport default AddPerkForm\n","import { webSocket } from '../containers/ConnectWebsocket/ConnectWebsocket'\n\nexport const sendMessage = (\n    accountId,\n    postId,\n    messageValue,\n    image,\n    replyToMessage,\n    editedMessage\n) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'sendMessage',\n                messageValue,\n                image,\n                postId,\n                accountId,\n                replyToMessage,\n                editedMessage,\n            })\n        )\n    }\n}\n\nexport const changeLikesMessage = (\n    messageCode,\n    messageId,\n    accountId,\n    postId\n) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode,\n                messageId,\n                accountId,\n                postId,\n            })\n        )\n    }\n}\n\nexport const addPost = (\n    accountId,\n    parentId,\n    parentType,\n    messageValue,\n    images\n) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'addPost',\n                accountId,\n                parentId,\n                parentType,\n                messageValue,\n                images,\n            })\n        )\n    }\n}\n","import { webSocket } from '../containers/ConnectWebsocket/ConnectWebsocket'\n\nexport const savePerk = (accountId, id, value, mode) => {\n    if (accountId && webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode:\n                    mode === 'wishlist'\n                        ? 'saveWishlistItem'\n                        : mode === 'goals'\n                        ? 'saveGoal'\n                        : 'savePerk',\n                id,\n                value,\n                accountId,\n            })\n        )\n    }\n}\n\nexport const deletePerk = (accountId, id, mode) => {\n    if (accountId && id && webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode:\n                    mode === 'wishlist'\n                        ? 'deleteWishlistItem'\n                        : mode === 'goals'\n                        ? 'deleteGoal'\n                        : 'deletePerk',\n                id,\n                accountId,\n            })\n        )\n    }\n}\n\nexport const buyPerk = (buyer, seller, perkId) => {\n    if (perkId && buyer && seller && webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'buyPerk',\n                perkId,\n                buyer,\n                seller,\n            })\n        )\n    }\n}\n","import { webSocket } from '../containers/ConnectWebsocket/ConnectWebsocket'\n\nexport const searchFriends = search => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'searchFriends',\n                search,\n            })\n        )\n    }\n}\n\nexport const addFriend = (accountId, friendId) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'addFriend',\n                accountId,\n                friendId,\n            })\n        )\n    }\n}\n\nexport const acceptFriend = (accountId, friendId) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'acceptFriend',\n                accountId,\n                friendId,\n            })\n        )\n    }\n}\n\nexport const unfriend = (accountId, friendId) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'unfriend',\n                accountId,\n                friendId,\n            })\n        )\n    }\n}\n","import React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { uploadFile } from '../../utils/uploadFile'\nimport AddPerkForm from './AddPerkForm'\nimport { withRouter } from 'react-router-dom'\nimport * as wsActions from '../../websocketActions'\n\nconst AddPerk = props => {\n    const [perk, setPerk] = useState()\n    const [images, setImages] = useState([])\n    const { account, mode } = props\n    const perkId = props.perkId || ''\n    useEffect(() => {\n        if (perkId) {\n            const perk =\n                mode === 'wishlist'\n                    ? account.wishlist.find(item => item.itemId === perkId)\n                    : mode === 'goals'\n                    ? account.goals.find(item => item.goalId === perkId)\n                    : account.perks.find(item => item.perkId === perkId)\n            if (perk) {\n                setPerk(perk)\n                setImages(\n                    perk.images.map((url, index) => ({\n                        url,\n                        uid: index,\n                    }))\n                )\n            }\n        }\n    }, [])\n\n    const connections = [\n        account,\n        ...account.friends\n            .filter(friend => friend.status === 'friend')\n            .map(friend => props.friendData[friend.friend]),\n    ]\n\n    const uploadImage = file => {\n        uploadFile(file, 800, undefined, url => {\n            setImages(\n                [...images, { url }].map((image, index) => ({\n                    ...image,\n                    uid: index,\n                }))\n            )\n        })\n    }\n\n    return !props.perkId || perk ? (\n        <AddPerkForm\n            connections={connections}\n            perkId={perkId}\n            perk={perk}\n            deletePerk={() => {\n                wsActions.deletePerk(account._id, perkId, mode)\n                props.setEditPerkOpen(false)\n            }}\n            onFinish={value => {\n                const processedValue = {\n                    ...value,\n                    images: images.map(image => image.url),\n                }\n                wsActions.savePerk(account._id, perkId, processedValue, mode)\n                props.setEditPerkOpen(false)\n            }}\n            images={images}\n            setImages={setImages}\n            uploadImage={uploadImage}\n            mode={props.mode}\n        />\n    ) : null\n}\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n        friendData: state.friendData,\n    }\n}\nexport default withRouter(connect(mapStateToProps)(AddPerk))\n","import React from 'react'\nimport { withRouter } from 'react-router-dom'\n\nexport default withRouter(props => (\n    <div\n        onClick={() => props.history.push(props.onClickLink)}\n        style={{ cursor: 'pointer' }}\n    >\n        <img\n            style={{\n                width: '100%',\n                borderRadius: '15px',\n            }}\n            src={props.images.length > 0 ? props.images[0] : ''}\n        />\n        <div style={{ padding: '5px 0px', wordBreak: 'break-all' }}>\n            {props.body}\n        </div>\n    </div>\n))\n","import React from 'react'\n\nexport default props => (\n    <svg\n        viewBox=\"0 0 24 24\"\n        width=\"24\"\n        height=\"24\"\n        style={{ transform: 'rotate(90deg)' }}\n    >\n        <path d=\"M2 10h4v4H2v-4zm8 4h4v-4h-4v4zm8-4v4h4v-4h-4z\" />\n    </svg>\n)\n","import React from 'react'\nimport { withRouter } from 'react-router-dom'\n\nimport * as wsActions from '../../websocketActions'\nimport Dropdown from 'antd/es/dropdown'\nimport Menu from 'antd/es/menu'\nimport Button from 'antd/es/button'\nimport MasonryCard from '../../components/MasonryCard'\nimport EditFilled from '@ant-design/icons/EditFilled'\nimport Card from 'antd/es/card'\nimport MoreIcon from '../../components/UI/MoreIcon'\n\nconst PerkCard = props => {\n    const {\n        perk,\n        perkId,\n        owner,\n        account,\n        setEditedPerk,\n        setEditPerkOpen,\n        mode,\n    } = props\n\n    return (\n        <MasonryCard\n            onClickLink={`/${mode || 'shop'}/${owner._id}/${perkId}`}\n            images={perk.images}\n            body={\n                <Card\n                    extra={\n                        <span onClick={e => e.stopPropagation()}>\n                            {owner._id === account._id &&\n                            !props.onlyBuy &&\n                            props.mode === 'shop' ? (\n                                <Dropdown.Button\n                                    type=\"primary\"\n                                    key=\"1\"\n                                    onClick={() =>\n                                        wsActions.buyPerk(\n                                            account._id,\n                                            owner._id,\n                                            perkId\n                                        )\n                                    }\n                                    overlay={\n                                        <Menu>\n                                            <Menu.Item\n                                                key=\"0\"\n                                                onClick={() => {\n                                                    setEditedPerk(perkId)\n                                                    setEditPerkOpen(true)\n                                                }}\n                                            >\n                                                Edit\n                                            </Menu.Item>\n                                        </Menu>\n                                    }\n                                >\n                                    Buy\n                                </Dropdown.Button>\n                            ) : props.mode === 'shop' ? (\n                                <Button\n                                    type=\"primary\"\n                                    onClick={() =>\n                                        wsActions.buyPerk(\n                                            account._id,\n                                            owner._id,\n                                            perkId\n                                        )\n                                    }\n                                >\n                                    Buy\n                                </Button>\n                            ) : owner._id === account._id && !props.onlyBuy ? (\n                                <Dropdown\n                                    trigger={['click', 'hover']}\n                                    overlay={\n                                        <Menu>\n                                            <Menu.Item\n                                                key=\"0\"\n                                                onClick={() => {\n                                                    setEditedPerk(perkId)\n                                                    setEditPerkOpen(true)\n                                                }}\n                                            >\n                                                Edit\n                                            </Menu.Item>\n                                        </Menu>\n                                    }\n                                >\n                                    <Button type=\"link\">\n                                        <MoreIcon />\n                                    </Button>\n                                </Dropdown>\n                            ) : null}\n                        </span>\n                    }\n                    title={\n                        <span style={{ fontWeight: 'bold' }}>\n                            {perk.name}\n                            {mode === 'shop' && ` ($${perk.price})`}\n                        </span>\n                    }\n                    style={{ width: '100%' }}\n                    type=\"inner\"\n                    bordered={false}\n                />\n            }\n        />\n    )\n}\n\nexport default withRouter(PerkCard)\n","import React from 'react'\nimport Button from 'antd/es/button'\nimport { PlusOutlined } from '@ant-design/icons'\n\nconst AddCard = props => (\n    <Button\n        onClick={props.action}\n        type=\"primary\"\n        shape=\"round\"\n        icon={<PlusOutlined />}\n        size=\"large\"\n    >\n        {props.title}\n    </Button>\n)\n\nexport default AddCard\n","export const friendsBreakPoints = {\n    default: 4,\n    1600: 3,\n    1100: 2,\n    600: 1,\n}\n\nexport const cardBreakPoints = {\n    default: 4,\n    1100: 3,\n    700: 2,\n    350: 1,\n}\n","import React from 'react'\nimport Masonry from 'react-masonry-css'\nimport {\n    cardBreakPoints,\n    friendsBreakPoints,\n} from '../utils/masonryBreakPoints'\n\nexport default props => (\n    <div style={{ marginTop: '40px', ...props.style }}>\n        <Masonry\n            breakpointCols={3}\n            className=\"my-masonry-grid\"\n            columnClassName=\"my-masonry-grid_column\"\n            breakpointCols={\n                props.friends ? friendsBreakPoints : cardBreakPoints\n            }\n        >\n            {props.children}\n        </Masonry>\n    </div>\n)\n","import React, { useState } from 'react'\nimport Modal from 'antd/es/modal'\nimport Button from 'antd/es/button'\nimport AddPerk from './AddPerk'\nimport PerkCard from './PerkCard'\nimport AddCard from '../../components/AddCard/AddCard'\nimport { cardBreakPoints } from '../../utils/masonryBreakPoints'\nimport Masonry from 'react-masonry-css'\nimport MasonryGrid from '../../components/MasonryGrid'\nimport MasonryCard from '../../components/MasonryCard'\n\nconst WishlistAndPerks = props => {\n    const [editedPerk, setEditedPerk] = useState('')\n    const [editPerkOpen, setEditPerkOpen] = useState()\n\n    const { account } = props\n\n    const editPerk = (\n        <Modal\n            title=\"Add item\"\n            visible={editPerkOpen}\n            maskClosable\n            closable\n            onCancel={() => setEditPerkOpen(false)}\n            width=\"90%\"\n            footer={\n                <Button key=\"back\" onClick={() => setEditPerkOpen(false)}>\n                    Close\n                </Button>\n            }\n            destroyOnClose={true}\n        >\n            <AddPerk\n                setEditPerkOpen={setEditPerkOpen}\n                perkId={editedPerk}\n                mode={props.mode}\n            />\n        </Modal>\n    )\n\n    return account._id ? (\n        <>\n            <AddCard\n                action={() => {\n                    setEditedPerk('')\n                    setEditPerkOpen(true)\n                }}\n                title=\"Add item\"\n                sub={props.mode === 'shop' && 'Set price'}\n            />\n            <MasonryGrid>\n                {account[props.listKey || props.mode] &&\n                    account[props.listKey || props.mode].map((perk, index) => (\n                        <PerkCard\n                            key={index}\n                            perk={perk}\n                            perkId={\n                                props.mode === 'wishlist' ||\n                                props.mode === 'goals'\n                                    ? perk.itemId\n                                    : perk.perkId\n                            }\n                            owner={account}\n                            account={account}\n                            setEditedPerk={setEditedPerk}\n                            setEditPerkOpen={setEditPerkOpen}\n                            mode={props.mode}\n                            style={{ cursor: 'pointer' }}\n                        />\n                    ))}\n            </MasonryGrid>\n\n            {editPerk}\n        </>\n    ) : null\n}\n\nexport default WishlistAndPerks\n","import React, { useEffect } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport WishlistAndPerks from '../Shop/WishlistAndPerks'\n\nconst Goals = props => {\n    useEffect(() => {\n        props.setPageTitle({ main: 'Goals', sub: '' })\n    }, [])\n\n    return props.account._id ? (\n        <WishlistAndPerks mode=\"goals\" account={props.account} />\n    ) : (\n        <span />\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Goals)\n)\n","import axios from 'axios'\nimport processRes from './processRes'\nexport default (props, data, setData, options, callback) => {\n    // if (typeof props.isAuthed === 'undefined') return\n    // options = {\n    //     forceAuth: true,\n    //     forceActivate: true,\n    //     pullData: true,\n    //     ...(options || {}),\n    // }\n\n    // if (!props.isAuthed) {\n    //     props.tryAuth(props, options.forceAuth)\n    // }\n\n    // if (options.pullData) {\n    axios\n        .get('/api' + props.history.location.pathname)\n        .then(res => {\n            processRes(res, props)\n            // if (options.forceActivate) {\n            //     if (props.isAuthed && res.data.status === 'no account') {\n            //         props.history.push('/activate-account')\n            //     }\n            // }\n\n            setData(res.data)\n            callback(res.data)\n        })\n        .catch(err => {})\n    // }\n}\n","import React, { useState, useEffect } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport Button from 'antd/es/button'\nimport Comment from 'antd/es/comment'\nimport Avatar from 'antd/es/avatar'\nimport Input from 'antd/es/input'\nimport Form from 'antd/es/form'\nimport Upload from 'antd/es/upload'\nimport PictureFilled from '@ant-design/icons/PictureFilled'\nimport LoadingOutlined from '@ant-design/icons/LoadingOutlined'\nimport CloseCircleFilled from '@ant-design/icons/CloseCircleFilled'\nimport SendOutlined from '@ant-design/icons/SendOutlined'\nimport { uploadFile } from '../../utils/uploadFile'\nimport * as wsActions from '../../websocketActions'\nimport getAvatar from '../../utils/getAvatar'\nimport { messageRules } from '../../constants/fieldRules'\nimport { PlusOutlined } from '@ant-design/icons'\nimport message from 'antd/es/message'\nimport Modal from 'antd/es/modal/Modal'\n\nconst AddMessage = props => {\n    const [previewImage, setPreviewImage] = useState('')\n    const [imageLoading, setImageLoading] = useState(false)\n    const [images, setImages] = useState(props.images || [])\n    const { post, account } = props\n\n    const [messageText, setMessageText] = useState(\n        props.content ||\n            (props.replyToUser ? '@' + props.replyToUser + ' ' : '')\n    )\n\n    useEffect(() => {\n        setMessageText(\n            props.content ||\n                (props.replyToUser ? '@' + props.replyToUser + ' ' : '')\n        )\n    }, [props.replyToUser, props.content])\n\n    const uploadImage = file => {\n        uploadFile(file, 800, undefined, url => {\n            setImages([...images, url])\n        })\n    }\n\n    return post && account._id ? (\n        <div\n            style={{\n                background: '#fff',\n\n                ...(props.replyTo\n                    ? {}\n                    : {\n                          width: '100%',\n                          bottom: '-200px',\n                          left: '0px',\n                          //   position: 'absolute',\n                      }),\n            }}\n        >\n            <Comment\n                avatar={<Avatar src={getAvatar(account._id, account.image)} />}\n                content={\n                    <>\n                        <Form.Item rules={messageRules} style={{ margin: 0 }}>\n                            <Input.TextArea\n                                autoSize={{\n                                    minRows: 1,\n                                    maxRows: 3,\n                                }}\n                                rows={1}\n                                onChange={e => setMessageText(e.target.value)}\n                                value={messageText}\n                                placeholder=\"Write a comment\"\n                            />\n                        </Form.Item>\n                        {images.length > 0 && (\n                            <Form.Item style={{ margin: 0 }}>\n                                <Upload\n                                    listType=\"picture-card\"\n                                    fileList={images.map((image, index) => ({\n                                        url: image,\n                                        uid: index,\n                                    }))}\n                                    onPreview={file => {\n                                        setPreviewImage(file.url)\n                                    }}\n                                    onChange={({ fileList }) =>\n                                        setImages(\n                                            fileList.map(image => image.url)\n                                        )\n                                    }\n                                    customRequest={({ file }) => {\n                                        uploadImage(file)\n                                    }}\n                                >\n                                    {images.length >= 8 ? null : (\n                                        <div>\n                                            <PlusOutlined />\n                                            <div className=\"ant-upload-text\">\n                                                Upload\n                                            </div>\n                                        </div>\n                                    )}\n                                </Upload>\n                            </Form.Item>\n                        )}\n                        <Form.Item style={{ margin: 0 }}>\n                            <Button\n                                htmlType=\"submit\"\n                                onClick={() => {\n                                    wsActions.sendMessage(\n                                        account._id,\n                                        post._id,\n                                        messageText,\n                                        images,\n                                        props.replyTo,\n                                        props.editingMessage\n                                    )\n                                    setMessageText('')\n                                    setImages([])\n                                    if (props.onSend) props.onSend()\n                                }}\n                                icon={<SendOutlined />}\n                                type=\"text\"\n                            >\n                                Send\n                            </Button>\n                            <Upload\n                                showUploadList={false}\n                                customRequest={({ file }) => {\n                                    if (images.length > 8) {\n                                        message.warning(\n                                            'You can not attach more than 8 images.'\n                                        )\n                                        return\n                                    }\n                                    setImageLoading(true)\n                                    uploadFile(file, 800, undefined, url => {\n                                        setImageLoading(false)\n                                        setImages([...images, url])\n                                    })\n                                }}\n                            >\n                                <Button\n                                    type=\"text\"\n                                    icon={\n                                        imageLoading ? (\n                                            <LoadingOutlined />\n                                        ) : (\n                                            <PictureFilled />\n                                        )\n                                    }\n                                >\n                                    Image\n                                </Button>\n                            </Upload>\n                            {props.cancel && (\n                                <Button\n                                    onClick={props.cancel}\n                                    icon={<CloseCircleFilled />}\n                                    type=\"text\"\n                                >\n                                    Cancel\n                                </Button>\n                            )}\n                        </Form.Item>\n                    </>\n                }\n            />\n            <Modal\n                visible={previewImage}\n                footer={null}\n                onCancel={() => setPreviewImage('')}\n            >\n                <img\n                    alt=\"example\"\n                    style={{ width: '100%' }}\n                    src={previewImage}\n                />\n            </Modal>\n        </div>\n    ) : null\n}\n\nexport default withRouter(AddMessage)\n","import React from 'react'\nimport Carousel from 'antd/es/carousel'\nimport classes from './imageCarousel.module.css'\n\nconst ImageCarousel = props =>\n    props.images && props.images.length > 0 ? (\n        <Carousel\n            style={{ width: props.size || 'auto' }}\n            dots={{ className: classes.Dots }}\n        >\n            {props.images.map(\n                (image, index) =>\n                    image && (\n                        <div key={index}>\n                            <div\n                                style={{\n                                    backgroundImage: 'url(\"' + image + '\")',\n                                    backgroundSize: props.type || 'contain',\n                                    backgroundPosition: 'center',\n                                    width: props.size || '100%',\n                                    height:\n                                        props.height || props.size || '300px',\n                                    backgroundRepeat: 'no-repeat',\n                                }}\n                            />\n                        </div>\n                    )\n            )}\n        </Carousel>\n    ) : null\n\nexport default ImageCarousel\n","import React from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\n\nimport Button from 'antd/es/button'\nimport Avatar from 'antd/es/avatar'\nimport getAvatar from '../../utils/getAvatar'\nimport Typography from 'antd/es/typography'\n\nconst UserButton = props => {\n    const { account, profile, id, friendSearchResult } = props\n    const friendData = props.friendDataExp || props.friendData\n    const getUserData = id =>\n        id === account._id\n            ? account\n            : id === profile._id\n            ? profile\n            : id === friendSearchResult._id\n            ? friendSearchResult\n            : friendData[id]\n    const userName = id => (getUserData(id) ? getUserData(id).name : id)\n    const userAvatar = id =>\n        getUserData(id) ? (\n            <span\n                key={id}\n                onClick={() => {\n                    if (!props.noClick) handleClick(id)\n                }}\n            >\n                <Avatar\n                    src={getAvatar(id, getUserData(id).image)}\n                    size={props.size || (props.noClick ? 20 : 40)}\n                    style={props.group ? {} : { margin: ' 0 5px' }}\n                />\n            </span>\n        ) : null\n\n    const handleClick = id => props.history.push('/profile/' + (id || props.id))\n    return props.group ? (\n        <span onClick={e => e.stopPropagation()}>\n            <Avatar.Group style={{ margin: ' 0 5px' }}>\n                {props.ids.map(id => userAvatar(id))}\n            </Avatar.Group>\n        </span>\n    ) : props.noClick ? (\n        <>\n            {!props.noAva && userAvatar(id)}\n            {!props.noName && userName(id)}\n        </>\n    ) : props.span ? (\n        <span\n            style={{ cursor: 'pointer', fontWeight: 'bold', ...props.style }}\n            onClick={e => {\n                e.stopPropagation()\n                handleClick()\n            }}\n        >\n            {!props.noAva && userAvatar(id)}\n            {!props.noName && userName(id)}\n        </span>\n    ) : (\n        <Button\n            type=\"link\"\n            style={{ padding: '0px 5px', height: 'auto', ...props.style }}\n            onClick={e => {\n                e.stopPropagation()\n                handleClick()\n            }}\n        >\n            {!props.noAva && userAvatar(id)}\n\n            {!props.noName && userName(id)}\n        </Button>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        account: state.account,\n        profile: state.profile,\n        friendData: state.friendData,\n        friendSearchResult: state.friendSearchResult,\n    }\n}\n\nexport default withRouter(connect(mapStateToProps)(UserButton))\n","import React, { useState } from 'react'\nimport { withRouter } from 'react-router-dom'\n\nimport Comment from 'antd/es/comment'\n\nimport Tooltip from 'antd/es/tooltip'\nimport Avatar from 'antd/es/avatar'\nimport TimeAgo from 'timeago-react'\n\nimport * as wsActions from '../../websocketActions'\nimport LikeFilled from '@ant-design/icons/LikeFilled'\nimport LikeOutlined from '@ant-design/icons/LikeOutlined'\nimport Card from 'antd/es/card'\nimport Carousel from 'antd/es/carousel'\nimport AddMessage from './AddMessage'\nimport getAvatar from '../../utils/getAvatar'\nimport Button from 'antd/es/button'\nimport ImageCarousel from '../UI/ImageCarousel/ImageCarousel'\nimport UserButton from '../UserButton/UserButton'\n\nconst Message = props => {\n    const {\n        account,\n        state,\n        setState,\n        message,\n        friendData,\n        progressData,\n        groupData,\n        post,\n        replies,\n        isStart,\n    } = props\n    const [replyVisible, setReplyVisible] = useState(false)\n    const [replyToUser, setReplyToUser] = useState('')\n    const [editingMessage, setEditingMessage] = useState('')\n    const [showReplies, setShowReplies] = useState(false)\n    const commentProps = {\n        actions: !props.isStart && [\n            <span>\n                <TimeAgo datetime={message.date} live />\n            </span>,\n            <span key=\"comment-basic-like\">\n                <Tooltip title=\"Like\">\n                    {message.likes.includes(account._id) ? (\n                        <LikeFilled\n                            onClick={() =>\n                                wsActions.changeLikesMessage(\n                                    'dislikeMessage',\n                                    message.messageId,\n                                    account._id,\n                                    post._id\n                                )\n                            }\n                        />\n                    ) : (\n                        <LikeOutlined\n                            onClick={() =>\n                                wsActions.changeLikesMessage(\n                                    'likeMessage',\n                                    message.messageId,\n                                    account._id,\n                                    post._id\n                                )\n                            }\n                        />\n                    )}\n                </Tooltip>\n                <span style={{ paddingLeft: '8px' }}>\n                    {message.likes.length}\n                </span>\n            </span>,\n\n            message.author !== account._id && (\n                <span\n                    key=\"comment-basic-reply-to\"\n                    onClick={() => {\n                        if (props.setReplyVisible) {\n                            props.setReplyVisible(true)\n                            props.setReplyToUser(props.message.author)\n                        } else {\n                            setReplyVisible(true)\n                            setReplyToUser('')\n                        }\n                        setShowReplies(true)\n                    }}\n                >\n                    Reply\n                </span>\n            ),\n            message.author === account._id && (\n                <span\n                    key=\"comment-basic-reply-to\"\n                    onClick={() => setEditingMessage(message.messageId)}\n                >\n                    Edit\n                </span>\n            ),\n        ],\n        avatar: (\n            <Avatar\n                src={getAvatar(\n                    message.author,\n                    friendData[message.author]\n                        ? friendData[message.author].image\n                        : Math.floor(Math.random() * 1000000)\n                )}\n            />\n        ),\n        content: isStart ? (\n            <>\n                {message.messageType === 'wishlist' && (\n                    <>\n                        {' '}\n                        <span\n                            style={{\n                                fontWeight: 'bold',\n                                cursor: 'pointer',\n                                margin: '10px 0px 0px ',\n                            }}\n                            onClick={() =>\n                                props.history.push(\n                                    `/wishlist/${message.details.owner}/${\n                                        message.details.itemId\n                                    }`\n                                )\n                            }\n                        >\n                            {message.details.name}\n                        </span>\n                    </>\n                )}\n                {message.text && <p>{message.text}</p>}\n            </>\n        ) : (\n            <>\n                <div\n                    style={{\n                        background: '#eee',\n                        borderRadius: '5px',\n                        padding: '3px 10px',\n                        display:\n                            message.image && message.image.length > 0\n                                ? 'block'\n                                : 'inline-block',\n                    }}\n                >\n                    <UserButton\n                        id={message.author}\n                        span={true}\n                        noAva={true}\n                        style={{ fontWeight: 'bold' }}\n                    />\n\n                    {message.image && message.image.length > 0 && (\n                        <ImageCarousel\n                            images={message.image}\n                            height=\"60vmin\"\n                            type=\"contain\"\n                        />\n                    )}\n\n                    {message.text && <p>{message.text}</p>}\n                </div>\n                <div />\n            </>\n        ),\n        author: isStart && (\n            <span\n                style={{ color: '#333', fontWeight: 'bold', fontSize: '14px' }}\n            >\n                <UserButton id={message.author} span={true} noAva={true} />{' '}\n                &rArr;{' '}\n                {post.parent &&\n                    progressData &&\n                    progressData[post.parent.parentId] && (\n                        <span\n                            style={{ cursor: 'pointer' }}\n                            onClick={() =>\n                                props.history.push(\n                                    '/progresses/' + post.parent.parentId\n                                )\n                            }\n                        >\n                            {progressData[post.parent.parentId].goal.name}\n                        </span>\n                    )}\n                {post.startMessage &&\n                    ['wishlist', 'perk', 'goal'].includes(\n                        post.startMessage.messageType\n                    ) && (\n                        <span\n                            style={{ cursor: 'pointer' }}\n                            onClick={() =>\n                                props.history.push('/profile/' + message.author)\n                            }\n                        >\n                            {post.startMessage.messageType === 'wishlist'\n                                ? 'Wishlist'\n                                : post.startMessage.messageType === 'goals'\n                                ? 'Goals'\n                                : 'Shop'}\n                        </span>\n                    )}\n            </span>\n        ),\n        datetime: isStart && (\n            <span style={{ color: '#333' }}>\n                <TimeAgo datetime={message.date} live />\n            </span>\n        ),\n    }\n    return account && friendData ? (\n        account._id !== message.author || !editingMessage ? (\n            <Comment {...commentProps}>\n                {props.isTop && replies && replies.length > 0 ? (\n                    showReplies ? (\n                        replies.map((reply, index) => (\n                            <Message\n                                key={index}\n                                message={reply}\n                                post={post}\n                                account={account}\n                                friendData={friendData}\n                                setReplyVisible={setReplyVisible}\n                                setReplyToUser={setReplyToUser}\n                            />\n                        ))\n                    ) : (\n                        <Button\n                            type=\"text\"\n                            onClick={() => setShowReplies(true)}\n                        >\n                            Show {replies.length} replies\n                        </Button>\n                    )\n                ) : null}\n\n                {props.isTop && replyVisible ? (\n                    <AddMessage\n                        post={post}\n                        account={account}\n                        replyTo={message.messageId}\n                        replyToUser={replyToUser}\n                        cancel={() => setReplyVisible(false)}\n                    />\n                ) : null}\n            </Comment>\n        ) : (\n            <AddMessage\n                post={post}\n                account={account}\n                replyTo={message.messageId}\n                editingMessage={editingMessage}\n                content={message.text}\n                images={message.image}\n                onSend={() => setEditingMessage('')}\n                cancel={() => setEditingMessage('')}\n            />\n        )\n    ) : null\n}\n\nexport default withRouter(Message)\n","import React, { useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport * as wsActions from '../../websocketActions'\nimport Message from './Message'\nimport { LikeOutlined, LikeFilled } from '@ant-design/icons'\nimport AddMessage from './AddMessage'\nimport Divider from 'antd/es/divider'\nimport Button from 'antd/es/button'\nimport ImageCarousel from '../UI/ImageCarousel/ImageCarousel'\n\nconst Post = props => {\n    const { post, account, friendData, progressData, groupData } = props\n    const [postOpen, setPostOpen] = useState(props.showReplies)\n    const getNumberOfMessages = messages => {\n        let result = 0\n        for (let item of messages) {\n            result = result + 1 + item.replies.length\n        }\n        return result\n    }\n    return post ? (\n        <>\n            {!props.noStartMessage && (\n                <>\n                    <Message\n                        message={post.startMessage}\n                        post={post}\n                        account={account}\n                        friendData={friendData}\n                        progressData={progressData}\n                        groupData={groupData}\n                        replies={[]}\n                        isStart={true}\n                    />\n                    {post.startMessage.image &&\n                        post.startMessage.image.length > 0 && (\n                            <ImageCarousel\n                                images={post.startMessage.image}\n                                height=\"60vmin\"\n                                type=\"contain\"\n                            />\n                        )}\n                </>\n            )}\n            <Divider type=\"horizontal\" style={{ margin: '5px 0' }} />\n\n            <div\n                style={{\n                    textAlign: 'left',\n                    // marginBottom: '200px',\n                    position: 'relative',\n                }}\n            >\n                <div\n                    style={{ display: 'flex', justifyContent: 'space-around' }}\n                >\n                    <span key=\"comment-basic-like\">\n                        <Button type=\"text\">\n                            {post.startMessage.likes.includes(account._id) ? (\n                                <LikeFilled\n                                    onClick={() =>\n                                        wsActions.changeLikesMessage(\n                                            'dislikeMessage',\n                                            post.startMessage.messageId,\n                                            account._id,\n                                            post._id\n                                        )\n                                    }\n                                />\n                            ) : (\n                                <LikeOutlined\n                                    onClick={() =>\n                                        wsActions.changeLikesMessage(\n                                            'likeMessage',\n                                            post.startMessage.messageId,\n                                            account._id,\n                                            post._id\n                                        )\n                                    }\n                                />\n                            )}\n\n                            <span style={{ paddingLeft: '8px' }}>\n                                {post.startMessage.likes.length}\n                            </span>\n                        </Button>\n                    </span>\n                    <span>\n                        <Button onClick={() => setPostOpen(true)} type=\"text\">\n                            Comment\n                            <span style={{ paddingLeft: '8px' }}>\n                                {getNumberOfMessages(post.messages)}\n                            </span>\n                        </Button>\n                    </span>\n                </div>\n                <Divider type=\"horizontal\" style={{ margin: '5px 0' }} />\n                {postOpen ? (\n                    <>\n                        <AddMessage post={post} account={account} />\n                        {post.messages && post.messages.length\n                            ? post.messages.map((message, index) => (\n                                  <Message\n                                      key={index}\n                                      message={message}\n                                      post={post}\n                                      account={account}\n                                      friendData={friendData}\n                                      replies={message.replies}\n                                      isTop={true}\n                                  />\n                              ))\n                            : null}\n                    </>\n                ) : (\n                    <Button onClick={() => setPostOpen(true)} type=\"text\">\n                        Show replies and comment\n                    </Button>\n                )}\n            </div>\n        </>\n    ) : null\n}\n\nexport default withRouter(Post)\n","import React, { useEffect, useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport Card from 'antd/es/card'\nimport pullData from '../../utils/pullData'\nimport Post from '../../components/Post/Post'\nimport UserButton from '../../components/UserButton/UserButton'\nimport ImageCarousel from '../../components/UI/ImageCarousel/ImageCarousel'\n\nconst Goal = props => {\n    const [data, setData] = useState({})\n    const { account } = props\n    useEffect(() => {\n        const pathParts = props.history.location.pathname.split('/')\n        if (pathParts.length > 3) {\n            const accountId = pathParts[2]\n            if (props.isAuthed && account._id === accountId) {\n                const goal = account.goals.find(\n                    item => item.itemId === pathParts[3]\n                )\n                setData({ profile: account, goal })\n            } else {\n                pullData(props, data, setData, { forceAuth: false }, data => {\n                    const friendData = {}\n                    for (let friend of data.friendData)\n                        friendData[friend._id] = friend\n\n                    props.setData({\n                        post: { [data.post._id]: data.post },\n                        friendData,\n                    })\n                })\n            }\n        }\n    }, [props.isAuthed])\n    if (!data.goal) return null\n    const { goal, profile } = data\n    props.setData({ currentPosts: goal.post })\n    if (goal) {\n        props.setPageTitle({ main: goal.name, sub: profile._id })\n    }\n    return goal ? (\n        <Card\n            title={\n                <span>\n                    Goal from <UserButton id={profile._id} /> goals\n                </span>\n            }\n            bordered={false}\n        >\n            <ImageCarousel images={goal.images} />\n\n            <h1>{goal.name}</h1>\n            <p style={{ whiteSpace: 'pre-wrap' }}>{goal.description}</p>\n            <Post\n                noStartMessage={true}\n                post={props.post[goal.post]}\n                account={props.account}\n                friendData={props.friendData}\n                showReplies={true}\n            />\n        </Card>\n    ) : null\n}\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        account: state.account,\n        post: state.post,\n        friendData: state.friendData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: data => {\n            dispatch(actions.setData(data))\n        },\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Goal)\n)\n","import React from 'react'\n\nimport Select from 'antd/es/select'\nimport UserButton from '../UserButton/UserButton'\n\nexport default (account, friendData, value?, onSelect?) => (\n    <Select\n        mode=\"multiple\"\n        style={{ width: '100%' }}\n        placeholder=\"Please select\"\n        value={value}\n        onChange={onSelect}\n        getPopupContainer={trigger => trigger.parentNode}\n    >\n        {[\n            account,\n            ...account.friends\n                .filter(friend => friend.status === 'friend')\n                .map(friend => friendData[friend.friend]),\n        ].map(item => (\n            <Select.Option key={item._id}>\n                <UserButton id={item._id} noClick={true} />\n            </Select.Option>\n        ))}\n    </Select>\n)\n","import React, { useState } from 'react'\nimport Modal from 'antd/es/modal'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as wsActions from '../../websocketActions'\nimport Button from 'antd/es/button'\nimport Input from 'antd/es/input'\nimport InputNumber from 'antd/es/input-number'\nimport Form from 'antd/es/form'\nimport Select from 'antd/es/select'\n\nimport Upload from 'antd/es/upload'\nimport Divider from 'antd/es/divider'\nimport PlusOutlined from '@ant-design/icons/PlusOutlined'\n\nimport { uploadFile } from '../../utils/uploadFile'\nimport {\n    descriptionRules,\n    nameRules,\n    priceRules,\n} from '../../constants/fieldRules'\nimport connectionsSelect from '../EditGoalAndProgressForm/connectionsSelect'\nimport Descriptions from 'antd/es/descriptions'\nimport UserButton from '../UserButton/UserButton'\nimport Dropdown from 'antd/es/dropdown'\nimport Menu from 'antd/es/menu'\nimport Card from 'antd/es/card'\nimport MoreIcon from '../UI/MoreIcon'\n\nconst Rewards = props => {\n    const [previewImage, setPreviewImage] = useState('')\n    const [previewReward, setPreviewReward] = useState()\n    const [editedReward, setEditedReward] = useState()\n    const [editedRewardIndex, setEditedRewardIndex] = useState()\n    const { account, friendData, readOnly, progress } = props\n    const rewardsGI = props.rewards.findIndex(\n        item => item.key === props.rewardKey\n    )\n\n    if (rewardsGI === -1 && props.setRewards)\n        props.setRewards([\n            ...props.rewards,\n            {\n                key: props.rewardKey,\n                rewards: [],\n            },\n        ])\n    const RewardButton = props => (\n        <Button type=\"link\" onClick={() => setPreviewReward(props.item)}>\n            {props.item.mode === 'simple'\n                ? props.item.simple\n                : props.item.mode === 'money'\n                ? props.item.money + ' (money)'\n                : props.item.mode === 'item'\n                ? props.item.itemName\n                : ''}\n        </Button>\n    )\n\n    return rewardsGI >= 0 ? (\n        <div>\n            {props.onlyButton ? (\n                props.rewards[rewardsGI].rewards.map((item, index) => (\n                    <RewardButton item={item} />\n                ))\n            ) : (\n                <Form.Item label={props.label} key={props.rewardKey}>\n                    <ol>\n                        {props.rewards[rewardsGI].rewards.map((item, index) => {\n                            return (\n                                <li key={index}>\n                                    <RewardButton item={item} />\n                                    <UserButton\n                                        id={item.owner}\n                                        noName={true}\n                                    />{' '}\n                                    =&gt;\n                                    {item.for && item.for.length > 0 ? (\n                                        <UserButton\n                                            id={item.for}\n                                            noName={true}\n                                        />\n                                    ) : (\n                                        <span\n                                            style={{\n                                                fontWeight: 'bold',\n                                                marginLeft: '5px',\n                                            }}\n                                        >\n                                            All\n                                        </span>\n                                    )}\n                                    {item.owner === account._id && !readOnly && (\n                                        <>\n                                            <Dropdown\n                                                overlay={\n                                                    <Menu>\n                                                        <Menu.Item\n                                                            onClick={() => {\n                                                                setEditedRewardIndex(\n                                                                    index\n                                                                )\n                                                                setEditedReward(\n                                                                    item\n                                                                )\n                                                            }}\n                                                        >\n                                                            Edit\n                                                        </Menu.Item>\n\n                                                        <Menu.Item\n                                                            onClick={() => {\n                                                                if (\n                                                                    !window.confirm(\n                                                                        'Are you sure you want to delete this item?'\n                                                                    )\n                                                                )\n                                                                    return\n                                                                if (\n                                                                    props.setRewards\n                                                                ) {\n                                                                    const newRewards = [\n                                                                        ...props.rewards,\n                                                                    ]\n                                                                    newRewards[\n                                                                        rewardsGI\n                                                                    ] = {\n                                                                        ...newRewards[\n                                                                            rewardsGI\n                                                                        ],\n                                                                        rewards: newRewards[\n                                                                            rewardsGI\n                                                                        ].rewards.filter(\n                                                                            (\n                                                                                item,\n                                                                                indexIn\n                                                                            ) =>\n                                                                                indexIn !==\n                                                                                index\n                                                                        ),\n                                                                    }\n                                                                    props.setRewards(\n                                                                        newRewards\n                                                                    )\n                                                                } else {\n                                                                    wsActions.deleteReward(\n                                                                        account._id,\n                                                                        progress._id,\n                                                                        props.rewardKey,\n                                                                        item.rewardId\n                                                                    )\n                                                                }\n                                                            }}\n                                                        >\n                                                            Delete\n                                                        </Menu.Item>\n                                                    </Menu>\n                                                }\n                                            >\n                                                <Button type=\"link\">\n                                                    <MoreIcon />\n                                                </Button>\n                                            </Dropdown>\n                                        </>\n                                    )}\n                                </li>\n                            )\n                        })}\n                    </ol>\n\n                    {!readOnly && (\n                        <Button\n                            type=\"link\"\n                            onClick={() => {\n                                setEditedRewardIndex('new')\n                                setEditedReward({ mode: 'simple' })\n                            }}\n                        >\n                            <PlusOutlined />\n                            Add rewards\n                        </Button>\n                    )}\n                </Form.Item>\n            )}\n            <Modal\n                visible={editedReward}\n                title={\n                    editedReward === 'new' ? 'Add new reward' : 'Edit reward'\n                }\n                closable={true}\n                onCancel={() => setEditedReward()}\n                onOk={() => {\n                    let rewardToSave = {}\n                    if (editedReward.mode === 'money') {\n                        rewardToSave.money = editedReward.money\n                        rewardToSave.mode = editedReward.mode\n                        rewardToSave.for = editedReward.for\n                        rewardToSave.rewardId = editedReward.rewardId\n                    } else {\n                        rewardToSave = { ...editedReward, money: undefined }\n                    }\n                    rewardToSave.owner = account._id\n\n                    if (props.setRewards) {\n                        const newRewards = [...props.rewards]\n\n                        if (editedRewardIndex === 'new')\n                            newRewards[rewardsGI] = {\n                                ...newRewards[rewardsGI],\n                                rewards: [\n                                    ...newRewards[rewardsGI].rewards,\n                                    rewardToSave,\n                                ],\n                            }\n                        else\n                            newRewards[rewardsGI] = {\n                                ...newRewards[rewardsGI],\n                                rewards: newRewards[rewardsGI].rewards.map(\n                                    (item, index) => {\n                                        if (index === editedRewardIndex)\n                                            return rewardToSave\n                                        else return item\n                                    }\n                                ),\n                            }\n                        props.setRewards(newRewards)\n                        setEditedReward()\n                        setEditedRewardIndex()\n                    } else {\n                        wsActions.saveReward(\n                            account._id,\n                            progress._id,\n                            props.rewardKey,\n                            rewardToSave\n                        )\n                        setEditedReward()\n                        setEditedRewardIndex()\n                    }\n                }}\n                destroyOnClose={true}\n                okText=\"Save\"\n            >\n                {editedReward && (\n                    <>\n                        <Form.Item label=\"Reward type\">\n                            <Select\n                                placeholder=\"Type\"\n                                value={editedReward.mode}\n                                onSelect={value => {\n                                    setEditedReward({\n                                        ...editedReward,\n                                        mode: value,\n                                    })\n                                }}\n                                style={{ width: '100%' }}\n                                getPopupContainer={trigger =>\n                                    trigger.parentNode\n                                }\n                            >\n                                <Select.Option key=\"simple\" value=\"simple\">\n                                    Simple reward\n                                </Select.Option>\n                                <Select.Option key=\"item\" value=\"item\">\n                                    Item reward\n                                </Select.Option>\n                                <Select.Option key=\"money\" value=\"money\">\n                                    Money reward\n                                </Select.Option>\n                            </Select>\n                        </Form.Item>\n                        <Form.Item label=\"Reward for\">\n                            {connectionsSelect(\n                                account,\n                                friendData,\n                                editedReward.for,\n                                value => {\n                                    setEditedReward({\n                                        ...editedReward,\n                                        for: value,\n                                    })\n                                }\n                            )}\n                            <p>(leave blank for all)</p>\n                        </Form.Item>\n                        <Divider type=\"horizontal\" />\n                        {editedReward.mode === 'simple' ? (\n                            <Form.Item\n                                label=\"Description\"\n                                rules={[\n                                    ...descriptionRules,\n                                    {\n                                        required: true,\n                                        min: 1,\n                                        whitespace: true,\n                                        message:\n                                            'Desription is too short. Minimal length is 1.',\n                                    },\n                                ]}\n                            >\n                                <Input.TextArea\n                                    value={editedReward.simple}\n                                    onChange={({ target: { value } }) =>\n                                        setEditedReward({\n                                            ...editedReward,\n                                            simple: value,\n                                        })\n                                    }\n                                    placeholder=\"Explain how you will reward\"\n                                />\n                            </Form.Item>\n                        ) : editedReward.mode === 'money' ? (\n                            <Form.Item label=\"Amount\" rules={priceRules}>\n                                <InputNumber\n                                    value={editedReward.money}\n                                    onChange={value => {\n                                        setEditedReward({\n                                            ...editedReward,\n                                            money: value,\n                                        })\n                                    }}\n                                />\n                            </Form.Item>\n                        ) : (\n                            <>\n                                <Form.Item label=\"Images\">\n                                    <Upload\n                                        listType=\"picture-card\"\n                                        fileList={(\n                                            editedReward.itemImages || []\n                                        ).map((url, index) => ({\n                                            url,\n                                            uid: index,\n                                        }))}\n                                        onPreview={file => {\n                                            setPreviewImage(file.url)\n                                        }}\n                                        onChange={({ fileList }) => {\n                                            setEditedReward({\n                                                ...editedReward,\n                                                itemImages: fileList.map(\n                                                    image => image.url\n                                                ),\n                                            })\n                                        }}\n                                        customRequest={({ file }) => {\n                                            uploadFile(\n                                                file,\n                                                800,\n                                                undefined,\n                                                url => {\n                                                    setEditedReward({\n                                                        ...editedReward,\n                                                        itemImages: [\n                                                            ...(editedReward.itemImages ||\n                                                                []),\n                                                            url,\n                                                        ],\n                                                    })\n                                                }\n                                            )\n                                        }}\n                                    >\n                                        {(editedReward.itemImages || [])\n                                            .length >= 8 ? null : (\n                                            <div>\n                                                <PlusOutlined />\n                                                <div className=\"ant-upload-text\">\n                                                    Upload\n                                                </div>\n                                            </div>\n                                        )}\n                                    </Upload>\n                                </Form.Item>\n                                <Form.Item label=\"Name\" rules={nameRules}>\n                                    <Input\n                                        value={editedReward.itemName}\n                                        onChange={({ target: { value } }) =>\n                                            setEditedReward({\n                                                ...editedReward,\n                                                itemName: value,\n                                            })\n                                        }\n                                    />\n                                </Form.Item>\n                                <Form.Item\n                                    label=\"Description\"\n                                    rules={descriptionRules}\n                                >\n                                    <Input.TextArea\n                                        value={editedReward.itemDescription}\n                                        onChange={({ target: { value } }) =>\n                                            setEditedReward({\n                                                ...editedReward,\n                                                itemDescription: value,\n                                            })\n                                        }\n                                    />\n                                </Form.Item>\n                            </>\n                        )}\n                    </>\n                )}\n            </Modal>\n            <Modal\n                visible={previewImage}\n                footer={null}\n                onCancel={() => setPreviewImage('')}\n            >\n                <img\n                    alt=\"example\"\n                    style={{ width: '100%' }}\n                    src={previewImage}\n                />\n            </Modal>\n            <Modal\n                visible={previewReward}\n                footer={null}\n                onCancel={() => setPreviewReward()}\n                title=\"Reward details\"\n            >\n                {previewReward ? (\n                    <>\n                        {previewReward.itemImages &&\n                            previewReward.itemImages.map((image, index) => (\n                                <span\n                                    key={index}\n                                    onClick={() => setPreviewImage(image)}\n                                >\n                                    <Card\n                                        type=\"inner\"\n                                        style={{\n                                            width: 200,\n                                            display: 'inline-block',\n                                        }}\n                                        hoverable\n                                        cover={\n                                            <div\n                                                style={{\n                                                    backgroundImage:\n                                                        'url(' + image + ')',\n                                                    height: 200,\n                                                    width: 200,\n                                                    backgroundSize: 'cover',\n                                                }}\n                                            />\n                                        }\n                                    />\n                                </span>\n                            ))}\n\n                        <Descriptions\n                            title=\"Reward description\"\n                            bordered\n                            column={{\n                                xxl: 4,\n                                xl: 3,\n                                lg: 3,\n                                md: 3,\n                                sm: 2,\n                                xs: 1,\n                            }}\n                        >\n                            {previewReward.mode === 'item' && (\n                                <Descriptions.Item label=\"Name\">\n                                    {previewReward.itemName}\n                                </Descriptions.Item>\n                            )}\n                            {previewReward.mode === 'item' && (\n                                <Descriptions.Item label=\"Description\">\n                                    <p style={{ whiteSpace: 'pre-wrap' }}>\n                                        {previewReward.itemDescription}\n                                    </p>\n                                </Descriptions.Item>\n                            )}\n                            {previewReward.mode === 'simple' && (\n                                <Descriptions.Item label=\"Description\">\n                                    <p style={{ whiteSpace: 'pre-wrap' }}>\n                                        {previewReward.simple}\n                                    </p>\n                                </Descriptions.Item>\n                            )}\n                            {previewReward.mode === 'money' && (\n                                <Descriptions.Item label=\"Money\">\n                                    {previewReward.money}\n                                </Descriptions.Item>\n                            )}\n                        </Descriptions>\n                    </>\n                ) : null}\n            </Modal>\n        </div>\n    ) : null\n}\n\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        account: state.account,\n        friendData: state.friendData,\n        progress: state.progress,\n    }\n}\n\nexport default withRouter(connect(mapStateToProps)(Rewards))\n","import { webSocket } from '../containers/ConnectWebsocket/ConnectWebsocket'\n\nexport const changeStage = (data, value, milestoneId) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'changeStage',\n                milestoneId,\n                value,\n                progressId: data.progress._id,\n                accountId: data.account._id,\n            })\n        )\n    }\n}\n\nexport const leaveProgress = data => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'leaveProgress',\n                progressId: data.progress._id,\n                accountId: data.account._id,\n            })\n        )\n    }\n}\n\nexport const createGroup = (accountId, progressId) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'createGroup',\n                progressId,\n                accountId,\n            })\n        )\n    }\n}\n\nexport const getFriendsData = (progress, accountFriends) => {\n    if (webSocket && webSocket.readyState === 1) {\n        if (progress) {\n            let accountIds = [\n                progress.owner,\n                progress.worker,\n                ...progress.goal.supporters,\n                ...progress.goal.experts,\n                ...accountFriends,\n            ]\n\n            accountIds = [...new Set(accountIds)]\n\n            webSocket.send(\n                JSON.stringify({\n                    messageCode: 'getFriendsData',\n                    accountIds,\n                })\n            )\n        }\n    }\n}\n\nexport const editGoalInProgress = (data, value) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'editGoalInProgress',\n                progressId: data.progress._id,\n                accountId: data.account._id,\n                value,\n            })\n        )\n    }\n}\n\nexport const startProgress = (accountId, value, inGroup) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'startProgress',\n                accountId,\n                value,\n                inGroup,\n            })\n        )\n    }\n}\n\nexport const deleteReward = (accountId, progressId, rewardKey, rewardId) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'deleteReward',\n                accountId,\n                progressId,\n                rewardKey,\n                rewardId,\n            })\n        )\n    }\n}\n\nexport const saveReward = (accountId, progressId, rewardKey, reward) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'saveReward',\n                accountId,\n                progressId,\n                rewardKey,\n                reward,\n            })\n        )\n    }\n}\n","import React, { useState } from 'react'\nimport Modal from 'antd/es/modal'\n\nimport Button from 'antd/es/button'\nimport Input from 'antd/es/input'\nimport Form from 'antd/es/form'\nimport Collapse from 'antd/es/collapse'\nimport Divider from 'antd/es/divider'\nimport Upload from 'antd/es/upload'\nimport PlusOutlined from '@ant-design/icons/PlusOutlined'\n\nimport { uploadFile } from '../../utils/uploadFile'\nimport Rewards from '../Rewards/Rewards'\nimport { nameRules, descriptionRules } from '../../constants/fieldRules'\nimport connectionsSelect from './connectionsSelect'\nimport Dropdown from 'antd/es/dropdown/dropdown'\nimport { sisOutlined } from '@ant-design/icons'\nimport Menu from 'antd/es/menu'\nimport MoreIcon from '../UI/MoreIcon'\n\nconst EditGoalAndProgressForm = props => {\n    const { goal, account, friendData } = props\n\n    const [milestones, setMilestones] = useState(\n        (goal && goal.milestones) || [\n            { name: 'Start', key: 'start' },\n            { name: 'Finish', key: 'finish' },\n        ]\n    )\n\n    const [images, setImages] = useState(\n        (goal &&\n            goal.images.map((url, index) => ({\n                url,\n                uid: index,\n            }))) ||\n            []\n    )\n    const [withMilestones, setWithMilestones] = useState(\n        goal && goal.withMilestones\n    )\n    const [previewImage, setPreviewImage] = useState('')\n    const [newTabIndex, setNewTabIndex] = useState(\n        (goal && goal.newTabIndex) || 2\n    )\n\n    const [rewards, setRewards] = useState((goal && goal.rewardsGroups) || [])\n\n    const onFinish = value => {\n        const milestonesValues = []\n        for (let milestone of milestones) {\n            milestonesValues.push({\n                ...value[milestone.key],\n                key: milestone.key,\n                name: milestone.name,\n            })\n        }\n\n        props.onFinish({\n            ...value,\n            images: images.map(image => image.url),\n            milestones,\n            milestonesValues,\n            newTabIndex,\n            rewardsGroups: rewards,\n        })\n    }\n\n    const addMilestone = milestone => {\n        const newPanes = [...milestones]\n        const newKey = `mile${newTabIndex}`\n        if (typeof milestone !== 'undefined') {\n            const indexOfMile = milestones.findIndex(\n                mile => mile.key === milestone\n            )\n            if (indexOfMile < 0) return\n            newPanes.splice(indexOfMile + 1, 0, {\n                key: newKey,\n                name: 'New milestone',\n            })\n        } else {\n            if (newPanes.find(item => item.key === 'finish'))\n                newPanes.splice(newPanes.length - 1, 0, {\n                    key: newKey,\n                    name: 'New milestone',\n                })\n            else\n                newPanes.push({\n                    key: newKey,\n                    name: 'New milestone',\n                })\n        }\n        setMilestones(newPanes)\n        setNewTabIndex(newTabIndex + 1)\n        form.setFieldsValue({\n            [newKey]: { key: newKey, name: 'New milestone' },\n        })\n    }\n\n    const layout = {\n        labelCol: { span: 8 },\n        wrapperCol: { span: 16 },\n    }\n    const tailLayout = {\n        wrapperCol: { offset: 8, span: 16 },\n    }\n\n    const [form] = Form.useForm()\n\n    const normFile = e => {\n        if (Array.isArray(e)) {\n            return e\n        }\n        return e && e.fileList.map(image => image.url)\n    }\n\n    const connections = connectionsSelect(account, friendData)\n\n    const MilestoneControls = props => {\n        const moveMilestoneUp = () => {\n            const indexOfMile = milestones.findIndex(\n                mile => mile.key === props.milestone\n            )\n            if (indexOfMile <= 0) return\n            const newMilestones = [...milestones]\n            newMilestones.splice(\n                indexOfMile - 1,\n                0,\n                newMilestones.splice(indexOfMile, 1)[0]\n            )\n            setMilestones(newMilestones)\n        }\n\n        const moveMilestoneDown = () => {\n            const indexOfMile = milestones.findIndex(\n                mile => mile.key === props.milestone\n            )\n            if (indexOfMile < 0 || indexOfMile >= milestones.length - 1) return\n            const newMilestones = [...milestones]\n            newMilestones.splice(\n                indexOfMile + 1,\n                0,\n                newMilestones.splice(indexOfMile, 1)[0]\n            )\n            setMilestones(newMilestones)\n        }\n\n        const addMilestoneBelow = () => {\n            addMilestone(props.milestone)\n        }\n\n        const deleteMilestone = () => {\n            const newPanes = milestones.filter(\n                pane => pane.key !== props.milestone\n            )\n            setMilestones(newPanes)\n        }\n\n        return (\n            <Dropdown\n                overlay={\n                    <Menu\n                        onClick={({ domEvent }) => domEvent.stopPropagation()}\n                    >\n                        {!props.finish && (\n                            <Menu.Item key=\"0\" onClick={addMilestoneBelow}>\n                                Add a milestone below\n                            </Menu.Item>\n                        )}\n                        {!props.finish && !props.start && (\n                            <Menu.Item key=\"1\" onClick={moveMilestoneUp}>\n                                Move up\n                            </Menu.Item>\n                        )}\n                        {!props.finish && !props.start && (\n                            <Menu.Item key=\"2\" onClick={moveMilestoneDown}>\n                                Move down\n                            </Menu.Item>\n                        )}\n                        <Menu.Divider />\n                        <Menu.Item\n                            key=\"3\"\n                            danger={true}\n                            onClick={deleteMilestone}\n                        >\n                            Delete\n                        </Menu.Item>\n                    </Menu>\n                }\n                trigger={['click', 'hover']}\n            >\n                <a\n                    className=\"ant-dropdown-link\"\n                    onClick={e => {\n                        e.preventDefault()\n                        e.stopPropagation()\n                    }}\n                >\n                    <MoreIcon />\n                </a>\n            </Dropdown>\n        )\n    }\n    return !props.goalId || goal ? (\n        <>\n            <Form\n                form={form}\n                name=\"dynamic_form_nest_item\"\n                onFinish={onFinish}\n                autoComplete=\"off\"\n                initialValues={\n                    goal || {\n                        name: 'New achievement',\n                        start: {\n                            name: 'Start',\n                            key: 'start',\n                            description: 'This is the start of the progress.',\n                        },\n                        finish: {\n                            name: 'Finish',\n                            key: 'finish',\n                            description: 'This is the finish of the progress.',\n                        },\n                    }\n                }\n                {...layout}\n                onValuesChange={changedValues => {\n                    for (let attr in changedValues) {\n                        const index = milestones.findIndex(\n                            item => item.key === attr\n                        )\n\n                        if (index > -1) {\n                            if (changedValues[attr].name) {\n                                const newMilestones = [...milestones]\n                                newMilestones[index] = {\n                                    ...newMilestones[index],\n                                    name: changedValues[attr].name,\n                                }\n                                setMilestones(newMilestones)\n                            }\n                        }\n                        if (attr === 'withMilestones') {\n                            setWithMilestones(changedValues[attr])\n                        }\n                    }\n                }}\n            >\n                <Form.Item\n                    name=\"images\"\n                    label=\"Images\"\n                    valuePropName=\"images\"\n                    getValueFromEvent={normFile}\n                >\n                    <Upload\n                        listType=\"picture-card\"\n                        fileList={images.map((image, index) => ({\n                            ...image,\n                            uid: index,\n                        }))}\n                        onPreview={file => {\n                            setPreviewImage(file.url)\n                        }}\n                        onChange={({ fileList }) => setImages(fileList)}\n                        customRequest={({ file }) => {\n                            uploadFile(file, 800, undefined, url => {\n                                setImages(\n                                    [...images, { url }].map(\n                                        (image, index) => ({\n                                            ...image,\n                                            uid: index,\n                                        })\n                                    )\n                                )\n                            })\n                        }}\n                    >\n                        {images.length >= 8 ? null : (\n                            <div>\n                                <PlusOutlined />\n                                <div className=\"ant-upload-text\">Upload</div>\n                            </div>\n                        )}\n                    </Upload>\n                </Form.Item>\n                <Form.Item label=\"Name\" name=\"name\" rules={nameRules}>\n                    <Input />\n                </Form.Item>\n                <Form.Item\n                    label=\"Description\"\n                    name=\"description\"\n                    rules={descriptionRules}\n                >\n                    <Input.TextArea\n                        autoSize={{ minRows: 4, maxRows: 20 }}\n                        placeholder=\"Write a few words about why this goal is important and how to achieve it.\"\n                    />\n                </Form.Item>\n\n                <Form.Item label=\"Achievers\" name=\"users\">\n                    {connections}\n                </Form.Item>\n\n                <Form.Item label=\"Experts\" name=\"experts\">\n                    {connections}\n                </Form.Item>\n                <Form.Item label=\"Supporters\" name=\"supporters\">\n                    {connections}\n                </Form.Item>\n\n                <Divider>Milestones</Divider>\n                <Collapse expandIconPosition=\"right\" accordion>\n                    {[\n                        ...(milestones.find(item => item.key === 'start')\n                            ? [milestones.find(item => item.key === 'start')]\n                            : []),\n                        ...milestones.filter(\n                            item =>\n                                item.key !== 'start' && item.key !== 'finish'\n                        ),\n                        ...(milestones.find(item => item.key === 'finish')\n                            ? [milestones.find(item => item.key === 'finish')]\n                            : []),\n                    ].map(milestone => {\n                        return (\n                            <Collapse.Panel\n                                header={\n                                    form.getFieldValue([\n                                        milestone.key,\n                                        'name',\n                                    ]) || milestone.name\n                                }\n                                key={milestone.key}\n                                extra={\n                                    <MilestoneControls\n                                        milestone={milestone.key}\n                                        start={milestone.key === 'start'}\n                                        finish={milestone.key === 'finish'}\n                                    />\n                                }\n                            >\n                                <Form.Item\n                                    label=\"Name\"\n                                    name={[milestone.key, 'name']}\n                                    rules={nameRules}\n                                >\n                                    <Input />\n                                </Form.Item>\n                                <Form.Item\n                                    label=\"Description\"\n                                    name={[milestone.key, 'description']}\n                                    rules={descriptionRules}\n                                >\n                                    <Input.TextArea placeholder=\"Write a few words about why this milestone is important and how to achieve it.\" />\n                                </Form.Item>\n                                <Rewards\n                                    rewardKey={milestone.key}\n                                    label=\"Rewards\"\n                                    rewards={rewards}\n                                    setRewards={setRewards}\n                                />\n                            </Collapse.Panel>\n                        )\n                    })}\n                </Collapse>\n                <Button type=\"link\" onClick={() => addMilestone()}>\n                    <PlusOutlined /> Add a new milestone\n                </Button>\n\n                <Form.Item {...tailLayout}>\n                    <Button type=\"primary\" htmlType=\"submit\" size=\"large\">\n                        Save\n                    </Button>\n                </Form.Item>\n            </Form>\n            <Modal\n                visible={previewImage}\n                footer={null}\n                onCancel={() => setPreviewImage('')}\n            >\n                <img\n                    alt=\"example\"\n                    style={{ width: '100%' }}\n                    src={previewImage}\n                />\n            </Modal>\n        </>\n    ) : null\n}\n\nexport default EditGoalAndProgressForm\n","import React from 'react'\nimport * as wsActions from '../../websocketActions'\n\nimport EditGoalAndProgressForm from '../../components/EditGoalAndProgressForm/EditGoalAndProgressForm'\n\nconst AddProgress = props =>\n    props.account._id ? (\n        <EditGoalAndProgressForm\n            onFinish={value => {\n                props.setStartProgressVisible(false)\n                wsActions.startProgress(props.account._id, value, props.inGroup)\n            }}\n            account={props.account}\n            friendData={props.friendData}\n        />\n    ) : null\n\nexport default AddProgress\n","import React from 'react'\nimport { withRouter } from 'react-router-dom'\n\nimport Card from 'antd/es/card'\n\nconst { Meta } = Card\n\nconst GroupCard = props => {\n    const { group } = props\n\n    return (\n        <div\n            style={{\n                display: 'inline-block',\n                margin: '4px 8px',\n            }}\n            onClick={() => props.history.push('/groups/' + group._id)}\n        >\n            <Card\n                type=\"inner\"\n                style={{\n                    width: 200,\n                }}\n                hoverable\n                cover={\n                    <div\n                        onClick={() =>\n                            props.history.push('/groups/' + group._id)\n                        }\n                        style={{\n                            backgroundImage:\n                                'url(' +\n                                (group.images &&\n                                    group.images.length > 0 &&\n                                    group.images[0]) +\n                                ')',\n                            height: 200,\n                            width: 200,\n                            backgroundSize: 'cover',\n                        }}\n                    />\n                }\n            >\n                <Meta title={group.name} />\n            </Card>\n        </div>\n    )\n}\n\nexport default withRouter(GroupCard)\n","import React, { useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport Tabs from 'antd/es/tabs'\nimport Button from 'antd/es/button'\nimport Empty from 'antd/es/empty'\nimport ProgressCard from './ProgressCard'\nimport AddCard from '../../components/AddCard/AddCard'\nimport Modal from 'antd/es/modal/Modal'\nimport AddProgress from './AddProgress'\nimport GroupCard from './GroupCard'\nimport Masonry from 'react-masonry-css'\nimport { cardBreakPoints } from '../../utils/masonryBreakPoints'\nimport MasonryGrid from '../../components/MasonryGrid'\nimport MasonryCard from '../../components/MasonryCard'\nimport UserButton from '../../components/UserButton/UserButton'\n\nconst { TabPane } = Tabs\n\nconst Progresses = props => {\n    const { fromProfile, progressData, account, groupData, profile } = props\n\n    const { progresses, groups } = fromProfile ? profile : account\n    const [startProgressVisible, setStartProgressVisible] = useState(false)\n    if (!fromProfile) props.setPageTitle({ main: 'Progresses', sub: '' })\n    let loadedProgresses, loadedGroups\n    if (progresses) {\n        loadedProgresses = progresses\n            .filter(item => progressData[item])\n            .map(item => progressData[item])\n        loadedGroups = groups\n            .filter(item => groupData[item] && groupData[item].active)\n            .map(item => groupData[item])\n    }\n\n    const editGoal = fromProfile ? null : loadedProgresses && loadedGroups ? (\n        <Modal\n            title=\"Add progress\"\n            visible={startProgressVisible}\n            maskClosable\n            closable\n            onCancel={() => setStartProgressVisible(false)}\n            width=\"100%\"\n            style={{ maxWidth: '1000px' }}\n            footer={\n                <Button\n                    key=\"back\"\n                    onClick={() => setStartProgressVisible(false)}\n                >\n                    Close\n                </Button>\n            }\n            destroyOnClose={true}\n        >\n            <AddProgress\n                setStartProgressVisible={setStartProgressVisible}\n                account={account}\n                friendData={props.friendData}\n            />\n        </Modal>\n    ) : null\n\n    const innerTabs =\n        loadedProgresses && loadedGroups ? (\n            <>\n                <TabPane tab=\"Progresses\" key=\"progresses\">\n                    {!fromProfile && (\n                        <>\n                            <AddCard\n                                title=\"Start a new progress\"\n                                sub=\"Rich your goals or help others!\"\n                                action={() => {\n                                    setStartProgressVisible(true)\n                                }}\n                            />\n                            {editGoal}\n                        </>\n                    )}\n                    <MasonryGrid>\n                        {loadedProgresses.map((item, index) => (\n                            <MasonryCard\n                                key={index}\n                                onClickLink={'/progresses/' + item._id}\n                                images={item.goal.images}\n                                body={\n                                    <>\n                                        <UserButton\n                                            ids={item.goal.users}\n                                            group={true}\n                                        />\n                                        <span style={{ fontWeight: 'bold' }}>\n                                            {item.name}\n                                        </span>\n                                    </>\n                                }\n                            />\n                        ))}\n                    </MasonryGrid>\n                </TabPane>\n                <TabPane tab=\"Groups\" key=\"groups\">\n                    {loadedGroups.length > 0 ? (\n                        loadedGroups.map((group, index) => (\n                            <GroupCard key={index} group={group} />\n                        ))\n                    ) : (\n                        <Empty\n                            imageStyle={{\n                                height: 160,\n                            }}\n                            description={\n                                <span>\n                                    Here you will find your groups. Groups can\n                                    be created in existing progresses.\n                                </span>\n                            }\n                        />\n                    )}\n                </TabPane>\n            </>\n        ) : null\n\n    return loadedProgresses && loadedGroups ? (\n        // <Tabs\n        //     style={{\n        //         background: 'transparent',\n        //         boxShadow: 'none',\n        //         margin: '0',\n        //         marginTop: '-15px',\n        //     }}\n        // >\n        //     {innerTabs}\n        // </Tabs>\n        <div>\n            {!fromProfile && (\n                <>\n                    <AddCard\n                        title=\"Start a new progress\"\n                        sub=\"Rich your goals or help others!\"\n                        action={() => {\n                            setStartProgressVisible(true)\n                        }}\n                    />\n                    {editGoal}\n                </>\n            )}\n            <MasonryGrid style={{ marginTop: '40px' }}>\n                {loadedProgresses.map((item, index) => (\n                    <MasonryCard\n                        key={index}\n                        onClickLink={'/progresses/' + item._id}\n                        images={item.goal.images}\n                        body={\n                            <>\n                                <UserButton\n                                    ids={item.goal.users}\n                                    group={true}\n                                />\n                                <span style={{ fontWeight: 'bold' }}>\n                                    {item.name}\n                                </span>\n                            </>\n                        }\n                    />\n                ))}\n            </MasonryGrid>\n        </div>\n    ) : null\n\n    // ) : (\n    //     <Empty\n    //         imageStyle={{\n    //             height: 160,\n    //         }}\n    //         description={\n    //             <span>\n    //                 This user has no progresses. You can create a goal and\n    //                 invite this user.\n    //             </span>\n    //         }\n    //     />\n    // )\n}\n\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n        profile: state.profile,\n        isAuthed: state.isAuthed,\n        progressData: state.progressData,\n        groupData: state.groupData,\n        friendData: state.friendData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: (data, pulledFrom) =>\n            dispatch(actions.setData(data, pulledFrom)),\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n        tryAuth: (props, forceAuth) =>\n            dispatch(actions.tryAuth(props, forceAuth)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Progresses)\n)\n","import React from 'react'\nimport Checkbox from 'antd/es/checkbox'\nimport Descriptions from 'antd/es/descriptions'\n\nimport * as wsActions from '../../websocketActions'\nimport Rewards from '../../components/Rewards/Rewards'\nimport UserButton from '../../components/UserButton/UserButton'\nimport Collapse from 'antd/es/collapse'\nimport Badge from 'antd/es/badge'\nimport Typography from 'antd/es/typography'\nimport Divider from 'antd/es/divider'\n\nconst ActivityTable = props => {\n    const { progress, account } = props\n    const { goal } = progress\n    const { rewardsGroups } = goal\n\n    const renderCheckbox = ({ checked, milestoneId, disabled }) => (\n        <Checkbox\n            checked={checked}\n            onChange={e =>\n                wsActions.changeStage(props, e.target.checked, milestoneId)\n            }\n            disabled={disabled}\n        />\n    )\n\n    const getCheckboxStatus = (id, stage, milestone) => {\n        return {\n            checked: stage.approvedBy.find(item => item.accountId === id),\n            milestoneId: milestone.key,\n            disabled: id !== account._id,\n        }\n    }\n\n    return (\n        <Collapse\n            expandIconPosition=\"right\"\n            style={{ marginBottom: '50px' }}\n            destroyInactivePanel={true}\n            accordion\n        >\n            {goal.milestonesValues.map(milestone => {\n                const stage = progress.stages.find(\n                    stage => stage.milestoneId === milestone.key\n                ) || { approvedBy: [] }\n\n                const experts = goal.experts.map(expert => (\n                    <Descriptions.Item\n                        key={expert}\n                        label={\n                            <>\n                                <UserButton\n                                    id={expert}\n                                    noAva={true}\n                                    span={true}\n                                />{' '}\n                                {' (expert)'}\n                            </>\n                        }\n                    >\n                        {renderCheckbox(\n                            getCheckboxStatus(expert, stage, milestone)\n                        )}\n                    </Descriptions.Item>\n                ))\n\n                const users = goal.users.map(user => (\n                    <Descriptions.Item\n                        key={user}\n                        label={\n                            <>\n                                <UserButton\n                                    id={user}\n                                    noAva={true}\n                                    span={true}\n                                />{' '}\n                                {' (achiever)'}\n                            </>\n                        }\n                    >\n                        {renderCheckbox(\n                            getCheckboxStatus(user, stage, milestone)\n                        )}\n                    </Descriptions.Item>\n                ))\n\n                const owner = [\n                    <Descriptions.Item\n                        key={progress.owner}\n                        label={\n                            <>\n                                <UserButton\n                                    id={progress.owner}\n                                    noAva={true}\n                                    span={true}\n                                />{' '}\n                                {' (owner)'}\n                            </>\n                        }\n                    >\n                        {renderCheckbox(\n                            getCheckboxStatus(progress.owner, stage, milestone)\n                        )}\n                    </Descriptions.Item>,\n                ]\n                return (\n                    <Collapse.Panel\n                        header={\n                            <Badge\n                                color={stage.status ? 'green' : 'blue'}\n                                text={milestone.name}\n                            />\n                        }\n                        key={milestone.key}\n\n                        // extra={}\n                    >\n                        <Divider style={{ marginTop: '0px', fontSize: '15px' }}>\n                            Status\n                        </Divider>\n\n                        <Descriptions\n                            bordered\n                            column={{\n                                xxl: 4,\n                                xl: 3,\n                                lg: 3,\n                                md: 3,\n                                sm: 2,\n                                xs: 1,\n                            }}\n                        >\n                            <Descriptions.Item label=\"Current status\">\n                                {stage.status ? (\n                                    <Badge\n                                        status=\"success\"\n                                        text=\"Is complete\"\n                                    />\n                                ) : (\n                                    <Badge\n                                        status=\"processing\"\n                                        text=\"In process\"\n                                    />\n                                )}\n                            </Descriptions.Item>\n                            {users}\n                            {owner}\n                            {experts}\n                        </Descriptions>\n                        {milestone.description && (\n                            <>\n                                <Divider style={{ fontSize: '15px' }}>\n                                    Description\n                                </Divider>\n                                <Typography.Paragraph\n                                    ellipsis={{\n                                        rows: 3,\n                                        expandable: true,\n                                        symbol: 'more',\n                                    }}\n                                    style={{ whiteSpace: 'pre-wrap' }}\n                                >\n                                    {milestone.description}\n                                </Typography.Paragraph>\n                            </>\n                        )}\n\n                        {stage.status && (\n                            <>\n                                <Divider style={{ fontSize: '15px' }}>\n                                    Paid rewards\n                                </Divider>\n\n                                <Rewards\n                                    rewardKey={1}\n                                    rewards={[{ rewards: stage.paid, key: 1 }]}\n                                    readOnly={true}\n                                />\n                            </>\n                        )}\n                        <Divider style={{ fontSize: '15px' }}>Rewards</Divider>\n                        <Rewards\n                            rewardKey={milestone.key}\n                            rewards={rewardsGroups}\n                        />\n                    </Collapse.Panel>\n                )\n            })}\n        </Collapse>\n    )\n}\nexport default ActivityTable\n","import React from 'react'\n\nimport * as wsActions from '../../websocketActions'\nimport EditGoalAndProgressForm from '../../components/EditGoalAndProgressForm/EditGoalAndProgressForm'\n\nconst EditProgress = props => {\n    const { progress, account, state, setState, friendData } = props\n\n    const milestonesValues = {}\n    for (let milestone of progress.goal.milestonesValues) {\n        milestonesValues[milestone.key] = milestone\n    }\n    const goal = { ...progress.goal, ...milestonesValues }\n\n    const onFinish = value => {\n        wsActions.editGoalInProgress(props, value)\n        setState({ ...state, editProgressOpen: false })\n    }\n\n    return goal ? (\n        <EditGoalAndProgressForm\n            goal={goal}\n            onFinish={onFinish}\n            account={account}\n            friendData={friendData}\n        />\n    ) : null\n}\n\nexport default EditProgress\n","import React from 'react'\nimport { withRouter } from 'react-router-dom'\nimport Button from 'antd/es/button'\nimport Divider from 'antd/es/divider'\nimport Modal from 'antd/es/modal'\n\nimport Descriptions from 'antd/es/descriptions'\n\nconst { Item } = Descriptions\n\nimport * as wsActions from '../../websocketActions'\nimport ActivityTable from './ActivityTable'\nimport EditProgress from './EditProgress'\nimport Popconfirm from 'antd/es/popconfirm'\nimport Typography from 'antd/es/typography'\nimport UserButton from '../../components/UserButton/UserButton'\nimport ImageCarousel from '../../components/UI/ImageCarousel/ImageCarousel'\n\nconst Activity = props => {\n    const { account, progress, state, setState, friendData } = props\n    const { goal } = progress\n    return goal ? (\n        <>\n            {goal.images.length > 0 && <ImageCarousel images={goal.images} />}\n\n            <h1>{goal.name}</h1>\n            <Typography.Paragraph\n                ellipsis={{\n                    rows: 3,\n                    expandable: true,\n                    symbol: 'more',\n                }}\n                style={{ whiteSpace: 'pre-wrap' }}\n            >\n                {goal.description}\n            </Typography.Paragraph>\n\n            <Descriptions\n                bordered\n                column={{ xxl: 4, xl: 3, lg: 3, md: 3, sm: 2, xs: 1 }}\n            >\n                <Item label=\"Status\">{progress.status}</Item>\n                <Item label=\"Worker\">\n                    {goal.users && <UserButton ids={goal.users} group={true} />}\n                </Item>\n                <Item label=\"Owner\">\n                    <UserButton id={progress.owner} noName={true} />\n                </Item>\n                <Item label=\"Supporters\">\n                    {goal.supporters && (\n                        <UserButton ids={goal.supporters} group={true} />\n                    )}\n                </Item>\n                <Item label=\"Experts\">\n                    {goal.experts && (\n                        <UserButton ids={goal.experts} group={true} />\n                    )}\n                </Item>\n            </Descriptions>\n            <Divider orientation=\"center\" type=\"horizontal\">\n                Milestones\n            </Divider>\n            <ActivityTable\n                progress={progress}\n                account={account}\n                state={state}\n                setState={setState}\n            />\n            {account._id === progress.owner && (\n                <Button\n                    style={{ margin: '0px 20px 50px 0px' }}\n                    type=\"primary\"\n                    onClick={() => {\n                        setState({ ...state, editProgressOpen: true })\n                    }}\n                >\n                    Edit progress\n                </Button>\n            )}\n            {account._id === progress.owner && (\n                <Popconfirm\n                    title=\"Create a group if you want to have more similar prgresses with the same people.\"\n                    onConfirm={() =>\n                        wsActions.createGroup(account._id, progress._id)\n                    }\n                >\n                    <Button\n                        style={{ margin: '0px 20px 50px 0px' }}\n                        type=\"primary\"\n                    >\n                        Create a group\n                    </Button>\n                </Popconfirm>\n            )}\n            {account.progresses &&\n                account.progresses.includes(progress._id.toString()) && (\n                    <Button\n                        danger={true}\n                        onClick={() => {\n                            wsActions.leaveProgress(props)\n                        }}\n                    >\n                        Leave the progress\n                    </Button>\n                )}\n\n            <Modal\n                visible={state.editProgressOpen}\n                footer={null}\n                onCancel={() => setState({ ...state, editProgressOpen: false })}\n                closable={true}\n                destroyOnClose={true}\n                width=\"100%\"\n                style={{ maxWidth: '1000px' }}\n            >\n                <EditProgress\n                    progress={progress}\n                    account={account}\n                    state={state}\n                    setState={setState}\n                    friendData={friendData}\n                />\n            </Modal>\n        </>\n    ) : null\n}\n\nexport default withRouter(Activity)\n","import React, { useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport Button from 'antd/es/button'\nimport Comment from 'antd/es/comment'\nimport Avatar from 'antd/es/avatar'\nimport Input from 'antd/es/input'\nimport Form from 'antd/es/form'\nimport Upload from 'antd/es/upload'\nimport PictureOutlined from '@ant-design/icons/PictureOutlined'\nimport LoadingOutlined from '@ant-design/icons/LoadingOutlined'\nimport SendOutlined from '@ant-design/icons/SendOutlined'\nimport { uploadFile } from '../../utils/uploadFile'\nimport * as wsActions from '../../websocketActions'\nimport getAvatar from '../../utils/getAvatar'\nimport { messageRules } from '../../constants/fieldRules'\nimport {\n    PlusOutlined,\n    CloseCircleFilled,\n    PictureFilled,\n} from '@ant-design/icons'\nimport Modal from 'antd/es/modal/Modal'\n\nconst AddPost = props => {\n    const [previewImage, setPreviewImage] = useState('')\n    const [imageLoading, setImageLoading] = useState(false)\n    const [images, setImages] = useState([])\n\n    const { parent, account, parentType } = props\n\n    const [messageText, setMessageText] = useState(\n        props.content ||\n            (props.replyToUser ? '@' + props.replyToUser + ' ' : '')\n    )\n\n    const uploadImage = file => {\n        uploadFile(file, 800, undefined, url => {\n            setImages([...images, url])\n        })\n    }\n    return account._id ? (\n        <div\n            style={{\n                background: '#fff',\n                padding: '0px 10px',\n                bottom: '0px',\n                left: '0px',\n                zIndex: 1000,\n            }}\n        >\n            <h2>Post something new</h2>\n            <Comment\n                avatar={<Avatar src={getAvatar(account._id, account.image)} />}\n                content={\n                    <>\n                        <Form.Item rules={messageRules}>\n                            <Input.TextArea\n                                autoSize={{\n                                    minRows: 1,\n                                    maxRows: 3,\n                                }}\n                                rows={1}\n                                onChange={e => setMessageText(e.target.value)}\n                                value={messageText}\n                            />\n                        </Form.Item>\n                        {images.length > 0 && (\n                            <Form.Item style={{ margin: 0 }}>\n                                <Upload\n                                    listType=\"picture-card\"\n                                    fileList={images.map((image, index) => ({\n                                        url: image,\n                                        uid: index,\n                                    }))}\n                                    onPreview={file => {\n                                        setPreviewImage(file.url)\n                                    }}\n                                    onChange={({ fileList }) =>\n                                        setImages(\n                                            fileList.map(image => image.url)\n                                        )\n                                    }\n                                    customRequest={({ file }) => {\n                                        uploadImage(file)\n                                    }}\n                                >\n                                    {images.length >= 8 ? null : (\n                                        <div>\n                                            <PlusOutlined />\n                                            <div className=\"ant-upload-text\">\n                                                Upload\n                                            </div>\n                                        </div>\n                                    )}\n                                </Upload>\n                            </Form.Item>\n                        )}\n                        <Form.Item>\n                            <Button\n                                htmlType=\"submit\"\n                                onClick={() => {\n                                    wsActions.addPost(\n                                        account._id,\n                                        parent,\n                                        parentType,\n                                        messageText,\n                                        images\n                                    )\n                                    setMessageText('')\n                                    setImages([])\n                                    if (props.onSend) props.onSend()\n                                }}\n                                icon={<SendOutlined />}\n                                type=\"text\"\n                            >\n                                Send\n                            </Button>\n                            <Upload\n                                showUploadList={false}\n                                customRequest={({ file }) => {\n                                    if (images.length > 8) {\n                                        message.warning(\n                                            'You can not attach more than 8 images.'\n                                        )\n                                        return\n                                    }\n                                    setImageLoading(true)\n                                    uploadFile(file, 800, undefined, url => {\n                                        setImageLoading(false)\n                                        setImages([...images, url])\n                                    })\n                                }}\n                            >\n                                <Button\n                                    type=\"text\"\n                                    icon={\n                                        imageLoading ? (\n                                            <LoadingOutlined />\n                                        ) : (\n                                            <PictureFilled />\n                                        )\n                                    }\n                                >\n                                    Image\n                                </Button>\n                            </Upload>\n                            {messageText || images.length ? (\n                                <Button\n                                    onClick={() => {\n                                        setMessageText('')\n                                        setImages([])\n                                    }}\n                                    icon={<CloseCircleFilled />}\n                                    type=\"text\"\n                                >\n                                    Cancel\n                                </Button>\n                            ) : null}\n                        </Form.Item>\n                    </>\n                }\n            />\n            <Modal\n                visible={previewImage}\n                footer={null}\n                onCancel={() => setPreviewImage('')}\n            >\n                <img\n                    alt=\"example\"\n                    style={{ width: '100%' }}\n                    src={previewImage}\n                />\n            </Modal>\n        </div>\n    ) : null\n}\n\nexport default withRouter(AddPost)\n","import React, { useEffect, useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\n\nimport Modal from 'antd/es/modal'\nimport Activity from './Activity'\nimport Card from 'antd/es/card'\nimport Post from '../../components/Post/Post'\nimport AddPost from '../../components/Post/AddPost'\nimport Tabs from 'antd/es/tabs'\nimport pullData from '../../utils/pullData'\n\nconst Progress = props => {\n    const [state, setState] = useState({})\n\n    const [data, setData] = useState({})\n    const pathParts = props.history.location.pathname.split('/')\n    const progressId = pathParts.length > 2 ? pathParts[2] : ''\n    if (!progressId) return null\n    useEffect(() => {\n        if (props.isAuthed) {\n            props.setData({ currentProgress: progressId })\n        } else {\n            pullData(props, data, setData, { forceAuth: false }, data => {\n                const friendData = {}\n                for (let friend of data.friendData)\n                    friendData[friend._id] = friend\n                const post = {}\n                for (let item of data.post) post[item._id] = item\n\n                props.setData({\n                    friendData,\n                    posts: post,\n                    account: {},\n                    progress: data.progress,\n                })\n            })\n        }\n    }, [props.isAuthed, props.history.location.pathname])\n\n    const { progress, account, friendData, posts } = props.isAuthed\n        ? props\n        : { ...data, account: {} }\n\n    if (!progress || !progress._id) return null\n    props.setData({ currentPosts: progress.posts })\n\n    const { goal } = progress\n    if (goal) props.setPageTitle({ main: goal.name, sub: progress.worker })\n    return goal && friendData ? (\n        <div className=\"contentDiv\">\n            <Tabs>\n                <Tabs.TabPane tab=\"Details\" key=\"details\">\n                    <Activity\n                        state={state}\n                        setState={setState}\n                        progress={progress}\n                        account={account}\n                        friendData={friendData}\n                    />\n                </Tabs.TabPane>\n                <Tabs.TabPane tab=\"Posts\" key=\"posts\">\n                    {account._id && (\n                        <AddPost\n                            parent={progressId}\n                            account={account}\n                            parentType=\"progress\"\n                            // onSend={() => setEditingMessage('')}\n                        />\n                    )}\n                    {progress.posts.map(postId => {\n                        if (posts[postId]) {\n                            const post = posts[postId]\n                            return (\n                                <div key={postId}>\n                                    <div\n                                        style={{\n                                            height: '5px',\n                                            background: '#ddd',\n                                            width: 'calc(100% + 8px)',\n                                            position: 'absolute',\n                                            left: '-8px',\n                                        }}\n                                    />\n                                    <div style={{ paddingTop: '10px' }}>\n                                        <Post\n                                            friendData={friendData}\n                                            account={account}\n                                            post={post}\n                                        />\n                                    </div>\n                                </div>\n                            )\n                        } else return null\n                    })}\n                </Tabs.TabPane>\n            </Tabs>\n            <Modal\n                visible={state.previewImage}\n                footer={null}\n                onCancel={() => setState({ ...state, previewImage: '' })}\n            >\n                <img\n                    alt=\"example\"\n                    style={{ width: '100%' }}\n                    src={state.previewImage}\n                />\n            </Modal>\n        </div>\n    ) : null\n}\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        account: state.account,\n        posts: state.post,\n        progress: state.progress,\n        friendData: state.friendData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: data => {\n            dispatch(actions.setData(data))\n        },\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Progress)\n)\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { withRouter } from 'react-router-dom'\nimport Card from 'antd/es/card'\nimport Button from 'antd/es/button'\nimport UserButton from '../../components/UserButton/UserButton'\nimport MasonryGrid from '../../components/MasonryGrid'\n\nconst Wallet = props => {\n    const account = props.pulledProfile || props.account\n    return account.wallet ? (\n        <div>\n            <MasonryGrid>\n                {account.wallet.map((money, index) => (\n                    <div\n                        onClick={() =>\n                            props.history.push('/profile/' + money.user)\n                        }\n                        key={index}\n                    >\n                        <Card\n                            type=\"inner\"\n                            style={{ width: '100%' }}\n                            bordered={false}\n                            extra={<Button type=\"primary\">Visit shop</Button>}\n                            title={\n                                <div>\n                                    <span style={{ fontWeight: 'bold' }}>\n                                        ${money.amount}\n                                    </span>\n                                    <UserButton id={money.user} />\n                                </div>\n                            }\n                        />\n                    </div>\n                ))}\n            </MasonryGrid>\n        </div>\n    ) : null\n}\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n        isAuthed: state.isAuthed,\n    }\n}\n\nexport default withRouter(connect(mapStateToProps)(Wallet))\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { withRouter } from 'react-router-dom'\nimport * as actions from '../../store/actions'\nimport Button from 'antd/es/button'\nimport Tag from 'antd/es/tag'\nimport TimeAgo from 'timeago-react'\nimport Avatar from 'antd/es/avatar'\nimport getAvatar from '../../utils/getAvatar'\nimport Rewards from '../../components/Rewards/Rewards'\nimport Collapse from 'antd/es/collapse'\nimport Badge from 'antd/es/badge'\nimport UserButton from '../../components/UserButton/UserButton'\nimport Descriptions from 'antd/es/descriptions'\nimport date from 'date-and-time'\nimport Typography from 'antd/es/typography'\n\nconst Transactions = props => {\n    props.setPageTitle({ main: 'Shop', sub: 'Transactions' })\n\n    const { account, transactionData, friendData } = props\n    if (!account || !account._id) return null\n\n    const transactions = account.transactions\n        .filter(item => transactionData[item])\n        .map(item => transactionData[item])\n\n    const columns = [\n        {\n            title: 'Type',\n            dataIndex: 'types',\n            key: 'types',\n            render: types => (\n                <>\n                    {types.map(tag => {\n                        let color = tag.length > 5 ? 'geekblue' : 'green'\n                        if (tag === 'loser') {\n                            color = 'volcano'\n                        }\n                        return (\n                            <Tag color={color} key={tag}>\n                                {tag.toUpperCase()}\n                            </Tag>\n                        )\n                    })}\n                </>\n            ),\n        },\n        {\n            title: 'With',\n            dataIndex: 'user',\n            key: 'user',\n            render: user => {\n                const friend = friendData[user]\n                return friend ? (\n                    <Button\n                        type=\"link\"\n                        style={{ padding: 0 }}\n                        onClick={() => props.history.push('/profile/' + user)}\n                    >\n                        <Avatar\n                            src={getAvatar(user, friend.image)}\n                            style={{ marginRight: '5px' }}\n                        />\n                        {friend.name + ' (' + friend._id + ')'}\n                    </Button>\n                ) : (\n                    user\n                )\n            },\n        },\n        {\n            title: 'Item',\n            dataIndex: 'perk',\n            key: 'perk',\n            render: perk =>\n                perk.simple || (\n                    <Rewards\n                        rewardKey={1}\n                        label=\"Rewards\"\n                        rewards={[{ rewards: [perk], key: 1 }]}\n                        readOnly={true}\n                    />\n                ),\n        },\n        {\n            title: 'Amount',\n            dataIndex: 'amount',\n            key: 'amount',\n            render: amount => (amount > 0 ? amount : ''),\n        },\n        {\n            title: 'Date',\n            dataIndex: 'date',\n            key: 'date',\n            render: date => <TimeAgo datetime={date} live />,\n        },\n        {\n            title: 'Progress',\n            dataIndex: 'progress',\n            key: 'progress',\n            render: progress => (\n                <Button\n                    type=\"link\"\n                    onClick={() =>\n                        props.history.push('/progresses/' + progress)\n                    }\n                >\n                    {progress}\n                </Button>\n            ),\n        },\n        {\n            title: 'Status',\n            key: 'status',\n            dataIndex: 'status',\n            render: (status, record) => {\n                if (status === 'Not confirmed') {\n                    return (\n                        <>\n                            <Button\n                                danger={true}\n                                type=\"link\"\n                                onClick={() =>\n                                    wsActions.cancelTransaction(\n                                        account._id,\n                                        record.transaction._id\n                                    )\n                                }\n                            >\n                                Cancel\n                            </Button>\n                            {record.transaction.from === account._id && (\n                                <Button\n                                    type=\"link\"\n                                    onClick={() =>\n                                        wsActions.confirmTransaction(\n                                            account._id,\n                                            record.transaction._id\n                                        )\n                                    }\n                                >\n                                    Confirm\n                                </Button>\n                            )}\n                        </>\n                    )\n                }\n                return status\n            },\n        },\n    ]\n\n    const tableData = []\n    let sorted = [...transactions]\n    sorted = sorted.sort((a, b) =>\n        new Date(a.date).getTime() < new Date(b.date).getTime() ? 1 : -1\n    )\n    for (let transaction of sorted) {\n        const types = []\n        if (transaction.from === account._id && transaction.to === account.id) {\n            types.push('internal')\n        }\n        if (transaction.to === account._id) {\n            if (transaction.progress) {\n                types.push('earn')\n                if (!transaction.amount) types.push('item')\n                else types.push('money')\n            } else {\n                if (transaction.item && transaction.amount) {\n                    types.push('buy')\n                    types.push('item')\n                } else {\n                    types.push('recieve gift')\n                    if (!transaction.amount) types.push('item')\n                    else types.push('money')\n                }\n            }\n        } else if (transaction.from === account._id) {\n            if (transaction.progress) {\n                types.push('pay')\n                if (!transaction.amount) types.push('item')\n                else types.push('money')\n            } else {\n                if (transaction.item && transaction.amount) {\n                    types.push('sell')\n                    types.push('item')\n                } else {\n                    types.push('send gift')\n                    if (!transaction.amount) types.push('item')\n                    else types.push('money')\n                }\n            }\n        }\n\n        const user =\n            transaction.to !== account._id ? transaction.to : transaction.from\n\n        tableData.push({\n            key: tableData.length,\n            types,\n            user,\n            perk: transaction.item,\n            amount: transaction.amount,\n            date: transaction.date,\n            progress: transaction.progress,\n            status: transaction.status,\n            transaction,\n        })\n    }\n    return (\n        <Collapse\n            expandIconPosition=\"right\"\n            style={{ marginBottom: '50px' }}\n            destroyInactivePanel={true}\n            accordion\n        >\n            {sorted.map((transaction, index) => {\n                const types = []\n                if (\n                    transaction.from === account._id &&\n                    transaction.to === account.id\n                ) {\n                    types.push('internal')\n                }\n                if (transaction.to === account._id) {\n                    if (transaction.progress) {\n                        types.push('earn')\n                        if (!transaction.amount) types.push('item')\n                        else types.push('money')\n                    } else {\n                        if (transaction.item && transaction.amount) {\n                            types.push('buy')\n                            types.push('item')\n                        } else {\n                            types.push('recieve gift')\n                            if (!transaction.amount) types.push('item')\n                            else types.push('money')\n                        }\n                    }\n                } else if (transaction.from === account._id) {\n                    if (transaction.progress) {\n                        types.push('pay')\n                        if (!transaction.amount) types.push('item')\n                        else types.push('money')\n                    } else {\n                        if (transaction.item && transaction.amount) {\n                            types.push('sell')\n                            types.push('item')\n                        } else {\n                            types.push('send gift')\n                            if (!transaction.amount) types.push('item')\n                            else types.push('money')\n                        }\n                    }\n                }\n\n                const user =\n                    transaction.to !== account._id\n                        ? transaction.to\n                        : transaction.from\n\n                tableData.push({\n                    key: tableData.length,\n                    types,\n                    user,\n                    perk: transaction.item,\n                    amount: transaction.amount,\n                    date: transaction.date,\n                    progress: transaction.progress,\n                    status: transaction.status,\n                    transaction,\n                })\n                const { item: reward } = transaction\n                return (\n                    <Collapse.Panel\n                        style={{ padding: 0 }}\n                        header={\n                            <>\n                                <div\n                                    style={{\n                                        display: 'flex',\n                                        alignItems: 'center',\n                                    }}\n                                >\n                                    <Badge\n                                        color={\n                                            transaction.status ===\n                                            'Not confirmed'\n                                                ? 'blue'\n                                                : transaction.status ===\n                                                  'Cancelled'\n                                                ? 'red'\n                                                : 'green'\n                                        }\n                                    />\n                                    <Typography.Paragraph\n                                        ellipsis={{ rows: 1 }}\n                                        style={{ display: 'inline', margin: 0 }}\n                                    >\n                                        {reward.mode === 'simple'\n                                            ? reward.simple\n                                            : reward.mode === 'money'\n                                            ? reward.money + ' (money)'\n                                            : reward.mode === 'item'\n                                            ? reward.itemName\n                                            : ''}\n                                    </Typography.Paragraph>\n                                    <UserButton\n                                        noName={true}\n                                        id={\n                                            transaction.to !== account._id\n                                                ? transaction.to\n                                                : transaction.from\n                                        }\n                                    />\n                                </div>\n                                <div>\n                                    <TimeAgo datetime={transaction.date} live />\n                                </div>\n                            </>\n                        }\n                        key={index}\n\n                        // extra={}\n                    >\n                        <Descriptions\n                            layout=\"vertical\"\n                            size=\"small\"\n                            bordered\n                            column={{\n                                xxl: 4,\n                                xl: 3,\n                                lg: 3,\n                                md: 3,\n                                sm: 2,\n                                xs: 1,\n                            }}\n                        >\n                            <Descriptions.Item label=\"Type\">\n                                {types.map(tag => {\n                                    let color =\n                                        tag.length > 5 ? 'geekblue' : 'green'\n                                    if (tag === 'loser') {\n                                        color = 'volcano'\n                                    }\n                                    return (\n                                        <Tag color={color} key={tag}>\n                                            {tag.toUpperCase()}\n                                        </Tag>\n                                    )\n                                })}\n                            </Descriptions.Item>\n                            <Descriptions.Item label=\"Transaction with\">\n                                <UserButton\n                                    id={\n                                        transaction.to !== account._id\n                                            ? transaction.to\n                                            : transaction.from\n                                    }\n                                />\n                            </Descriptions.Item>\n\n                            <Descriptions.Item label=\"Item\">\n                                {\n                                    <Rewards\n                                        onlyButton={true}\n                                        rewardKey={1}\n                                        label=\"Rewards\"\n                                        rewards={[\n                                            {\n                                                rewards: [transaction.item],\n                                                key: 1,\n                                            },\n                                        ]}\n                                        readOnly={true}\n                                    />\n                                }\n                            </Descriptions.Item>\n\n                            {transaction.amount && (\n                                <Descriptions.Item label=\"Amount\">\n                                    {transaction.amount}\n                                </Descriptions.Item>\n                            )}\n                            <Descriptions.Item label=\"Date\">\n                                {date.format(\n                                    new Date(transaction.date),\n                                    'YYYY/MM/DD HH:mm:ss'\n                                )}\n                            </Descriptions.Item>\n\n                            {transaction.progress && transaction.progressId && (\n                                <Descriptions.Item label=\"Progress\">\n                                    <Button\n                                        type=\"text\"\n                                        onClick={() =>\n                                            props.history.push(\n                                                '/progresses/' +\n                                                    transaction.progressId\n                                            )\n                                        }\n                                    >\n                                        {transaction.progress}\n                                    </Button>\n                                </Descriptions.Item>\n                            )}\n                            <Descriptions.Item label=\"Status\">\n                                {status === 'Not confirmed' ? (\n                                    <>\n                                        <Button\n                                            danger={true}\n                                            type=\"link\"\n                                            onClick={() =>\n                                                wsActions.cancelTransaction(\n                                                    account._id,\n                                                    record.transaction._id\n                                                )\n                                            }\n                                        >\n                                            Cancel\n                                        </Button>\n                                        {record.transaction.from ===\n                                            account._id && (\n                                            <Button\n                                                type=\"link\"\n                                                onClick={() =>\n                                                    wsActions.confirmTransaction(\n                                                        account._id,\n                                                        record.transaction._id\n                                                    )\n                                                }\n                                            >\n                                                Confirm\n                                            </Button>\n                                        )}\n                                    </>\n                                ) : (\n                                    status || 'Confirmed'\n                                )}\n                            </Descriptions.Item>\n                        </Descriptions>\n                    </Collapse.Panel>\n                )\n            })}\n        </Collapse>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n        transactionData: state.transactionData,\n        friendData: state.friendData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Transactions)\n)\n","import React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport Tabs from 'antd/es/tabs'\nimport Wallet from './Wallet'\nimport Transactions from './Transactions'\nimport WishlistAndPerks from './WishlistAndPerks'\n\nconst Shop = props => {\n    useEffect(() => {\n        props.setPageTitle({ main: 'Shop', sub: 'My items' })\n    }, [])\n\n    return props.account._id ? (\n        <div>\n            <Tabs\n                style={{\n                    background: 'transparent',\n                    boxShadow: 'none',\n                    margin: '0',\n                    marginTop: '-15px',\n                }}\n            >\n                <Tabs.TabPane tab=\"My shop\" key={1}>\n                    <WishlistAndPerks\n                        mode=\"shop\"\n                        listKey=\"perks\"\n                        account={props.account}\n                    />\n                </Tabs.TabPane>\n                <Tabs.TabPane tab=\"Wallet\" key={3}>\n                    <Wallet />\n                </Tabs.TabPane>\n                <Tabs.TabPane tab=\"Transactions\" key={4}>\n                    <Transactions />\n                </Tabs.TabPane>\n            </Tabs>\n        </div>\n    ) : (\n        <span />\n    )\n}\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Shop)\n","import React, { useEffect, useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport isEqual from 'lodash.isequal'\n\nimport Post from '../../components/Post/Post'\n\nimport UserButton from '../../components/UserButton/UserButton'\nimport Divider from 'antd/es/divider'\n\nconst DashboardPosts = props => {\n    const {\n        account,\n        friendData,\n        statePosts,\n        progressData,\n        groupData,\n        currentPosts,\n    } = props\n\n    const [posts, setPosts] = useState([])\n    const [startTime] = useState(new Date().getTime())\n\n    const sortPosts = (a, b) => {\n        const aN = a.notifications.filter(item => item.user !== account._id)\n        const bN = b.notifications.filter(item => item.user !== account._id)\n        if (aN.length === 0 && bN.length > 0) return 1\n        else if (aN.length > 0 && bN.length === 0) return -1\n        else if (aN.length === 0 && bN.length === 0) return 0\n        else\n            return new Date(aN[0].date).getTime() <\n                new Date(bN[0].date).getTime()\n                ? 1\n                : -1\n    }\n\n    const sortNotifications = (a, b) =>\n        new Date(a.date).getTime() < new Date(b.date).getTime() ? 1 : -1\n\n    useEffect(() => {\n        if (currentPosts) {\n            const newPosts = currentPosts\n                .filter(item => statePosts[item])\n                .map(item => statePosts[item])\n\n            const newUnseenPosts = []\n            const newOldPosts = []\n            let oldPosts = [...posts]\n            for (let post of newPosts) {\n                let oldPostIndex = oldPosts.findIndex(item => {\n                    return item._id.toString() === post._id.toString()\n                })\n                if (oldPostIndex === -1) {\n                    if (\n                        post.notifications &&\n                        post.notifications.length > 0 &&\n                        new Date(post.notifications[0].date).getTime() >\n                            startTime\n                    ) {\n                        newUnseenPosts.push(post)\n                    } else {\n                        newOldPosts.push(post)\n                    }\n                } else {\n                    oldPosts[oldPostIndex] = post\n                }\n            }\n\n            for (let post of newOldPosts) {\n                const index = oldPosts.findIndex(item => {\n                    if (\n                        item &&\n                        item.notifications &&\n                        item.notifications.length > 0\n                    ) {\n                        return (\n                            new Date(item.notifications[0]).getTime() >\n                            new Date(post.notifications[0]).getTime()\n                        )\n                    } else return false\n                })\n                if (index === -1) {\n                    oldPosts.push(post)\n                } else {\n                    oldPosts.splice(index, 0, post)\n                }\n            }\n\n            let resultPosts = [...newUnseenPosts, ...oldPosts]\n            if (posts.length === 0) {\n                resultPosts = resultPosts.sort(sortPosts)\n            }\n            setPosts(resultPosts)\n        }\n    }, [currentPosts, statePosts])\n    if (!account._id) return null\n\n    let lastNotifications = []\n    for (let progress of account.progresses) {\n        if (progressData[progress])\n            lastNotifications = [\n                ...lastNotifications,\n                ...progressData[progress].notifications.filter(\n                    item =>\n                        item.code === 'add post' && item.user !== account._id\n                ),\n            ]\n    }\n\n    for (let group of account.groups) {\n        if (groupData[group])\n            lastNotifications = [\n                ...lastNotifications,\n                ...groupData[group].notifications.filter(\n                    item =>\n                        item.code === 'add post' && item.user !== account._id\n                ),\n            ]\n    }\n\n    lastNotifications = lastNotifications\n        .sort(sortNotifications)\n        .map(item => item.details.postId)\n        .slice(0, 10)\n\n    const neededPosts = [\n        ...new Set([\n            ...account.followPosts,\n            ...account.myPosts,\n            ...posts.map(post => post._id),\n            ...lastNotifications,\n        ]),\n    ]\n    if (!isEqual(currentPosts, neededPosts))\n        props.setData({ currentPosts: neededPosts })\n\n    props.setPageTitle({ main: 'Dashboard', sub: '' })\n\n    return posts.map(item => {\n        let text = null\n        const nots = item.notifications.filter(not => not.user !== account._id)\n        const not = nots.length > 0 ? nots[0] : null\n        if (not) {\n            switch (not.code) {\n                case 'edit wishlist item':\n                    text = 'edited item in wishlist.'\n\n                    break\n                case 'edit goal':\n                    text = 'edited goal.'\n\n                    break\n                case 'edit perk':\n                    text = 'edited item in shop.'\n\n                    break\n\n                case 'comment':\n                    text = 'added a comment.'\n\n                    break\n                case 'edit comment':\n                    text = 'edited a comment.'\n\n                    break\n                case 'like':\n                    text = 'added a like.'\n\n                    break\n                case 'dislike':\n                    text = 'removed a like.'\n\n                    break\n                default:\n                    text = null\n                    break\n            }\n        }\n        return (\n            <>\n                <div\n                    style={{\n                        height: '5px',\n                        background: '#ddd',\n                        width: 'calc(100% + 8px)',\n                        position: 'absolute',\n                        left: '-8px',\n                    }}\n                />\n                <div style={{ paddingTop: '10px' }}>\n                    {text && (\n                        <>\n                            <span>\n                                <UserButton\n                                    id={not.user}\n                                    noAva={true}\n                                    span={true}\n                                    style={{ fontWeight: 'bold' }}\n                                />{' '}\n                                {text}\n                            </span>\n                            <Divider\n                                type=\"horizontal\"\n                                style={{ margin: '5px 0' }}\n                            />\n                        </>\n                    )}\n                    <Post\n                        friendData={friendData}\n                        account={account}\n                        post={item}\n                        progressData={progressData}\n                        groupData={groupData}\n                    />\n                </div>\n            </>\n        )\n    })\n}\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        account: state.account,\n        statePosts: state.post,\n        progress: state.progress,\n        friendData: state.friendData,\n        progressData: state.progressData,\n        groupData: state.groupData,\n        currentPosts: state.currentPosts,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: data => {\n            dispatch(actions.setData(data))\n        },\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(DashboardPosts)\n)\n","import React from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\n\nimport Card from 'antd/es/card'\nimport Button from 'antd/es/button'\nimport UserButton from '../../components/UserButton/UserButton'\n\nconst DashboardEvents = props => {\n    const { lastNotifications } = props\n    const getRewardText = item =>\n        item.details.reward.money\n            ? '$' + item.details.reward.money\n            : item.details.reward.simple || item.details.reward.itemName\n    return lastNotifications.map(item => {\n        let text = null\n\n        switch (item.code) {\n            case 'change name':\n                text = (\n                    <span>\n                        {' '}\n                        <UserButton id={item.user} /> changed name.\n                    </span>\n                )\n                break\n            case 'delete account':\n                text = (\n                    <span>\n                        {item.user}\n                        deleted account.\n                    </span>\n                )\n                break\n            case 'friend request':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> wants to become friends\n                        with you.\n                    </span>\n                )\n                break\n            case 'friend add':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> and{' '}\n                        <UserButton id={item.details.friend} /> became friends.\n                    </span>\n                )\n                break\n            case 'unfriend':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> and{' '}\n                        <UserButton id={item.details.friend} /> stopped being\n                        friends.\n                    </span>\n                )\n                break\n            case 'add wishlist item':\n            case 'edit wishlist item':\n                text = (\n                    <span>\n                        <UserButton id={item.user} />{' '}\n                        {item.code === 'add wishlist item'\n                            ? 'added to wishlist a new item'\n                            : 'edited in wishlist'}{' '}\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/wishlist/${item.user}/${\n                                        item.details.itemId\n                                    }`\n                                )\n                            }\n                        >\n                            {item.details.itemName}\n                        </Button>{' '}\n                        .\n                    </span>\n                )\n                break\n            case 'delete wishlist item':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> deleted{' '}\n                        {item.details.itemName} from wishlist.\n                    </span>\n                )\n                break\n            case 'add goal':\n            case 'edit goal':\n                text = (\n                    <span>\n                        <UserButton id={item.user} />{' '}\n                        {item.code === 'add goal'\n                            ? 'added a new goal'\n                            : 'edited goal'}{' '}\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/goals/${item.user}/${item.details.itemId}`\n                                )\n                            }\n                        >\n                            {item.details.itemName}\n                        </Button>{' '}\n                        .\n                    </span>\n                )\n                break\n            case 'delete goal':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> deleted{' '}\n                        {item.details.itemName} from goals.\n                    </span>\n                )\n                break\n            case 'add perk':\n            case 'edit perk':\n                text = (\n                    <span>\n                        <UserButton id={item.user} />{' '}\n                        {item.code === 'add perk'\n                            ? 'added to shop a new item'\n                            : 'edited in shop'}{' '}\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/shop/${item.user}/${item.details.itemId}`\n                                )\n                            }\n                        >\n                            {item.details.itemName}\n                        </Button>{' '}\n                        .\n                    </span>\n                )\n                break\n            case 'delete perk':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> deleted{' '}\n                        {item.details.itemName} from shop.\n                    </span>\n                )\n                break\n            case 'buy perk':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> bought\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/shop/${item.user}/${item.details.itemId}`\n                                )\n                            }\n                        >\n                            {item.details.itemName} (${item.details.price})\n                        </Button>{' '}\n                        from <UserButton id={item.details.owner} /> .\n                    </span>\n                )\n                break\n            case 'cancel transaction':\n            case 'confirm transaction':\n                text = (\n                    <span>\n                        <UserButton id={item.user} />{' '}\n                        {item.code === 'cancel transaction'\n                            ? 'cancelled'\n                            : 'confirmed'}\n                        purchase of\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/shop/${item.user}/${item.details.itemId}`\n                                )\n                            }\n                        >\n                            {item.details.itemName} (${item.details.price})\n                        </Button>{' '}\n                        by <UserButton id={item.details.buyer} /> .\n                    </span>\n                )\n                break\n            case 'start progress':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> started participating in\n                        progress\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/progresses/${item.details.itemId}`\n                                )\n                            }\n                        >\n                            {item.details.itemName}\n                        </Button>{' '}\n                        as {item.details.as}.\n                    </span>\n                )\n                break\n            case 'approve milestone':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> approved milestone{' '}\n                        {item.details.itemName} in\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/progresses/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </Button>\n                        .\n                    </span>\n                )\n                break\n            case 'disapprove milestone':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> disapproved milestone{' '}\n                        {item.details.itemName} in\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/progresses/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </Button>\n                        .\n                    </span>\n                )\n                break\n            case 'finish progress':\n                text = (\n                    <span>\n                        Progress{' '}\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/progresses/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </Button>\n                        was approved and finished.\n                    </span>\n                )\n                break\n            case 'milestone finish':\n                text = (\n                    <span>\n                        Milestone {item.details.itemName} in progress{' '}\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/progresses/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </Button>\n                        was approved and finished.\n                    </span>\n                )\n                break\n            case 'get reward':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> recieved{' '}\n                        {getRewardText(item)} as a reward from{' '}\n                        <UserButton id={item.details.from} /> in progress\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/progresses/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </Button>\n                        .\n                    </span>\n                )\n                break\n            case 'leave progress':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> left progress{' '}\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/progresses/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </Button>\n                        .\n                    </span>\n                )\n                break\n            case 'edit progress':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> edited progress{' '}\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/progresses/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </Button>\n                        {item.details.addedAccounts.length > 0 ? (\n                            <>\n                                {' '}\n                                and added{' '}\n                                {item.details.addedAccounts.map(ac => (\n                                    <UserButton id={ac} />\n                                ))}{' '}\n                            </>\n                        ) : (\n                            ''\n                        )}\n                        {item.details.droppedAccounts.length > 0 ? (\n                            <>\n                                {' '}\n                                and removed{' '}\n                                {item.details.droppedAccounts.map(ac => (\n                                    <UserButton id={ac} />\n                                ))}{' '}\n                            </>\n                        ) : (\n                            ''\n                        )}\n                        .\n                    </span>\n                )\n                break\n            case 'remove from progress':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> removed{' '}\n                        <UserButton id={item.details.account} /> from progress\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/progresses/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </Button>\n                        .\n                    </span>\n                )\n                break\n            case 'add to progress':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> added{' '}\n                        <UserButton id={item.details.account} /> to progress\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/progresses/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </Button>\n                        .\n                    </span>\n                )\n                break\n            case 'add reward':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> added{' '}\n                        {getRewardText(item)} as a reward for\n                        {!item.details.for || item.details.for.length === 0\n                            ? 'all '\n                            : item.details.for.map(account => (\n                                  <>\n                                      <UserButton id={account} />,\n                                  </>\n                              ))}\n                        in progress\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/progresses/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </Button>\n                        .\n                    </span>\n                )\n                break\n            case 'delete reward':\n                text = (\n                    <span>\n                        <UserButton id={item.user} /> removed{' '}\n                        {getRewardText(item)} as a reward for{' '}\n                        {!item.details.for || item.details.for.length === 0\n                            ? 'all '\n                            : item.details.for.map(account => (\n                                  <>\n                                      <UserButton id={account} />,\n                                  </>\n                              ))}\n                        in progress\n                        <Button\n                            type=\"link\"\n                            onClick={() =>\n                                props.history.push(\n                                    `/progresses/${item.details.progressId}`\n                                )\n                            }\n                        >\n                            {item.details.progressName}\n                        </Button>\n                        .\n                    </span>\n                )\n                break\n            default:\n                console.log(item)\n                text = 'New event'\n                break\n        }\n        return <Card>{text}</Card>\n    })\n}\nconst mapStateToProps = state => {\n    return {\n        lastNotifications: state.lastNotifications,\n    }\n}\n\nexport default withRouter(connect(mapStateToProps)(DashboardEvents))\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport * as wsActions from '../../websocketActions'\n\nimport Tabs from 'antd/es/tabs'\nimport DashboardPosts from './DashboardPosts'\nimport DashboardEvents from './DashboardEvents'\nimport Badge from 'antd/es/badge'\n\nconst Progress = props => {\n    const { account, lastNotifications } = props\n\n    if (!account._id) return null\n\n    props.setPageTitle({ main: 'Dashboard', sub: '' })\n\n    let numberOfUnseenNots = 0\n    for (let not of lastNotifications) {\n        if (parseInt(not.notId) > parseInt(account.lastSeenNot || 0))\n            numberOfUnseenNots++\n    }\n\n    return (\n        <div className=\"contentDiv\">\n            <Tabs\n                onChange={activeTab => {\n                    if (activeTab === 'events') {\n                        const last = parseInt(\n                            lastNotifications.reduce((res, not) => {\n                                return parseInt(not.notId) > parseInt(res)\n                                    ? not.notId\n                                    : res\n                            }, 0)\n                        )\n                        if (\n                            lastNotifications.length > 0 &&\n                            parseInt(account.lastSeenNot) !== last\n                        ) {\n                            wsActions.setLastSeenNot(account._id, last)\n                        }\n                    }\n                }}\n            >\n                <Tabs.TabPane tab=\"Posts\" key=\"posts\">\n                    <DashboardPosts />\n                </Tabs.TabPane>\n\n                <Tabs.TabPane\n                    tab={\n                        <Badge count={numberOfUnseenNots} offset={[10, 0]}>\n                            Events\n                        </Badge>\n                    }\n                    key=\"events\"\n                >\n                    <DashboardEvents />\n                </Tabs.TabPane>\n            </Tabs>\n        </div>\n    )\n}\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n        lastNotifications: state.lastNotifications,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Progress)\n","import { webSocket } from '../containers/ConnectWebsocket/ConnectWebsocket'\n\nexport const setLastSeenNot = (accountId, notId) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'setLastSeenNot',\n                accountId,\n                notId,\n            })\n        )\n    }\n}\n","import React, { useState } from 'react'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport axios from 'axios'\nimport InfiniteScroll from 'react-infinite-scroller'\nimport message from 'antd/es/message'\n\nimport Input from 'antd/es/input'\nimport UserButton from '../../components/UserButton/UserButton'\nimport MasonryGrid from '../../components/MasonryGrid'\nimport MasonryCard from '../../components/MasonryCard'\n\nconst Explore = props => {\n    const [isSearching, setIsSearching] = useState(false)\n    const [foundProgresses, setFoundProgresses] = useState([])\n    const [progresses, setProgresses] = useState([])\n    const [noMore, setNoMore] = useState(false)\n    const [noMorePopular, setNoMorePopular] = useState(false)\n    const [searchValue, setSearchValue] = useState('')\n    const [friendData, setFriendData] = useState({})\n\n    const onSearch = (value, noNoMore) => {\n        if (!noMore || noNoMore) {\n            setNoMore(true)\n            axios\n                .post('/api/explore/search', {\n                    value: value || searchValue,\n                    skip: noNoMore ? 0 : foundProgresses.length,\n                })\n                .then(res => {\n                    if (res.data.success) {\n                        setNoMore(res.data.noMore)\n                        setFoundProgresses(res.data.progresses)\n                        if (res.data.progresses.length === 0)\n                            message.warning('There are no progresses found.')\n                        const newFriendData = {}\n                        for (let friend of res.data.friends) {\n                            newFriendData[friend._id] = friend\n                        }\n                        setFriendData(newFriendData)\n                    } else {\n                        if (res.data.errorCode) {\n                            message.error(\n                                'Something is wrong with the data. Please try one more time with new data.'\n                            )\n                        }\n                    }\n                })\n                .catch(err => {})\n        }\n    }\n\n    const onGetPopular = () => {\n        console.log('lets get more')\n        console.log(noMorePopular)\n        if (!noMorePopular) {\n            setNoMorePopular(true)\n            axios\n                .post('/api/explore/popular', {\n                    skip: progresses.length,\n                })\n                .then(res => {\n                    if (res.data.success) {\n                        setNoMorePopular(res.data.noMore)\n                        setProgresses([...progresses, ...res.data.progresses])\n                        const newFriendData = {}\n                        for (let friend of res.data.friends) {\n                            newFriendData[friend._id] = friend\n                        }\n                        setFriendData(newFriendData)\n                    } else {\n                        if (res.data.errorCode) {\n                            message.error(\n                                'Something is wrong with the data. Please try one more time with new data.'\n                            )\n                        }\n                    }\n                })\n                .catch(err => {})\n        }\n    }\n\n    props.setPageTitle({ main: 'Explore', sub: '' })\n    console.log('we are here')\n    console.log(noMorePopular)\n    return (\n        <div>\n            <Input.Search\n                placeholder=\"Find great progresses!\"\n                onSearch={value => {\n                    if (value) {\n                        setIsSearching(true)\n                        if (value !== searchValue) {\n                            setNoMore(false)\n                            setFoundProgresses([])\n                            setSearchValue(value)\n                            onSearch(value, true)\n                        }\n                    } else {\n                        setNoMore(false)\n                        setSearchValue(value)\n                        setIsSearching(false)\n                    }\n                }}\n                onChange={e => {\n                    if (!e.target.value) {\n                        setNoMore(false)\n                        setFoundProgresses([])\n                        setIsSearching(false)\n                        setSearchValue('')\n                    }\n                }}\n                enterButton\n                allowClear\n                style={{ maxWidth: '500px' }}\n            />\n            {isSearching ? (\n                foundProgresses.length > 0 ? (\n                    <InfiniteScroll\n                        pageStart={0}\n                        loadMore={onSearch(searchValue)}\n                        hasMore={!noMore}\n                        loader={\n                            <div className=\"loader\" key={0}>\n                                Loading ...\n                            </div>\n                        }\n                    >\n                        <MasonryGrid>\n                            {foundProgresses.map((item, index) => (\n                                <MasonryCard\n                                    key={index}\n                                    onClickLink={'/progresses/' + item._id}\n                                    images={item.goal.images}\n                                    body={\n                                        <>\n                                            <UserButton\n                                                noName={true}\n                                                id={item.owner}\n                                                friendDataExp={friendData}\n                                            />\n                                            <span\n                                                style={{ fontWeight: 'bold' }}\n                                            >\n                                                {item.name}\n                                            </span>\n                                        </>\n                                    }\n                                />\n                            ))}\n                        </MasonryGrid>\n                    </InfiniteScroll>\n                ) : null\n            ) : (\n                <InfiniteScroll\n                    pageStart={0}\n                    loadMore={onGetPopular}\n                    hasMore={!noMorePopular}\n                    loader={\n                        <div className=\"loader\" key={0}>\n                            Loading ...\n                        </div>\n                    }\n                >\n                    <MasonryGrid>\n                        {progresses.map((item, index) => (\n                            <MasonryCard\n                                key={index}\n                                onClickLink={'/progresses/' + item._id}\n                                images={item.goal.images}\n                                body={\n                                    <>\n                                        <UserButton\n                                            noName={true}\n                                            id={item.owner}\n                                            friendDataExp={friendData}\n                                        />\n                                        <span style={{ fontWeight: 'bold' }}>\n                                            {item.name}\n                                        </span>\n                                    </>\n                                }\n                            />\n                        ))}\n                    </MasonryGrid>\n                </InfiniteScroll>\n            )}\n        </div>\n    )\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n        setData: data => dispatch(actions.setData(data)),\n    }\n}\n\nexport default connect(\n    null,\n    mapDispatchToProps\n)(Explore)\n","import React from 'react'\n\nimport * as wsActions from '../websocketActions'\nimport Menu from 'antd/es/menu'\nimport Dropdown from 'antd/es/dropdown'\nimport { DownOutlined } from '@ant-design/icons'\nimport Button from 'antd/es/button'\nimport MoreIcon from './UI/MoreIcon'\n\nconst FriendActionButton = props => {\n    const {\n        invitingFriends,\n        invitedFriends,\n        realFriends,\n        _id,\n        accountId,\n    } = props\n    if (!accountId) return []\n\n    if (accountId === _id) return [props.additionalButton]\n\n    const menu = (\n        <Menu onClick={({ domEvent }) => domEvent.stopPropagation()}>\n            {props.additionalButtons &&\n                props.additionalButtons.map((button, index) => (\n                    <Menu.Item key={index + 100} onClick={button.onClick}>\n                        {button.title}\n                    </Menu.Item>\n                ))}\n            {invitingFriends.find(item => item.friend === _id) ? (\n                <Menu.Item\n                    key=\"2\"\n                    onClick={() => wsActions.unfriend(accountId, _id)}\n                    danger={true}\n                >\n                    Decline\n                </Menu.Item>\n            ) : invitedFriends.find(item => item.friend === _id) ? (\n                <Menu.Item\n                    key=\"3\"\n                    onClick={() => wsActions.unfriend(accountId, _id)}\n                    danger={true}\n                >\n                    Cancel invitation\n                </Menu.Item>\n            ) : realFriends.find(item => item.friend === _id) ? (\n                <Menu.Item\n                    key=\"4\"\n                    onClick={() => wsActions.unfriend(accountId, _id)}\n                    danger={true}\n                >\n                    Unfriend\n                </Menu.Item>\n            ) : null}\n        </Menu>\n    )\n    return invitingFriends.find(item => item.friend === _id) ? (\n        <Dropdown.Button\n            type=\"primary\"\n            overlay={menu}\n            trigger={['click', 'hover']}\n            onClick={e => {\n                e.preventDefault()\n                e.stopPropagation()\n                wsActions.acceptFriend(accountId, _id)\n            }}\n        >\n            Accept\n        </Dropdown.Button>\n    ) : ![...realFriends, ...invitingFriends, ...invitedFriends].find(\n          item => item.friend === _id\n      ) ? (\n        <Dropdown.Button\n            type=\"primary\"\n            overlay={menu}\n            trigger={['click', 'hover']}\n            onClick={e => {\n                e.preventDefault()\n                e.stopPropagation()\n                wsActions.addFriend(accountId, _id)\n            }}\n        >\n            Add\n        </Dropdown.Button>\n    ) : (\n        <Dropdown overlay={menu} trigger={['click']}>\n            <a\n                // className=\"ant-dropdown-link\"\n                onClick={e => {\n                    e.preventDefault()\n                    e.stopPropagation()\n                }}\n            >\n                <Button type={props.asText ? 'primary' : 'link'}>\n                    {props.asText ? (\n                        <>\n                            Actions <DownOutlined />\n                        </>\n                    ) : (\n                        <MoreIcon />\n                    )}\n                </Button>\n            </a>\n        </Dropdown>\n    )\n}\n\nexport default FriendActionButton\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport * as actions from '../store/actions'\nimport { withRouter } from 'react-router-dom'\n\nimport Card from 'antd/es/card'\nimport friendActionButton from './FriendActionButton'\nimport UserButton from './UserButton/UserButton'\n\nconst FriendCard = props => {\n    const friendActions = friendActionButton({\n        accountId: props.account ? props.account._id : '',\n        realFriends: props.realFriends,\n        invitedFriends: props.invitedFriends,\n        invitingFriends: props.invitingFriends,\n        _id: props.friend._id,\n        asIcons: true,\n\n        additionalButtons: [\n            {\n                title: 'See profile',\n                onClick: () =>\n                    props.history.push('/profile/' + props.friend._id),\n            },\n        ],\n    })\n\n    return (\n        <Card\n            style={{ width: '100%' }}\n            type=\"inner\"\n            bordered={false}\n            extra={friendActions}\n            title={<UserButton id={props.friend._id} size={50} />}\n        />\n    )\n}\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n        isAuthed: state.isAuthed,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: (data, pulledFrom) =>\n            dispatch(actions.setData(data, pulledFrom)),\n        tryAuth: (props, forceAuth) =>\n            dispatch(actions.tryAuth(props, forceAuth)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(FriendCard)\n)\n","import React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport * as wsActions from '../../websocketActions'\nimport Card from 'antd/es/card'\nimport Button from 'antd/es/button'\nimport Modal from 'antd/es/modal'\n\nimport Input from 'antd/es/input'\nimport Form from 'antd/es/form'\n\nimport FriendCard from '../../components/FriendCard'\nimport { nicknameRules } from '../../constants/fieldRules'\n\nconst AddFriends = props => {\n    useEffect(() => {\n        props.setFriendSearchResult({})\n    }, [props.addFriendOpen])\n\n    const {\n        addFriendOpen,\n        setAddFriendOpen,\n        searchResult,\n        realFriends,\n        invitedFriends,\n        invitingFriends,\n    } = props\n    const layout = {\n        labelCol: { span: 8 },\n        wrapperCol: { span: 16 },\n    }\n    const tailLayout = {\n        wrapperCol: { offset: 8, span: 16 },\n    }\n\n    return (\n        <Modal\n            title=\"Add friend\"\n            visible={addFriendOpen}\n            maskClosable\n            closable\n            onCancel={() => setAddFriendOpen(false)}\n            footer={\n                <Button key=\"back\" onClick={() => setAddFriendOpen(false)}>\n                    Return\n                </Button>\n            }\n            destroyOnClose={true}\n        >\n            <p>To find a friend you need to enter your friend's nickname.</p>\n            <Form\n                name=\"dynamic_form_nest_item\"\n                onFinish={value => wsActions.searchFriends(value.search)}\n                autoComplete=\"off\"\n                {...layout}\n            >\n                <Form.Item label=\"Search\" name=\"search\" rules={nicknameRules}>\n                    <Input placeholder=\"Must be more than 2 characters long\" />\n                </Form.Item>\n\n                <Form.Item {...tailLayout}>\n                    <Button type=\"primary\" htmlType=\"submit\" size=\"large\">\n                        Search\n                    </Button>\n                </Form.Item>\n            </Form>\n            {searchResult._id && (\n                <Card title=\"Search result\">\n                    <FriendCard\n                        {...props}\n                        friend={searchResult}\n                        realFriends={realFriends}\n                        invitingFriends={invitingFriends}\n                        invitedFriends={invitedFriends}\n                    />\n                </Card>\n            )}\n        </Modal>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        searchResult: state.friendSearchResult,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setFriendSearchResult: data =>\n            dispatch(actions.setFriendSearchResult(data)),\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(AddFriends)\n","import React from 'react'\nimport { withRouter } from 'react-router-dom'\nimport Masonry from 'react-masonry-css'\nimport { friendsBreakPoints } from '../../utils/masonryBreakPoints'\n\nimport FriendCard from '../../components/FriendCard'\nimport MasonryGrid from '../../components/MasonryGrid'\n\nconst pendingFriends = props => {\n    const { realFriends, invitedFriends, invitingFriends } = props\n    return (\n        <>\n            {invitingFriends.length > 0 && (\n                <>\n                    <h2>People invited me to be friends</h2>\n                    <MasonryGrid friends={true}>\n                        {invitingFriends.map(friend => (\n                            <FriendCard\n                                key={friend._id}\n                                {...props}\n                                friend={friend}\n                                realFriends={realFriends}\n                                invitingFriends={invitingFriends}\n                                invitedFriends={invitedFriends}\n                            />\n                        ))}\n                    </MasonryGrid>\n                </>\n            )}\n\n            {invitedFriends.length > 0 && (\n                <>\n                    <h2>I invited these people</h2>\n                    <MasonryGrid friends={true}>\n                        {invitedFriends.map(friend => (\n                            <FriendCard\n                                key={friend._id}\n                                {...props}\n                                friend={friend}\n                                realFriends={realFriends}\n                                invitingFriends={invitingFriends}\n                                invitedFriends={invitedFriends}\n                            />\n                        ))}\n                    </MasonryGrid>\n                </>\n            )}\n        </>\n    )\n}\n\nexport default withRouter(pendingFriends)\n","import React, { useState, useEffect } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\n\nimport FriendCard from '../../components/FriendCard'\nimport AddCard from '../../components/AddCard/AddCard'\nimport AddFriends from './AddFriends'\nimport PendingFriends from './PendingFriends'\nimport Tabs from 'antd/es/tabs'\nimport Empty from 'antd/es/empty'\nimport Badge from 'antd/es/badge'\nimport Masonry from 'react-masonry-css'\nimport { friendsBreakPoints } from '../../utils/masonryBreakPoints'\nimport MasonryGrid from '../../components/MasonryGrid'\n\nconst Friends = props => {\n    const [addFriendOpen, setAddFriendOpen] = useState()\n\n    useEffect(() => {\n        props.setPageTitle({ main: 'Friends', sub: '' })\n    }, [])\n\n    const { account, friendData } = props\n    if (!account._id) return null\n    const realFriends = [],\n        invitedFriends = [],\n        invitingFriends = []\n\n    if (account.friends) {\n        for (let friend of account.friends) {\n            const fullFriend = { ...friendData[friend.friend], ...friend }\n            if (fullFriend) {\n                if (fullFriend.status === 'friend') realFriends.push(fullFriend)\n                else if (fullFriend.status === 'invited')\n                    invitedFriends.push(fullFriend)\n                else if (fullFriend.status === 'inviting')\n                    invitingFriends.push(fullFriend)\n            }\n        }\n    }\n\n    const confirmedFriends =\n        realFriends.length > 0 ? (\n            <MasonryGrid friends={true}>\n                {realFriends.map(friend => (\n                    <FriendCard\n                        key={friend._id}\n                        {...props}\n                        friend={friend}\n                        realFriends={realFriends}\n                        invitingFriends={invitingFriends}\n                        invitedFriends={invitedFriends}\n                    />\n                ))}\n            </MasonryGrid>\n        ) : (\n            <Empty\n                image=\"https://websiter.s3.us-east-2.amazonaws.com/image+4.jpg\"\n                imageStyle={{ height: '250px', marginTop: '50px' }}\n                description={false}\n            />\n        )\n    return (\n        <div>\n            <AddCard\n                title=\"Add friend\"\n                sub=\"Find by nickname\"\n                action={() => setAddFriendOpen(true)}\n            />\n            {invitedFriends.length > 0 || invitingFriends.length > 0 ? (\n                <Tabs>\n                    <Tabs.TabPane key=\"confirmed\" tab=\"Confrmed\">\n                        {confirmedFriends}\n                    </Tabs.TabPane>\n\n                    <Tabs.TabPane\n                        tab={\n                            <Badge\n                                count={invitingFriends.length}\n                                offset={[10, 0]}\n                            >\n                                Pending\n                            </Badge>\n                        }\n                        key=\"pending\"\n                    >\n                        <PendingFriends\n                            realFriends={realFriends}\n                            invitedFriends={invitedFriends}\n                            invitingFriends={invitingFriends}\n                        />\n                    </Tabs.TabPane>\n                </Tabs>\n            ) : (\n                confirmedFriends\n            )}\n            <AddFriends\n                addFriendOpen={addFriendOpen}\n                setAddFriendOpen={setAddFriendOpen}\n                realFriends={realFriends}\n                invitedFriends={invitedFriends}\n                invitingFriends={invitingFriends}\n                account={account}\n            />\n        </div>\n    )\n}\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n        friendData: state.friendData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Friends)\n)\n","import React, { useEffect, useState } from 'react'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport PageHeader from 'antd/es/page-header'\nimport Form from 'antd/es/form'\nimport Button from 'antd/es/button'\nimport Input from 'antd/es/input'\n\nimport { withRouter } from 'react-router-dom'\nimport Card from 'antd/es/card'\nimport Upload from 'antd/es/upload'\nimport * as classes from './Account.module.css'\n\nimport LoadingOutlined from '@ant-design/icons/LoadingOutlined'\nimport PlusOutlined from '@ant-design/icons/PlusOutlined'\n\nimport { uploadFile } from '../../utils/uploadFile'\nimport Avatar from 'antd/es/avatar'\nimport getAvatar from '../../utils/getAvatar'\nimport Modal from 'antd/es/modal'\nimport { accountNameRules } from '../../constants/fieldRules'\nimport * as wsActions from '../../websocketActions'\nimport message from 'antd/es/message'\nimport Dropdown from 'antd/es/dropdown'\nimport Menu from 'antd/es/menu'\n\nconst Account = props => {\n    const [deleteVisible, setDeleteVisible] = useState()\n    const [deleteField, setDeleteField] = useState('')\n    const { account } = props\n\n    useEffect(() => {\n        props.setPageTitle({ main: 'Account', sub: '' })\n    }, [])\n\n    const loading = false\n\n    const layout = {\n        labelCol: { span: 8 },\n        wrapperCol: { span: 16 },\n    }\n    const tailLayout = {\n        wrapperCol: { offset: 8, span: 0 },\n    }\n    return account && account.name ? (\n        <div className=\"contentDiv\">\n            <Card>\n                <Upload\n                    name=\"avatar\"\n                    listType=\"picture-card\"\n                    className={classes.Avatar}\n                    showUploadList={false}\n                    customRequest={({ file }) => {\n                        uploadFile(file, 800, 'avatar', () => {\n                            props.increaseAvatarV()\n                        })\n                    }}\n                >\n                    {account.image ? (\n                        <Avatar\n                            src={getAvatar(account._id, account.image)}\n                            size={150}\n                            style={{ margin: '25px' }}\n                        />\n                    ) : (\n                        <div>\n                            {loading ? <LoadingOutlined /> : <PlusOutlined />}\n                            <div className=\"ant-upload-text\">Upload</div>\n                        </div>\n                    )}\n                </Upload>\n                <Form\n                    name=\"dynamic_form_nest_item\"\n                    onFinish={value =>\n                        wsActions.editAccount(value, account._id)\n                    }\n                    autoComplete=\"off\"\n                    {...layout}\n                    initialValues={{\n                        name: account.name,\n                        nickname: account._id,\n                    }}\n                >\n                    <Form.Item\n                        label=\"Name\"\n                        name=\"name\"\n                        rules={accountNameRules}\n                    >\n                        <Input placeholder=\"Must be more than 1 character long\" />\n                    </Form.Item>\n                    <Form.Item label=\"Nickname\" name=\"nickname\">\n                        <Input disabled={true} />\n                    </Form.Item>\n                    <Form.Item\n                        {...tailLayout}\n                        style={{\n                            flex: 'none',\n                            maxWidth: ' 100%',\n                            overflow: 'hidden',\n                        }}\n                    >\n                        <Dropdown.Button\n                            type=\"primary\"\n                            htmlType=\"submit\"\n                            size=\"large\"\n                            overlay={\n                                <Menu>\n                                    <Menu.Item\n                                        danger={true}\n                                        onClick={() => setDeleteVisible(true)}\n                                    >\n                                        Delete account\n                                    </Menu.Item>\n                                </Menu>\n                            }\n                        >\n                            Save\n                        </Dropdown.Button>\n                    </Form.Item>\n                </Form>\n                <Modal\n                    title=\"Delete account\"\n                    visible={deleteVisible}\n                    onOk={() => {\n                        if (deleteField !== account._id) {\n                            message.warning('The nickmanme is not correct.')\n                        } else {\n                            wsActions.deleteAccount(account._id)\n                        }\n                    }}\n                    onCancel={() => {\n                        setDeleteVisible(false)\n                        setDeleteField('')\n                    }}\n                >\n                    <p>\n                        Please enter your nickname and press Ok to delete your\n                        account.\n                    </p>\n                    <Input onChange={e => setDeleteField(e.target.value)} />\n                </Modal>\n            </Card>\n        </div>\n    ) : null\n}\n\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n        increaseAvatarV: () => dispatch(actions.increaseAvatarV()),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Account)\n)\n","import { webSocket } from '../containers/ConnectWebsocket/ConnectWebsocket'\n\nexport const deleteAccount = id => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'deleteAccount',\n                accountId: id,\n            })\n        )\n    }\n}\n\nexport const editAccount = (value, id) => {\n    if (webSocket && webSocket.readyState === 1) {\n        webSocket.send(\n            JSON.stringify({\n                messageCode: 'editAccount',\n                name: value.name,\n                accountId: id,\n            })\n        )\n    }\n}\n","import React, { useEffect, useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport Avatar from 'antd/es/avatar'\nimport Card from 'antd/es/card'\n\nimport friendActionButton from '../../components/FriendActionButton'\nimport FriendCard from '../../components/FriendCard'\nimport Tabs from 'antd/es/tabs'\nimport Progresses from '../Progresses/Progresses'\nimport Wallet from '../Shop/Wallet'\nimport PerkCard from '../Shop/PerkCard'\nimport getAvatar from '../../utils/getAvatar'\nimport pullData from '../../utils/pullData'\nimport UserButton from '../../components/UserButton/UserButton'\nimport MasonryGrid from '../../components/MasonryGrid'\n\nconst Profile = props => {\n    const [data, setData] = useState({})\n    const { profile, friendData, account } = props.isAuthed ? props : data\n\n    useEffect(() => {\n        const pathParts = props.history.location.pathname.split('/')\n        if (pathParts.length > 2) {\n            const profileId = pathParts[2]\n            if (props.isAuthed) {\n                props.setData({ currentProfile: profileId })\n            } else {\n                pullData(props, data, setData, { forceAuth: false }, data => {\n                    const friendData = {}\n                    for (let friend of data.friendData)\n                        friendData[friend._id] = friend\n                    const progressData = {}\n                    for (let progress of data.progressData)\n                        progressData[progress._id] = progress\n                    const groupData = {}\n                    for (let group of data.groupData)\n                        groupData[group._id] = group\n\n                    props.setData({\n                        // profile: data.profile,\n                        friendData,\n                        progressData,\n                        groupData,\n                        account: {},\n                    })\n                })\n            }\n        }\n    }, [props.isAuthed, props.history.location.pathname])\n\n    if (!profile || !profile._id) return null\n    props.setPageTitle({ main: profile.name, sub: '' })\n\n    const realFriends = [],\n        invitedFriends = [],\n        invitingFriends = []\n    if (profile && profile.friends && account && account._id) {\n        for (let friend of account.friends) {\n            if (friend.status === 'friend') realFriends.push(friend)\n            else if (friend.status === 'invited') invitedFriends.push(friend)\n            else if (friend.status === 'inviting') invitingFriends.push(friend)\n        }\n    }\n    const friendActions = friendActionButton({\n        accountId: account ? account._id : '',\n        realFriends: realFriends,\n        invitedFriends: invitedFriends,\n        invitingFriends: invitingFriends,\n        _id: profile._id,\n        additionalButton: null,\n        asText: true,\n    })\n    return (\n        <div>\n            <Card>\n                <div style={{ textAlign: 'center', marginBottom: '50px' }}>\n                    <Avatar\n                        src={getAvatar(profile._id, profile.image)}\n                        size={200}\n                    />\n                    <h1>{profile.name}</h1>\n                    <h3>({profile._id})</h3>\n                    {friendActions}\n                </div>\n                <Tabs>\n                    <Tabs.TabPane tab=\"Progresses\" key={0}>\n                        <Progresses fromProfile={true} />\n                    </Tabs.TabPane>\n\n                    <Tabs.TabPane tab=\"Friends\" key={1}>\n                        <MasonryGrid friends={true}>\n                            {profile.friends\n                                .filter(friend => friend.status === 'friend')\n                                .map(friend => {\n                                    const oneFriendData = {\n                                        ...friendData[friend.friend],\n                                        ...friend.friend,\n                                    }\n\n                                    return (\n                                        <FriendCard\n                                            key={oneFriendData._id}\n                                            {...props}\n                                            account={account}\n                                            friend={oneFriendData}\n                                            realFriends={realFriends}\n                                            invitingFriends={invitingFriends}\n                                            invitedFriends={invitedFriends}\n                                        />\n                                    )\n                                })}\n                        </MasonryGrid>\n                    </Tabs.TabPane>\n                    {/* <Tabs.TabPane tab=\"Goals\" key={3}>\n                        {profile.goals.map((goal, index) => (\n                            <PerkCard\n                                key={index}\n                                perk={goal}\n                                perkId={goal.itemId}\n                                owner={profile}\n                                account={account || {}}\n                                setEditedPerk={() => {}}\n                                setEditPerkOpen={() => {}}\n                                onlyBuy={true}\n                                mode=\"goals\"\n                            />\n                        ))}\n                    </Tabs.TabPane> */}\n                    <Tabs.TabPane tab=\"Shop\" key={4}>\n                        <MasonryGrid>\n                            {profile.perks &&\n                                profile.perks.map((perk, index) => (\n                                    <PerkCard\n                                        key={index}\n                                        perk={perk}\n                                        perkId={perk.perkId}\n                                        owner={profile}\n                                        account={account || {}}\n                                        onlyBuy={true}\n                                        mode=\"shop\"\n                                    />\n                                ))}\n                        </MasonryGrid>\n                    </Tabs.TabPane>\n                    <Tabs.TabPane tab=\"Wallet\" key={5}>\n                        <Wallet pulledProfile={profile} account={profile} />\n                    </Tabs.TabPane>\n                    <Tabs.TabPane tab=\"Wishlist\" key={6}>\n                        <MasonryGrid>\n                            {profile.wishlist.map((item, index) => (\n                                <PerkCard\n                                    key={index}\n                                    perk={item}\n                                    perkId={item.itemId}\n                                    owner={profile}\n                                    account={account || {}}\n                                    setEditedPerk={() => {}}\n                                    setEditPerkOpen={() => {}}\n                                    onlyBuy={true}\n                                    mode=\"wishlist\"\n                                />\n                            ))}\n                        </MasonryGrid>\n                    </Tabs.TabPane>\n                </Tabs>\n            </Card>\n        </div>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n        profile: state.profile,\n        isAuthed: state.isAuthed,\n        friendData: state.friendData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: data => dispatch(actions.setData(data)),\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n        tryAuth: (props, forceAuth) =>\n            dispatch(actions.tryAuth(props, forceAuth)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Profile)\n)\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport Button from 'antd/es/button'\nimport message from 'antd/es/message'\n\nimport Input from 'antd/es/input'\nimport PageHeader from 'antd/es/page-header'\nimport Form from 'antd/es/form'\nimport { withRouter } from 'react-router-dom'\nimport axios from 'axios'\nimport { nicknameRules, accountNameRules } from '../../constants/fieldRules'\nimport * as actions from '../../store/actions'\n\nconst ActivateAccount = props => {\n    if (!props.isAuthed) props.history.push('/logout')\n    const onFinish = value => {\n        axios\n            .post('/api/activate-account', {\n                ...value,\n            })\n            .then(res => {\n                if (res.data.success) {\n                    message.success('Your account has been activated!')\n                    props.setAccountActivated(false)\n                    props.history.push('/account')\n                } else {\n                    if (res.data.nicknameNotUnique) {\n                        message.warning(\n                            'The nickname is taken. Choose another nickname please.'\n                        )\n                    }\n                    if (res.data.errorCode) {\n                        message.error(\n                            'Something is wrong with the data. Please try one more time with new data.'\n                        )\n                    }\n                }\n            })\n            .catch(err => {})\n    }\n\n    const layout = {\n        labelCol: { span: 8 },\n        wrapperCol: { span: 16 },\n    }\n    const tailLayout = {\n        wrapperCol: { offset: 8, span: 16 },\n    }\n\n    return (\n        <>\n            <PageHeader\n                className=\"site-page-header\"\n                title=\"Activate your account\"\n                backIcon={false}\n            />\n            <Form\n                name=\"dynamic_form_nest_item\"\n                onFinish={onFinish}\n                autoComplete=\"off\"\n                {...layout}\n            >\n                <Form.Item label=\"Name\" name=\"name\" rules={accountNameRules}>\n                    <Input placeholder=\"Must be more than 1 character long\" />\n                </Form.Item>\n                <Form.Item\n                    label=\"Nickname\"\n                    name=\"nickname\"\n                    rules={nicknameRules}\n                >\n                    <Input placeholder=\"Must be more than 1 character long\" />\n                </Form.Item>\n                <Form.Item {...tailLayout}>\n                    <Button type=\"primary\" htmlType=\"submit\" size=\"large\">\n                        Save\n                    </Button>\n                </Form.Item>\n            </Form>\n        </>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        user: state.user,\n        account: state.account,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n        setAccountActivated: value =>\n            dispatch(actions.setAccountActivated(value)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(ActivateAccount)\n)\n","import React, { useEffect, useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport Card from 'antd/es/card'\nimport pullData from '../../utils/pullData'\nimport Descriptions from 'antd/es/descriptions'\nimport Post from '../../components/Post/Post'\nimport UserButton from '../../components/UserButton/UserButton'\nimport ImageCarousel from '../../components/UI/ImageCarousel/ImageCarousel'\n\nconst { Item } = Descriptions\n\nconst Perk = props => {\n    const [data, setData] = useState({})\n    const { account } = props\n    useEffect(() => {\n        const pathParts = props.history.location.pathname.split('/')\n        if (pathParts.length > 3) {\n            const accountId = pathParts[2]\n            if (props.isAuthed && account._id === accountId) {\n                const perk = account.perks.find(\n                    item => item.perkId === pathParts[3]\n                )\n                setData({ profile: account, perk })\n            } else {\n                pullData(props, data, setData, { forceAuth: false }, data => {\n                    const friendData = {}\n                    for (let friend of data.friendData)\n                        friendData[friend._id] = friend\n\n                    props.setData({\n                        post: { [data.post._id]: data.post },\n                        friendData,\n                    })\n                })\n            }\n        }\n    }, [props.isAuthed])\n    if (!data.perk) return null\n    const { perk, profile } = data\n    props.setData({ currentPosts: perk.post })\n    if (perk) {\n        props.setPageTitle({ main: perk.name, sub: profile._id })\n    }\n\n    const getAccounts = items => {\n        if (profile && props.friendData) {\n            return items.map(item => <UserButton id={item} />)\n        } else return items\n    }\n\n    return perk ? (\n        <div className=\"contentDiv\">\n            <Card\n                title={\n                    <span>\n                        Item from <UserButton id={profile._id} /> shop\n                    </span>\n                }\n                bordered={false}\n            >\n                <ImageCarousel images={perk.images} />\n\n                <h1>{perk.name}</h1>\n                <p style={{ whiteSpace: 'pre-wrap' }}>{perk.description}</p>\n\n                <Descriptions\n                    title=\"Goal description\"\n                    bordered\n                    column={{ xxl: 4, xl: 3, lg: 3, md: 3, sm: 2, xs: 1 }}\n                >\n                    <Item label=\"Available for\">{getAccounts(perk.users)}</Item>\n                    <Item label=\"Price\">{perk.price}</Item>\n                </Descriptions>\n                <Post\n                    noStartMessage={true}\n                    post={props.post[perk.post]}\n                    account={props.account}\n                    friendData={props.friendData}\n                    showReplies={true}\n                />\n            </Card>\n        </div>\n    ) : null\n}\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        account: state.account,\n        post: state.post,\n        friendData: state.friendData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: data => {\n            dispatch(actions.setData(data))\n        },\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Perk)\n)\n","import React, { useEffect, useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport Card from 'antd/es/card'\nimport pullData from '../../utils/pullData'\nimport Post from '../../components/Post/Post'\nimport ImageCarousel from '../../components/UI/ImageCarousel/ImageCarousel'\nimport UserButton from '../../components/UserButton/UserButton'\n\nconst WishlistItem = props => {\n    const [data, setData] = useState({})\n    const { account } = props\n    useEffect(() => {\n        const pathParts = props.history.location.pathname.split('/')\n        if (pathParts.length > 3) {\n            const accountId = pathParts[2]\n            if (props.isAuthed && account._id === accountId) {\n                const wishlistItem = account.wishlist.find(\n                    item => item.itemId === pathParts[3]\n                )\n                setData({ profile: account, wishlistItem })\n            } else {\n                pullData(props, data, setData, { forceAuth: false }, data => {\n                    const friendData = {}\n                    for (let friend of data.friendData)\n                        friendData[friend._id] = friend\n\n                    props.setData({\n                        post: { [data.post._id]: data.post },\n                        friendData,\n                    })\n                })\n            }\n        }\n    }, [props.isAuthed])\n    if (!data.wishlistItem) return null\n    const { wishlistItem, profile } = data\n    props.setData({ currentPosts: wishlistItem.post })\n    if (wishlistItem) {\n        props.setPageTitle({ main: wishlistItem.name, sub: profile._id })\n    }\n    return wishlistItem ? (\n        <div className=\"contentDiv\">\n            <Card\n                title={\n                    <span>\n                        <UserButton id={profile._id} /> wishlist\n                    </span>\n                }\n                bordered={false}\n            >\n                <ImageCarousel images={wishlistItem.images} />\n\n                <h1>{wishlistItem.name}</h1>\n                <p style={{ whiteSpace: 'pre-wrap' }}>\n                    {wishlistItem.description}\n                </p>\n                <Post\n                    noStartMessage={true}\n                    post={props.post[wishlistItem.post]}\n                    account={props.account}\n                    friendData={props.friendData}\n                    showReplies={true}\n                />\n            </Card>\n        </div>\n    ) : null\n}\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        account: state.account,\n        post: state.post,\n        friendData: state.friendData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: data => {\n            dispatch(actions.setData(data))\n        },\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(WishlistItem)\n)\n","import React, { useEffect } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport WishlistAndPerks from '../Shop/WishlistAndPerks'\n\nconst Wishlist = props => {\n    useEffect(() => {\n        props.setPageTitle({ main: 'Wishlist', sub: '' })\n    }, [])\n\n    return (\n        <div>\n            {props.account._id ? (\n                <WishlistAndPerks mode=\"wishlist\" account={props.account} />\n            ) : (\n                <span />\n            )}\n        </div>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        account: state.account,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Wishlist)\n)\n","import React from 'react'\nimport { withRouter } from 'react-router-dom'\n\nimport Card from 'antd/es/card'\nimport UserButton from '../../components/UserButton/UserButton'\nimport ImageCarousel from '../../components/UI/ImageCarousel/ImageCarousel'\n\nconst ProgressCard = props => {\n    const { progress } = props\n    const { goal } = progress\n    return (\n        <Card\n            type=\"inner\"\n            style={{ width: '100%', cursor: 'pointer' }}\n            bordered={false}\n            title={\n                <div\n                    onClick={() =>\n                        props.history.push('/progresses/' + progress._id)\n                    }\n                    style={{\n                        display: 'flex',\n                        alignItems: 'center',\n                    }}\n                >\n                    {goal.images.length > 0 && (\n                        <div style={{ width: '50px', marginRight: '20px' }}>\n                            <ImageCarousel images={goal.images} size={50} />\n                        </div>\n                    )}\n                    {goal.name} -{' '}\n                    <UserButton id={progress.owner} noName={true} /> =&gt;{' '}\n                    <UserButton ids={progress.goal.users} group={true} />\n                </div>\n            }\n        />\n    )\n}\n\nexport default withRouter(ProgressCard)\n","import React, { useEffect, useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\n\nimport Modal from 'antd/es/modal'\nimport Button from 'antd/es/button'\nimport Card from 'antd/es/card'\nimport Post from '../../components/Post/Post'\nimport AddPost from '../../components/Post/AddPost'\nimport Tabs from 'antd/es/tabs'\nimport AddCard from '../../components/AddCard/AddCard'\nimport ProgressCard from '../Progresses/ProgressCard'\nimport AddProgress from '../Progresses/AddProgress'\n\nconst Group = props => {\n    const [state, setState] = useState({})\n    const [startProgressVisible, setStartProgressVisible] = useState(false)\n\n    const groupId = props.history.location.pathname.split('/')[2]\n    useEffect(() => {\n        props.setData({ currentGroup: groupId })\n    }, [props.isAuthed])\n\n    const { group, account, friendData, posts, progressData } = props\n\n    if (!group._id) return null\n    props.setData({ currentPosts: group.posts })\n\n    props.setPageTitle({ main: group.name, sub: group.worker })\n\n    const loadedProgresses = group.progresses\n        .filter(item => progressData[item])\n        .map(item => progressData[item])\n\n    const editGoal = (\n        <Modal\n            title=\"Add goal\"\n            visible={startProgressVisible}\n            maskClosable\n            closable\n            onCancel={() => setStartProgressVisible(false)}\n            width=\"100%\"\n            style={{ maxWidth: '1000px' }}\n            footer={\n                <Button\n                    key=\"back\"\n                    onClick={() => setStartProgressVisible(false)}\n                >\n                    Close\n                </Button>\n            }\n            destroyOnClose={true}\n        >\n            <AddProgress\n                setStartProgressVisible={setStartProgressVisible}\n                account={account}\n                friendData={props.friendData}\n                inGroup={group._id}\n            />\n        </Modal>\n    )\n    return friendData ? (\n        <>\n            <Tabs>\n                <Tabs.TabPane tab=\"Posts\" key=\"posts\">\n                    <AddPost\n                        parent={groupId}\n                        account={account}\n                        parentType=\"progress\"\n                        // onSend={() => setEditingMessage('')}\n                    />\n                    {group.posts.map(postId => {\n                        if (posts[postId]) {\n                            const post = posts[postId]\n                            return (\n                                <Card>\n                                    <Post\n                                        friendData={friendData}\n                                        account={account}\n                                        post={post}\n                                    />\n                                </Card>\n                            )\n                        } else return null\n                    })}\n                </Tabs.TabPane>\n                <Tabs.TabPane tab=\"Progresses\" key=\"progresses\">\n                    <AddCard\n                        title=\"Start a new progress\"\n                        sub=\"Rich your goals or help others!\"\n                        action={() => {\n                            setStartProgressVisible(true)\n                        }}\n                    />\n                    {loadedProgresses.map((progress, index) => (\n                        <ProgressCard key={index} progress={progress} />\n                    ))}\n                    {editGoal}\n                </Tabs.TabPane>\n            </Tabs>\n\n            <Modal\n                visible={state.previewImage}\n                footer={null}\n                onCancel={() => setState({ ...state, previewImage: '' })}\n            >\n                <img\n                    alt=\"example\"\n                    style={{ width: '100%' }}\n                    src={state.previewImage}\n                />\n            </Modal>\n        </>\n    ) : null\n}\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        account: state.account,\n        posts: state.post,\n        group: state.group,\n        friendData: state.friendData,\n        progressData: state.progressData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: data => {\n            dispatch(actions.setData(data))\n        },\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Group)\n)\n","import React from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions'\nimport isEqual from 'lodash.isequal'\nconst NotificationsTracker = props => {\n    const { account, friendData, progressData, groupData } = props\n\n    const sortNotifiacations = (a, b) =>\n        new Date(a.date).getTime() < new Date(b.date).getTime() ? 1 : -1\n\n    if (!account._id) return null\n\n    let lastNotifications = []\n    for (let progress of account.progresses) {\n        if (progressData[progress])\n            lastNotifications = [\n                ...lastNotifications,\n                ...progressData[progress].notifications,\n            ]\n    }\n\n    for (let group of account.groups) {\n        if (groupData[group])\n            lastNotifications = [\n                ...lastNotifications,\n                ...groupData[group].notifications,\n            ]\n    }\n\n    for (let friend of account.friends) {\n        if (\n            friendData[friend.friend] &&\n            friend.status === 'friend' &&\n            friendData[friend.friend].notifications\n        )\n            lastNotifications = [\n                ...lastNotifications,\n                ...friendData[friend.friend].notifications,\n            ]\n    }\n    const filterSameNot = (res, not, index, arr) => {\n        if (!res.find(item => item.notId === not.notId)) {\n            res.push(not)\n        }\n        return res\n    }\n    lastNotifications = lastNotifications.reduce(filterSameNot, [])\n\n    lastNotifications = lastNotifications.sort(sortNotifiacations).slice(0, 100)\n\n    lastNotifications = [\n        ...lastNotifications,\n        ...account.myNotifications,\n    ].filter(item => item.code !== 'add post')\n\n    lastNotifications = lastNotifications.reduce(filterSameNot, [])\n    lastNotifications = lastNotifications.sort(sortNotifiacations)\n    if (!isEqual(lastNotifications, props.lastNotifications)) {\n        props.setData({ lastNotifications })\n    }\n\n    return <span />\n}\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        account: state.account,\n        statePosts: state.post,\n        progress: state.progress,\n        friendData: state.friendData,\n        progressData: state.progressData,\n        groupData: state.groupData,\n        lastNotifications: state.lastNotifications,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setData: data => {\n            dispatch(actions.setData(data))\n        },\n        setPageTitle: title => dispatch(actions.setPageTitle(title)),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(NotificationsTracker)\n)\n","import React, { useEffect } from 'react'\nimport { Route, Switch, withRouter, Redirect } from 'react-router-dom'\n\nimport Auth from './containers/Auth/Auth'\nimport AuthTest from './containers/Auth/AuthTest'\nimport './components/UI/loadStyles'\nimport AccountLayout from './components/Layout/Layout'\nimport Goals from './containers/Goals/Goals'\nimport Goal from './containers/Goals/Goal'\nimport Progresses from './containers/Progresses/Progresses'\nimport Progress from './containers/Progress/Progress'\nimport Shop from './containers/Shop/Shop'\nimport Dashboard from './containers/Dashboard/Dashboard'\nimport Explore from './containers/Explore/Explore'\n\nimport Friends from './containers/Friends/Friends'\nimport Account from './containers/Account/Account'\nimport Profile from './containers/Profile/Profile'\n\nimport ActivateAccount from './containers/ActivateAccount/ActivateAccount'\nimport Cookies from 'universal-cookie'\nimport Perk from './containers/Shop/Perk'\n\nimport WishlistItem from './containers/Wishlist/WishlistItem'\nimport Wishlist from './containers/Wishlist/Wishlist'\nimport { connect } from 'react-redux'\nimport * as actions from './store/actions'\nimport ConnectWebsocket from './containers/ConnectWebsocket/ConnectWebsocket'\nimport Group from './containers/Group/Group'\nimport NotificationsTracker from './containers/Dashboard/NotificationsTracker'\n\nconst cookies = new Cookies()\n\nconst App = props => {\n    const { isAuthed } = props\n    useEffect(() => {\n        props.tryAuth(props)\n    }, [])\n\n    const redirectTo = cookies.get('redirectto')\n\n    if (redirectTo) {\n        cookies.remove('redirectto', {\n            path: '/',\n        })\n    }\n\n    const Logout = () => {\n        props.logout()\n        return <Redirect to=\"/explore\" />\n    }\n\n    let routes = (\n        <Switch>\n            <Route path=\"/goals\" exact component={Goals} />\n            <Route path=\"/goals\" component={Goal} />\n\n            <Route path=\"/progresses\" exact component={Progresses} />\n            <Route path=\"/progresses\" component={Progress} />\n            <Route path=\"/groups\" component={Group} />\n\n            <Route path=\"/profile\" component={Profile} />\n\n            <Route path=\"/friends\" exact component={Friends} />\n\n            <Route path=\"/account\" exact component={Account} />\n            <Route path=\"/dashboard\" exact component={Dashboard} />\n            <Route path=\"/explore\" exact component={Explore} />\n\n            <Route path=\"/shop\" exact component={Shop} />\n            <Route path=\"/shop\" component={Perk} />\n            <Route path=\"/wishlist\" exact component={Wishlist} />\n            <Route path=\"/wishlist\" component={WishlistItem} />\n            {/* {!isAuthed && <Route path=\"/login\" exact component={Auth} />} */}\n            <Route path=\"/logout\" exact component={Logout} />\n\n            <Route path=\"/activate-account\" exact component={ActivateAccount} />\n\n            {process.env.NODE_ENV === 'development' && !isAuthed && (\n                <Route path=\"/logintest\" exact component={AuthTest} />\n            )}\n            <Redirect to=\"/explore\" />\n        </Switch>\n    )\n\n    if (props.accountNotActive) {\n        routes = (\n            <Switch>\n                {!isAuthed && <Route path=\"/login\" exact component={Auth} />}\n                <Route path=\"/logout\" exact component={Logout} />\n\n                <Route\n                    path=\"/activate-account\"\n                    exact\n                    component={ActivateAccount}\n                />\n\n                {process.env.NODE_ENV === 'development' && !isAuthed && (\n                    <Route path=\"/logintest\" exact component={AuthTest} />\n                )}\n                {isAuthed ? (\n                    <Redirect to=\"/activate-account\" />\n                ) : (\n                    <Redirect to=\"/login\" />\n                )}\n            </Switch>\n        )\n    }\n\n    return redirectTo ? (\n        <Redirect to={redirectTo} />\n    ) : (\n        <>\n            <div style={{ height: '100%' }}>\n                <AccountLayout>{routes}</AccountLayout>\n                {isAuthed && <ConnectWebsocket />}\n                {isAuthed && <NotificationsTracker />}\n            </div>\n            {/* {this.props.loading && <Spinner cover />} */}\n        </>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        isAuthed: state.isAuthed,\n        user: state.user,\n        account: state.account,\n        accountNotActive: state.accountNotActive,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        tryAuth: (props, forceAuth) =>\n            dispatch(actions.tryAuth(props, forceAuth)),\n        logout: () => dispatch(actions.logout()),\n    }\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(App)\n)\n","import { createReducer } from '@reduxjs/toolkit'\n\nexport const initialState = {\n    isAuthed: false,\n    user: null,\n    currentAccount: '',\n    account: {},\n    friendData: {},\n    transactionData: {},\n    progressData: {},\n    currentProfile: '',\n    profile: {},\n    currentProgress: '',\n    currentGroup: '',\n    currentPosts: [],\n    progress: {},\n    post: {},\n    postData: {},\n    group: {},\n    groupData: {},\n    pageTitle: {},\n    lastUrl: '',\n    friendSearchResult: {},\n    accountNotActive: false,\n    lastNotifications: [],\n    isConnectingWS: false,\n}\n\nconst reducer = createReducer(initialState, {\n    SET_DATA: (state: Object, action: Object) => {\n        if (action.data) {\n            for (let key of [\n                'user',\n                'account',\n                'isAuthed',\n                'currentAccount',\n                'currentProfile',\n                'currentPosts',\n                'currentGroup',\n                'profile',\n                'group',\n                'currentProgress',\n                'progress',\n                'lastNotifications',\n            ]) {\n                if (typeof action.data[key] !== 'undefined') {\n                    state[key] = action.data[key]\n                }\n            }\n            for (let key of [\n                'friendData',\n                'progressData',\n                'post',\n                'postData',\n                'groupData',\n                'transactionData',\n            ]) {\n                if (typeof action.data[key] !== 'undefined') {\n                    for (let attr in action.data[key]) {\n                        if (action.data[key][attr]) {\n                            state[key][attr] = action.data[key][attr]\n                        }\n                    }\n                }\n            }\n        }\n        if (state.user) {\n            if (state.user.currentAccount) {\n                state.currentAccount = state.user.currentAccount\n                state.accountNotActive = false\n            } else if (state.user.myAccount) {\n                state.currentAccount = state.user.myAccount\n                state.accountNotActive = false\n            } else {\n                state.accountNotActive = true\n            }\n        }\n    },\n    REMOVE_DATA: (state: Object, action: Object) => {\n        if (action.data) {\n            for (let key of [\n                'user',\n                'account',\n                'profile',\n                'progress',\n                'group',\n            ]) {\n                for (let item of action.data[key]) {\n                    if (state[key]._id === item) {\n                        state[key] = {}\n                    }\n                }\n            }\n            for (let key of [\n                'post',\n                'friendData',\n                'progressData',\n                'postData',\n                'groupData',\n                'transactionData',\n            ]) {\n                for (let item of action.data[key]) {\n                    delete state[key][item]\n                }\n            }\n        }\n    },\n    SET_FRIEND_SEARCH_RESULT: (state: Object, action: Object) => {\n        state.friendSearchResult = action.data\n    },\n\n    SET_FRIENDS_DATA: (state: Object, action: Object) => {\n        if (action.data) {\n            state.account.friendsData = action.data\n        }\n        if (action.data.perk) state.perk = action.data.perk\n    },\n    SET_AVATAR_V: (state: Object, action: Object) => {\n        state.account.image = action.v\n    },\n    INCREASE_AVATAR_V: (state: Object) => {\n        state.account.image = state.account.image + 1\n    },\n    SET_IS_AUTHED: (state: Object, action: Object) => {\n        state.isAuthed = action.id\n    },\n    SET_PAGE_TITLE: (state: Object, action: Object) => {\n        state.pageTitle = action.title\n    },\n    SAVE_LAST_URL: (state: Object, action: Object) => {\n        if (action.url !== '/login' && action.url !== '/logout')\n            state.lastUrl = action.url\n    },\n    SET_ACCOUNT_ACTIVATED: (state: Object, action: Object) => {\n        state.accountNotActive = action.value\n    },\n    SET_CONNECTING_WS: (state: Object, action: Object) => {\n        state.isConnectingWS = action.data\n    },\n})\n\nexport default reducer\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter } from 'react-router-dom'\nimport axios from 'axios'\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly'\n\nimport './index.css'\nimport App from './App'\nimport reducer from './store/reducer/reducer'\n//import * as serviceWorker from './serviceWorker';\n\nif (process.env.NODE_ENV === 'development') {\n    axios.defaults.baseURL = 'http://my.websiter.test:5000'\n} else {\n    axios.defaults.baseURL = 'https://addspiration.com'\n}\n// axios.defaults.withCredentials = true\n\nexport const store = createStore(\n    reducer,\n    composeWithDevTools(applyMiddleware(thunk))\n)\n\nconst app = (\n    <Provider store={store}>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </Provider>\n)\n\nconst root = document.getElementById('root')\n\nReactDOM.render(app, root)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Auth_Container__1KNy7\",\"socialButtons\":\"Auth_socialButtons__2wwH9\",\"Background\":\"Auth_Background__39m_a\"};"],"sourceRoot":""}